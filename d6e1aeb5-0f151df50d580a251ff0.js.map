{"version":3,"file":"d6e1aeb5-0f151df50d580a251ff0.js","mappings":"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","sources":["webpack://designers.italia.it/./node_modules/video.js/dist/video.es.js"],"sourcesContent":["/**\n * @license\n * Video.js 8.10.0 <http://videojs.com/>\n * Copyright Brightcove, Inc. <https://www.brightcove.com/>\n * Available under Apache License Version 2.0\n * <https://github.com/videojs/video.js/blob/main/LICENSE>\n *\n * Includes vtt.js <https://github.com/mozilla/vtt.js>\n * Available under Apache License Version 2.0\n * <https://github.com/mozilla/vtt.js/blob/main/LICENSE>\n */\n\nimport window$1 from 'global/window';\nimport document from 'global/document';\nimport keycode from 'keycode';\nimport safeParseTuple from 'safe-json-parse/tuple';\nimport XHR from '@videojs/xhr';\nimport vtt from 'videojs-vtt.js';\nimport _extends from '@babel/runtime/helpers/extends';\nimport _resolveUrl from '@videojs/vhs-utils/es/resolve-url.js';\nimport { Parser } from 'm3u8-parser';\nimport { DEFAULT_VIDEO_CODEC, DEFAULT_AUDIO_CODEC, parseCodecs, muxerSupportsCodec, browserSupportsCodec, translateLegacyCodec, codecsFromDefault, isAudioCodec, getMimeForCodec } from '@videojs/vhs-utils/es/codecs.js';\nimport { simpleTypeFromSourceType } from '@videojs/vhs-utils/es/media-types.js';\nimport { isArrayBufferView, concatTypedArrays, stringToBytes, toUint8 } from '@videojs/vhs-utils/es/byte-helpers';\nimport { generateSidxKey, parseUTCTiming, parse, addSidxSegmentsToPlaylist } from 'mpd-parser';\nimport parseSidx from 'mux.js/lib/tools/parse-sidx';\nimport { getId3Offset } from '@videojs/vhs-utils/es/id3-helpers';\nimport { detectContainerForBytes, isLikelyFmp4MediaSegment } from '@videojs/vhs-utils/es/containers';\nimport { ONE_SECOND_IN_TS } from 'mux.js/lib/utils/clock';\n\nvar version$6 = \"8.10.0\";\n\n/**\n * An Object that contains lifecycle hooks as keys which point to an array\n * of functions that are run when a lifecycle is triggered\n *\n * @private\n */\nconst hooks_ = {};\n\n/**\n * Get a list of hooks for a specific lifecycle\n *\n * @param  {string} type\n *         the lifecycle to get hooks from\n *\n * @param  {Function|Function[]} [fn]\n *         Optionally add a hook (or hooks) to the lifecycle that your are getting.\n *\n * @return {Array}\n *         an array of hooks, or an empty array if there are none.\n */\nconst hooks = function (type, fn) {\n  hooks_[type] = hooks_[type] || [];\n  if (fn) {\n    hooks_[type] = hooks_[type].concat(fn);\n  }\n  return hooks_[type];\n};\n\n/**\n * Add a function hook to a specific videojs lifecycle.\n *\n * @param {string} type\n *        the lifecycle to hook the function to.\n *\n * @param {Function|Function[]}\n *        The function or array of functions to attach.\n */\nconst hook = function (type, fn) {\n  hooks(type, fn);\n};\n\n/**\n * Remove a hook from a specific videojs lifecycle.\n *\n * @param  {string} type\n *         the lifecycle that the function hooked to\n *\n * @param  {Function} fn\n *         The hooked function to remove\n *\n * @return {boolean}\n *         The function that was removed or undef\n */\nconst removeHook = function (type, fn) {\n  const index = hooks(type).indexOf(fn);\n  if (index <= -1) {\n    return false;\n  }\n  hooks_[type] = hooks_[type].slice();\n  hooks_[type].splice(index, 1);\n  return true;\n};\n\n/**\n * Add a function hook that will only run once to a specific videojs lifecycle.\n *\n * @param {string} type\n *        the lifecycle to hook the function to.\n *\n * @param {Function|Function[]}\n *        The function or array of functions to attach.\n */\nconst hookOnce = function (type, fn) {\n  hooks(type, [].concat(fn).map(original => {\n    const wrapper = (...args) => {\n      removeHook(type, wrapper);\n      return original(...args);\n    };\n    return wrapper;\n  }));\n};\n\n/**\n * @file fullscreen-api.js\n * @module fullscreen-api\n */\n\n/**\n * Store the browser-specific methods for the fullscreen API.\n *\n * @type {Object}\n * @see [Specification]{@link https://fullscreen.spec.whatwg.org}\n * @see [Map Approach From Screenfull.js]{@link https://github.com/sindresorhus/screenfull.js}\n */\nconst FullscreenApi = {\n  prefixed: true\n};\n\n// browser API methods\nconst apiMap = [['requestFullscreen', 'exitFullscreen', 'fullscreenElement', 'fullscreenEnabled', 'fullscreenchange', 'fullscreenerror', 'fullscreen'],\n// WebKit\n['webkitRequestFullscreen', 'webkitExitFullscreen', 'webkitFullscreenElement', 'webkitFullscreenEnabled', 'webkitfullscreenchange', 'webkitfullscreenerror', '-webkit-full-screen']];\nconst specApi = apiMap[0];\nlet browserApi;\n\n// determine the supported set of functions\nfor (let i = 0; i < apiMap.length; i++) {\n  // check for exitFullscreen function\n  if (apiMap[i][1] in document) {\n    browserApi = apiMap[i];\n    break;\n  }\n}\n\n// map the browser API names to the spec API names\nif (browserApi) {\n  for (let i = 0; i < browserApi.length; i++) {\n    FullscreenApi[specApi[i]] = browserApi[i];\n  }\n  FullscreenApi.prefixed = browserApi[0] !== specApi[0];\n}\n\n/**\n * @file create-logger.js\n * @module create-logger\n */\n\n// This is the private tracking variable for the logging history.\nlet history = [];\n\n/**\n * Log messages to the console and history based on the type of message\n *\n * @private\n * @param  {string} name\n *         The name of the console method to use.\n *\n * @param  {Object} log\n *         The arguments to be passed to the matching console method.\n *\n * @param {string} [styles]\n *        styles for name\n */\nconst LogByTypeFactory = (name, log, styles) => (type, level, args) => {\n  const lvl = log.levels[level];\n  const lvlRegExp = new RegExp(`^(${lvl})$`);\n  let resultName = name;\n  if (type !== 'log') {\n    // Add the type to the front of the message when it's not \"log\".\n    args.unshift(type.toUpperCase() + ':');\n  }\n  if (styles) {\n    resultName = `%c${name}`;\n    args.unshift(styles);\n  }\n\n  // Add console prefix after adding to history.\n  args.unshift(resultName + ':');\n\n  // Add a clone of the args at this point to history.\n  if (history) {\n    history.push([].concat(args));\n\n    // only store 1000 history entries\n    const splice = history.length - 1000;\n    history.splice(0, splice > 0 ? splice : 0);\n  }\n\n  // If there's no console then don't try to output messages, but they will\n  // still be stored in history.\n  if (!window$1.console) {\n    return;\n  }\n\n  // Was setting these once outside of this function, but containing them\n  // in the function makes it easier to test cases where console doesn't exist\n  // when the module is executed.\n  let fn = window$1.console[type];\n  if (!fn && type === 'debug') {\n    // Certain browsers don't have support for console.debug. For those, we\n    // should default to the closest comparable log.\n    fn = window$1.console.info || window$1.console.log;\n  }\n\n  // Bail out if there's no console or if this type is not allowed by the\n  // current logging level.\n  if (!fn || !lvl || !lvlRegExp.test(type)) {\n    return;\n  }\n  fn[Array.isArray(args) ? 'apply' : 'call'](window$1.console, args);\n};\nfunction createLogger$1(name, delimiter = ':', styles = '') {\n  // This is the private tracking variable for logging level.\n  let level = 'info';\n\n  // the curried logByType bound to the specific log and history\n  let logByType;\n\n  /**\n   * Logs plain debug messages. Similar to `console.log`.\n   *\n   * Due to [limitations](https://github.com/jsdoc3/jsdoc/issues/955#issuecomment-313829149)\n   * of our JSDoc template, we cannot properly document this as both a function\n   * and a namespace, so its function signature is documented here.\n   *\n   * #### Arguments\n   * ##### *args\n   * *[]\n   *\n   * Any combination of values that could be passed to `console.log()`.\n   *\n   * #### Return Value\n   *\n   * `undefined`\n   *\n   * @namespace\n   * @param    {...*} args\n   *           One or more messages or objects that should be logged.\n   */\n  const log = function (...args) {\n    logByType('log', level, args);\n  };\n\n  // This is the logByType helper that the logging methods below use\n  logByType = LogByTypeFactory(name, log, styles);\n\n  /**\n   * Create a new subLogger which chains the old name to the new name.\n   *\n   * For example, doing `videojs.log.createLogger('player')` and then using that logger will log the following:\n   * ```js\n   *  mylogger('foo');\n   *  // > VIDEOJS: player: foo\n   * ```\n   *\n   * @param {string} subName\n   *        The name to add call the new logger\n   * @param {string} [subDelimiter]\n   *        Optional delimiter\n   * @param {string} [subStyles]\n   *        Optional styles\n   * @return {Object}\n   */\n  log.createLogger = (subName, subDelimiter, subStyles) => {\n    const resultDelimiter = subDelimiter !== undefined ? subDelimiter : delimiter;\n    const resultStyles = subStyles !== undefined ? subStyles : styles;\n    const resultName = `${name} ${resultDelimiter} ${subName}`;\n    return createLogger$1(resultName, resultDelimiter, resultStyles);\n  };\n\n  /**\n   * Create a new logger.\n   *\n   * @param {string} newName\n   *        The name for the new logger\n   * @param {string} [newDelimiter]\n   *        Optional delimiter\n   * @param {string} [newStyles]\n   *        Optional styles\n   * @return {Object}\n   */\n  log.createNewLogger = (newName, newDelimiter, newStyles) => {\n    return createLogger$1(newName, newDelimiter, newStyles);\n  };\n\n  /**\n   * Enumeration of available logging levels, where the keys are the level names\n   * and the values are `|`-separated strings containing logging methods allowed\n   * in that logging level. These strings are used to create a regular expression\n   * matching the function name being called.\n   *\n   * Levels provided by Video.js are:\n   *\n   * - `off`: Matches no calls. Any value that can be cast to `false` will have\n   *   this effect. The most restrictive.\n   * - `all`: Matches only Video.js-provided functions (`debug`, `log`,\n   *   `log.warn`, and `log.error`).\n   * - `debug`: Matches `log.debug`, `log`, `log.warn`, and `log.error` calls.\n   * - `info` (default): Matches `log`, `log.warn`, and `log.error` calls.\n   * - `warn`: Matches `log.warn` and `log.error` calls.\n   * - `error`: Matches only `log.error` calls.\n   *\n   * @type {Object}\n   */\n  log.levels = {\n    all: 'debug|log|warn|error',\n    off: '',\n    debug: 'debug|log|warn|error',\n    info: 'log|warn|error',\n    warn: 'warn|error',\n    error: 'error',\n    DEFAULT: level\n  };\n\n  /**\n   * Get or set the current logging level.\n   *\n   * If a string matching a key from {@link module:log.levels} is provided, acts\n   * as a setter.\n   *\n   * @param  {'all'|'debug'|'info'|'warn'|'error'|'off'} [lvl]\n   *         Pass a valid level to set a new logging level.\n   *\n   * @return {string}\n   *         The current logging level.\n   */\n  log.level = lvl => {\n    if (typeof lvl === 'string') {\n      if (!log.levels.hasOwnProperty(lvl)) {\n        throw new Error(`\"${lvl}\" in not a valid log level`);\n      }\n      level = lvl;\n    }\n    return level;\n  };\n\n  /**\n   * Returns an array containing everything that has been logged to the history.\n   *\n   * This array is a shallow clone of the internal history record. However, its\n   * contents are _not_ cloned; so, mutating objects inside this array will\n   * mutate them in history.\n   *\n   * @return {Array}\n   */\n  log.history = () => history ? [].concat(history) : [];\n\n  /**\n   * Allows you to filter the history by the given logger name\n   *\n   * @param {string} fname\n   *        The name to filter by\n   *\n   * @return {Array}\n   *         The filtered list to return\n   */\n  log.history.filter = fname => {\n    return (history || []).filter(historyItem => {\n      // if the first item in each historyItem includes `fname`, then it's a match\n      return new RegExp(`.*${fname}.*`).test(historyItem[0]);\n    });\n  };\n\n  /**\n   * Clears the internal history tracking, but does not prevent further history\n   * tracking.\n   */\n  log.history.clear = () => {\n    if (history) {\n      history.length = 0;\n    }\n  };\n\n  /**\n   * Disable history tracking if it is currently enabled.\n   */\n  log.history.disable = () => {\n    if (history !== null) {\n      history.length = 0;\n      history = null;\n    }\n  };\n\n  /**\n   * Enable history tracking if it is currently disabled.\n   */\n  log.history.enable = () => {\n    if (history === null) {\n      history = [];\n    }\n  };\n\n  /**\n   * Logs error messages. Similar to `console.error`.\n   *\n   * @param {...*} args\n   *        One or more messages or objects that should be logged as an error\n   */\n  log.error = (...args) => logByType('error', level, args);\n\n  /**\n   * Logs warning messages. Similar to `console.warn`.\n   *\n   * @param {...*} args\n   *        One or more messages or objects that should be logged as a warning.\n   */\n  log.warn = (...args) => logByType('warn', level, args);\n\n  /**\n   * Logs debug messages. Similar to `console.debug`, but may also act as a comparable\n   * log if `console.debug` is not available\n   *\n   * @param {...*} args\n   *        One or more messages or objects that should be logged as debug.\n   */\n  log.debug = (...args) => logByType('debug', level, args);\n  return log;\n}\n\n/**\n * @file log.js\n * @module log\n */\nconst log$1 = createLogger$1('VIDEOJS');\nconst createLogger = log$1.createLogger;\n\n/**\n * @file obj.js\n * @module obj\n */\n\n/**\n * @callback obj:EachCallback\n *\n * @param {*} value\n *        The current key for the object that is being iterated over.\n *\n * @param {string} key\n *        The current key-value for object that is being iterated over\n */\n\n/**\n * @callback obj:ReduceCallback\n *\n * @param {*} accum\n *        The value that is accumulating over the reduce loop.\n *\n * @param {*} value\n *        The current key for the object that is being iterated over.\n *\n * @param {string} key\n *        The current key-value for object that is being iterated over\n *\n * @return {*}\n *         The new accumulated value.\n */\nconst toString = Object.prototype.toString;\n\n/**\n * Get the keys of an Object\n *\n * @param {Object}\n *        The Object to get the keys from\n *\n * @return {string[]}\n *         An array of the keys from the object. Returns an empty array if the\n *         object passed in was invalid or had no keys.\n *\n * @private\n */\nconst keys = function (object) {\n  return isObject(object) ? Object.keys(object) : [];\n};\n\n/**\n * Array-like iteration for objects.\n *\n * @param {Object} object\n *        The object to iterate over\n *\n * @param {obj:EachCallback} fn\n *        The callback function which is called for each key in the object.\n */\nfunction each(object, fn) {\n  keys(object).forEach(key => fn(object[key], key));\n}\n\n/**\n * Array-like reduce for objects.\n *\n * @param {Object} object\n *        The Object that you want to reduce.\n *\n * @param {Function} fn\n *         A callback function which is called for each key in the object. It\n *         receives the accumulated value and the per-iteration value and key\n *         as arguments.\n *\n * @param {*} [initial = 0]\n *        Starting value\n *\n * @return {*}\n *         The final accumulated value.\n */\nfunction reduce(object, fn, initial = 0) {\n  return keys(object).reduce((accum, key) => fn(accum, object[key], key), initial);\n}\n\n/**\n * Returns whether a value is an object of any kind - including DOM nodes,\n * arrays, regular expressions, etc. Not functions, though.\n *\n * This avoids the gotcha where using `typeof` on a `null` value\n * results in `'object'`.\n *\n * @param  {Object} value\n * @return {boolean}\n */\nfunction isObject(value) {\n  return !!value && typeof value === 'object';\n}\n\n/**\n * Returns whether an object appears to be a \"plain\" object - that is, a\n * direct instance of `Object`.\n *\n * @param  {Object} value\n * @return {boolean}\n */\nfunction isPlain(value) {\n  return isObject(value) && toString.call(value) === '[object Object]' && value.constructor === Object;\n}\n\n/**\n * Merge two objects recursively.\n *\n * Performs a deep merge like\n * {@link https://lodash.com/docs/4.17.10#merge|lodash.merge}, but only merges\n * plain objects (not arrays, elements, or anything else).\n *\n * Non-plain object values will be copied directly from the right-most\n * argument.\n *\n * @param   {Object[]} sources\n *          One or more objects to merge into a new object.\n *\n * @return {Object}\n *          A new object that is the merged result of all sources.\n */\nfunction merge$1(...sources) {\n  const result = {};\n  sources.forEach(source => {\n    if (!source) {\n      return;\n    }\n    each(source, (value, key) => {\n      if (!isPlain(value)) {\n        result[key] = value;\n        return;\n      }\n      if (!isPlain(result[key])) {\n        result[key] = {};\n      }\n      result[key] = merge$1(result[key], value);\n    });\n  });\n  return result;\n}\n\n/**\n * Returns an array of values for a given object\n *\n * @param  {Object} source - target object\n * @return {Array<unknown>} - object values\n */\nfunction values(source = {}) {\n  const result = [];\n  for (const key in source) {\n    if (source.hasOwnProperty(key)) {\n      const value = source[key];\n      result.push(value);\n    }\n  }\n  return result;\n}\n\n/**\n * Object.defineProperty but \"lazy\", which means that the value is only set after\n * it is retrieved the first time, rather than being set right away.\n *\n * @param {Object} obj the object to set the property on\n * @param {string} key the key for the property to set\n * @param {Function} getValue the function used to get the value when it is needed.\n * @param {boolean} setter whether a setter should be allowed or not\n */\nfunction defineLazyProperty(obj, key, getValue, setter = true) {\n  const set = value => Object.defineProperty(obj, key, {\n    value,\n    enumerable: true,\n    writable: true\n  });\n  const options = {\n    configurable: true,\n    enumerable: true,\n    get() {\n      const value = getValue();\n      set(value);\n      return value;\n    }\n  };\n  if (setter) {\n    options.set = set;\n  }\n  return Object.defineProperty(obj, key, options);\n}\n\nvar Obj = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  each: each,\n  reduce: reduce,\n  isObject: isObject,\n  isPlain: isPlain,\n  merge: merge$1,\n  values: values,\n  defineLazyProperty: defineLazyProperty\n});\n\n/**\n * @file browser.js\n * @module browser\n */\n\n/**\n * Whether or not this device is an iPod.\n *\n * @static\n * @type {Boolean}\n */\nlet IS_IPOD = false;\n\n/**\n * The detected iOS version - or `null`.\n *\n * @static\n * @type {string|null}\n */\nlet IOS_VERSION = null;\n\n/**\n * Whether or not this is an Android device.\n *\n * @static\n * @type {Boolean}\n */\nlet IS_ANDROID = false;\n\n/**\n * The detected Android version - or `null` if not Android or indeterminable.\n *\n * @static\n * @type {number|string|null}\n */\nlet ANDROID_VERSION;\n\n/**\n * Whether or not this is Mozilla Firefox.\n *\n * @static\n * @type {Boolean}\n */\nlet IS_FIREFOX = false;\n\n/**\n * Whether or not this is Microsoft Edge.\n *\n * @static\n * @type {Boolean}\n */\nlet IS_EDGE = false;\n\n/**\n * Whether or not this is any Chromium Browser\n *\n * @static\n * @type {Boolean}\n */\nlet IS_CHROMIUM = false;\n\n/**\n * Whether or not this is any Chromium browser that is not Edge.\n *\n * This will also be `true` for Chrome on iOS, which will have different support\n * as it is actually Safari under the hood.\n *\n * Deprecated, as the behaviour to not match Edge was to prevent Legacy Edge's UA matching.\n * IS_CHROMIUM should be used instead.\n * \"Chromium but not Edge\" could be explicitly tested with IS_CHROMIUM && !IS_EDGE\n *\n * @static\n * @deprecated\n * @type {Boolean}\n */\nlet IS_CHROME = false;\n\n/**\n * The detected Chromium version - or `null`.\n *\n * @static\n * @type {number|null}\n */\nlet CHROMIUM_VERSION = null;\n\n/**\n * The detected Google Chrome version - or `null`.\n * This has always been the _Chromium_ version, i.e. would return on Chromium Edge.\n * Deprecated, use CHROMIUM_VERSION instead.\n *\n * @static\n * @deprecated\n * @type {number|null}\n */\nlet CHROME_VERSION = null;\n\n/**\n * The detected Internet Explorer version - or `null`.\n *\n * @static\n * @deprecated\n * @type {number|null}\n */\nlet IE_VERSION = null;\n\n/**\n * Whether or not this is desktop Safari.\n *\n * @static\n * @type {Boolean}\n */\nlet IS_SAFARI = false;\n\n/**\n * Whether or not this is a Windows machine.\n *\n * @static\n * @type {Boolean}\n */\nlet IS_WINDOWS = false;\n\n/**\n * Whether or not this device is an iPad.\n *\n * @static\n * @type {Boolean}\n */\nlet IS_IPAD = false;\n\n/**\n * Whether or not this device is an iPhone.\n *\n * @static\n * @type {Boolean}\n */\n// The Facebook app's UIWebView identifies as both an iPhone and iPad, so\n// to identify iPhones, we need to exclude iPads.\n// http://artsy.github.io/blog/2012/10/18/the-perils-of-ios-user-agent-sniffing/\nlet IS_IPHONE = false;\n\n/**\n * Whether or not this device is touch-enabled.\n *\n * @static\n * @const\n * @type {Boolean}\n */\nconst TOUCH_ENABLED = Boolean(isReal() && ('ontouchstart' in window$1 || window$1.navigator.maxTouchPoints || window$1.DocumentTouch && window$1.document instanceof window$1.DocumentTouch));\nconst UAD = window$1.navigator && window$1.navigator.userAgentData;\nif (UAD && UAD.platform && UAD.brands) {\n  // If userAgentData is present, use it instead of userAgent to avoid warnings\n  // Currently only implemented on Chromium\n  // userAgentData does not expose Android version, so ANDROID_VERSION remains `null`\n\n  IS_ANDROID = UAD.platform === 'Android';\n  IS_EDGE = Boolean(UAD.brands.find(b => b.brand === 'Microsoft Edge'));\n  IS_CHROMIUM = Boolean(UAD.brands.find(b => b.brand === 'Chromium'));\n  IS_CHROME = !IS_EDGE && IS_CHROMIUM;\n  CHROMIUM_VERSION = CHROME_VERSION = (UAD.brands.find(b => b.brand === 'Chromium') || {}).version || null;\n  IS_WINDOWS = UAD.platform === 'Windows';\n}\n\n// If the browser is not Chromium, either userAgentData is not present which could be an old Chromium browser,\n//  or it's a browser that has added userAgentData since that we don't have tests for yet. In either case,\n// the checks need to be made agiainst the regular userAgent string.\nif (!IS_CHROMIUM) {\n  const USER_AGENT = window$1.navigator && window$1.navigator.userAgent || '';\n  IS_IPOD = /iPod/i.test(USER_AGENT);\n  IOS_VERSION = function () {\n    const match = USER_AGENT.match(/OS (\\d+)_/i);\n    if (match && match[1]) {\n      return match[1];\n    }\n    return null;\n  }();\n  IS_ANDROID = /Android/i.test(USER_AGENT);\n  ANDROID_VERSION = function () {\n    // This matches Android Major.Minor.Patch versions\n    // ANDROID_VERSION is Major.Minor as a Number, if Minor isn't available, then only Major is returned\n    const match = USER_AGENT.match(/Android (\\d+)(?:\\.(\\d+))?(?:\\.(\\d+))*/i);\n    if (!match) {\n      return null;\n    }\n    const major = match[1] && parseFloat(match[1]);\n    const minor = match[2] && parseFloat(match[2]);\n    if (major && minor) {\n      return parseFloat(match[1] + '.' + match[2]);\n    } else if (major) {\n      return major;\n    }\n    return null;\n  }();\n  IS_FIREFOX = /Firefox/i.test(USER_AGENT);\n  IS_EDGE = /Edg/i.test(USER_AGENT);\n  IS_CHROMIUM = /Chrome/i.test(USER_AGENT) || /CriOS/i.test(USER_AGENT);\n  IS_CHROME = !IS_EDGE && IS_CHROMIUM;\n  CHROMIUM_VERSION = CHROME_VERSION = function () {\n    const match = USER_AGENT.match(/(Chrome|CriOS)\\/(\\d+)/);\n    if (match && match[2]) {\n      return parseFloat(match[2]);\n    }\n    return null;\n  }();\n  IE_VERSION = function () {\n    const result = /MSIE\\s(\\d+)\\.\\d/.exec(USER_AGENT);\n    let version = result && parseFloat(result[1]);\n    if (!version && /Trident\\/7.0/i.test(USER_AGENT) && /rv:11.0/.test(USER_AGENT)) {\n      // IE 11 has a different user agent string than other IE versions\n      version = 11.0;\n    }\n    return version;\n  }();\n  IS_SAFARI = /Safari/i.test(USER_AGENT) && !IS_CHROME && !IS_ANDROID && !IS_EDGE;\n  IS_WINDOWS = /Windows/i.test(USER_AGENT);\n  IS_IPAD = /iPad/i.test(USER_AGENT) || IS_SAFARI && TOUCH_ENABLED && !/iPhone/i.test(USER_AGENT);\n  IS_IPHONE = /iPhone/i.test(USER_AGENT) && !IS_IPAD;\n}\n\n/**\n * Whether or not this is an iOS device.\n *\n * @static\n * @const\n * @type {Boolean}\n */\nconst IS_IOS = IS_IPHONE || IS_IPAD || IS_IPOD;\n\n/**\n * Whether or not this is any flavor of Safari - including iOS.\n *\n * @static\n * @const\n * @type {Boolean}\n */\nconst IS_ANY_SAFARI = (IS_SAFARI || IS_IOS) && !IS_CHROME;\n\nvar browser = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  get IS_IPOD () { return IS_IPOD; },\n  get IOS_VERSION () { return IOS_VERSION; },\n  get IS_ANDROID () { return IS_ANDROID; },\n  get ANDROID_VERSION () { return ANDROID_VERSION; },\n  get IS_FIREFOX () { return IS_FIREFOX; },\n  get IS_EDGE () { return IS_EDGE; },\n  get IS_CHROMIUM () { return IS_CHROMIUM; },\n  get IS_CHROME () { return IS_CHROME; },\n  get CHROMIUM_VERSION () { return CHROMIUM_VERSION; },\n  get CHROME_VERSION () { return CHROME_VERSION; },\n  get IE_VERSION () { return IE_VERSION; },\n  get IS_SAFARI () { return IS_SAFARI; },\n  get IS_WINDOWS () { return IS_WINDOWS; },\n  get IS_IPAD () { return IS_IPAD; },\n  get IS_IPHONE () { return IS_IPHONE; },\n  TOUCH_ENABLED: TOUCH_ENABLED,\n  IS_IOS: IS_IOS,\n  IS_ANY_SAFARI: IS_ANY_SAFARI\n});\n\n/**\n * @file dom.js\n * @module dom\n */\n\n/**\n * Detect if a value is a string with any non-whitespace characters.\n *\n * @private\n * @param  {string} str\n *         The string to check\n *\n * @return {boolean}\n *         Will be `true` if the string is non-blank, `false` otherwise.\n *\n */\nfunction isNonBlankString(str) {\n  // we use str.trim as it will trim any whitespace characters\n  // from the front or back of non-whitespace characters. aka\n  // Any string that contains non-whitespace characters will\n  // still contain them after `trim` but whitespace only strings\n  // will have a length of 0, failing this check.\n  return typeof str === 'string' && Boolean(str.trim());\n}\n\n/**\n * Throws an error if the passed string has whitespace. This is used by\n * class methods to be relatively consistent with the classList API.\n *\n * @private\n * @param  {string} str\n *         The string to check for whitespace.\n *\n * @throws {Error}\n *         Throws an error if there is whitespace in the string.\n */\nfunction throwIfWhitespace(str) {\n  // str.indexOf instead of regex because str.indexOf is faster performance wise.\n  if (str.indexOf(' ') >= 0) {\n    throw new Error('class has illegal whitespace characters');\n  }\n}\n\n/**\n * Whether the current DOM interface appears to be real (i.e. not simulated).\n *\n * @return {boolean}\n *         Will be `true` if the DOM appears to be real, `false` otherwise.\n */\nfunction isReal() {\n  // Both document and window will never be undefined thanks to `global`.\n  return document === window$1.document;\n}\n\n/**\n * Determines, via duck typing, whether or not a value is a DOM element.\n *\n * @param  {*} value\n *         The value to check.\n *\n * @return {boolean}\n *         Will be `true` if the value is a DOM element, `false` otherwise.\n */\nfunction isEl(value) {\n  return isObject(value) && value.nodeType === 1;\n}\n\n/**\n * Determines if the current DOM is embedded in an iframe.\n *\n * @return {boolean}\n *         Will be `true` if the DOM is embedded in an iframe, `false`\n *         otherwise.\n */\nfunction isInFrame() {\n  // We need a try/catch here because Safari will throw errors when attempting\n  // to get either `parent` or `self`\n  try {\n    return window$1.parent !== window$1.self;\n  } catch (x) {\n    return true;\n  }\n}\n\n/**\n * Creates functions to query the DOM using a given method.\n *\n * @private\n * @param   {string} method\n *          The method to create the query with.\n *\n * @return  {Function}\n *          The query method\n */\nfunction createQuerier(method) {\n  return function (selector, context) {\n    if (!isNonBlankString(selector)) {\n      return document[method](null);\n    }\n    if (isNonBlankString(context)) {\n      context = document.querySelector(context);\n    }\n    const ctx = isEl(context) ? context : document;\n    return ctx[method] && ctx[method](selector);\n  };\n}\n\n/**\n * Creates an element and applies properties, attributes, and inserts content.\n *\n * @param  {string} [tagName='div']\n *         Name of tag to be created.\n *\n * @param  {Object} [properties={}]\n *         Element properties to be applied.\n *\n * @param  {Object} [attributes={}]\n *         Element attributes to be applied.\n *\n * @param {ContentDescriptor} [content]\n *        A content descriptor object.\n *\n * @return {Element}\n *         The element that was created.\n */\nfunction createEl(tagName = 'div', properties = {}, attributes = {}, content) {\n  const el = document.createElement(tagName);\n  Object.getOwnPropertyNames(properties).forEach(function (propName) {\n    const val = properties[propName];\n\n    // Handle textContent since it's not supported everywhere and we have a\n    // method for it.\n    if (propName === 'textContent') {\n      textContent(el, val);\n    } else if (el[propName] !== val || propName === 'tabIndex') {\n      el[propName] = val;\n    }\n  });\n  Object.getOwnPropertyNames(attributes).forEach(function (attrName) {\n    el.setAttribute(attrName, attributes[attrName]);\n  });\n  if (content) {\n    appendContent(el, content);\n  }\n  return el;\n}\n\n/**\n * Injects text into an element, replacing any existing contents entirely.\n *\n * @param  {HTMLElement} el\n *         The element to add text content into\n *\n * @param  {string} text\n *         The text content to add.\n *\n * @return {Element}\n *         The element with added text content.\n */\nfunction textContent(el, text) {\n  if (typeof el.textContent === 'undefined') {\n    el.innerText = text;\n  } else {\n    el.textContent = text;\n  }\n  return el;\n}\n\n/**\n * Insert an element as the first child node of another\n *\n * @param {Element} child\n *        Element to insert\n *\n * @param {Element} parent\n *        Element to insert child into\n */\nfunction prependTo(child, parent) {\n  if (parent.firstChild) {\n    parent.insertBefore(child, parent.firstChild);\n  } else {\n    parent.appendChild(child);\n  }\n}\n\n/**\n * Check if an element has a class name.\n *\n * @param  {Element} element\n *         Element to check\n *\n * @param  {string} classToCheck\n *         Class name to check for\n *\n * @return {boolean}\n *         Will be `true` if the element has a class, `false` otherwise.\n *\n * @throws {Error}\n *         Throws an error if `classToCheck` has white space.\n */\nfunction hasClass(element, classToCheck) {\n  throwIfWhitespace(classToCheck);\n  return element.classList.contains(classToCheck);\n}\n\n/**\n * Add a class name to an element.\n *\n * @param  {Element} element\n *         Element to add class name to.\n *\n * @param  {...string} classesToAdd\n *         One or more class name to add.\n *\n * @return {Element}\n *         The DOM element with the added class name.\n */\nfunction addClass(element, ...classesToAdd) {\n  element.classList.add(...classesToAdd.reduce((prev, current) => prev.concat(current.split(/\\s+/)), []));\n  return element;\n}\n\n/**\n * Remove a class name from an element.\n *\n * @param  {Element} element\n *         Element to remove a class name from.\n *\n * @param  {...string} classesToRemove\n *         One or more class name to remove.\n *\n * @return {Element}\n *         The DOM element with class name removed.\n */\nfunction removeClass(element, ...classesToRemove) {\n  // Protect in case the player gets disposed\n  if (!element) {\n    log$1.warn(\"removeClass was called with an element that doesn't exist\");\n    return null;\n  }\n  element.classList.remove(...classesToRemove.reduce((prev, current) => prev.concat(current.split(/\\s+/)), []));\n  return element;\n}\n\n/**\n * The callback definition for toggleClass.\n *\n * @callback module:dom~PredicateCallback\n * @param    {Element} element\n *           The DOM element of the Component.\n *\n * @param    {string} classToToggle\n *           The `className` that wants to be toggled\n *\n * @return   {boolean|undefined}\n *           If `true` is returned, the `classToToggle` will be added to the\n *           `element`. If `false`, the `classToToggle` will be removed from\n *           the `element`. If `undefined`, the callback will be ignored.\n */\n\n/**\n * Adds or removes a class name to/from an element depending on an optional\n * condition or the presence/absence of the class name.\n *\n * @param  {Element} element\n *         The element to toggle a class name on.\n *\n * @param  {string} classToToggle\n *         The class that should be toggled.\n *\n * @param  {boolean|module:dom~PredicateCallback} [predicate]\n *         See the return value for {@link module:dom~PredicateCallback}\n *\n * @return {Element}\n *         The element with a class that has been toggled.\n */\nfunction toggleClass(element, classToToggle, predicate) {\n  if (typeof predicate === 'function') {\n    predicate = predicate(element, classToToggle);\n  }\n  if (typeof predicate !== 'boolean') {\n    predicate = undefined;\n  }\n  classToToggle.split(/\\s+/).forEach(className => element.classList.toggle(className, predicate));\n  return element;\n}\n\n/**\n * Apply attributes to an HTML element.\n *\n * @param {Element} el\n *        Element to add attributes to.\n *\n * @param {Object} [attributes]\n *        Attributes to be applied.\n */\nfunction setAttributes(el, attributes) {\n  Object.getOwnPropertyNames(attributes).forEach(function (attrName) {\n    const attrValue = attributes[attrName];\n    if (attrValue === null || typeof attrValue === 'undefined' || attrValue === false) {\n      el.removeAttribute(attrName);\n    } else {\n      el.setAttribute(attrName, attrValue === true ? '' : attrValue);\n    }\n  });\n}\n\n/**\n * Get an element's attribute values, as defined on the HTML tag.\n *\n * Attributes are not the same as properties. They're defined on the tag\n * or with setAttribute.\n *\n * @param  {Element} tag\n *         Element from which to get tag attributes.\n *\n * @return {Object}\n *         All attributes of the element. Boolean attributes will be `true` or\n *         `false`, others will be strings.\n */\nfunction getAttributes(tag) {\n  const obj = {};\n\n  // known boolean attributes\n  // we can check for matching boolean properties, but not all browsers\n  // and not all tags know about these attributes, so, we still want to check them manually\n  const knownBooleans = ['autoplay', 'controls', 'playsinline', 'loop', 'muted', 'default', 'defaultMuted'];\n  if (tag && tag.attributes && tag.attributes.length > 0) {\n    const attrs = tag.attributes;\n    for (let i = attrs.length - 1; i >= 0; i--) {\n      const attrName = attrs[i].name;\n      /** @type {boolean|string} */\n      let attrVal = attrs[i].value;\n\n      // check for known booleans\n      // the matching element property will return a value for typeof\n      if (knownBooleans.includes(attrName)) {\n        // the value of an included boolean attribute is typically an empty\n        // string ('') which would equal false if we just check for a false value.\n        // we also don't want support bad code like autoplay='false'\n        attrVal = attrVal !== null ? true : false;\n      }\n      obj[attrName] = attrVal;\n    }\n  }\n  return obj;\n}\n\n/**\n * Get the value of an element's attribute.\n *\n * @param {Element} el\n *        A DOM element.\n *\n * @param {string} attribute\n *        Attribute to get the value of.\n *\n * @return {string}\n *         The value of the attribute.\n */\nfunction getAttribute(el, attribute) {\n  return el.getAttribute(attribute);\n}\n\n/**\n * Set the value of an element's attribute.\n *\n * @param {Element} el\n *        A DOM element.\n *\n * @param {string} attribute\n *        Attribute to set.\n *\n * @param {string} value\n *        Value to set the attribute to.\n */\nfunction setAttribute(el, attribute, value) {\n  el.setAttribute(attribute, value);\n}\n\n/**\n * Remove an element's attribute.\n *\n * @param {Element} el\n *        A DOM element.\n *\n * @param {string} attribute\n *        Attribute to remove.\n */\nfunction removeAttribute(el, attribute) {\n  el.removeAttribute(attribute);\n}\n\n/**\n * Attempt to block the ability to select text.\n */\nfunction blockTextSelection() {\n  document.body.focus();\n  document.onselectstart = function () {\n    return false;\n  };\n}\n\n/**\n * Turn off text selection blocking.\n */\nfunction unblockTextSelection() {\n  document.onselectstart = function () {\n    return true;\n  };\n}\n\n/**\n * Identical to the native `getBoundingClientRect` function, but ensures that\n * the method is supported at all (it is in all browsers we claim to support)\n * and that the element is in the DOM before continuing.\n *\n * This wrapper function also shims properties which are not provided by some\n * older browsers (namely, IE8).\n *\n * Additionally, some browsers do not support adding properties to a\n * `ClientRect`/`DOMRect` object; so, we shallow-copy it with the standard\n * properties (except `x` and `y` which are not widely supported). This helps\n * avoid implementations where keys are non-enumerable.\n *\n * @param  {Element} el\n *         Element whose `ClientRect` we want to calculate.\n *\n * @return {Object|undefined}\n *         Always returns a plain object - or `undefined` if it cannot.\n */\nfunction getBoundingClientRect(el) {\n  if (el && el.getBoundingClientRect && el.parentNode) {\n    const rect = el.getBoundingClientRect();\n    const result = {};\n    ['bottom', 'height', 'left', 'right', 'top', 'width'].forEach(k => {\n      if (rect[k] !== undefined) {\n        result[k] = rect[k];\n      }\n    });\n    if (!result.height) {\n      result.height = parseFloat(computedStyle(el, 'height'));\n    }\n    if (!result.width) {\n      result.width = parseFloat(computedStyle(el, 'width'));\n    }\n    return result;\n  }\n}\n\n/**\n * Represents the position of a DOM element on the page.\n *\n * @typedef  {Object} module:dom~Position\n *\n * @property {number} left\n *           Pixels to the left.\n *\n * @property {number} top\n *           Pixels from the top.\n */\n\n/**\n * Get the position of an element in the DOM.\n *\n * Uses `getBoundingClientRect` technique from John Resig.\n *\n * @see http://ejohn.org/blog/getboundingclientrect-is-awesome/\n *\n * @param  {Element} el\n *         Element from which to get offset.\n *\n * @return {module:dom~Position}\n *         The position of the element that was passed in.\n */\nfunction findPosition(el) {\n  if (!el || el && !el.offsetParent) {\n    return {\n      left: 0,\n      top: 0,\n      width: 0,\n      height: 0\n    };\n  }\n  const width = el.offsetWidth;\n  const height = el.offsetHeight;\n  let left = 0;\n  let top = 0;\n  while (el.offsetParent && el !== document[FullscreenApi.fullscreenElement]) {\n    left += el.offsetLeft;\n    top += el.offsetTop;\n    el = el.offsetParent;\n  }\n  return {\n    left,\n    top,\n    width,\n    height\n  };\n}\n\n/**\n * Represents x and y coordinates for a DOM element or mouse pointer.\n *\n * @typedef  {Object} module:dom~Coordinates\n *\n * @property {number} x\n *           x coordinate in pixels\n *\n * @property {number} y\n *           y coordinate in pixels\n */\n\n/**\n * Get the pointer position within an element.\n *\n * The base on the coordinates are the bottom left of the element.\n *\n * @param  {Element} el\n *         Element on which to get the pointer position on.\n *\n * @param  {Event} event\n *         Event object.\n *\n * @return {module:dom~Coordinates}\n *         A coordinates object corresponding to the mouse position.\n *\n */\nfunction getPointerPosition(el, event) {\n  const translated = {\n    x: 0,\n    y: 0\n  };\n  if (IS_IOS) {\n    let item = el;\n    while (item && item.nodeName.toLowerCase() !== 'html') {\n      const transform = computedStyle(item, 'transform');\n      if (/^matrix/.test(transform)) {\n        const values = transform.slice(7, -1).split(/,\\s/).map(Number);\n        translated.x += values[4];\n        translated.y += values[5];\n      } else if (/^matrix3d/.test(transform)) {\n        const values = transform.slice(9, -1).split(/,\\s/).map(Number);\n        translated.x += values[12];\n        translated.y += values[13];\n      }\n      item = item.parentNode;\n    }\n  }\n  const position = {};\n  const boxTarget = findPosition(event.target);\n  const box = findPosition(el);\n  const boxW = box.width;\n  const boxH = box.height;\n  let offsetY = event.offsetY - (box.top - boxTarget.top);\n  let offsetX = event.offsetX - (box.left - boxTarget.left);\n  if (event.changedTouches) {\n    offsetX = event.changedTouches[0].pageX - box.left;\n    offsetY = event.changedTouches[0].pageY + box.top;\n    if (IS_IOS) {\n      offsetX -= translated.x;\n      offsetY -= translated.y;\n    }\n  }\n  position.y = 1 - Math.max(0, Math.min(1, offsetY / boxH));\n  position.x = Math.max(0, Math.min(1, offsetX / boxW));\n  return position;\n}\n\n/**\n * Determines, via duck typing, whether or not a value is a text node.\n *\n * @param  {*} value\n *         Check if this value is a text node.\n *\n * @return {boolean}\n *         Will be `true` if the value is a text node, `false` otherwise.\n */\nfunction isTextNode(value) {\n  return isObject(value) && value.nodeType === 3;\n}\n\n/**\n * Empties the contents of an element.\n *\n * @param  {Element} el\n *         The element to empty children from\n *\n * @return {Element}\n *         The element with no children\n */\nfunction emptyEl(el) {\n  while (el.firstChild) {\n    el.removeChild(el.firstChild);\n  }\n  return el;\n}\n\n/**\n * This is a mixed value that describes content to be injected into the DOM\n * via some method. It can be of the following types:\n *\n * Type       | Description\n * -----------|-------------\n * `string`   | The value will be normalized into a text node.\n * `Element`  | The value will be accepted as-is.\n * `Text`     | A TextNode. The value will be accepted as-is.\n * `Array`    | A one-dimensional array of strings, elements, text nodes, or functions. These functions should return a string, element, or text node (any other return value, like an array, will be ignored).\n * `Function` | A function, which is expected to return a string, element, text node, or array - any of the other possible values described above. This means that a content descriptor could be a function that returns an array of functions, but those second-level functions must return strings, elements, or text nodes.\n *\n * @typedef {string|Element|Text|Array|Function} ContentDescriptor\n */\n\n/**\n * Normalizes content for eventual insertion into the DOM.\n *\n * This allows a wide range of content definition methods, but helps protect\n * from falling into the trap of simply writing to `innerHTML`, which could\n * be an XSS concern.\n *\n * The content for an element can be passed in multiple types and\n * combinations, whose behavior is as follows:\n *\n * @param {ContentDescriptor} content\n *        A content descriptor value.\n *\n * @return {Array}\n *         All of the content that was passed in, normalized to an array of\n *         elements or text nodes.\n */\nfunction normalizeContent(content) {\n  // First, invoke content if it is a function. If it produces an array,\n  // that needs to happen before normalization.\n  if (typeof content === 'function') {\n    content = content();\n  }\n\n  // Next up, normalize to an array, so one or many items can be normalized,\n  // filtered, and returned.\n  return (Array.isArray(content) ? content : [content]).map(value => {\n    // First, invoke value if it is a function to produce a new value,\n    // which will be subsequently normalized to a Node of some kind.\n    if (typeof value === 'function') {\n      value = value();\n    }\n    if (isEl(value) || isTextNode(value)) {\n      return value;\n    }\n    if (typeof value === 'string' && /\\S/.test(value)) {\n      return document.createTextNode(value);\n    }\n  }).filter(value => value);\n}\n\n/**\n * Normalizes and appends content to an element.\n *\n * @param  {Element} el\n *         Element to append normalized content to.\n *\n * @param {ContentDescriptor} content\n *        A content descriptor value.\n *\n * @return {Element}\n *         The element with appended normalized content.\n */\nfunction appendContent(el, content) {\n  normalizeContent(content).forEach(node => el.appendChild(node));\n  return el;\n}\n\n/**\n * Normalizes and inserts content into an element; this is identical to\n * `appendContent()`, except it empties the element first.\n *\n * @param {Element} el\n *        Element to insert normalized content into.\n *\n * @param {ContentDescriptor} content\n *        A content descriptor value.\n *\n * @return {Element}\n *         The element with inserted normalized content.\n */\nfunction insertContent(el, content) {\n  return appendContent(emptyEl(el), content);\n}\n\n/**\n * Check if an event was a single left click.\n *\n * @param  {MouseEvent} event\n *         Event object.\n *\n * @return {boolean}\n *         Will be `true` if a single left click, `false` otherwise.\n */\nfunction isSingleLeftClick(event) {\n  // Note: if you create something draggable, be sure to\n  // call it on both `mousedown` and `mousemove` event,\n  // otherwise `mousedown` should be enough for a button\n\n  if (event.button === undefined && event.buttons === undefined) {\n    // Why do we need `buttons` ?\n    // Because, middle mouse sometimes have this:\n    // e.button === 0 and e.buttons === 4\n    // Furthermore, we want to prevent combination click, something like\n    // HOLD middlemouse then left click, that would be\n    // e.button === 0, e.buttons === 5\n    // just `button` is not gonna work\n\n    // Alright, then what this block does ?\n    // this is for chrome `simulate mobile devices`\n    // I want to support this as well\n\n    return true;\n  }\n  if (event.button === 0 && event.buttons === undefined) {\n    // Touch screen, sometimes on some specific device, `buttons`\n    // doesn't have anything (safari on ios, blackberry...)\n\n    return true;\n  }\n\n  // `mouseup` event on a single left click has\n  // `button` and `buttons` equal to 0\n  if (event.type === 'mouseup' && event.button === 0 && event.buttons === 0) {\n    return true;\n  }\n  if (event.button !== 0 || event.buttons !== 1) {\n    // This is the reason we have those if else block above\n    // if any special case we can catch and let it slide\n    // we do it above, when get to here, this definitely\n    // is-not-left-click\n\n    return false;\n  }\n  return true;\n}\n\n/**\n * Finds a single DOM element matching `selector` within the optional\n * `context` of another DOM element (defaulting to `document`).\n *\n * @param  {string} selector\n *         A valid CSS selector, which will be passed to `querySelector`.\n *\n * @param  {Element|String} [context=document]\n *         A DOM element within which to query. Can also be a selector\n *         string in which case the first matching element will be used\n *         as context. If missing (or no element matches selector), falls\n *         back to `document`.\n *\n * @return {Element|null}\n *         The element that was found or null.\n */\nconst $ = createQuerier('querySelector');\n\n/**\n * Finds a all DOM elements matching `selector` within the optional\n * `context` of another DOM element (defaulting to `document`).\n *\n * @param  {string} selector\n *         A valid CSS selector, which will be passed to `querySelectorAll`.\n *\n * @param  {Element|String} [context=document]\n *         A DOM element within which to query. Can also be a selector\n *         string in which case the first matching element will be used\n *         as context. If missing (or no element matches selector), falls\n *         back to `document`.\n *\n * @return {NodeList}\n *         A element list of elements that were found. Will be empty if none\n *         were found.\n *\n */\nconst $$ = createQuerier('querySelectorAll');\n\n/**\n * A safe getComputedStyle.\n *\n * This is needed because in Firefox, if the player is loaded in an iframe with\n * `display:none`, then `getComputedStyle` returns `null`, so, we do a\n * null-check to make sure that the player doesn't break in these cases.\n *\n * @param    {Element} el\n *           The element you want the computed style of\n *\n * @param    {string} prop\n *           The property name you want\n *\n * @see      https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n */\nfunction computedStyle(el, prop) {\n  if (!el || !prop) {\n    return '';\n  }\n  if (typeof window$1.getComputedStyle === 'function') {\n    let computedStyleValue;\n    try {\n      computedStyleValue = window$1.getComputedStyle(el);\n    } catch (e) {\n      return '';\n    }\n    return computedStyleValue ? computedStyleValue.getPropertyValue(prop) || computedStyleValue[prop] : '';\n  }\n  return '';\n}\n\n/**\n * Copy document style sheets to another window.\n *\n * @param    {Window} win\n *           The window element you want to copy the document style sheets to.\n *\n */\nfunction copyStyleSheetsToWindow(win) {\n  [...document.styleSheets].forEach(styleSheet => {\n    try {\n      const cssRules = [...styleSheet.cssRules].map(rule => rule.cssText).join('');\n      const style = document.createElement('style');\n      style.textContent = cssRules;\n      win.document.head.appendChild(style);\n    } catch (e) {\n      const link = document.createElement('link');\n      link.rel = 'stylesheet';\n      link.type = styleSheet.type;\n      // For older Safari this has to be the string; on other browsers setting the MediaList works\n      link.media = styleSheet.media.mediaText;\n      link.href = styleSheet.href;\n      win.document.head.appendChild(link);\n    }\n  });\n}\n\nvar Dom = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  isReal: isReal,\n  isEl: isEl,\n  isInFrame: isInFrame,\n  createEl: createEl,\n  textContent: textContent,\n  prependTo: prependTo,\n  hasClass: hasClass,\n  addClass: addClass,\n  removeClass: removeClass,\n  toggleClass: toggleClass,\n  setAttributes: setAttributes,\n  getAttributes: getAttributes,\n  getAttribute: getAttribute,\n  setAttribute: setAttribute,\n  removeAttribute: removeAttribute,\n  blockTextSelection: blockTextSelection,\n  unblockTextSelection: unblockTextSelection,\n  getBoundingClientRect: getBoundingClientRect,\n  findPosition: findPosition,\n  getPointerPosition: getPointerPosition,\n  isTextNode: isTextNode,\n  emptyEl: emptyEl,\n  normalizeContent: normalizeContent,\n  appendContent: appendContent,\n  insertContent: insertContent,\n  isSingleLeftClick: isSingleLeftClick,\n  $: $,\n  $$: $$,\n  computedStyle: computedStyle,\n  copyStyleSheetsToWindow: copyStyleSheetsToWindow\n});\n\n/**\n * @file setup.js - Functions for setting up a player without\n * user interaction based on the data-setup `attribute` of the video tag.\n *\n * @module setup\n */\nlet _windowLoaded = false;\nlet videojs$1;\n\n/**\n * Set up any tags that have a data-setup `attribute` when the player is started.\n */\nconst autoSetup = function () {\n  if (videojs$1.options.autoSetup === false) {\n    return;\n  }\n  const vids = Array.prototype.slice.call(document.getElementsByTagName('video'));\n  const audios = Array.prototype.slice.call(document.getElementsByTagName('audio'));\n  const divs = Array.prototype.slice.call(document.getElementsByTagName('video-js'));\n  const mediaEls = vids.concat(audios, divs);\n\n  // Check if any media elements exist\n  if (mediaEls && mediaEls.length > 0) {\n    for (let i = 0, e = mediaEls.length; i < e; i++) {\n      const mediaEl = mediaEls[i];\n\n      // Check if element exists, has getAttribute func.\n      if (mediaEl && mediaEl.getAttribute) {\n        // Make sure this player hasn't already been set up.\n        if (mediaEl.player === undefined) {\n          const options = mediaEl.getAttribute('data-setup');\n\n          // Check if data-setup attr exists.\n          // We only auto-setup if they've added the data-setup attr.\n          if (options !== null) {\n            // Create new video.js instance.\n            videojs$1(mediaEl);\n          }\n        }\n\n        // If getAttribute isn't defined, we need to wait for the DOM.\n      } else {\n        autoSetupTimeout(1);\n        break;\n      }\n    }\n\n    // No videos were found, so keep looping unless page is finished loading.\n  } else if (!_windowLoaded) {\n    autoSetupTimeout(1);\n  }\n};\n\n/**\n * Wait until the page is loaded before running autoSetup. This will be called in\n * autoSetup if `hasLoaded` returns false.\n *\n * @param {number} wait\n *        How long to wait in ms\n *\n * @param {module:videojs} [vjs]\n *        The videojs library function\n */\nfunction autoSetupTimeout(wait, vjs) {\n  // Protect against breakage in non-browser environments\n  if (!isReal()) {\n    return;\n  }\n  if (vjs) {\n    videojs$1 = vjs;\n  }\n  window$1.setTimeout(autoSetup, wait);\n}\n\n/**\n * Used to set the internal tracking of window loaded state to true.\n *\n * @private\n */\nfunction setWindowLoaded() {\n  _windowLoaded = true;\n  window$1.removeEventListener('load', setWindowLoaded);\n}\nif (isReal()) {\n  if (document.readyState === 'complete') {\n    setWindowLoaded();\n  } else {\n    /**\n     * Listen for the load event on window, and set _windowLoaded to true.\n     *\n     * We use a standard event listener here to avoid incrementing the GUID\n     * before any players are created.\n     *\n     * @listens load\n     */\n    window$1.addEventListener('load', setWindowLoaded);\n  }\n}\n\n/**\n * @file stylesheet.js\n * @module stylesheet\n */\n\n/**\n * Create a DOM style element given a className for it.\n *\n * @param {string} className\n *        The className to add to the created style element.\n *\n * @return {Element}\n *         The element that was created.\n */\nconst createStyleElement = function (className) {\n  const style = document.createElement('style');\n  style.className = className;\n  return style;\n};\n\n/**\n * Add text to a DOM element.\n *\n * @param {Element} el\n *        The Element to add text content to.\n *\n * @param {string} content\n *        The text to add to the element.\n */\nconst setTextContent = function (el, content) {\n  if (el.styleSheet) {\n    el.styleSheet.cssText = content;\n  } else {\n    el.textContent = content;\n  }\n};\n\n/**\n * @file dom-data.js\n * @module dom-data\n */\n\n/**\n * Element Data Store.\n *\n * Allows for binding data to an element without putting it directly on the\n * element. Ex. Event listeners are stored here.\n * (also from jsninja.com, slightly modified and updated for closure compiler)\n *\n * @type {Object}\n * @private\n */\nvar DomData = new WeakMap();\n\n/**\n * @file guid.js\n * @module guid\n */\n\n// Default value for GUIDs. This allows us to reset the GUID counter in tests.\n//\n// The initial GUID is 3 because some users have come to rely on the first\n// default player ID ending up as `vjs_video_3`.\n//\n// See: https://github.com/videojs/video.js/pull/6216\nconst _initialGuid = 3;\n\n/**\n * Unique ID for an element or function\n *\n * @type {Number}\n */\nlet _guid = _initialGuid;\n\n/**\n * Get a unique auto-incrementing ID by number that has not been returned before.\n *\n * @return {number}\n *         A new unique ID.\n */\nfunction newGUID() {\n  return _guid++;\n}\n\n/**\n * @file events.js. An Event System (John Resig - Secrets of a JS Ninja http://jsninja.com/)\n * (Original book version wasn't completely usable, so fixed some things and made Closure Compiler compatible)\n * This should work very similarly to jQuery's events, however it's based off the book version which isn't as\n * robust as jquery's, so there's probably some differences.\n *\n * @file events.js\n * @module events\n */\n\n/**\n * Clean up the listener cache and dispatchers\n *\n * @param {Element|Object} elem\n *        Element to clean up\n *\n * @param {string} type\n *        Type of event to clean up\n */\nfunction _cleanUpEvents(elem, type) {\n  if (!DomData.has(elem)) {\n    return;\n  }\n  const data = DomData.get(elem);\n\n  // Remove the events of a particular type if there are none left\n  if (data.handlers[type].length === 0) {\n    delete data.handlers[type];\n    // data.handlers[type] = null;\n    // Setting to null was causing an error with data.handlers\n\n    // Remove the meta-handler from the element\n    if (elem.removeEventListener) {\n      elem.removeEventListener(type, data.dispatcher, false);\n    } else if (elem.detachEvent) {\n      elem.detachEvent('on' + type, data.dispatcher);\n    }\n  }\n\n  // Remove the events object if there are no types left\n  if (Object.getOwnPropertyNames(data.handlers).length <= 0) {\n    delete data.handlers;\n    delete data.dispatcher;\n    delete data.disabled;\n  }\n\n  // Finally remove the element data if there is no data left\n  if (Object.getOwnPropertyNames(data).length === 0) {\n    DomData.delete(elem);\n  }\n}\n\n/**\n * Loops through an array of event types and calls the requested method for each type.\n *\n * @param {Function} fn\n *        The event method we want to use.\n *\n * @param {Element|Object} elem\n *        Element or object to bind listeners to\n *\n * @param {string[]} types\n *        Type of event to bind to.\n *\n * @param {Function} callback\n *        Event listener.\n */\nfunction _handleMultipleEvents(fn, elem, types, callback) {\n  types.forEach(function (type) {\n    // Call the event method for each one of the types\n    fn(elem, type, callback);\n  });\n}\n\n/**\n * Fix a native event to have standard property values\n *\n * @param {Object} event\n *        Event object to fix.\n *\n * @return {Object}\n *         Fixed event object.\n */\nfunction fixEvent(event) {\n  if (event.fixed_) {\n    return event;\n  }\n  function returnTrue() {\n    return true;\n  }\n  function returnFalse() {\n    return false;\n  }\n\n  // Test if fixing up is needed\n  // Used to check if !event.stopPropagation instead of isPropagationStopped\n  // But native events return true for stopPropagation, but don't have\n  // other expected methods like isPropagationStopped. Seems to be a problem\n  // with the Javascript Ninja code. So we're just overriding all events now.\n  if (!event || !event.isPropagationStopped || !event.isImmediatePropagationStopped) {\n    const old = event || window$1.event;\n    event = {};\n    // Clone the old object so that we can modify the values event = {};\n    // IE8 Doesn't like when you mess with native event properties\n    // Firefox returns false for event.hasOwnProperty('type') and other props\n    //  which makes copying more difficult.\n    // TODO: Probably best to create a whitelist of event props\n    for (const key in old) {\n      // Safari 6.0.3 warns you if you try to copy deprecated layerX/Y\n      // Chrome warns you if you try to copy deprecated keyboardEvent.keyLocation\n      // and webkitMovementX/Y\n      // Lighthouse complains if Event.path is copied\n      if (key !== 'layerX' && key !== 'layerY' && key !== 'keyLocation' && key !== 'webkitMovementX' && key !== 'webkitMovementY' && key !== 'path') {\n        // Chrome 32+ warns if you try to copy deprecated returnValue, but\n        // we still want to if preventDefault isn't supported (IE8).\n        if (!(key === 'returnValue' && old.preventDefault)) {\n          event[key] = old[key];\n        }\n      }\n    }\n\n    // The event occurred on this element\n    if (!event.target) {\n      event.target = event.srcElement || document;\n    }\n\n    // Handle which other element the event is related to\n    if (!event.relatedTarget) {\n      event.relatedTarget = event.fromElement === event.target ? event.toElement : event.fromElement;\n    }\n\n    // Stop the default browser action\n    event.preventDefault = function () {\n      if (old.preventDefault) {\n        old.preventDefault();\n      }\n      event.returnValue = false;\n      old.returnValue = false;\n      event.defaultPrevented = true;\n    };\n    event.defaultPrevented = false;\n\n    // Stop the event from bubbling\n    event.stopPropagation = function () {\n      if (old.stopPropagation) {\n        old.stopPropagation();\n      }\n      event.cancelBubble = true;\n      old.cancelBubble = true;\n      event.isPropagationStopped = returnTrue;\n    };\n    event.isPropagationStopped = returnFalse;\n\n    // Stop the event from bubbling and executing other handlers\n    event.stopImmediatePropagation = function () {\n      if (old.stopImmediatePropagation) {\n        old.stopImmediatePropagation();\n      }\n      event.isImmediatePropagationStopped = returnTrue;\n      event.stopPropagation();\n    };\n    event.isImmediatePropagationStopped = returnFalse;\n\n    // Handle mouse position\n    if (event.clientX !== null && event.clientX !== undefined) {\n      const doc = document.documentElement;\n      const body = document.body;\n      event.pageX = event.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);\n      event.pageY = event.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);\n    }\n\n    // Handle key presses\n    event.which = event.charCode || event.keyCode;\n\n    // Fix button for mouse clicks:\n    // 0 == left; 1 == middle; 2 == right\n    if (event.button !== null && event.button !== undefined) {\n      // The following is disabled because it does not pass videojs-standard\n      // and... yikes.\n      /* eslint-disable */\n      event.button = event.button & 1 ? 0 : event.button & 4 ? 1 : event.button & 2 ? 2 : 0;\n      /* eslint-enable */\n    }\n  }\n\n  event.fixed_ = true;\n  // Returns fixed-up instance\n  return event;\n}\n\n/**\n * Whether passive event listeners are supported\n */\nlet _supportsPassive;\nconst supportsPassive = function () {\n  if (typeof _supportsPassive !== 'boolean') {\n    _supportsPassive = false;\n    try {\n      const opts = Object.defineProperty({}, 'passive', {\n        get() {\n          _supportsPassive = true;\n        }\n      });\n      window$1.addEventListener('test', null, opts);\n      window$1.removeEventListener('test', null, opts);\n    } catch (e) {\n      // disregard\n    }\n  }\n  return _supportsPassive;\n};\n\n/**\n * Touch events Chrome expects to be passive\n */\nconst passiveEvents = ['touchstart', 'touchmove'];\n\n/**\n * Add an event listener to element\n * It stores the handler function in a separate cache object\n * and adds a generic handler to the element's event,\n * along with a unique id (guid) to the element.\n *\n * @param {Element|Object} elem\n *        Element or object to bind listeners to\n *\n * @param {string|string[]} type\n *        Type of event to bind to.\n *\n * @param {Function} fn\n *        Event listener.\n */\nfunction on(elem, type, fn) {\n  if (Array.isArray(type)) {\n    return _handleMultipleEvents(on, elem, type, fn);\n  }\n  if (!DomData.has(elem)) {\n    DomData.set(elem, {});\n  }\n  const data = DomData.get(elem);\n\n  // We need a place to store all our handler data\n  if (!data.handlers) {\n    data.handlers = {};\n  }\n  if (!data.handlers[type]) {\n    data.handlers[type] = [];\n  }\n  if (!fn.guid) {\n    fn.guid = newGUID();\n  }\n  data.handlers[type].push(fn);\n  if (!data.dispatcher) {\n    data.disabled = false;\n    data.dispatcher = function (event, hash) {\n      if (data.disabled) {\n        return;\n      }\n      event = fixEvent(event);\n      const handlers = data.handlers[event.type];\n      if (handlers) {\n        // Copy handlers so if handlers are added/removed during the process it doesn't throw everything off.\n        const handlersCopy = handlers.slice(0);\n        for (let m = 0, n = handlersCopy.length; m < n; m++) {\n          if (event.isImmediatePropagationStopped()) {\n            break;\n          } else {\n            try {\n              handlersCopy[m].call(elem, event, hash);\n            } catch (e) {\n              log$1.error(e);\n            }\n          }\n        }\n      }\n    };\n  }\n  if (data.handlers[type].length === 1) {\n    if (elem.addEventListener) {\n      let options = false;\n      if (supportsPassive() && passiveEvents.indexOf(type) > -1) {\n        options = {\n          passive: true\n        };\n      }\n      elem.addEventListener(type, data.dispatcher, options);\n    } else if (elem.attachEvent) {\n      elem.attachEvent('on' + type, data.dispatcher);\n    }\n  }\n}\n\n/**\n * Removes event listeners from an element\n *\n * @param {Element|Object} elem\n *        Object to remove listeners from.\n *\n * @param {string|string[]} [type]\n *        Type of listener to remove. Don't include to remove all events from element.\n *\n * @param {Function} [fn]\n *        Specific listener to remove. Don't include to remove listeners for an event\n *        type.\n */\nfunction off(elem, type, fn) {\n  // Don't want to add a cache object through getElData if not needed\n  if (!DomData.has(elem)) {\n    return;\n  }\n  const data = DomData.get(elem);\n\n  // If no events exist, nothing to unbind\n  if (!data.handlers) {\n    return;\n  }\n  if (Array.isArray(type)) {\n    return _handleMultipleEvents(off, elem, type, fn);\n  }\n\n  // Utility function\n  const removeType = function (el, t) {\n    data.handlers[t] = [];\n    _cleanUpEvents(el, t);\n  };\n\n  // Are we removing all bound events?\n  if (type === undefined) {\n    for (const t in data.handlers) {\n      if (Object.prototype.hasOwnProperty.call(data.handlers || {}, t)) {\n        removeType(elem, t);\n      }\n    }\n    return;\n  }\n  const handlers = data.handlers[type];\n\n  // If no handlers exist, nothing to unbind\n  if (!handlers) {\n    return;\n  }\n\n  // If no listener was provided, remove all listeners for type\n  if (!fn) {\n    removeType(elem, type);\n    return;\n  }\n\n  // We're only removing a single handler\n  if (fn.guid) {\n    for (let n = 0; n < handlers.length; n++) {\n      if (handlers[n].guid === fn.guid) {\n        handlers.splice(n--, 1);\n      }\n    }\n  }\n  _cleanUpEvents(elem, type);\n}\n\n/**\n * Trigger an event for an element\n *\n * @param {Element|Object} elem\n *        Element to trigger an event on\n *\n * @param {EventTarget~Event|string} event\n *        A string (the type) or an event object with a type attribute\n *\n * @param {Object} [hash]\n *        data hash to pass along with the event\n *\n * @return {boolean|undefined}\n *         Returns the opposite of `defaultPrevented` if default was\n *         prevented. Otherwise, returns `undefined`\n */\nfunction trigger(elem, event, hash) {\n  // Fetches element data and a reference to the parent (for bubbling).\n  // Don't want to add a data object to cache for every parent,\n  // so checking hasElData first.\n  const elemData = DomData.has(elem) ? DomData.get(elem) : {};\n  const parent = elem.parentNode || elem.ownerDocument;\n  // type = event.type || event,\n  // handler;\n\n  // If an event name was passed as a string, creates an event out of it\n  if (typeof event === 'string') {\n    event = {\n      type: event,\n      target: elem\n    };\n  } else if (!event.target) {\n    event.target = elem;\n  }\n\n  // Normalizes the event properties.\n  event = fixEvent(event);\n\n  // If the passed element has a dispatcher, executes the established handlers.\n  if (elemData.dispatcher) {\n    elemData.dispatcher.call(elem, event, hash);\n  }\n\n  // Unless explicitly stopped or the event does not bubble (e.g. media events)\n  // recursively calls this function to bubble the event up the DOM.\n  if (parent && !event.isPropagationStopped() && event.bubbles === true) {\n    trigger.call(null, parent, event, hash);\n\n    // If at the top of the DOM, triggers the default action unless disabled.\n  } else if (!parent && !event.defaultPrevented && event.target && event.target[event.type]) {\n    if (!DomData.has(event.target)) {\n      DomData.set(event.target, {});\n    }\n    const targetData = DomData.get(event.target);\n\n    // Checks if the target has a default action for this event.\n    if (event.target[event.type]) {\n      // Temporarily disables event dispatching on the target as we have already executed the handler.\n      targetData.disabled = true;\n      // Executes the default action.\n      if (typeof event.target[event.type] === 'function') {\n        event.target[event.type]();\n      }\n      // Re-enables event dispatching.\n      targetData.disabled = false;\n    }\n  }\n\n  // Inform the triggerer if the default was prevented by returning false\n  return !event.defaultPrevented;\n}\n\n/**\n * Trigger a listener only once for an event.\n *\n * @param {Element|Object} elem\n *        Element or object to bind to.\n *\n * @param {string|string[]} type\n *        Name/type of event\n *\n * @param {Event~EventListener} fn\n *        Event listener function\n */\nfunction one(elem, type, fn) {\n  if (Array.isArray(type)) {\n    return _handleMultipleEvents(one, elem, type, fn);\n  }\n  const func = function () {\n    off(elem, type, func);\n    fn.apply(this, arguments);\n  };\n\n  // copy the guid to the new function so it can removed using the original function's ID\n  func.guid = fn.guid = fn.guid || newGUID();\n  on(elem, type, func);\n}\n\n/**\n * Trigger a listener only once and then turn if off for all\n * configured events\n *\n * @param {Element|Object} elem\n *        Element or object to bind to.\n *\n * @param {string|string[]} type\n *        Name/type of event\n *\n * @param {Event~EventListener} fn\n *        Event listener function\n */\nfunction any(elem, type, fn) {\n  const func = function () {\n    off(elem, type, func);\n    fn.apply(this, arguments);\n  };\n\n  // copy the guid to the new function so it can removed using the original function's ID\n  func.guid = fn.guid = fn.guid || newGUID();\n\n  // multiple ons, but one off for everything\n  on(elem, type, func);\n}\n\nvar Events = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  fixEvent: fixEvent,\n  on: on,\n  off: off,\n  trigger: trigger,\n  one: one,\n  any: any\n});\n\n/**\n * @file fn.js\n * @module fn\n */\nconst UPDATE_REFRESH_INTERVAL = 30;\n\n/**\n * A private, internal-only function for changing the context of a function.\n *\n * It also stores a unique id on the function so it can be easily removed from\n * events.\n *\n * @private\n * @function\n * @param    {*} context\n *           The object to bind as scope.\n *\n * @param    {Function} fn\n *           The function to be bound to a scope.\n *\n * @param    {number} [uid]\n *           An optional unique ID for the function to be set\n *\n * @return   {Function}\n *           The new function that will be bound into the context given\n */\nconst bind_ = function (context, fn, uid) {\n  // Make sure the function has a unique ID\n  if (!fn.guid) {\n    fn.guid = newGUID();\n  }\n\n  // Create the new function that changes the context\n  const bound = fn.bind(context);\n\n  // Allow for the ability to individualize this function\n  // Needed in the case where multiple objects might share the same prototype\n  // IF both items add an event listener with the same function, then you try to remove just one\n  // it will remove both because they both have the same guid.\n  // when using this, you need to use the bind method when you remove the listener as well.\n  // currently used in text tracks\n  bound.guid = uid ? uid + '_' + fn.guid : fn.guid;\n  return bound;\n};\n\n/**\n * Wraps the given function, `fn`, with a new function that only invokes `fn`\n * at most once per every `wait` milliseconds.\n *\n * @function\n * @param    {Function} fn\n *           The function to be throttled.\n *\n * @param    {number}   wait\n *           The number of milliseconds by which to throttle.\n *\n * @return   {Function}\n */\nconst throttle = function (fn, wait) {\n  let last = window$1.performance.now();\n  const throttled = function (...args) {\n    const now = window$1.performance.now();\n    if (now - last >= wait) {\n      fn(...args);\n      last = now;\n    }\n  };\n  return throttled;\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked.\n *\n * Inspired by lodash and underscore implementations.\n *\n * @function\n * @param    {Function} func\n *           The function to wrap with debounce behavior.\n *\n * @param    {number} wait\n *           The number of milliseconds to wait after the last invocation.\n *\n * @param    {boolean} [immediate]\n *           Whether or not to invoke the function immediately upon creation.\n *\n * @param    {Object} [context=window]\n *           The \"context\" in which the debounced function should debounce. For\n *           example, if this function should be tied to a Video.js player,\n *           the player can be passed here. Alternatively, defaults to the\n *           global `window` object.\n *\n * @return   {Function}\n *           A debounced function.\n */\nconst debounce = function (func, wait, immediate, context = window$1) {\n  let timeout;\n  const cancel = () => {\n    context.clearTimeout(timeout);\n    timeout = null;\n  };\n\n  /* eslint-disable consistent-this */\n  const debounced = function () {\n    const self = this;\n    const args = arguments;\n    let later = function () {\n      timeout = null;\n      later = null;\n      if (!immediate) {\n        func.apply(self, args);\n      }\n    };\n    if (!timeout && immediate) {\n      func.apply(self, args);\n    }\n    context.clearTimeout(timeout);\n    timeout = context.setTimeout(later, wait);\n  };\n  /* eslint-enable consistent-this */\n\n  debounced.cancel = cancel;\n  return debounced;\n};\n\nvar Fn = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  UPDATE_REFRESH_INTERVAL: UPDATE_REFRESH_INTERVAL,\n  bind_: bind_,\n  throttle: throttle,\n  debounce: debounce\n});\n\n/**\n * @file src/js/event-target.js\n */\nlet EVENT_MAP;\n\n/**\n * `EventTarget` is a class that can have the same API as the DOM `EventTarget`. It\n * adds shorthand functions that wrap around lengthy functions. For example:\n * the `on` function is a wrapper around `addEventListener`.\n *\n * @see [EventTarget Spec]{@link https://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget}\n * @class EventTarget\n */\nclass EventTarget$2 {\n  /**\n   * Adds an `event listener` to an instance of an `EventTarget`. An `event listener` is a\n   * function that will get called when an event with a certain name gets triggered.\n   *\n   * @param {string|string[]} type\n   *        An event name or an array of event names.\n   *\n   * @param {Function} fn\n   *        The function to call with `EventTarget`s\n   */\n  on(type, fn) {\n    // Remove the addEventListener alias before calling Events.on\n    // so we don't get into an infinite type loop\n    const ael = this.addEventListener;\n    this.addEventListener = () => {};\n    on(this, type, fn);\n    this.addEventListener = ael;\n  }\n  /**\n   * Removes an `event listener` for a specific event from an instance of `EventTarget`.\n   * This makes it so that the `event listener` will no longer get called when the\n   * named event happens.\n   *\n   * @param {string|string[]} type\n   *        An event name or an array of event names.\n   *\n   * @param {Function} fn\n   *        The function to remove.\n   */\n  off(type, fn) {\n    off(this, type, fn);\n  }\n  /**\n   * This function will add an `event listener` that gets triggered only once. After the\n   * first trigger it will get removed. This is like adding an `event listener`\n   * with {@link EventTarget#on} that calls {@link EventTarget#off} on itself.\n   *\n   * @param {string|string[]} type\n   *        An event name or an array of event names.\n   *\n   * @param {Function} fn\n   *        The function to be called once for each event name.\n   */\n  one(type, fn) {\n    // Remove the addEventListener aliasing Events.on\n    // so we don't get into an infinite type loop\n    const ael = this.addEventListener;\n    this.addEventListener = () => {};\n    one(this, type, fn);\n    this.addEventListener = ael;\n  }\n  /**\n   * This function will add an `event listener` that gets triggered only once and is\n   * removed from all events. This is like adding an array of `event listener`s\n   * with {@link EventTarget#on} that calls {@link EventTarget#off} on all events the\n   * first time it is triggered.\n   *\n   * @param {string|string[]} type\n   *        An event name or an array of event names.\n   *\n   * @param {Function} fn\n   *        The function to be called once for each event name.\n   */\n  any(type, fn) {\n    // Remove the addEventListener aliasing Events.on\n    // so we don't get into an infinite type loop\n    const ael = this.addEventListener;\n    this.addEventListener = () => {};\n    any(this, type, fn);\n    this.addEventListener = ael;\n  }\n  /**\n   * This function causes an event to happen. This will then cause any `event listeners`\n   * that are waiting for that event, to get called. If there are no `event listeners`\n   * for an event then nothing will happen.\n   *\n   * If the name of the `Event` that is being triggered is in `EventTarget.allowedEvents_`.\n   * Trigger will also call the `on` + `uppercaseEventName` function.\n   *\n   * Example:\n   * 'click' is in `EventTarget.allowedEvents_`, so, trigger will attempt to call\n   * `onClick` if it exists.\n   *\n   * @param {string|EventTarget~Event|Object} event\n   *        The name of the event, an `Event`, or an object with a key of type set to\n   *        an event name.\n   */\n  trigger(event) {\n    const type = event.type || event;\n\n    // deprecation\n    // In a future version we should default target to `this`\n    // similar to how we default the target to `elem` in\n    // `Events.trigger`. Right now the default `target` will be\n    // `document` due to the `Event.fixEvent` call.\n    if (typeof event === 'string') {\n      event = {\n        type\n      };\n    }\n    event = fixEvent(event);\n    if (this.allowedEvents_[type] && this['on' + type]) {\n      this['on' + type](event);\n    }\n    trigger(this, event);\n  }\n  queueTrigger(event) {\n    // only set up EVENT_MAP if it'll be used\n    if (!EVENT_MAP) {\n      EVENT_MAP = new Map();\n    }\n    const type = event.type || event;\n    let map = EVENT_MAP.get(this);\n    if (!map) {\n      map = new Map();\n      EVENT_MAP.set(this, map);\n    }\n    const oldTimeout = map.get(type);\n    map.delete(type);\n    window$1.clearTimeout(oldTimeout);\n    const timeout = window$1.setTimeout(() => {\n      map.delete(type);\n      // if we cleared out all timeouts for the current target, delete its map\n      if (map.size === 0) {\n        map = null;\n        EVENT_MAP.delete(this);\n      }\n      this.trigger(event);\n    }, 0);\n    map.set(type, timeout);\n  }\n}\n\n/**\n * A Custom DOM event.\n *\n * @typedef {CustomEvent} Event\n * @see [Properties]{@link https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent}\n */\n\n/**\n * All event listeners should follow the following format.\n *\n * @callback EventListener\n * @this {EventTarget}\n *\n * @param {Event} event\n *        the event that triggered this function\n *\n * @param {Object} [hash]\n *        hash of data sent during the event\n */\n\n/**\n * An object containing event names as keys and booleans as values.\n *\n * > NOTE: If an event name is set to a true value here {@link EventTarget#trigger}\n *         will have extra functionality. See that function for more information.\n *\n * @property EventTarget.prototype.allowedEvents_\n * @protected\n */\nEventTarget$2.prototype.allowedEvents_ = {};\n\n/**\n * An alias of {@link EventTarget#on}. Allows `EventTarget` to mimic\n * the standard DOM API.\n *\n * @function\n * @see {@link EventTarget#on}\n */\nEventTarget$2.prototype.addEventListener = EventTarget$2.prototype.on;\n\n/**\n * An alias of {@link EventTarget#off}. Allows `EventTarget` to mimic\n * the standard DOM API.\n *\n * @function\n * @see {@link EventTarget#off}\n */\nEventTarget$2.prototype.removeEventListener = EventTarget$2.prototype.off;\n\n/**\n * An alias of {@link EventTarget#trigger}. Allows `EventTarget` to mimic\n * the standard DOM API.\n *\n * @function\n * @see {@link EventTarget#trigger}\n */\nEventTarget$2.prototype.dispatchEvent = EventTarget$2.prototype.trigger;\n\n/**\n * @file mixins/evented.js\n * @module evented\n */\nconst objName = obj => {\n  if (typeof obj.name === 'function') {\n    return obj.name();\n  }\n  if (typeof obj.name === 'string') {\n    return obj.name;\n  }\n  if (obj.name_) {\n    return obj.name_;\n  }\n  if (obj.constructor && obj.constructor.name) {\n    return obj.constructor.name;\n  }\n  return typeof obj;\n};\n\n/**\n * Returns whether or not an object has had the evented mixin applied.\n *\n * @param  {Object} object\n *         An object to test.\n *\n * @return {boolean}\n *         Whether or not the object appears to be evented.\n */\nconst isEvented = object => object instanceof EventTarget$2 || !!object.eventBusEl_ && ['on', 'one', 'off', 'trigger'].every(k => typeof object[k] === 'function');\n\n/**\n * Adds a callback to run after the evented mixin applied.\n *\n * @param  {Object} target\n *         An object to Add\n * @param  {Function} callback\n *         The callback to run.\n */\nconst addEventedCallback = (target, callback) => {\n  if (isEvented(target)) {\n    callback();\n  } else {\n    if (!target.eventedCallbacks) {\n      target.eventedCallbacks = [];\n    }\n    target.eventedCallbacks.push(callback);\n  }\n};\n\n/**\n * Whether a value is a valid event type - non-empty string or array.\n *\n * @private\n * @param  {string|Array} type\n *         The type value to test.\n *\n * @return {boolean}\n *         Whether or not the type is a valid event type.\n */\nconst isValidEventType = type =>\n// The regex here verifies that the `type` contains at least one non-\n// whitespace character.\ntypeof type === 'string' && /\\S/.test(type) || Array.isArray(type) && !!type.length;\n\n/**\n * Validates a value to determine if it is a valid event target. Throws if not.\n *\n * @private\n * @throws {Error}\n *         If the target does not appear to be a valid event target.\n *\n * @param  {Object} target\n *         The object to test.\n *\n * @param  {Object} obj\n *         The evented object we are validating for\n *\n * @param  {string} fnName\n *         The name of the evented mixin function that called this.\n */\nconst validateTarget = (target, obj, fnName) => {\n  if (!target || !target.nodeName && !isEvented(target)) {\n    throw new Error(`Invalid target for ${objName(obj)}#${fnName}; must be a DOM node or evented object.`);\n  }\n};\n\n/**\n * Validates a value to determine if it is a valid event target. Throws if not.\n *\n * @private\n * @throws {Error}\n *         If the type does not appear to be a valid event type.\n *\n * @param  {string|Array} type\n *         The type to test.\n *\n * @param  {Object} obj\n*         The evented object we are validating for\n *\n * @param  {string} fnName\n *         The name of the evented mixin function that called this.\n */\nconst validateEventType = (type, obj, fnName) => {\n  if (!isValidEventType(type)) {\n    throw new Error(`Invalid event type for ${objName(obj)}#${fnName}; must be a non-empty string or array.`);\n  }\n};\n\n/**\n * Validates a value to determine if it is a valid listener. Throws if not.\n *\n * @private\n * @throws {Error}\n *         If the listener is not a function.\n *\n * @param  {Function} listener\n *         The listener to test.\n *\n * @param  {Object} obj\n *         The evented object we are validating for\n *\n * @param  {string} fnName\n *         The name of the evented mixin function that called this.\n */\nconst validateListener = (listener, obj, fnName) => {\n  if (typeof listener !== 'function') {\n    throw new Error(`Invalid listener for ${objName(obj)}#${fnName}; must be a function.`);\n  }\n};\n\n/**\n * Takes an array of arguments given to `on()` or `one()`, validates them, and\n * normalizes them into an object.\n *\n * @private\n * @param  {Object} self\n *         The evented object on which `on()` or `one()` was called. This\n *         object will be bound as the `this` value for the listener.\n *\n * @param  {Array} args\n *         An array of arguments passed to `on()` or `one()`.\n *\n * @param  {string} fnName\n *         The name of the evented mixin function that called this.\n *\n * @return {Object}\n *         An object containing useful values for `on()` or `one()` calls.\n */\nconst normalizeListenArgs = (self, args, fnName) => {\n  // If the number of arguments is less than 3, the target is always the\n  // evented object itself.\n  const isTargetingSelf = args.length < 3 || args[0] === self || args[0] === self.eventBusEl_;\n  let target;\n  let type;\n  let listener;\n  if (isTargetingSelf) {\n    target = self.eventBusEl_;\n\n    // Deal with cases where we got 3 arguments, but we are still listening to\n    // the evented object itself.\n    if (args.length >= 3) {\n      args.shift();\n    }\n    [type, listener] = args;\n  } else {\n    [target, type, listener] = args;\n  }\n  validateTarget(target, self, fnName);\n  validateEventType(type, self, fnName);\n  validateListener(listener, self, fnName);\n  listener = bind_(self, listener);\n  return {\n    isTargetingSelf,\n    target,\n    type,\n    listener\n  };\n};\n\n/**\n * Adds the listener to the event type(s) on the target, normalizing for\n * the type of target.\n *\n * @private\n * @param  {Element|Object} target\n *         A DOM node or evented object.\n *\n * @param  {string} method\n *         The event binding method to use (\"on\" or \"one\").\n *\n * @param  {string|Array} type\n *         One or more event type(s).\n *\n * @param  {Function} listener\n *         A listener function.\n */\nconst listen = (target, method, type, listener) => {\n  validateTarget(target, target, method);\n  if (target.nodeName) {\n    Events[method](target, type, listener);\n  } else {\n    target[method](type, listener);\n  }\n};\n\n/**\n * Contains methods that provide event capabilities to an object which is passed\n * to {@link module:evented|evented}.\n *\n * @mixin EventedMixin\n */\nconst EventedMixin = {\n  /**\n   * Add a listener to an event (or events) on this object or another evented\n   * object.\n   *\n   * @param  {string|Array|Element|Object} targetOrType\n   *         If this is a string or array, it represents the event type(s)\n   *         that will trigger the listener.\n   *\n   *         Another evented object can be passed here instead, which will\n   *         cause the listener to listen for events on _that_ object.\n   *\n   *         In either case, the listener's `this` value will be bound to\n   *         this object.\n   *\n   * @param  {string|Array|Function} typeOrListener\n   *         If the first argument was a string or array, this should be the\n   *         listener function. Otherwise, this is a string or array of event\n   *         type(s).\n   *\n   * @param  {Function} [listener]\n   *         If the first argument was another evented object, this will be\n   *         the listener function.\n   */\n  on(...args) {\n    const {\n      isTargetingSelf,\n      target,\n      type,\n      listener\n    } = normalizeListenArgs(this, args, 'on');\n    listen(target, 'on', type, listener);\n\n    // If this object is listening to another evented object.\n    if (!isTargetingSelf) {\n      // If this object is disposed, remove the listener.\n      const removeListenerOnDispose = () => this.off(target, type, listener);\n\n      // Use the same function ID as the listener so we can remove it later it\n      // using the ID of the original listener.\n      removeListenerOnDispose.guid = listener.guid;\n\n      // Add a listener to the target's dispose event as well. This ensures\n      // that if the target is disposed BEFORE this object, we remove the\n      // removal listener that was just added. Otherwise, we create a memory leak.\n      const removeRemoverOnTargetDispose = () => this.off('dispose', removeListenerOnDispose);\n\n      // Use the same function ID as the listener so we can remove it later\n      // it using the ID of the original listener.\n      removeRemoverOnTargetDispose.guid = listener.guid;\n      listen(this, 'on', 'dispose', removeListenerOnDispose);\n      listen(target, 'on', 'dispose', removeRemoverOnTargetDispose);\n    }\n  },\n  /**\n   * Add a listener to an event (or events) on this object or another evented\n   * object. The listener will be called once per event and then removed.\n   *\n   * @param  {string|Array|Element|Object} targetOrType\n   *         If this is a string or array, it represents the event type(s)\n   *         that will trigger the listener.\n   *\n   *         Another evented object can be passed here instead, which will\n   *         cause the listener to listen for events on _that_ object.\n   *\n   *         In either case, the listener's `this` value will be bound to\n   *         this object.\n   *\n   * @param  {string|Array|Function} typeOrListener\n   *         If the first argument was a string or array, this should be the\n   *         listener function. Otherwise, this is a string or array of event\n   *         type(s).\n   *\n   * @param  {Function} [listener]\n   *         If the first argument was another evented object, this will be\n   *         the listener function.\n   */\n  one(...args) {\n    const {\n      isTargetingSelf,\n      target,\n      type,\n      listener\n    } = normalizeListenArgs(this, args, 'one');\n\n    // Targeting this evented object.\n    if (isTargetingSelf) {\n      listen(target, 'one', type, listener);\n\n      // Targeting another evented object.\n    } else {\n      // TODO: This wrapper is incorrect! It should only\n      //       remove the wrapper for the event type that called it.\n      //       Instead all listeners are removed on the first trigger!\n      //       see https://github.com/videojs/video.js/issues/5962\n      const wrapper = (...largs) => {\n        this.off(target, type, wrapper);\n        listener.apply(null, largs);\n      };\n\n      // Use the same function ID as the listener so we can remove it later\n      // it using the ID of the original listener.\n      wrapper.guid = listener.guid;\n      listen(target, 'one', type, wrapper);\n    }\n  },\n  /**\n   * Add a listener to an event (or events) on this object or another evented\n   * object. The listener will only be called once for the first event that is triggered\n   * then removed.\n   *\n   * @param  {string|Array|Element|Object} targetOrType\n   *         If this is a string or array, it represents the event type(s)\n   *         that will trigger the listener.\n   *\n   *         Another evented object can be passed here instead, which will\n   *         cause the listener to listen for events on _that_ object.\n   *\n   *         In either case, the listener's `this` value will be bound to\n   *         this object.\n   *\n   * @param  {string|Array|Function} typeOrListener\n   *         If the first argument was a string or array, this should be the\n   *         listener function. Otherwise, this is a string or array of event\n   *         type(s).\n   *\n   * @param  {Function} [listener]\n   *         If the first argument was another evented object, this will be\n   *         the listener function.\n   */\n  any(...args) {\n    const {\n      isTargetingSelf,\n      target,\n      type,\n      listener\n    } = normalizeListenArgs(this, args, 'any');\n\n    // Targeting this evented object.\n    if (isTargetingSelf) {\n      listen(target, 'any', type, listener);\n\n      // Targeting another evented object.\n    } else {\n      const wrapper = (...largs) => {\n        this.off(target, type, wrapper);\n        listener.apply(null, largs);\n      };\n\n      // Use the same function ID as the listener so we can remove it later\n      // it using the ID of the original listener.\n      wrapper.guid = listener.guid;\n      listen(target, 'any', type, wrapper);\n    }\n  },\n  /**\n   * Removes listener(s) from event(s) on an evented object.\n   *\n   * @param  {string|Array|Element|Object} [targetOrType]\n   *         If this is a string or array, it represents the event type(s).\n   *\n   *         Another evented object can be passed here instead, in which case\n   *         ALL 3 arguments are _required_.\n   *\n   * @param  {string|Array|Function} [typeOrListener]\n   *         If the first argument was a string or array, this may be the\n   *         listener function. Otherwise, this is a string or array of event\n   *         type(s).\n   *\n   * @param  {Function} [listener]\n   *         If the first argument was another evented object, this will be\n   *         the listener function; otherwise, _all_ listeners bound to the\n   *         event type(s) will be removed.\n   */\n  off(targetOrType, typeOrListener, listener) {\n    // Targeting this evented object.\n    if (!targetOrType || isValidEventType(targetOrType)) {\n      off(this.eventBusEl_, targetOrType, typeOrListener);\n\n      // Targeting another evented object.\n    } else {\n      const target = targetOrType;\n      const type = typeOrListener;\n\n      // Fail fast and in a meaningful way!\n      validateTarget(target, this, 'off');\n      validateEventType(type, this, 'off');\n      validateListener(listener, this, 'off');\n\n      // Ensure there's at least a guid, even if the function hasn't been used\n      listener = bind_(this, listener);\n\n      // Remove the dispose listener on this evented object, which was given\n      // the same guid as the event listener in on().\n      this.off('dispose', listener);\n      if (target.nodeName) {\n        off(target, type, listener);\n        off(target, 'dispose', listener);\n      } else if (isEvented(target)) {\n        target.off(type, listener);\n        target.off('dispose', listener);\n      }\n    }\n  },\n  /**\n   * Fire an event on this evented object, causing its listeners to be called.\n   *\n   * @param   {string|Object} event\n   *          An event type or an object with a type property.\n   *\n   * @param   {Object} [hash]\n   *          An additional object to pass along to listeners.\n   *\n   * @return {boolean}\n   *          Whether or not the default behavior was prevented.\n   */\n  trigger(event, hash) {\n    validateTarget(this.eventBusEl_, this, 'trigger');\n    const type = event && typeof event !== 'string' ? event.type : event;\n    if (!isValidEventType(type)) {\n      throw new Error(`Invalid event type for ${objName(this)}#trigger; ` + 'must be a non-empty string or object with a type key that has a non-empty value.');\n    }\n    return trigger(this.eventBusEl_, event, hash);\n  }\n};\n\n/**\n * Applies {@link module:evented~EventedMixin|EventedMixin} to a target object.\n *\n * @param  {Object} target\n *         The object to which to add event methods.\n *\n * @param  {Object} [options={}]\n *         Options for customizing the mixin behavior.\n *\n * @param  {string} [options.eventBusKey]\n *         By default, adds a `eventBusEl_` DOM element to the target object,\n *         which is used as an event bus. If the target object already has a\n *         DOM element that should be used, pass its key here.\n *\n * @return {Object}\n *         The target object.\n */\nfunction evented(target, options = {}) {\n  const {\n    eventBusKey\n  } = options;\n\n  // Set or create the eventBusEl_.\n  if (eventBusKey) {\n    if (!target[eventBusKey].nodeName) {\n      throw new Error(`The eventBusKey \"${eventBusKey}\" does not refer to an element.`);\n    }\n    target.eventBusEl_ = target[eventBusKey];\n  } else {\n    target.eventBusEl_ = createEl('span', {\n      className: 'vjs-event-bus'\n    });\n  }\n  Object.assign(target, EventedMixin);\n  if (target.eventedCallbacks) {\n    target.eventedCallbacks.forEach(callback => {\n      callback();\n    });\n  }\n\n  // When any evented object is disposed, it removes all its listeners.\n  target.on('dispose', () => {\n    target.off();\n    [target, target.el_, target.eventBusEl_].forEach(function (val) {\n      if (val && DomData.has(val)) {\n        DomData.delete(val);\n      }\n    });\n    window$1.setTimeout(() => {\n      target.eventBusEl_ = null;\n    }, 0);\n  });\n  return target;\n}\n\n/**\n * @file mixins/stateful.js\n * @module stateful\n */\n\n/**\n * Contains methods that provide statefulness to an object which is passed\n * to {@link module:stateful}.\n *\n * @mixin StatefulMixin\n */\nconst StatefulMixin = {\n  /**\n   * A hash containing arbitrary keys and values representing the state of\n   * the object.\n   *\n   * @type {Object}\n   */\n  state: {},\n  /**\n   * Set the state of an object by mutating its\n   * {@link module:stateful~StatefulMixin.state|state} object in place.\n   *\n   * @fires   module:stateful~StatefulMixin#statechanged\n   * @param   {Object|Function} stateUpdates\n   *          A new set of properties to shallow-merge into the plugin state.\n   *          Can be a plain object or a function returning a plain object.\n   *\n   * @return {Object|undefined}\n   *          An object containing changes that occurred. If no changes\n   *          occurred, returns `undefined`.\n   */\n  setState(stateUpdates) {\n    // Support providing the `stateUpdates` state as a function.\n    if (typeof stateUpdates === 'function') {\n      stateUpdates = stateUpdates();\n    }\n    let changes;\n    each(stateUpdates, (value, key) => {\n      // Record the change if the value is different from what's in the\n      // current state.\n      if (this.state[key] !== value) {\n        changes = changes || {};\n        changes[key] = {\n          from: this.state[key],\n          to: value\n        };\n      }\n      this.state[key] = value;\n    });\n\n    // Only trigger \"statechange\" if there were changes AND we have a trigger\n    // function. This allows us to not require that the target object be an\n    // evented object.\n    if (changes && isEvented(this)) {\n      /**\n       * An event triggered on an object that is both\n       * {@link module:stateful|stateful} and {@link module:evented|evented}\n       * indicating that its state has changed.\n       *\n       * @event    module:stateful~StatefulMixin#statechanged\n       * @type     {Object}\n       * @property {Object} changes\n       *           A hash containing the properties that were changed and\n       *           the values they were changed `from` and `to`.\n       */\n      this.trigger({\n        changes,\n        type: 'statechanged'\n      });\n    }\n    return changes;\n  }\n};\n\n/**\n * Applies {@link module:stateful~StatefulMixin|StatefulMixin} to a target\n * object.\n *\n * If the target object is {@link module:evented|evented} and has a\n * `handleStateChanged` method, that method will be automatically bound to the\n * `statechanged` event on itself.\n *\n * @param   {Object} target\n *          The object to be made stateful.\n *\n * @param   {Object} [defaultState]\n *          A default set of properties to populate the newly-stateful object's\n *          `state` property.\n *\n * @return {Object}\n *          Returns the `target`.\n */\nfunction stateful(target, defaultState) {\n  Object.assign(target, StatefulMixin);\n\n  // This happens after the mixing-in because we need to replace the `state`\n  // added in that step.\n  target.state = Object.assign({}, target.state, defaultState);\n\n  // Auto-bind the `handleStateChanged` method of the target object if it exists.\n  if (typeof target.handleStateChanged === 'function' && isEvented(target)) {\n    target.on('statechanged', target.handleStateChanged);\n  }\n  return target;\n}\n\n/**\n * @file str.js\n * @module to-lower-case\n */\n\n/**\n * Lowercase the first letter of a string.\n *\n * @param {string} string\n *        String to be lowercased\n *\n * @return {string}\n *         The string with a lowercased first letter\n */\nconst toLowerCase = function (string) {\n  if (typeof string !== 'string') {\n    return string;\n  }\n  return string.replace(/./, w => w.toLowerCase());\n};\n\n/**\n * Uppercase the first letter of a string.\n *\n * @param {string} string\n *        String to be uppercased\n *\n * @return {string}\n *         The string with an uppercased first letter\n */\nconst toTitleCase$1 = function (string) {\n  if (typeof string !== 'string') {\n    return string;\n  }\n  return string.replace(/./, w => w.toUpperCase());\n};\n\n/**\n * Compares the TitleCase versions of the two strings for equality.\n *\n * @param {string} str1\n *        The first string to compare\n *\n * @param {string} str2\n *        The second string to compare\n *\n * @return {boolean}\n *         Whether the TitleCase versions of the strings are equal\n */\nconst titleCaseEquals = function (str1, str2) {\n  return toTitleCase$1(str1) === toTitleCase$1(str2);\n};\n\nvar Str = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  toLowerCase: toLowerCase,\n  toTitleCase: toTitleCase$1,\n  titleCaseEquals: titleCaseEquals\n});\n\n/**\n * Player Component - Base class for all UI objects\n *\n * @file component.js\n */\n\n/**\n * Base class for all UI Components.\n * Components are UI objects which represent both a javascript object and an element\n * in the DOM. They can be children of other components, and can have\n * children themselves.\n *\n * Components can also use methods from {@link EventTarget}\n */\nclass Component$1 {\n  /**\n   * A callback that is called when a component is ready. Does not have any\n   * parameters and any callback value will be ignored.\n   *\n   * @callback ReadyCallback\n   * @this Component\n   */\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('./player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of component options.\n   *\n   * @param {Object[]} [options.children]\n   *        An array of children objects to initialize this component with. Children objects have\n   *        a name property that will be used if more than one component of the same type needs to be\n   *        added.\n   *\n   * @param  {string} [options.className]\n   *         A class or space separated list of classes to add the component\n   *\n   * @param {ReadyCallback} [ready]\n   *        Function that gets called when the `Component` is ready.\n   */\n  constructor(player, options, ready) {\n    // The component might be the player itself and we can't pass `this` to super\n    if (!player && this.play) {\n      this.player_ = player = this; // eslint-disable-line\n    } else {\n      this.player_ = player;\n    }\n    this.isDisposed_ = false;\n\n    // Hold the reference to the parent component via `addChild` method\n    this.parentComponent_ = null;\n\n    // Make a copy of prototype.options_ to protect against overriding defaults\n    this.options_ = merge$1({}, this.options_);\n\n    // Updated options with supplied options\n    options = this.options_ = merge$1(this.options_, options);\n\n    // Get ID from options or options element if one is supplied\n    this.id_ = options.id || options.el && options.el.id;\n\n    // If there was no ID from the options, generate one\n    if (!this.id_) {\n      // Don't require the player ID function in the case of mock players\n      const id = player && player.id && player.id() || 'no_player';\n      this.id_ = `${id}_component_${newGUID()}`;\n    }\n    this.name_ = options.name || null;\n\n    // Create element if one wasn't provided in options\n    if (options.el) {\n      this.el_ = options.el;\n    } else if (options.createEl !== false) {\n      this.el_ = this.createEl();\n    }\n    if (options.className && this.el_) {\n      options.className.split(' ').forEach(c => this.addClass(c));\n    }\n\n    // Remove the placeholder event methods. If the component is evented, the\n    // real methods are added next\n    ['on', 'off', 'one', 'any', 'trigger'].forEach(fn => {\n      this[fn] = undefined;\n    });\n\n    // if evented is anything except false, we want to mixin in evented\n    if (options.evented !== false) {\n      // Make this an evented object and use `el_`, if available, as its event bus\n      evented(this, {\n        eventBusKey: this.el_ ? 'el_' : null\n      });\n      this.handleLanguagechange = this.handleLanguagechange.bind(this);\n      this.on(this.player_, 'languagechange', this.handleLanguagechange);\n    }\n    stateful(this, this.constructor.defaultState);\n    this.children_ = [];\n    this.childIndex_ = {};\n    this.childNameIndex_ = {};\n    this.setTimeoutIds_ = new Set();\n    this.setIntervalIds_ = new Set();\n    this.rafIds_ = new Set();\n    this.namedRafs_ = new Map();\n    this.clearingTimersOnDispose_ = false;\n\n    // Add any child components in options\n    if (options.initChildren !== false) {\n      this.initChildren();\n    }\n\n    // Don't want to trigger ready here or it will go before init is actually\n    // finished for all children that run this constructor\n    this.ready(ready);\n    if (options.reportTouchActivity !== false) {\n      this.enableTouchActivity();\n    }\n  }\n\n  // `on`, `off`, `one`, `any` and `trigger` are here so tsc includes them in definitions.\n  // They are replaced or removed in the constructor\n\n  /**\n   * Adds an `event listener` to an instance of an `EventTarget`. An `event listener` is a\n   * function that will get called when an event with a certain name gets triggered.\n   *\n   * @param {string|string[]} type\n   *        An event name or an array of event names.\n   *\n   * @param {Function} fn\n   *        The function to call with `EventTarget`s\n   */\n  on(type, fn) {}\n\n  /**\n   * Removes an `event listener` for a specific event from an instance of `EventTarget`.\n   * This makes it so that the `event listener` will no longer get called when the\n   * named event happens.\n   *\n   * @param {string|string[]} type\n   *        An event name or an array of event names.\n   *\n   * @param {Function} [fn]\n   *        The function to remove. If not specified, all listeners managed by Video.js will be removed.\n   */\n  off(type, fn) {}\n\n  /**\n   * This function will add an `event listener` that gets triggered only once. After the\n   * first trigger it will get removed. This is like adding an `event listener`\n   * with {@link EventTarget#on} that calls {@link EventTarget#off} on itself.\n   *\n   * @param {string|string[]} type\n   *        An event name or an array of event names.\n   *\n   * @param {Function} fn\n   *        The function to be called once for each event name.\n   */\n  one(type, fn) {}\n\n  /**\n   * This function will add an `event listener` that gets triggered only once and is\n   * removed from all events. This is like adding an array of `event listener`s\n   * with {@link EventTarget#on} that calls {@link EventTarget#off} on all events the\n   * first time it is triggered.\n   *\n   * @param {string|string[]} type\n   *        An event name or an array of event names.\n   *\n   * @param {Function} fn\n   *        The function to be called once for each event name.\n   */\n  any(type, fn) {}\n\n  /**\n   * This function causes an event to happen. This will then cause any `event listeners`\n   * that are waiting for that event, to get called. If there are no `event listeners`\n   * for an event then nothing will happen.\n   *\n   * If the name of the `Event` that is being triggered is in `EventTarget.allowedEvents_`.\n   * Trigger will also call the `on` + `uppercaseEventName` function.\n   *\n   * Example:\n   * 'click' is in `EventTarget.allowedEvents_`, so, trigger will attempt to call\n   * `onClick` if it exists.\n   *\n   * @param {string|Event|Object} event\n   *        The name of the event, an `Event`, or an object with a key of type set to\n   *        an event name.\n   *\n   * @param {Object} [hash]\n   *        Optionally extra argument to pass through to an event listener\n   */\n  trigger(event, hash) {}\n\n  /**\n   * Dispose of the `Component` and all child components.\n   *\n   * @fires Component#dispose\n   *\n   * @param {Object} options\n   * @param {Element} options.originalEl element with which to replace player element\n   */\n  dispose(options = {}) {\n    // Bail out if the component has already been disposed.\n    if (this.isDisposed_) {\n      return;\n    }\n    if (this.readyQueue_) {\n      this.readyQueue_.length = 0;\n    }\n\n    /**\n     * Triggered when a `Component` is disposed.\n     *\n     * @event Component#dispose\n     * @type {Event}\n     *\n     * @property {boolean} [bubbles=false]\n     *           set to false so that the dispose event does not\n     *           bubble up\n     */\n    this.trigger({\n      type: 'dispose',\n      bubbles: false\n    });\n    this.isDisposed_ = true;\n\n    // Dispose all children.\n    if (this.children_) {\n      for (let i = this.children_.length - 1; i >= 0; i--) {\n        if (this.children_[i].dispose) {\n          this.children_[i].dispose();\n        }\n      }\n    }\n\n    // Delete child references\n    this.children_ = null;\n    this.childIndex_ = null;\n    this.childNameIndex_ = null;\n    this.parentComponent_ = null;\n    if (this.el_) {\n      // Remove element from DOM\n      if (this.el_.parentNode) {\n        if (options.restoreEl) {\n          this.el_.parentNode.replaceChild(options.restoreEl, this.el_);\n        } else {\n          this.el_.parentNode.removeChild(this.el_);\n        }\n      }\n      this.el_ = null;\n    }\n\n    // remove reference to the player after disposing of the element\n    this.player_ = null;\n  }\n\n  /**\n   * Determine whether or not this component has been disposed.\n   *\n   * @return {boolean}\n   *         If the component has been disposed, will be `true`. Otherwise, `false`.\n   */\n  isDisposed() {\n    return Boolean(this.isDisposed_);\n  }\n\n  /**\n   * Return the {@link Player} that the `Component` has attached to.\n   *\n   * @return { import('./player').default }\n   *         The player that this `Component` has attached to.\n   */\n  player() {\n    return this.player_;\n  }\n\n  /**\n   * Deep merge of options objects with new options.\n   * > Note: When both `obj` and `options` contain properties whose values are objects.\n   *         The two properties get merged using {@link module:obj.merge}\n   *\n   * @param {Object} obj\n   *        The object that contains new options.\n   *\n   * @return {Object}\n   *         A new object of `this.options_` and `obj` merged together.\n   */\n  options(obj) {\n    if (!obj) {\n      return this.options_;\n    }\n    this.options_ = merge$1(this.options_, obj);\n    return this.options_;\n  }\n\n  /**\n   * Get the `Component`s DOM element\n   *\n   * @return {Element}\n   *         The DOM element for this `Component`.\n   */\n  el() {\n    return this.el_;\n  }\n\n  /**\n   * Create the `Component`s DOM element.\n   *\n   * @param {string} [tagName]\n   *        Element's DOM node type. e.g. 'div'\n   *\n   * @param {Object} [properties]\n   *        An object of properties that should be set.\n   *\n   * @param {Object} [attributes]\n   *        An object of attributes that should be set.\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n  createEl(tagName, properties, attributes) {\n    return createEl(tagName, properties, attributes);\n  }\n\n  /**\n   * Localize a string given the string in english.\n   *\n   * If tokens are provided, it'll try and run a simple token replacement on the provided string.\n   * The tokens it looks for look like `{1}` with the index being 1-indexed into the tokens array.\n   *\n   * If a `defaultValue` is provided, it'll use that over `string`,\n   * if a value isn't found in provided language files.\n   * This is useful if you want to have a descriptive key for token replacement\n   * but have a succinct localized string and not require `en.json` to be included.\n   *\n   * Currently, it is used for the progress bar timing.\n   * ```js\n   * {\n   *   \"progress bar timing: currentTime={1} duration={2}\": \"{1} of {2}\"\n   * }\n   * ```\n   * It is then used like so:\n   * ```js\n   * this.localize('progress bar timing: currentTime={1} duration{2}',\n   *               [this.player_.currentTime(), this.player_.duration()],\n   *               '{1} of {2}');\n   * ```\n   *\n   * Which outputs something like: `01:23 of 24:56`.\n   *\n   *\n   * @param {string} string\n   *        The string to localize and the key to lookup in the language files.\n   * @param {string[]} [tokens]\n   *        If the current item has token replacements, provide the tokens here.\n   * @param {string} [defaultValue]\n   *        Defaults to `string`. Can be a default value to use for token replacement\n   *        if the lookup key is needed to be separate.\n   *\n   * @return {string}\n   *         The localized string or if no localization exists the english string.\n   */\n  localize(string, tokens, defaultValue = string) {\n    const code = this.player_.language && this.player_.language();\n    const languages = this.player_.languages && this.player_.languages();\n    const language = languages && languages[code];\n    const primaryCode = code && code.split('-')[0];\n    const primaryLang = languages && languages[primaryCode];\n    let localizedString = defaultValue;\n    if (language && language[string]) {\n      localizedString = language[string];\n    } else if (primaryLang && primaryLang[string]) {\n      localizedString = primaryLang[string];\n    }\n    if (tokens) {\n      localizedString = localizedString.replace(/\\{(\\d+)\\}/g, function (match, index) {\n        const value = tokens[index - 1];\n        let ret = value;\n        if (typeof value === 'undefined') {\n          ret = match;\n        }\n        return ret;\n      });\n    }\n    return localizedString;\n  }\n\n  /**\n   * Handles language change for the player in components. Should be overridden by sub-components.\n   *\n   * @abstract\n   */\n  handleLanguagechange() {}\n\n  /**\n   * Return the `Component`s DOM element. This is where children get inserted.\n   * This will usually be the the same as the element returned in {@link Component#el}.\n   *\n   * @return {Element}\n   *         The content element for this `Component`.\n   */\n  contentEl() {\n    return this.contentEl_ || this.el_;\n  }\n\n  /**\n   * Get this `Component`s ID\n   *\n   * @return {string}\n   *         The id of this `Component`\n   */\n  id() {\n    return this.id_;\n  }\n\n  /**\n   * Get the `Component`s name. The name gets used to reference the `Component`\n   * and is set during registration.\n   *\n   * @return {string}\n   *         The name of this `Component`.\n   */\n  name() {\n    return this.name_;\n  }\n\n  /**\n   * Get an array of all child components\n   *\n   * @return {Array}\n   *         The children\n   */\n  children() {\n    return this.children_;\n  }\n\n  /**\n   * Returns the child `Component` with the given `id`.\n   *\n   * @param {string} id\n   *        The id of the child `Component` to get.\n   *\n   * @return {Component|undefined}\n   *         The child `Component` with the given `id` or undefined.\n   */\n  getChildById(id) {\n    return this.childIndex_[id];\n  }\n\n  /**\n   * Returns the child `Component` with the given `name`.\n   *\n   * @param {string} name\n   *        The name of the child `Component` to get.\n   *\n   * @return {Component|undefined}\n   *         The child `Component` with the given `name` or undefined.\n   */\n  getChild(name) {\n    if (!name) {\n      return;\n    }\n    return this.childNameIndex_[name];\n  }\n\n  /**\n   * Returns the descendant `Component` following the givent\n   * descendant `names`. For instance ['foo', 'bar', 'baz'] would\n   * try to get 'foo' on the current component, 'bar' on the 'foo'\n   * component and 'baz' on the 'bar' component and return undefined\n   * if any of those don't exist.\n   *\n   * @param {...string[]|...string} names\n   *        The name of the child `Component` to get.\n   *\n   * @return {Component|undefined}\n   *         The descendant `Component` following the given descendant\n   *         `names` or undefined.\n   */\n  getDescendant(...names) {\n    // flatten array argument into the main array\n    names = names.reduce((acc, n) => acc.concat(n), []);\n    let currentChild = this;\n    for (let i = 0; i < names.length; i++) {\n      currentChild = currentChild.getChild(names[i]);\n      if (!currentChild || !currentChild.getChild) {\n        return;\n      }\n    }\n    return currentChild;\n  }\n\n  /**\n   * Adds an SVG icon element to another element or component.\n   *\n   * @param {string} iconName\n   *        The name of icon. A list of all the icon names can be found at 'sandbox/svg-icons.html'\n   *\n   * @param {Element} [el=this.el()]\n   *        Element to set the title on. Defaults to the current Component's element.\n   *\n   * @return {Element}\n   *        The newly created icon element.\n   */\n  setIcon(iconName, el = this.el()) {\n    // TODO: In v9 of video.js, we will want to remove font icons entirely.\n    // This means this check, as well as the others throughout the code, and\n    // the unecessary CSS for font icons, will need to be removed.\n    // See https://github.com/videojs/video.js/pull/8260 as to which components\n    // need updating.\n    if (!this.player_.options_.experimentalSvgIcons) {\n      return;\n    }\n    const xmlnsURL = 'http://www.w3.org/2000/svg';\n\n    // The below creates an element in the format of:\n    // <span><svg><use>....</use></svg></span>\n    const iconContainer = createEl('span', {\n      className: 'vjs-icon-placeholder vjs-svg-icon'\n    }, {\n      'aria-hidden': 'true'\n    });\n    const svgEl = document.createElementNS(xmlnsURL, 'svg');\n    svgEl.setAttributeNS(null, 'viewBox', '0 0 512 512');\n    const useEl = document.createElementNS(xmlnsURL, 'use');\n    svgEl.appendChild(useEl);\n    useEl.setAttributeNS(null, 'href', `#vjs-icon-${iconName}`);\n    iconContainer.appendChild(svgEl);\n\n    // Replace a pre-existing icon if one exists.\n    if (this.iconIsSet_) {\n      el.replaceChild(iconContainer, el.querySelector('.vjs-icon-placeholder'));\n    } else {\n      el.appendChild(iconContainer);\n    }\n    this.iconIsSet_ = true;\n    return iconContainer;\n  }\n\n  /**\n   * Add a child `Component` inside the current `Component`.\n   *\n   * @param {string|Component} child\n   *        The name or instance of a child to add.\n   *\n   * @param {Object} [options={}]\n   *        The key/value store of options that will get passed to children of\n   *        the child.\n   *\n   * @param {number} [index=this.children_.length]\n   *        The index to attempt to add a child into.\n   *\n   *\n   * @return {Component}\n   *         The `Component` that gets added as a child. When using a string the\n   *         `Component` will get created by this process.\n   */\n  addChild(child, options = {}, index = this.children_.length) {\n    let component;\n    let componentName;\n\n    // If child is a string, create component with options\n    if (typeof child === 'string') {\n      componentName = toTitleCase$1(child);\n      const componentClassName = options.componentClass || componentName;\n\n      // Set name through options\n      options.name = componentName;\n\n      // Create a new object & element for this controls set\n      // If there's no .player_, this is a player\n      const ComponentClass = Component$1.getComponent(componentClassName);\n      if (!ComponentClass) {\n        throw new Error(`Component ${componentClassName} does not exist`);\n      }\n\n      // data stored directly on the videojs object may be\n      // misidentified as a component to retain\n      // backwards-compatibility with 4.x. check to make sure the\n      // component class can be instantiated.\n      if (typeof ComponentClass !== 'function') {\n        return null;\n      }\n      component = new ComponentClass(this.player_ || this, options);\n\n      // child is a component instance\n    } else {\n      component = child;\n    }\n    if (component.parentComponent_) {\n      component.parentComponent_.removeChild(component);\n    }\n    this.children_.splice(index, 0, component);\n    component.parentComponent_ = this;\n    if (typeof component.id === 'function') {\n      this.childIndex_[component.id()] = component;\n    }\n\n    // If a name wasn't used to create the component, check if we can use the\n    // name function of the component\n    componentName = componentName || component.name && toTitleCase$1(component.name());\n    if (componentName) {\n      this.childNameIndex_[componentName] = component;\n      this.childNameIndex_[toLowerCase(componentName)] = component;\n    }\n\n    // Add the UI object's element to the container div (box)\n    // Having an element is not required\n    if (typeof component.el === 'function' && component.el()) {\n      // If inserting before a component, insert before that component's element\n      let refNode = null;\n      if (this.children_[index + 1]) {\n        // Most children are components, but the video tech is an HTML element\n        if (this.children_[index + 1].el_) {\n          refNode = this.children_[index + 1].el_;\n        } else if (isEl(this.children_[index + 1])) {\n          refNode = this.children_[index + 1];\n        }\n      }\n      this.contentEl().insertBefore(component.el(), refNode);\n    }\n\n    // Return so it can stored on parent object if desired.\n    return component;\n  }\n\n  /**\n   * Remove a child `Component` from this `Component`s list of children. Also removes\n   * the child `Component`s element from this `Component`s element.\n   *\n   * @param {Component} component\n   *        The child `Component` to remove.\n   */\n  removeChild(component) {\n    if (typeof component === 'string') {\n      component = this.getChild(component);\n    }\n    if (!component || !this.children_) {\n      return;\n    }\n    let childFound = false;\n    for (let i = this.children_.length - 1; i >= 0; i--) {\n      if (this.children_[i] === component) {\n        childFound = true;\n        this.children_.splice(i, 1);\n        break;\n      }\n    }\n    if (!childFound) {\n      return;\n    }\n    component.parentComponent_ = null;\n    this.childIndex_[component.id()] = null;\n    this.childNameIndex_[toTitleCase$1(component.name())] = null;\n    this.childNameIndex_[toLowerCase(component.name())] = null;\n    const compEl = component.el();\n    if (compEl && compEl.parentNode === this.contentEl()) {\n      this.contentEl().removeChild(component.el());\n    }\n  }\n\n  /**\n   * Add and initialize default child `Component`s based upon options.\n   */\n  initChildren() {\n    const children = this.options_.children;\n    if (children) {\n      // `this` is `parent`\n      const parentOptions = this.options_;\n      const handleAdd = child => {\n        const name = child.name;\n        let opts = child.opts;\n\n        // Allow options for children to be set at the parent options\n        // e.g. videojs(id, { controlBar: false });\n        // instead of videojs(id, { children: { controlBar: false });\n        if (parentOptions[name] !== undefined) {\n          opts = parentOptions[name];\n        }\n\n        // Allow for disabling default components\n        // e.g. options['children']['posterImage'] = false\n        if (opts === false) {\n          return;\n        }\n\n        // Allow options to be passed as a simple boolean if no configuration\n        // is necessary.\n        if (opts === true) {\n          opts = {};\n        }\n\n        // We also want to pass the original player options\n        // to each component as well so they don't need to\n        // reach back into the player for options later.\n        opts.playerOptions = this.options_.playerOptions;\n\n        // Create and add the child component.\n        // Add a direct reference to the child by name on the parent instance.\n        // If two of the same component are used, different names should be supplied\n        // for each\n        const newChild = this.addChild(name, opts);\n        if (newChild) {\n          this[name] = newChild;\n        }\n      };\n\n      // Allow for an array of children details to passed in the options\n      let workingChildren;\n      const Tech = Component$1.getComponent('Tech');\n      if (Array.isArray(children)) {\n        workingChildren = children;\n      } else {\n        workingChildren = Object.keys(children);\n      }\n      workingChildren\n      // children that are in this.options_ but also in workingChildren  would\n      // give us extra children we do not want. So, we want to filter them out.\n      .concat(Object.keys(this.options_).filter(function (child) {\n        return !workingChildren.some(function (wchild) {\n          if (typeof wchild === 'string') {\n            return child === wchild;\n          }\n          return child === wchild.name;\n        });\n      })).map(child => {\n        let name;\n        let opts;\n        if (typeof child === 'string') {\n          name = child;\n          opts = children[name] || this.options_[name] || {};\n        } else {\n          name = child.name;\n          opts = child;\n        }\n        return {\n          name,\n          opts\n        };\n      }).filter(child => {\n        // we have to make sure that child.name isn't in the techOrder since\n        // techs are registered as Components but can't aren't compatible\n        // See https://github.com/videojs/video.js/issues/2772\n        const c = Component$1.getComponent(child.opts.componentClass || toTitleCase$1(child.name));\n        return c && !Tech.isTech(c);\n      }).forEach(handleAdd);\n    }\n  }\n\n  /**\n   * Builds the default DOM class name. Should be overridden by sub-components.\n   *\n   * @return {string}\n   *         The DOM class name for this object.\n   *\n   * @abstract\n   */\n  buildCSSClass() {\n    // Child classes can include a function that does:\n    // return 'CLASS NAME' + this._super();\n    return '';\n  }\n\n  /**\n   * Bind a listener to the component's ready state.\n   * Different from event listeners in that if the ready event has already happened\n   * it will trigger the function immediately.\n   *\n   * @param {ReadyCallback} fn\n   *        Function that gets called when the `Component` is ready.\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   */\n  ready(fn, sync = false) {\n    if (!fn) {\n      return;\n    }\n    if (!this.isReady_) {\n      this.readyQueue_ = this.readyQueue_ || [];\n      this.readyQueue_.push(fn);\n      return;\n    }\n    if (sync) {\n      fn.call(this);\n    } else {\n      // Call the function asynchronously by default for consistency\n      this.setTimeout(fn, 1);\n    }\n  }\n\n  /**\n   * Trigger all the ready listeners for this `Component`.\n   *\n   * @fires Component#ready\n   */\n  triggerReady() {\n    this.isReady_ = true;\n\n    // Ensure ready is triggered asynchronously\n    this.setTimeout(function () {\n      const readyQueue = this.readyQueue_;\n\n      // Reset Ready Queue\n      this.readyQueue_ = [];\n      if (readyQueue && readyQueue.length > 0) {\n        readyQueue.forEach(function (fn) {\n          fn.call(this);\n        }, this);\n      }\n\n      // Allow for using event listeners also\n      /**\n       * Triggered when a `Component` is ready.\n       *\n       * @event Component#ready\n       * @type {Event}\n       */\n      this.trigger('ready');\n    }, 1);\n  }\n\n  /**\n   * Find a single DOM element matching a `selector`. This can be within the `Component`s\n   * `contentEl()` or another custom context.\n   *\n   * @param {string} selector\n   *        A valid CSS selector, which will be passed to `querySelector`.\n   *\n   * @param {Element|string} [context=this.contentEl()]\n   *        A DOM element within which to query. Can also be a selector string in\n   *        which case the first matching element will get used as context. If\n   *        missing `this.contentEl()` gets used. If  `this.contentEl()` returns\n   *        nothing it falls back to `document`.\n   *\n   * @return {Element|null}\n   *         the dom element that was found, or null\n   *\n   * @see [Information on CSS Selectors](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors)\n   */\n  $(selector, context) {\n    return $(selector, context || this.contentEl());\n  }\n\n  /**\n   * Finds all DOM element matching a `selector`. This can be within the `Component`s\n   * `contentEl()` or another custom context.\n   *\n   * @param {string} selector\n   *        A valid CSS selector, which will be passed to `querySelectorAll`.\n   *\n   * @param {Element|string} [context=this.contentEl()]\n   *        A DOM element within which to query. Can also be a selector string in\n   *        which case the first matching element will get used as context. If\n   *        missing `this.contentEl()` gets used. If  `this.contentEl()` returns\n   *        nothing it falls back to `document`.\n   *\n   * @return {NodeList}\n   *         a list of dom elements that were found\n   *\n   * @see [Information on CSS Selectors](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors)\n   */\n  $$(selector, context) {\n    return $$(selector, context || this.contentEl());\n  }\n\n  /**\n   * Check if a component's element has a CSS class name.\n   *\n   * @param {string} classToCheck\n   *        CSS class name to check.\n   *\n   * @return {boolean}\n   *         - True if the `Component` has the class.\n   *         - False if the `Component` does not have the class`\n   */\n  hasClass(classToCheck) {\n    return hasClass(this.el_, classToCheck);\n  }\n\n  /**\n   * Add a CSS class name to the `Component`s element.\n   *\n   * @param {...string} classesToAdd\n   *        One or more CSS class name to add.\n   */\n  addClass(...classesToAdd) {\n    addClass(this.el_, ...classesToAdd);\n  }\n\n  /**\n   * Remove a CSS class name from the `Component`s element.\n   *\n   * @param {...string} classesToRemove\n   *        One or more CSS class name to remove.\n   */\n  removeClass(...classesToRemove) {\n    removeClass(this.el_, ...classesToRemove);\n  }\n\n  /**\n   * Add or remove a CSS class name from the component's element.\n   * - `classToToggle` gets added when {@link Component#hasClass} would return false.\n   * - `classToToggle` gets removed when {@link Component#hasClass} would return true.\n   *\n   * @param  {string} classToToggle\n   *         The class to add or remove based on (@link Component#hasClass}\n   *\n   * @param  {boolean|Dom~predicate} [predicate]\n   *         An {@link Dom~predicate} function or a boolean\n   */\n  toggleClass(classToToggle, predicate) {\n    toggleClass(this.el_, classToToggle, predicate);\n  }\n\n  /**\n   * Show the `Component`s element if it is hidden by removing the\n   * 'vjs-hidden' class name from it.\n   */\n  show() {\n    this.removeClass('vjs-hidden');\n  }\n\n  /**\n   * Hide the `Component`s element if it is currently showing by adding the\n   * 'vjs-hidden` class name to it.\n   */\n  hide() {\n    this.addClass('vjs-hidden');\n  }\n\n  /**\n   * Lock a `Component`s element in its visible state by adding the 'vjs-lock-showing'\n   * class name to it. Used during fadeIn/fadeOut.\n   *\n   * @private\n   */\n  lockShowing() {\n    this.addClass('vjs-lock-showing');\n  }\n\n  /**\n   * Unlock a `Component`s element from its visible state by removing the 'vjs-lock-showing'\n   * class name from it. Used during fadeIn/fadeOut.\n   *\n   * @private\n   */\n  unlockShowing() {\n    this.removeClass('vjs-lock-showing');\n  }\n\n  /**\n   * Get the value of an attribute on the `Component`s element.\n   *\n   * @param {string} attribute\n   *        Name of the attribute to get the value from.\n   *\n   * @return {string|null}\n   *         - The value of the attribute that was asked for.\n   *         - Can be an empty string on some browsers if the attribute does not exist\n   *           or has no value\n   *         - Most browsers will return null if the attribute does not exist or has\n   *           no value.\n   *\n   * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttribute}\n   */\n  getAttribute(attribute) {\n    return getAttribute(this.el_, attribute);\n  }\n\n  /**\n   * Set the value of an attribute on the `Component`'s element\n   *\n   * @param {string} attribute\n   *        Name of the attribute to set.\n   *\n   * @param {string} value\n   *        Value to set the attribute to.\n   *\n   * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute}\n   */\n  setAttribute(attribute, value) {\n    setAttribute(this.el_, attribute, value);\n  }\n\n  /**\n   * Remove an attribute from the `Component`s element.\n   *\n   * @param {string} attribute\n   *        Name of the attribute to remove.\n   *\n   * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttribute}\n   */\n  removeAttribute(attribute) {\n    removeAttribute(this.el_, attribute);\n  }\n\n  /**\n   * Get or set the width of the component based upon the CSS styles.\n   * See {@link Component#dimension} for more detailed information.\n   *\n   * @param {number|string} [num]\n   *        The width that you want to set postfixed with '%', 'px' or nothing.\n   *\n   * @param {boolean} [skipListeners]\n   *        Skip the componentresize event trigger\n   *\n   * @return {number|undefined}\n   *         The width when getting, zero if there is no width\n   */\n  width(num, skipListeners) {\n    return this.dimension('width', num, skipListeners);\n  }\n\n  /**\n   * Get or set the height of the component based upon the CSS styles.\n   * See {@link Component#dimension} for more detailed information.\n   *\n   * @param {number|string} [num]\n   *        The height that you want to set postfixed with '%', 'px' or nothing.\n   *\n   * @param {boolean} [skipListeners]\n   *        Skip the componentresize event trigger\n   *\n   * @return {number|undefined}\n   *         The height when getting, zero if there is no height\n   */\n  height(num, skipListeners) {\n    return this.dimension('height', num, skipListeners);\n  }\n\n  /**\n   * Set both the width and height of the `Component` element at the same time.\n   *\n   * @param  {number|string} width\n   *         Width to set the `Component`s element to.\n   *\n   * @param  {number|string} height\n   *         Height to set the `Component`s element to.\n   */\n  dimensions(width, height) {\n    // Skip componentresize listeners on width for optimization\n    this.width(width, true);\n    this.height(height);\n  }\n\n  /**\n   * Get or set width or height of the `Component` element. This is the shared code\n   * for the {@link Component#width} and {@link Component#height}.\n   *\n   * Things to know:\n   * - If the width or height in an number this will return the number postfixed with 'px'.\n   * - If the width/height is a percent this will return the percent postfixed with '%'\n   * - Hidden elements have a width of 0 with `window.getComputedStyle`. This function\n   *   defaults to the `Component`s `style.width` and falls back to `window.getComputedStyle`.\n   *   See [this]{@link http://www.foliotek.com/devblog/getting-the-width-of-a-hidden-element-with-jquery-using-width/}\n   *   for more information\n   * - If you want the computed style of the component, use {@link Component#currentWidth}\n   *   and {@link {Component#currentHeight}\n   *\n   * @fires Component#componentresize\n   *\n   * @param {string} widthOrHeight\n   8        'width' or 'height'\n   *\n   * @param  {number|string} [num]\n   8         New dimension\n   *\n   * @param  {boolean} [skipListeners]\n   *         Skip componentresize event trigger\n   *\n   * @return {number|undefined}\n   *         The dimension when getting or 0 if unset\n   */\n  dimension(widthOrHeight, num, skipListeners) {\n    if (num !== undefined) {\n      // Set to zero if null or literally NaN (NaN !== NaN)\n      if (num === null || num !== num) {\n        num = 0;\n      }\n\n      // Check if using css width/height (% or px) and adjust\n      if (('' + num).indexOf('%') !== -1 || ('' + num).indexOf('px') !== -1) {\n        this.el_.style[widthOrHeight] = num;\n      } else if (num === 'auto') {\n        this.el_.style[widthOrHeight] = '';\n      } else {\n        this.el_.style[widthOrHeight] = num + 'px';\n      }\n\n      // skipListeners allows us to avoid triggering the resize event when setting both width and height\n      if (!skipListeners) {\n        /**\n         * Triggered when a component is resized.\n         *\n         * @event Component#componentresize\n         * @type {Event}\n         */\n        this.trigger('componentresize');\n      }\n      return;\n    }\n\n    // Not setting a value, so getting it\n    // Make sure element exists\n    if (!this.el_) {\n      return 0;\n    }\n\n    // Get dimension value from style\n    const val = this.el_.style[widthOrHeight];\n    const pxIndex = val.indexOf('px');\n    if (pxIndex !== -1) {\n      // Return the pixel value with no 'px'\n      return parseInt(val.slice(0, pxIndex), 10);\n    }\n\n    // No px so using % or no style was set, so falling back to offsetWidth/height\n    // If component has display:none, offset will return 0\n    // TODO: handle display:none and no dimension style using px\n    return parseInt(this.el_['offset' + toTitleCase$1(widthOrHeight)], 10);\n  }\n\n  /**\n   * Get the computed width or the height of the component's element.\n   *\n   * Uses `window.getComputedStyle`.\n   *\n   * @param {string} widthOrHeight\n   *        A string containing 'width' or 'height'. Whichever one you want to get.\n   *\n   * @return {number}\n   *         The dimension that gets asked for or 0 if nothing was set\n   *         for that dimension.\n   */\n  currentDimension(widthOrHeight) {\n    let computedWidthOrHeight = 0;\n    if (widthOrHeight !== 'width' && widthOrHeight !== 'height') {\n      throw new Error('currentDimension only accepts width or height value');\n    }\n    computedWidthOrHeight = computedStyle(this.el_, widthOrHeight);\n\n    // remove 'px' from variable and parse as integer\n    computedWidthOrHeight = parseFloat(computedWidthOrHeight);\n\n    // if the computed value is still 0, it's possible that the browser is lying\n    // and we want to check the offset values.\n    // This code also runs wherever getComputedStyle doesn't exist.\n    if (computedWidthOrHeight === 0 || isNaN(computedWidthOrHeight)) {\n      const rule = `offset${toTitleCase$1(widthOrHeight)}`;\n      computedWidthOrHeight = this.el_[rule];\n    }\n    return computedWidthOrHeight;\n  }\n\n  /**\n   * An object that contains width and height values of the `Component`s\n   * computed style. Uses `window.getComputedStyle`.\n   *\n   * @typedef {Object} Component~DimensionObject\n   *\n   * @property {number} width\n   *           The width of the `Component`s computed style.\n   *\n   * @property {number} height\n   *           The height of the `Component`s computed style.\n   */\n\n  /**\n   * Get an object that contains computed width and height values of the\n   * component's element.\n   *\n   * Uses `window.getComputedStyle`.\n   *\n   * @return {Component~DimensionObject}\n   *         The computed dimensions of the component's element.\n   */\n  currentDimensions() {\n    return {\n      width: this.currentDimension('width'),\n      height: this.currentDimension('height')\n    };\n  }\n\n  /**\n   * Get the computed width of the component's element.\n   *\n   * Uses `window.getComputedStyle`.\n   *\n   * @return {number}\n   *         The computed width of the component's element.\n   */\n  currentWidth() {\n    return this.currentDimension('width');\n  }\n\n  /**\n   * Get the computed height of the component's element.\n   *\n   * Uses `window.getComputedStyle`.\n   *\n   * @return {number}\n   *         The computed height of the component's element.\n   */\n  currentHeight() {\n    return this.currentDimension('height');\n  }\n\n  /**\n   * Set the focus to this component\n   */\n  focus() {\n    this.el_.focus();\n  }\n\n  /**\n   * Remove the focus from this component\n   */\n  blur() {\n    this.el_.blur();\n  }\n\n  /**\n   * When this Component receives a `keydown` event which it does not process,\n   *  it passes the event to the Player for handling.\n   *\n   * @param {KeyboardEvent} event\n   *        The `keydown` event that caused this function to be called.\n   */\n  handleKeyDown(event) {\n    if (this.player_) {\n      // We only stop propagation here because we want unhandled events to fall\n      // back to the browser. Exclude Tab for focus trapping.\n      if (!keycode.isEventKey(event, 'Tab')) {\n        event.stopPropagation();\n      }\n      this.player_.handleKeyDown(event);\n    }\n  }\n\n  /**\n   * Many components used to have a `handleKeyPress` method, which was poorly\n   * named because it listened to a `keydown` event. This method name now\n   * delegates to `handleKeyDown`. This means anyone calling `handleKeyPress`\n   * will not see their method calls stop working.\n   *\n   * @param {KeyboardEvent} event\n   *        The event that caused this function to be called.\n   */\n  handleKeyPress(event) {\n    this.handleKeyDown(event);\n  }\n\n  /**\n   * Emit a 'tap' events when touch event support gets detected. This gets used to\n   * support toggling the controls through a tap on the video. They get enabled\n   * because every sub-component would have extra overhead otherwise.\n   *\n   * @protected\n   * @fires Component#tap\n   * @listens Component#touchstart\n   * @listens Component#touchmove\n   * @listens Component#touchleave\n   * @listens Component#touchcancel\n   * @listens Component#touchend\n    */\n  emitTapEvents() {\n    // Track the start time so we can determine how long the touch lasted\n    let touchStart = 0;\n    let firstTouch = null;\n\n    // Maximum movement allowed during a touch event to still be considered a tap\n    // Other popular libs use anywhere from 2 (hammer.js) to 15,\n    // so 10 seems like a nice, round number.\n    const tapMovementThreshold = 10;\n\n    // The maximum length a touch can be while still being considered a tap\n    const touchTimeThreshold = 200;\n    let couldBeTap;\n    this.on('touchstart', function (event) {\n      // If more than one finger, don't consider treating this as a click\n      if (event.touches.length === 1) {\n        // Copy pageX/pageY from the object\n        firstTouch = {\n          pageX: event.touches[0].pageX,\n          pageY: event.touches[0].pageY\n        };\n        // Record start time so we can detect a tap vs. \"touch and hold\"\n        touchStart = window$1.performance.now();\n        // Reset couldBeTap tracking\n        couldBeTap = true;\n      }\n    });\n    this.on('touchmove', function (event) {\n      // If more than one finger, don't consider treating this as a click\n      if (event.touches.length > 1) {\n        couldBeTap = false;\n      } else if (firstTouch) {\n        // Some devices will throw touchmoves for all but the slightest of taps.\n        // So, if we moved only a small distance, this could still be a tap\n        const xdiff = event.touches[0].pageX - firstTouch.pageX;\n        const ydiff = event.touches[0].pageY - firstTouch.pageY;\n        const touchDistance = Math.sqrt(xdiff * xdiff + ydiff * ydiff);\n        if (touchDistance > tapMovementThreshold) {\n          couldBeTap = false;\n        }\n      }\n    });\n    const noTap = function () {\n      couldBeTap = false;\n    };\n\n    // TODO: Listen to the original target. http://youtu.be/DujfpXOKUp8?t=13m8s\n    this.on('touchleave', noTap);\n    this.on('touchcancel', noTap);\n\n    // When the touch ends, measure how long it took and trigger the appropriate\n    // event\n    this.on('touchend', function (event) {\n      firstTouch = null;\n      // Proceed only if the touchmove/leave/cancel event didn't happen\n      if (couldBeTap === true) {\n        // Measure how long the touch lasted\n        const touchTime = window$1.performance.now() - touchStart;\n\n        // Make sure the touch was less than the threshold to be considered a tap\n        if (touchTime < touchTimeThreshold) {\n          // Don't let browser turn this into a click\n          event.preventDefault();\n          /**\n           * Triggered when a `Component` is tapped.\n           *\n           * @event Component#tap\n           * @type {MouseEvent}\n           */\n          this.trigger('tap');\n          // It may be good to copy the touchend event object and change the\n          // type to tap, if the other event properties aren't exact after\n          // Events.fixEvent runs (e.g. event.target)\n        }\n      }\n    });\n  }\n\n  /**\n   * This function reports user activity whenever touch events happen. This can get\n   * turned off by any sub-components that wants touch events to act another way.\n   *\n   * Report user touch activity when touch events occur. User activity gets used to\n   * determine when controls should show/hide. It is simple when it comes to mouse\n   * events, because any mouse event should show the controls. So we capture mouse\n   * events that bubble up to the player and report activity when that happens.\n   * With touch events it isn't as easy as `touchstart` and `touchend` toggle player\n   * controls. So touch events can't help us at the player level either.\n   *\n   * User activity gets checked asynchronously. So what could happen is a tap event\n   * on the video turns the controls off. Then the `touchend` event bubbles up to\n   * the player. Which, if it reported user activity, would turn the controls right\n   * back on. We also don't want to completely block touch events from bubbling up.\n   * Furthermore a `touchmove` event and anything other than a tap, should not turn\n   * controls back on.\n   *\n   * @listens Component#touchstart\n   * @listens Component#touchmove\n   * @listens Component#touchend\n   * @listens Component#touchcancel\n   */\n  enableTouchActivity() {\n    // Don't continue if the root player doesn't support reporting user activity\n    if (!this.player() || !this.player().reportUserActivity) {\n      return;\n    }\n\n    // listener for reporting that the user is active\n    const report = bind_(this.player(), this.player().reportUserActivity);\n    let touchHolding;\n    this.on('touchstart', function () {\n      report();\n      // For as long as the they are touching the device or have their mouse down,\n      // we consider them active even if they're not moving their finger or mouse.\n      // So we want to continue to update that they are active\n      this.clearInterval(touchHolding);\n      // report at the same interval as activityCheck\n      touchHolding = this.setInterval(report, 250);\n    });\n    const touchEnd = function (event) {\n      report();\n      // stop the interval that maintains activity if the touch is holding\n      this.clearInterval(touchHolding);\n    };\n    this.on('touchmove', report);\n    this.on('touchend', touchEnd);\n    this.on('touchcancel', touchEnd);\n  }\n\n  /**\n   * A callback that has no parameters and is bound into `Component`s context.\n   *\n   * @callback Component~GenericCallback\n   * @this Component\n   */\n\n  /**\n   * Creates a function that runs after an `x` millisecond timeout. This function is a\n   * wrapper around `window.setTimeout`. There are a few reasons to use this one\n   * instead though:\n   * 1. It gets cleared via  {@link Component#clearTimeout} when\n   *    {@link Component#dispose} gets called.\n   * 2. The function callback will gets turned into a {@link Component~GenericCallback}\n   *\n   * > Note: You can't use `window.clearTimeout` on the id returned by this function. This\n   *         will cause its dispose listener not to get cleaned up! Please use\n   *         {@link Component#clearTimeout} or {@link Component#dispose} instead.\n   *\n   * @param {Component~GenericCallback} fn\n   *        The function that will be run after `timeout`.\n   *\n   * @param {number} timeout\n   *        Timeout in milliseconds to delay before executing the specified function.\n   *\n   * @return {number}\n   *         Returns a timeout ID that gets used to identify the timeout. It can also\n   *         get used in {@link Component#clearTimeout} to clear the timeout that\n   *         was set.\n   *\n   * @listens Component#dispose\n   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setTimeout}\n   */\n  setTimeout(fn, timeout) {\n    // declare as variables so they are properly available in timeout function\n    // eslint-disable-next-line\n    var timeoutId;\n    fn = bind_(this, fn);\n    this.clearTimersOnDispose_();\n    timeoutId = window$1.setTimeout(() => {\n      if (this.setTimeoutIds_.has(timeoutId)) {\n        this.setTimeoutIds_.delete(timeoutId);\n      }\n      fn();\n    }, timeout);\n    this.setTimeoutIds_.add(timeoutId);\n    return timeoutId;\n  }\n\n  /**\n   * Clears a timeout that gets created via `window.setTimeout` or\n   * {@link Component#setTimeout}. If you set a timeout via {@link Component#setTimeout}\n   * use this function instead of `window.clearTimout`. If you don't your dispose\n   * listener will not get cleaned up until {@link Component#dispose}!\n   *\n   * @param {number} timeoutId\n   *        The id of the timeout to clear. The return value of\n   *        {@link Component#setTimeout} or `window.setTimeout`.\n   *\n   * @return {number}\n   *         Returns the timeout id that was cleared.\n   *\n   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearTimeout}\n   */\n  clearTimeout(timeoutId) {\n    if (this.setTimeoutIds_.has(timeoutId)) {\n      this.setTimeoutIds_.delete(timeoutId);\n      window$1.clearTimeout(timeoutId);\n    }\n    return timeoutId;\n  }\n\n  /**\n   * Creates a function that gets run every `x` milliseconds. This function is a wrapper\n   * around `window.setInterval`. There are a few reasons to use this one instead though.\n   * 1. It gets cleared via  {@link Component#clearInterval} when\n   *    {@link Component#dispose} gets called.\n   * 2. The function callback will be a {@link Component~GenericCallback}\n   *\n   * @param {Component~GenericCallback} fn\n   *        The function to run every `x` seconds.\n   *\n   * @param {number} interval\n   *        Execute the specified function every `x` milliseconds.\n   *\n   * @return {number}\n   *         Returns an id that can be used to identify the interval. It can also be be used in\n   *         {@link Component#clearInterval} to clear the interval.\n   *\n   * @listens Component#dispose\n   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval}\n   */\n  setInterval(fn, interval) {\n    fn = bind_(this, fn);\n    this.clearTimersOnDispose_();\n    const intervalId = window$1.setInterval(fn, interval);\n    this.setIntervalIds_.add(intervalId);\n    return intervalId;\n  }\n\n  /**\n   * Clears an interval that gets created via `window.setInterval` or\n   * {@link Component#setInterval}. If you set an interval via {@link Component#setInterval}\n   * use this function instead of `window.clearInterval`. If you don't your dispose\n   * listener will not get cleaned up until {@link Component#dispose}!\n   *\n   * @param {number} intervalId\n   *        The id of the interval to clear. The return value of\n   *        {@link Component#setInterval} or `window.setInterval`.\n   *\n   * @return {number}\n   *         Returns the interval id that was cleared.\n   *\n   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearInterval}\n   */\n  clearInterval(intervalId) {\n    if (this.setIntervalIds_.has(intervalId)) {\n      this.setIntervalIds_.delete(intervalId);\n      window$1.clearInterval(intervalId);\n    }\n    return intervalId;\n  }\n\n  /**\n   * Queues up a callback to be passed to requestAnimationFrame (rAF), but\n   * with a few extra bonuses:\n   *\n   * - Supports browsers that do not support rAF by falling back to\n   *   {@link Component#setTimeout}.\n   *\n   * - The callback is turned into a {@link Component~GenericCallback} (i.e.\n   *   bound to the component).\n   *\n   * - Automatic cancellation of the rAF callback is handled if the component\n   *   is disposed before it is called.\n   *\n   * @param  {Component~GenericCallback} fn\n   *         A function that will be bound to this component and executed just\n   *         before the browser's next repaint.\n   *\n   * @return {number}\n   *         Returns an rAF ID that gets used to identify the timeout. It can\n   *         also be used in {@link Component#cancelAnimationFrame} to cancel\n   *         the animation frame callback.\n   *\n   * @listens Component#dispose\n   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame}\n   */\n  requestAnimationFrame(fn) {\n    this.clearTimersOnDispose_();\n\n    // declare as variables so they are properly available in rAF function\n    // eslint-disable-next-line\n    var id;\n    fn = bind_(this, fn);\n    id = window$1.requestAnimationFrame(() => {\n      if (this.rafIds_.has(id)) {\n        this.rafIds_.delete(id);\n      }\n      fn();\n    });\n    this.rafIds_.add(id);\n    return id;\n  }\n\n  /**\n   * Request an animation frame, but only one named animation\n   * frame will be queued. Another will never be added until\n   * the previous one finishes.\n   *\n   * @param {string} name\n   *        The name to give this requestAnimationFrame\n   *\n   * @param  {Component~GenericCallback} fn\n   *         A function that will be bound to this component and executed just\n   *         before the browser's next repaint.\n   */\n  requestNamedAnimationFrame(name, fn) {\n    if (this.namedRafs_.has(name)) {\n      return;\n    }\n    this.clearTimersOnDispose_();\n    fn = bind_(this, fn);\n    const id = this.requestAnimationFrame(() => {\n      fn();\n      if (this.namedRafs_.has(name)) {\n        this.namedRafs_.delete(name);\n      }\n    });\n    this.namedRafs_.set(name, id);\n    return name;\n  }\n\n  /**\n   * Cancels a current named animation frame if it exists.\n   *\n   * @param {string} name\n   *        The name of the requestAnimationFrame to cancel.\n   */\n  cancelNamedAnimationFrame(name) {\n    if (!this.namedRafs_.has(name)) {\n      return;\n    }\n    this.cancelAnimationFrame(this.namedRafs_.get(name));\n    this.namedRafs_.delete(name);\n  }\n\n  /**\n   * Cancels a queued callback passed to {@link Component#requestAnimationFrame}\n   * (rAF).\n   *\n   * If you queue an rAF callback via {@link Component#requestAnimationFrame},\n   * use this function instead of `window.cancelAnimationFrame`. If you don't,\n   * your dispose listener will not get cleaned up until {@link Component#dispose}!\n   *\n   * @param {number} id\n   *        The rAF ID to clear. The return value of {@link Component#requestAnimationFrame}.\n   *\n   * @return {number}\n   *         Returns the rAF ID that was cleared.\n   *\n   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/window/cancelAnimationFrame}\n   */\n  cancelAnimationFrame(id) {\n    if (this.rafIds_.has(id)) {\n      this.rafIds_.delete(id);\n      window$1.cancelAnimationFrame(id);\n    }\n    return id;\n  }\n\n  /**\n   * A function to setup `requestAnimationFrame`, `setTimeout`,\n   * and `setInterval`, clearing on dispose.\n   *\n   * > Previously each timer added and removed dispose listeners on it's own.\n   * For better performance it was decided to batch them all, and use `Set`s\n   * to track outstanding timer ids.\n   *\n   * @private\n   */\n  clearTimersOnDispose_() {\n    if (this.clearingTimersOnDispose_) {\n      return;\n    }\n    this.clearingTimersOnDispose_ = true;\n    this.one('dispose', () => {\n      [['namedRafs_', 'cancelNamedAnimationFrame'], ['rafIds_', 'cancelAnimationFrame'], ['setTimeoutIds_', 'clearTimeout'], ['setIntervalIds_', 'clearInterval']].forEach(([idName, cancelName]) => {\n        // for a `Set` key will actually be the value again\n        // so forEach((val, val) =>` but for maps we want to use\n        // the key.\n        this[idName].forEach((val, key) => this[cancelName](key));\n      });\n      this.clearingTimersOnDispose_ = false;\n    });\n  }\n\n  /**\n   * Register a `Component` with `videojs` given the name and the component.\n   *\n   * > NOTE: {@link Tech}s should not be registered as a `Component`. {@link Tech}s\n   *         should be registered using {@link Tech.registerTech} or\n   *         {@link videojs:videojs.registerTech}.\n   *\n   * > NOTE: This function can also be seen on videojs as\n   *         {@link videojs:videojs.registerComponent}.\n   *\n   * @param {string} name\n   *        The name of the `Component` to register.\n   *\n   * @param {Component} ComponentToRegister\n   *        The `Component` class to register.\n   *\n   * @return {Component}\n   *         The `Component` that was registered.\n   */\n  static registerComponent(name, ComponentToRegister) {\n    if (typeof name !== 'string' || !name) {\n      throw new Error(`Illegal component name, \"${name}\"; must be a non-empty string.`);\n    }\n    const Tech = Component$1.getComponent('Tech');\n\n    // We need to make sure this check is only done if Tech has been registered.\n    const isTech = Tech && Tech.isTech(ComponentToRegister);\n    const isComp = Component$1 === ComponentToRegister || Component$1.prototype.isPrototypeOf(ComponentToRegister.prototype);\n    if (isTech || !isComp) {\n      let reason;\n      if (isTech) {\n        reason = 'techs must be registered using Tech.registerTech()';\n      } else {\n        reason = 'must be a Component subclass';\n      }\n      throw new Error(`Illegal component, \"${name}\"; ${reason}.`);\n    }\n    name = toTitleCase$1(name);\n    if (!Component$1.components_) {\n      Component$1.components_ = {};\n    }\n    const Player = Component$1.getComponent('Player');\n    if (name === 'Player' && Player && Player.players) {\n      const players = Player.players;\n      const playerNames = Object.keys(players);\n\n      // If we have players that were disposed, then their name will still be\n      // in Players.players. So, we must loop through and verify that the value\n      // for each item is not null. This allows registration of the Player component\n      // after all players have been disposed or before any were created.\n      if (players && playerNames.length > 0 && playerNames.map(pname => players[pname]).every(Boolean)) {\n        throw new Error('Can not register Player component after player has been created.');\n      }\n    }\n    Component$1.components_[name] = ComponentToRegister;\n    Component$1.components_[toLowerCase(name)] = ComponentToRegister;\n    return ComponentToRegister;\n  }\n\n  /**\n   * Get a `Component` based on the name it was registered with.\n   *\n   * @param {string} name\n   *        The Name of the component to get.\n   *\n   * @return {typeof Component}\n   *         The `Component` that got registered under the given name.\n   */\n  static getComponent(name) {\n    if (!name || !Component$1.components_) {\n      return;\n    }\n    return Component$1.components_[name];\n  }\n}\nComponent$1.registerComponent('Component', Component$1);\n\n/**\n * @file time.js\n * @module time\n */\n\n/**\n * Returns the time for the specified index at the start or end\n * of a TimeRange object.\n *\n * @typedef    {Function} TimeRangeIndex\n *\n * @param      {number} [index=0]\n *             The range number to return the time for.\n *\n * @return     {number}\n *             The time offset at the specified index.\n *\n * @deprecated The index argument must be provided.\n *             In the future, leaving it out will throw an error.\n */\n\n/**\n * An object that contains ranges of time, which mimics {@link TimeRanges}.\n *\n * @typedef  {Object} TimeRange\n *\n * @property {number} length\n *           The number of time ranges represented by this object.\n *\n * @property {module:time~TimeRangeIndex} start\n *           Returns the time offset at which a specified time range begins.\n *\n * @property {module:time~TimeRangeIndex} end\n *           Returns the time offset at which a specified time range ends.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges\n */\n\n/**\n * Check if any of the time ranges are over the maximum index.\n *\n * @private\n * @param   {string} fnName\n *          The function name to use for logging\n *\n * @param   {number} index\n *          The index to check\n *\n * @param   {number} maxIndex\n *          The maximum possible index\n *\n * @throws  {Error} if the timeRanges provided are over the maxIndex\n */\nfunction rangeCheck(fnName, index, maxIndex) {\n  if (typeof index !== 'number' || index < 0 || index > maxIndex) {\n    throw new Error(`Failed to execute '${fnName}' on 'TimeRanges': The index provided (${index}) is non-numeric or out of bounds (0-${maxIndex}).`);\n  }\n}\n\n/**\n * Get the time for the specified index at the start or end\n * of a TimeRange object.\n *\n * @private\n * @param      {string} fnName\n *             The function name to use for logging\n *\n * @param      {string} valueIndex\n *             The property that should be used to get the time. should be\n *             'start' or 'end'\n *\n * @param      {Array} ranges\n *             An array of time ranges\n *\n * @param      {Array} [rangeIndex=0]\n *             The index to start the search at\n *\n * @return     {number}\n *             The time that offset at the specified index.\n *\n * @deprecated rangeIndex must be set to a value, in the future this will throw an error.\n * @throws     {Error} if rangeIndex is more than the length of ranges\n */\nfunction getRange(fnName, valueIndex, ranges, rangeIndex) {\n  rangeCheck(fnName, rangeIndex, ranges.length - 1);\n  return ranges[rangeIndex][valueIndex];\n}\n\n/**\n * Create a time range object given ranges of time.\n *\n * @private\n * @param   {Array} [ranges]\n *          An array of time ranges.\n *\n * @return  {TimeRange}\n */\nfunction createTimeRangesObj(ranges) {\n  let timeRangesObj;\n  if (ranges === undefined || ranges.length === 0) {\n    timeRangesObj = {\n      length: 0,\n      start() {\n        throw new Error('This TimeRanges object is empty');\n      },\n      end() {\n        throw new Error('This TimeRanges object is empty');\n      }\n    };\n  } else {\n    timeRangesObj = {\n      length: ranges.length,\n      start: getRange.bind(null, 'start', 0, ranges),\n      end: getRange.bind(null, 'end', 1, ranges)\n    };\n  }\n  if (window$1.Symbol && window$1.Symbol.iterator) {\n    timeRangesObj[window$1.Symbol.iterator] = () => (ranges || []).values();\n  }\n  return timeRangesObj;\n}\n\n/**\n * Create a `TimeRange` object which mimics an\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges|HTML5 TimeRanges instance}.\n *\n * @param {number|Array[]} start\n *        The start of a single range (a number) or an array of ranges (an\n *        array of arrays of two numbers each).\n *\n * @param {number} end\n *        The end of a single range. Cannot be used with the array form of\n *        the `start` argument.\n *\n * @return {TimeRange}\n */\nfunction createTimeRanges$1(start, end) {\n  if (Array.isArray(start)) {\n    return createTimeRangesObj(start);\n  } else if (start === undefined || end === undefined) {\n    return createTimeRangesObj();\n  }\n  return createTimeRangesObj([[start, end]]);\n}\n\n/**\n * Format seconds as a time string, H:MM:SS or M:SS. Supplying a guide (in\n * seconds) will force a number of leading zeros to cover the length of the\n * guide.\n *\n * @private\n * @param  {number} seconds\n *         Number of seconds to be turned into a string\n *\n * @param  {number} guide\n *         Number (in seconds) to model the string after\n *\n * @return {string}\n *         Time formatted as H:MM:SS or M:SS\n */\nconst defaultImplementation = function (seconds, guide) {\n  seconds = seconds < 0 ? 0 : seconds;\n  let s = Math.floor(seconds % 60);\n  let m = Math.floor(seconds / 60 % 60);\n  let h = Math.floor(seconds / 3600);\n  const gm = Math.floor(guide / 60 % 60);\n  const gh = Math.floor(guide / 3600);\n\n  // handle invalid times\n  if (isNaN(seconds) || seconds === Infinity) {\n    // '-' is false for all relational operators (e.g. <, >=) so this setting\n    // will add the minimum number of fields specified by the guide\n    h = m = s = '-';\n  }\n\n  // Check if we need to show hours\n  h = h > 0 || gh > 0 ? h + ':' : '';\n\n  // If hours are showing, we may need to add a leading zero.\n  // Always show at least one digit of minutes.\n  m = ((h || gm >= 10) && m < 10 ? '0' + m : m) + ':';\n\n  // Check if leading zero is need for seconds\n  s = s < 10 ? '0' + s : s;\n  return h + m + s;\n};\n\n// Internal pointer to the current implementation.\nlet implementation = defaultImplementation;\n\n/**\n * Replaces the default formatTime implementation with a custom implementation.\n *\n * @param {Function} customImplementation\n *        A function which will be used in place of the default formatTime\n *        implementation. Will receive the current time in seconds and the\n *        guide (in seconds) as arguments.\n */\nfunction setFormatTime(customImplementation) {\n  implementation = customImplementation;\n}\n\n/**\n * Resets formatTime to the default implementation.\n */\nfunction resetFormatTime() {\n  implementation = defaultImplementation;\n}\n\n/**\n * Delegates to either the default time formatting function or a custom\n * function supplied via `setFormatTime`.\n *\n * Formats seconds as a time string (H:MM:SS or M:SS). Supplying a\n * guide (in seconds) will force a number of leading zeros to cover the\n * length of the guide.\n *\n * @example  formatTime(125, 600) === \"02:05\"\n * @param    {number} seconds\n *           Number of seconds to be turned into a string\n *\n * @param    {number} guide\n *           Number (in seconds) to model the string after\n *\n * @return   {string}\n *           Time formatted as H:MM:SS or M:SS\n */\nfunction formatTime(seconds, guide = seconds) {\n  return implementation(seconds, guide);\n}\n\nvar Time = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  createTimeRanges: createTimeRanges$1,\n  createTimeRange: createTimeRanges$1,\n  setFormatTime: setFormatTime,\n  resetFormatTime: resetFormatTime,\n  formatTime: formatTime\n});\n\n/**\n * @file buffer.js\n * @module buffer\n */\n\n/**\n * Compute the percentage of the media that has been buffered.\n *\n * @param { import('./time').TimeRange } buffered\n *        The current `TimeRanges` object representing buffered time ranges\n *\n * @param {number} duration\n *        Total duration of the media\n *\n * @return {number}\n *         Percent buffered of the total duration in decimal form.\n */\nfunction bufferedPercent(buffered, duration) {\n  let bufferedDuration = 0;\n  let start;\n  let end;\n  if (!duration) {\n    return 0;\n  }\n  if (!buffered || !buffered.length) {\n    buffered = createTimeRanges$1(0, 0);\n  }\n  for (let i = 0; i < buffered.length; i++) {\n    start = buffered.start(i);\n    end = buffered.end(i);\n\n    // buffered end can be bigger than duration by a very small fraction\n    if (end > duration) {\n      end = duration;\n    }\n    bufferedDuration += end - start;\n  }\n  return bufferedDuration / duration;\n}\n\n/**\n * @file media-error.js\n */\n\n/**\n * A Custom `MediaError` class which mimics the standard HTML5 `MediaError` class.\n *\n * @param {number|string|Object|MediaError} value\n *        This can be of multiple types:\n *        - number: should be a standard error code\n *        - string: an error message (the code will be 0)\n *        - Object: arbitrary properties\n *        - `MediaError` (native): used to populate a video.js `MediaError` object\n *        - `MediaError` (video.js): will return itself if it's already a\n *          video.js `MediaError` object.\n *\n * @see [MediaError Spec]{@link https://dev.w3.org/html5/spec-author-view/video.html#mediaerror}\n * @see [Encrypted MediaError Spec]{@link https://www.w3.org/TR/2013/WD-encrypted-media-20130510/#error-codes}\n *\n * @class MediaError\n */\nfunction MediaError(value) {\n  // Allow redundant calls to this constructor to avoid having `instanceof`\n  // checks peppered around the code.\n  if (value instanceof MediaError) {\n    return value;\n  }\n  if (typeof value === 'number') {\n    this.code = value;\n  } else if (typeof value === 'string') {\n    // default code is zero, so this is a custom error\n    this.message = value;\n  } else if (isObject(value)) {\n    // We assign the `code` property manually because native `MediaError` objects\n    // do not expose it as an own/enumerable property of the object.\n    if (typeof value.code === 'number') {\n      this.code = value.code;\n    }\n    Object.assign(this, value);\n  }\n  if (!this.message) {\n    this.message = MediaError.defaultMessages[this.code] || '';\n  }\n}\n\n/**\n * The error code that refers two one of the defined `MediaError` types\n *\n * @type {Number}\n */\nMediaError.prototype.code = 0;\n\n/**\n * An optional message that to show with the error. Message is not part of the HTML5\n * video spec but allows for more informative custom errors.\n *\n * @type {String}\n */\nMediaError.prototype.message = '';\n\n/**\n * An optional status code that can be set by plugins to allow even more detail about\n * the error. For example a plugin might provide a specific HTTP status code and an\n * error message for that code. Then when the plugin gets that error this class will\n * know how to display an error message for it. This allows a custom message to show\n * up on the `Player` error overlay.\n *\n * @type {Array}\n */\nMediaError.prototype.status = null;\n\n/**\n * Errors indexed by the W3C standard. The order **CANNOT CHANGE**! See the\n * specification listed under {@link MediaError} for more information.\n *\n * @enum {array}\n * @readonly\n * @property {string} 0 - MEDIA_ERR_CUSTOM\n * @property {string} 1 - MEDIA_ERR_ABORTED\n * @property {string} 2 - MEDIA_ERR_NETWORK\n * @property {string} 3 - MEDIA_ERR_DECODE\n * @property {string} 4 - MEDIA_ERR_SRC_NOT_SUPPORTED\n * @property {string} 5 - MEDIA_ERR_ENCRYPTED\n */\nMediaError.errorTypes = ['MEDIA_ERR_CUSTOM', 'MEDIA_ERR_ABORTED', 'MEDIA_ERR_NETWORK', 'MEDIA_ERR_DECODE', 'MEDIA_ERR_SRC_NOT_SUPPORTED', 'MEDIA_ERR_ENCRYPTED'];\n\n/**\n * The default `MediaError` messages based on the {@link MediaError.errorTypes}.\n *\n * @type {Array}\n * @constant\n */\nMediaError.defaultMessages = {\n  1: 'You aborted the media playback',\n  2: 'A network error caused the media download to fail part-way.',\n  3: 'The media playback was aborted due to a corruption problem or because the media used features your browser did not support.',\n  4: 'The media could not be loaded, either because the server or network failed or because the format is not supported.',\n  5: 'The media is encrypted and we do not have the keys to decrypt it.'\n};\n\n// Add types as properties on MediaError\n// e.g. MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED = 4;\nfor (let errNum = 0; errNum < MediaError.errorTypes.length; errNum++) {\n  MediaError[MediaError.errorTypes[errNum]] = errNum;\n  // values should be accessible on both the class and instance\n  MediaError.prototype[MediaError.errorTypes[errNum]] = errNum;\n}\n\n/**\n * Returns whether an object is `Promise`-like (i.e. has a `then` method).\n *\n * @param  {Object}  value\n *         An object that may or may not be `Promise`-like.\n *\n * @return {boolean}\n *         Whether or not the object is `Promise`-like.\n */\nfunction isPromise(value) {\n  return value !== undefined && value !== null && typeof value.then === 'function';\n}\n\n/**\n * Silence a Promise-like object.\n *\n * This is useful for avoiding non-harmful, but potentially confusing \"uncaught\n * play promise\" rejection error messages.\n *\n * @param  {Object} value\n *         An object that may or may not be `Promise`-like.\n */\nfunction silencePromise(value) {\n  if (isPromise(value)) {\n    value.then(null, e => {});\n  }\n}\n\n/**\n * @file text-track-list-converter.js Utilities for capturing text track state and\n * re-creating tracks based on a capture.\n *\n * @module text-track-list-converter\n */\n\n/**\n * Examine a single {@link TextTrack} and return a JSON-compatible javascript object that\n * represents the {@link TextTrack}'s state.\n *\n * @param {TextTrack} track\n *        The text track to query.\n *\n * @return {Object}\n *         A serializable javascript representation of the TextTrack.\n * @private\n */\nconst trackToJson_ = function (track) {\n  const ret = ['kind', 'label', 'language', 'id', 'inBandMetadataTrackDispatchType', 'mode', 'src'].reduce((acc, prop, i) => {\n    if (track[prop]) {\n      acc[prop] = track[prop];\n    }\n    return acc;\n  }, {\n    cues: track.cues && Array.prototype.map.call(track.cues, function (cue) {\n      return {\n        startTime: cue.startTime,\n        endTime: cue.endTime,\n        text: cue.text,\n        id: cue.id\n      };\n    })\n  });\n  return ret;\n};\n\n/**\n * Examine a {@link Tech} and return a JSON-compatible javascript array that represents the\n * state of all {@link TextTrack}s currently configured. The return array is compatible with\n * {@link text-track-list-converter:jsonToTextTracks}.\n *\n * @param { import('../tech/tech').default } tech\n *        The tech object to query\n *\n * @return {Array}\n *         A serializable javascript representation of the {@link Tech}s\n *         {@link TextTrackList}.\n */\nconst textTracksToJson = function (tech) {\n  const trackEls = tech.$$('track');\n  const trackObjs = Array.prototype.map.call(trackEls, t => t.track);\n  const tracks = Array.prototype.map.call(trackEls, function (trackEl) {\n    const json = trackToJson_(trackEl.track);\n    if (trackEl.src) {\n      json.src = trackEl.src;\n    }\n    return json;\n  });\n  return tracks.concat(Array.prototype.filter.call(tech.textTracks(), function (track) {\n    return trackObjs.indexOf(track) === -1;\n  }).map(trackToJson_));\n};\n\n/**\n * Create a set of remote {@link TextTrack}s on a {@link Tech} based on an array of javascript\n * object {@link TextTrack} representations.\n *\n * @param {Array} json\n *        An array of `TextTrack` representation objects, like those that would be\n *        produced by `textTracksToJson`.\n *\n * @param {Tech} tech\n *        The `Tech` to create the `TextTrack`s on.\n */\nconst jsonToTextTracks = function (json, tech) {\n  json.forEach(function (track) {\n    const addedTrack = tech.addRemoteTextTrack(track).track;\n    if (!track.src && track.cues) {\n      track.cues.forEach(cue => addedTrack.addCue(cue));\n    }\n  });\n  return tech.textTracks();\n};\nvar textTrackConverter = {\n  textTracksToJson,\n  jsonToTextTracks,\n  trackToJson_\n};\n\n/**\n * @file modal-dialog.js\n */\nconst MODAL_CLASS_NAME = 'vjs-modal-dialog';\n\n/**\n * The `ModalDialog` displays over the video and its controls, which blocks\n * interaction with the player until it is closed.\n *\n * Modal dialogs include a \"Close\" button and will close when that button\n * is activated - or when ESC is pressed anywhere.\n *\n * @extends Component\n */\nclass ModalDialog extends Component$1 {\n  /**\n   * Create an instance of this class.\n   *\n   * @param { import('./player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param { import('./utils/dom').ContentDescriptor} [options.content=undefined]\n   *        Provide customized content for this modal.\n   *\n   * @param {string} [options.description]\n   *        A text description for the modal, primarily for accessibility.\n   *\n   * @param {boolean} [options.fillAlways=false]\n   *        Normally, modals are automatically filled only the first time\n   *        they open. This tells the modal to refresh its content\n   *        every time it opens.\n   *\n   * @param {string} [options.label]\n   *        A text label for the modal, primarily for accessibility.\n   *\n   * @param {boolean} [options.pauseOnOpen=true]\n   *        If `true`, playback will will be paused if playing when\n   *        the modal opens, and resumed when it closes.\n   *\n   * @param {boolean} [options.temporary=true]\n   *        If `true`, the modal can only be opened once; it will be\n   *        disposed as soon as it's closed.\n   *\n   * @param {boolean} [options.uncloseable=false]\n   *        If `true`, the user will not be able to close the modal\n   *        through the UI in the normal ways. Programmatic closing is\n   *        still possible.\n   */\n  constructor(player, options) {\n    super(player, options);\n    this.handleKeyDown_ = e => this.handleKeyDown(e);\n    this.close_ = e => this.close(e);\n    this.opened_ = this.hasBeenOpened_ = this.hasBeenFilled_ = false;\n    this.closeable(!this.options_.uncloseable);\n    this.content(this.options_.content);\n\n    // Make sure the contentEl is defined AFTER any children are initialized\n    // because we only want the contents of the modal in the contentEl\n    // (not the UI elements like the close button).\n    this.contentEl_ = createEl('div', {\n      className: `${MODAL_CLASS_NAME}-content`\n    }, {\n      role: 'document'\n    });\n    this.descEl_ = createEl('p', {\n      className: `${MODAL_CLASS_NAME}-description vjs-control-text`,\n      id: this.el().getAttribute('aria-describedby')\n    });\n    textContent(this.descEl_, this.description());\n    this.el_.appendChild(this.descEl_);\n    this.el_.appendChild(this.contentEl_);\n  }\n\n  /**\n   * Create the `ModalDialog`'s DOM element\n   *\n   * @return {Element}\n   *         The DOM element that gets created.\n   */\n  createEl() {\n    return super.createEl('div', {\n      className: this.buildCSSClass(),\n      tabIndex: -1\n    }, {\n      'aria-describedby': `${this.id()}_description`,\n      'aria-hidden': 'true',\n      'aria-label': this.label(),\n      'role': 'dialog'\n    });\n  }\n  dispose() {\n    this.contentEl_ = null;\n    this.descEl_ = null;\n    this.previouslyActiveEl_ = null;\n    super.dispose();\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n  buildCSSClass() {\n    return `${MODAL_CLASS_NAME} vjs-hidden ${super.buildCSSClass()}`;\n  }\n\n  /**\n   * Returns the label string for this modal. Primarily used for accessibility.\n   *\n   * @return {string}\n   *         the localized or raw label of this modal.\n   */\n  label() {\n    return this.localize(this.options_.label || 'Modal Window');\n  }\n\n  /**\n   * Returns the description string for this modal. Primarily used for\n   * accessibility.\n   *\n   * @return {string}\n   *         The localized or raw description of this modal.\n   */\n  description() {\n    let desc = this.options_.description || this.localize('This is a modal window.');\n\n    // Append a universal closeability message if the modal is closeable.\n    if (this.closeable()) {\n      desc += ' ' + this.localize('This modal can be closed by pressing the Escape key or activating the close button.');\n    }\n    return desc;\n  }\n\n  /**\n   * Opens the modal.\n   *\n   * @fires ModalDialog#beforemodalopen\n   * @fires ModalDialog#modalopen\n   */\n  open() {\n    if (!this.opened_) {\n      const player = this.player();\n\n      /**\n        * Fired just before a `ModalDialog` is opened.\n        *\n        * @event ModalDialog#beforemodalopen\n        * @type {Event}\n        */\n      this.trigger('beforemodalopen');\n      this.opened_ = true;\n\n      // Fill content if the modal has never opened before and\n      // never been filled.\n      if (this.options_.fillAlways || !this.hasBeenOpened_ && !this.hasBeenFilled_) {\n        this.fill();\n      }\n\n      // If the player was playing, pause it and take note of its previously\n      // playing state.\n      this.wasPlaying_ = !player.paused();\n      if (this.options_.pauseOnOpen && this.wasPlaying_) {\n        player.pause();\n      }\n      this.on('keydown', this.handleKeyDown_);\n\n      // Hide controls and note if they were enabled.\n      this.hadControls_ = player.controls();\n      player.controls(false);\n      this.show();\n      this.conditionalFocus_();\n      this.el().setAttribute('aria-hidden', 'false');\n\n      /**\n        * Fired just after a `ModalDialog` is opened.\n        *\n        * @event ModalDialog#modalopen\n        * @type {Event}\n        */\n      this.trigger('modalopen');\n      this.hasBeenOpened_ = true;\n    }\n  }\n\n  /**\n   * If the `ModalDialog` is currently open or closed.\n   *\n   * @param  {boolean} [value]\n   *         If given, it will open (`true`) or close (`false`) the modal.\n   *\n   * @return {boolean}\n   *         the current open state of the modaldialog\n   */\n  opened(value) {\n    if (typeof value === 'boolean') {\n      this[value ? 'open' : 'close']();\n    }\n    return this.opened_;\n  }\n\n  /**\n   * Closes the modal, does nothing if the `ModalDialog` is\n   * not open.\n   *\n   * @fires ModalDialog#beforemodalclose\n   * @fires ModalDialog#modalclose\n   */\n  close() {\n    if (!this.opened_) {\n      return;\n    }\n    const player = this.player();\n\n    /**\n      * Fired just before a `ModalDialog` is closed.\n      *\n      * @event ModalDialog#beforemodalclose\n      * @type {Event}\n      */\n    this.trigger('beforemodalclose');\n    this.opened_ = false;\n    if (this.wasPlaying_ && this.options_.pauseOnOpen) {\n      player.play();\n    }\n    this.off('keydown', this.handleKeyDown_);\n    if (this.hadControls_) {\n      player.controls(true);\n    }\n    this.hide();\n    this.el().setAttribute('aria-hidden', 'true');\n\n    /**\n      * Fired just after a `ModalDialog` is closed.\n      *\n      * @event ModalDialog#modalclose\n      * @type {Event}\n      */\n    this.trigger('modalclose');\n    this.conditionalBlur_();\n    if (this.options_.temporary) {\n      this.dispose();\n    }\n  }\n\n  /**\n   * Check to see if the `ModalDialog` is closeable via the UI.\n   *\n   * @param  {boolean} [value]\n   *         If given as a boolean, it will set the `closeable` option.\n   *\n   * @return {boolean}\n   *         Returns the final value of the closable option.\n   */\n  closeable(value) {\n    if (typeof value === 'boolean') {\n      const closeable = this.closeable_ = !!value;\n      let close = this.getChild('closeButton');\n\n      // If this is being made closeable and has no close button, add one.\n      if (closeable && !close) {\n        // The close button should be a child of the modal - not its\n        // content element, so temporarily change the content element.\n        const temp = this.contentEl_;\n        this.contentEl_ = this.el_;\n        close = this.addChild('closeButton', {\n          controlText: 'Close Modal Dialog'\n        });\n        this.contentEl_ = temp;\n        this.on(close, 'close', this.close_);\n      }\n\n      // If this is being made uncloseable and has a close button, remove it.\n      if (!closeable && close) {\n        this.off(close, 'close', this.close_);\n        this.removeChild(close);\n        close.dispose();\n      }\n    }\n    return this.closeable_;\n  }\n\n  /**\n   * Fill the modal's content element with the modal's \"content\" option.\n   * The content element will be emptied before this change takes place.\n   */\n  fill() {\n    this.fillWith(this.content());\n  }\n\n  /**\n   * Fill the modal's content element with arbitrary content.\n   * The content element will be emptied before this change takes place.\n   *\n   * @fires ModalDialog#beforemodalfill\n   * @fires ModalDialog#modalfill\n   *\n   * @param { import('./utils/dom').ContentDescriptor} [content]\n   *        The same rules apply to this as apply to the `content` option.\n   */\n  fillWith(content) {\n    const contentEl = this.contentEl();\n    const parentEl = contentEl.parentNode;\n    const nextSiblingEl = contentEl.nextSibling;\n\n    /**\n      * Fired just before a `ModalDialog` is filled with content.\n      *\n      * @event ModalDialog#beforemodalfill\n      * @type {Event}\n      */\n    this.trigger('beforemodalfill');\n    this.hasBeenFilled_ = true;\n\n    // Detach the content element from the DOM before performing\n    // manipulation to avoid modifying the live DOM multiple times.\n    parentEl.removeChild(contentEl);\n    this.empty();\n    insertContent(contentEl, content);\n    /**\n     * Fired just after a `ModalDialog` is filled with content.\n     *\n     * @event ModalDialog#modalfill\n     * @type {Event}\n     */\n    this.trigger('modalfill');\n\n    // Re-inject the re-filled content element.\n    if (nextSiblingEl) {\n      parentEl.insertBefore(contentEl, nextSiblingEl);\n    } else {\n      parentEl.appendChild(contentEl);\n    }\n\n    // make sure that the close button is last in the dialog DOM\n    const closeButton = this.getChild('closeButton');\n    if (closeButton) {\n      parentEl.appendChild(closeButton.el_);\n    }\n  }\n\n  /**\n   * Empties the content element. This happens anytime the modal is filled.\n   *\n   * @fires ModalDialog#beforemodalempty\n   * @fires ModalDialog#modalempty\n   */\n  empty() {\n    /**\n    * Fired just before a `ModalDialog` is emptied.\n    *\n    * @event ModalDialog#beforemodalempty\n    * @type {Event}\n    */\n    this.trigger('beforemodalempty');\n    emptyEl(this.contentEl());\n\n    /**\n    * Fired just after a `ModalDialog` is emptied.\n    *\n    * @event ModalDialog#modalempty\n    * @type {Event}\n    */\n    this.trigger('modalempty');\n  }\n\n  /**\n   * Gets or sets the modal content, which gets normalized before being\n   * rendered into the DOM.\n   *\n   * This does not update the DOM or fill the modal, but it is called during\n   * that process.\n   *\n   * @param  { import('./utils/dom').ContentDescriptor} [value]\n   *         If defined, sets the internal content value to be used on the\n   *         next call(s) to `fill`. This value is normalized before being\n   *         inserted. To \"clear\" the internal content value, pass `null`.\n   *\n   * @return { import('./utils/dom').ContentDescriptor}\n   *         The current content of the modal dialog\n   */\n  content(value) {\n    if (typeof value !== 'undefined') {\n      this.content_ = value;\n    }\n    return this.content_;\n  }\n\n  /**\n   * conditionally focus the modal dialog if focus was previously on the player.\n   *\n   * @private\n   */\n  conditionalFocus_() {\n    const activeEl = document.activeElement;\n    const playerEl = this.player_.el_;\n    this.previouslyActiveEl_ = null;\n    if (playerEl.contains(activeEl) || playerEl === activeEl) {\n      this.previouslyActiveEl_ = activeEl;\n      this.focus();\n    }\n  }\n\n  /**\n   * conditionally blur the element and refocus the last focused element\n   *\n   * @private\n   */\n  conditionalBlur_() {\n    if (this.previouslyActiveEl_) {\n      this.previouslyActiveEl_.focus();\n      this.previouslyActiveEl_ = null;\n    }\n  }\n\n  /**\n   * Keydown handler. Attached when modal is focused.\n   *\n   * @listens keydown\n   */\n  handleKeyDown(event) {\n    // Do not allow keydowns to reach out of the modal dialog.\n    event.stopPropagation();\n    if (keycode.isEventKey(event, 'Escape') && this.closeable()) {\n      event.preventDefault();\n      this.close();\n      return;\n    }\n\n    // exit early if it isn't a tab key\n    if (!keycode.isEventKey(event, 'Tab')) {\n      return;\n    }\n    const focusableEls = this.focusableEls_();\n    const activeEl = this.el_.querySelector(':focus');\n    let focusIndex;\n    for (let i = 0; i < focusableEls.length; i++) {\n      if (activeEl === focusableEls[i]) {\n        focusIndex = i;\n        break;\n      }\n    }\n    if (document.activeElement === this.el_) {\n      focusIndex = 0;\n    }\n    if (event.shiftKey && focusIndex === 0) {\n      focusableEls[focusableEls.length - 1].focus();\n      event.preventDefault();\n    } else if (!event.shiftKey && focusIndex === focusableEls.length - 1) {\n      focusableEls[0].focus();\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * get all focusable elements\n   *\n   * @private\n   */\n  focusableEls_() {\n    const allChildren = this.el_.querySelectorAll('*');\n    return Array.prototype.filter.call(allChildren, child => {\n      return (child instanceof window$1.HTMLAnchorElement || child instanceof window$1.HTMLAreaElement) && child.hasAttribute('href') || (child instanceof window$1.HTMLInputElement || child instanceof window$1.HTMLSelectElement || child instanceof window$1.HTMLTextAreaElement || child instanceof window$1.HTMLButtonElement) && !child.hasAttribute('disabled') || child instanceof window$1.HTMLIFrameElement || child instanceof window$1.HTMLObjectElement || child instanceof window$1.HTMLEmbedElement || child.hasAttribute('tabindex') && child.getAttribute('tabindex') !== -1 || child.hasAttribute('contenteditable');\n    });\n  }\n}\n\n/**\n * Default options for `ModalDialog` default options.\n *\n * @type {Object}\n * @private\n */\nModalDialog.prototype.options_ = {\n  pauseOnOpen: true,\n  temporary: true\n};\nComponent$1.registerComponent('ModalDialog', ModalDialog);\n\n/**\n * @file track-list.js\n */\n\n/**\n * Common functionaliy between {@link TextTrackList}, {@link AudioTrackList}, and\n * {@link VideoTrackList}\n *\n * @extends EventTarget\n */\nclass TrackList extends EventTarget$2 {\n  /**\n   * Create an instance of this class\n   *\n   * @param { import('./track').default[] } tracks\n   *        A list of tracks to initialize the list with.\n   *\n   * @abstract\n   */\n  constructor(tracks = []) {\n    super();\n    this.tracks_ = [];\n\n    /**\n     * @memberof TrackList\n     * @member {number} length\n     *         The current number of `Track`s in the this Trackist.\n     * @instance\n     */\n    Object.defineProperty(this, 'length', {\n      get() {\n        return this.tracks_.length;\n      }\n    });\n    for (let i = 0; i < tracks.length; i++) {\n      this.addTrack(tracks[i]);\n    }\n  }\n\n  /**\n   * Add a {@link Track} to the `TrackList`\n   *\n   * @param { import('./track').default } track\n   *        The audio, video, or text track to add to the list.\n   *\n   * @fires TrackList#addtrack\n   */\n  addTrack(track) {\n    const index = this.tracks_.length;\n    if (!('' + index in this)) {\n      Object.defineProperty(this, index, {\n        get() {\n          return this.tracks_[index];\n        }\n      });\n    }\n\n    // Do not add duplicate tracks\n    if (this.tracks_.indexOf(track) === -1) {\n      this.tracks_.push(track);\n      /**\n       * Triggered when a track is added to a track list.\n       *\n       * @event TrackList#addtrack\n       * @type {Event}\n       * @property {Track} track\n       *           A reference to track that was added.\n       */\n      this.trigger({\n        track,\n        type: 'addtrack',\n        target: this\n      });\n    }\n\n    /**\n     * Triggered when a track label is changed.\n     *\n     * @event TrackList#addtrack\n     * @type {Event}\n     * @property {Track} track\n     *           A reference to track that was added.\n     */\n    track.labelchange_ = () => {\n      this.trigger({\n        track,\n        type: 'labelchange',\n        target: this\n      });\n    };\n    if (isEvented(track)) {\n      track.addEventListener('labelchange', track.labelchange_);\n    }\n  }\n\n  /**\n   * Remove a {@link Track} from the `TrackList`\n   *\n   * @param { import('./track').default } rtrack\n   *        The audio, video, or text track to remove from the list.\n   *\n   * @fires TrackList#removetrack\n   */\n  removeTrack(rtrack) {\n    let track;\n    for (let i = 0, l = this.length; i < l; i++) {\n      if (this[i] === rtrack) {\n        track = this[i];\n        if (track.off) {\n          track.off();\n        }\n        this.tracks_.splice(i, 1);\n        break;\n      }\n    }\n    if (!track) {\n      return;\n    }\n\n    /**\n     * Triggered when a track is removed from track list.\n     *\n     * @event TrackList#removetrack\n     * @type {Event}\n     * @property {Track} track\n     *           A reference to track that was removed.\n     */\n    this.trigger({\n      track,\n      type: 'removetrack',\n      target: this\n    });\n  }\n\n  /**\n   * Get a Track from the TrackList by a tracks id\n   *\n   * @param {string} id - the id of the track to get\n   * @method getTrackById\n   * @return { import('./track').default }\n   * @private\n   */\n  getTrackById(id) {\n    let result = null;\n    for (let i = 0, l = this.length; i < l; i++) {\n      const track = this[i];\n      if (track.id === id) {\n        result = track;\n        break;\n      }\n    }\n    return result;\n  }\n}\n\n/**\n * Triggered when a different track is selected/enabled.\n *\n * @event TrackList#change\n * @type {Event}\n */\n\n/**\n * Events that can be called with on + eventName. See {@link EventHandler}.\n *\n * @property {Object} TrackList#allowedEvents_\n * @protected\n */\nTrackList.prototype.allowedEvents_ = {\n  change: 'change',\n  addtrack: 'addtrack',\n  removetrack: 'removetrack',\n  labelchange: 'labelchange'\n};\n\n// emulate attribute EventHandler support to allow for feature detection\nfor (const event in TrackList.prototype.allowedEvents_) {\n  TrackList.prototype['on' + event] = null;\n}\n\n/**\n * @file audio-track-list.js\n */\n\n/**\n * Anywhere we call this function we diverge from the spec\n * as we only support one enabled audiotrack at a time\n *\n * @param {AudioTrackList} list\n *        list to work on\n *\n * @param { import('./audio-track').default } track\n *        The track to skip\n *\n * @private\n */\nconst disableOthers$1 = function (list, track) {\n  for (let i = 0; i < list.length; i++) {\n    if (!Object.keys(list[i]).length || track.id === list[i].id) {\n      continue;\n    }\n    // another audio track is enabled, disable it\n    list[i].enabled = false;\n  }\n};\n\n/**\n * The current list of {@link AudioTrack} for a media file.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotracklist}\n * @extends TrackList\n */\nclass AudioTrackList extends TrackList {\n  /**\n   * Create an instance of this class.\n   *\n   * @param { import('./audio-track').default[] } [tracks=[]]\n   *        A list of `AudioTrack` to instantiate the list with.\n   */\n  constructor(tracks = []) {\n    // make sure only 1 track is enabled\n    // sorted from last index to first index\n    for (let i = tracks.length - 1; i >= 0; i--) {\n      if (tracks[i].enabled) {\n        disableOthers$1(tracks, tracks[i]);\n        break;\n      }\n    }\n    super(tracks);\n    this.changing_ = false;\n  }\n\n  /**\n   * Add an {@link AudioTrack} to the `AudioTrackList`.\n   *\n   * @param { import('./audio-track').default } track\n   *        The AudioTrack to add to the list\n   *\n   * @fires TrackList#addtrack\n   */\n  addTrack(track) {\n    if (track.enabled) {\n      disableOthers$1(this, track);\n    }\n    super.addTrack(track);\n    // native tracks don't have this\n    if (!track.addEventListener) {\n      return;\n    }\n    track.enabledChange_ = () => {\n      // when we are disabling other tracks (since we don't support\n      // more than one track at a time) we will set changing_\n      // to true so that we don't trigger additional change events\n      if (this.changing_) {\n        return;\n      }\n      this.changing_ = true;\n      disableOthers$1(this, track);\n      this.changing_ = false;\n      this.trigger('change');\n    };\n\n    /**\n     * @listens AudioTrack#enabledchange\n     * @fires TrackList#change\n     */\n    track.addEventListener('enabledchange', track.enabledChange_);\n  }\n  removeTrack(rtrack) {\n    super.removeTrack(rtrack);\n    if (rtrack.removeEventListener && rtrack.enabledChange_) {\n      rtrack.removeEventListener('enabledchange', rtrack.enabledChange_);\n      rtrack.enabledChange_ = null;\n    }\n  }\n}\n\n/**\n * @file video-track-list.js\n */\n\n/**\n * Un-select all other {@link VideoTrack}s that are selected.\n *\n * @param {VideoTrackList} list\n *        list to work on\n *\n * @param { import('./video-track').default } track\n *        The track to skip\n *\n * @private\n */\nconst disableOthers = function (list, track) {\n  for (let i = 0; i < list.length; i++) {\n    if (!Object.keys(list[i]).length || track.id === list[i].id) {\n      continue;\n    }\n    // another video track is enabled, disable it\n    list[i].selected = false;\n  }\n};\n\n/**\n * The current list of {@link VideoTrack} for a video.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#videotracklist}\n * @extends TrackList\n */\nclass VideoTrackList extends TrackList {\n  /**\n   * Create an instance of this class.\n   *\n   * @param {VideoTrack[]} [tracks=[]]\n   *        A list of `VideoTrack` to instantiate the list with.\n   */\n  constructor(tracks = []) {\n    // make sure only 1 track is enabled\n    // sorted from last index to first index\n    for (let i = tracks.length - 1; i >= 0; i--) {\n      if (tracks[i].selected) {\n        disableOthers(tracks, tracks[i]);\n        break;\n      }\n    }\n    super(tracks);\n    this.changing_ = false;\n\n    /**\n     * @member {number} VideoTrackList#selectedIndex\n     *         The current index of the selected {@link VideoTrack`}.\n     */\n    Object.defineProperty(this, 'selectedIndex', {\n      get() {\n        for (let i = 0; i < this.length; i++) {\n          if (this[i].selected) {\n            return i;\n          }\n        }\n        return -1;\n      },\n      set() {}\n    });\n  }\n\n  /**\n   * Add a {@link VideoTrack} to the `VideoTrackList`.\n   *\n   * @param { import('./video-track').default } track\n   *        The VideoTrack to add to the list\n   *\n   * @fires TrackList#addtrack\n   */\n  addTrack(track) {\n    if (track.selected) {\n      disableOthers(this, track);\n    }\n    super.addTrack(track);\n    // native tracks don't have this\n    if (!track.addEventListener) {\n      return;\n    }\n    track.selectedChange_ = () => {\n      if (this.changing_) {\n        return;\n      }\n      this.changing_ = true;\n      disableOthers(this, track);\n      this.changing_ = false;\n      this.trigger('change');\n    };\n\n    /**\n     * @listens VideoTrack#selectedchange\n     * @fires TrackList#change\n     */\n    track.addEventListener('selectedchange', track.selectedChange_);\n  }\n  removeTrack(rtrack) {\n    super.removeTrack(rtrack);\n    if (rtrack.removeEventListener && rtrack.selectedChange_) {\n      rtrack.removeEventListener('selectedchange', rtrack.selectedChange_);\n      rtrack.selectedChange_ = null;\n    }\n  }\n}\n\n/**\n * @file text-track-list.js\n */\n\n/**\n * The current list of {@link TextTrack} for a media file.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttracklist}\n * @extends TrackList\n */\nclass TextTrackList extends TrackList {\n  /**\n   * Add a {@link TextTrack} to the `TextTrackList`\n   *\n   * @param { import('./text-track').default } track\n   *        The text track to add to the list.\n   *\n   * @fires TrackList#addtrack\n   */\n  addTrack(track) {\n    super.addTrack(track);\n    if (!this.queueChange_) {\n      this.queueChange_ = () => this.queueTrigger('change');\n    }\n    if (!this.triggerSelectedlanguagechange) {\n      this.triggerSelectedlanguagechange_ = () => this.trigger('selectedlanguagechange');\n    }\n\n    /**\n     * @listens TextTrack#modechange\n     * @fires TrackList#change\n     */\n    track.addEventListener('modechange', this.queueChange_);\n    const nonLanguageTextTrackKind = ['metadata', 'chapters'];\n    if (nonLanguageTextTrackKind.indexOf(track.kind) === -1) {\n      track.addEventListener('modechange', this.triggerSelectedlanguagechange_);\n    }\n  }\n  removeTrack(rtrack) {\n    super.removeTrack(rtrack);\n\n    // manually remove the event handlers we added\n    if (rtrack.removeEventListener) {\n      if (this.queueChange_) {\n        rtrack.removeEventListener('modechange', this.queueChange_);\n      }\n      if (this.selectedlanguagechange_) {\n        rtrack.removeEventListener('modechange', this.triggerSelectedlanguagechange_);\n      }\n    }\n  }\n}\n\n/**\n * @file html-track-element-list.js\n */\n\n/**\n * The current list of {@link HtmlTrackElement}s.\n */\nclass HtmlTrackElementList {\n  /**\n   * Create an instance of this class.\n   *\n   * @param {HtmlTrackElement[]} [tracks=[]]\n   *        A list of `HtmlTrackElement` to instantiate the list with.\n   */\n  constructor(trackElements = []) {\n    this.trackElements_ = [];\n\n    /**\n     * @memberof HtmlTrackElementList\n     * @member {number} length\n     *         The current number of `Track`s in the this Trackist.\n     * @instance\n     */\n    Object.defineProperty(this, 'length', {\n      get() {\n        return this.trackElements_.length;\n      }\n    });\n    for (let i = 0, length = trackElements.length; i < length; i++) {\n      this.addTrackElement_(trackElements[i]);\n    }\n  }\n\n  /**\n   * Add an {@link HtmlTrackElement} to the `HtmlTrackElementList`\n   *\n   * @param {HtmlTrackElement} trackElement\n   *        The track element to add to the list.\n   *\n   * @private\n   */\n  addTrackElement_(trackElement) {\n    const index = this.trackElements_.length;\n    if (!('' + index in this)) {\n      Object.defineProperty(this, index, {\n        get() {\n          return this.trackElements_[index];\n        }\n      });\n    }\n\n    // Do not add duplicate elements\n    if (this.trackElements_.indexOf(trackElement) === -1) {\n      this.trackElements_.push(trackElement);\n    }\n  }\n\n  /**\n   * Get an {@link HtmlTrackElement} from the `HtmlTrackElementList` given an\n   * {@link TextTrack}.\n   *\n   * @param {TextTrack} track\n   *        The track associated with a track element.\n   *\n   * @return {HtmlTrackElement|undefined}\n   *         The track element that was found or undefined.\n   *\n   * @private\n   */\n  getTrackElementByTrack_(track) {\n    let trackElement_;\n    for (let i = 0, length = this.trackElements_.length; i < length; i++) {\n      if (track === this.trackElements_[i].track) {\n        trackElement_ = this.trackElements_[i];\n        break;\n      }\n    }\n    return trackElement_;\n  }\n\n  /**\n   * Remove a {@link HtmlTrackElement} from the `HtmlTrackElementList`\n   *\n   * @param {HtmlTrackElement} trackElement\n   *        The track element to remove from the list.\n   *\n   * @private\n   */\n  removeTrackElement_(trackElement) {\n    for (let i = 0, length = this.trackElements_.length; i < length; i++) {\n      if (trackElement === this.trackElements_[i]) {\n        if (this.trackElements_[i].track && typeof this.trackElements_[i].track.off === 'function') {\n          this.trackElements_[i].track.off();\n        }\n        if (typeof this.trackElements_[i].off === 'function') {\n          this.trackElements_[i].off();\n        }\n        this.trackElements_.splice(i, 1);\n        break;\n      }\n    }\n  }\n}\n\n/**\n * @file text-track-cue-list.js\n */\n\n/**\n * @typedef {Object} TextTrackCueList~TextTrackCue\n *\n * @property {string} id\n *           The unique id for this text track cue\n *\n * @property {number} startTime\n *           The start time for this text track cue\n *\n * @property {number} endTime\n *           The end time for this text track cue\n *\n * @property {boolean} pauseOnExit\n *           Pause when the end time is reached if true.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackcue}\n */\n\n/**\n * A List of TextTrackCues.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackcuelist}\n */\nclass TextTrackCueList {\n  /**\n   * Create an instance of this class..\n   *\n   * @param {Array} cues\n   *        A list of cues to be initialized with\n   */\n  constructor(cues) {\n    TextTrackCueList.prototype.setCues_.call(this, cues);\n\n    /**\n     * @memberof TextTrackCueList\n     * @member {number} length\n     *         The current number of `TextTrackCue`s in the TextTrackCueList.\n     * @instance\n     */\n    Object.defineProperty(this, 'length', {\n      get() {\n        return this.length_;\n      }\n    });\n  }\n\n  /**\n   * A setter for cues in this list. Creates getters\n   * an an index for the cues.\n   *\n   * @param {Array} cues\n   *        An array of cues to set\n   *\n   * @private\n   */\n  setCues_(cues) {\n    const oldLength = this.length || 0;\n    let i = 0;\n    const l = cues.length;\n    this.cues_ = cues;\n    this.length_ = cues.length;\n    const defineProp = function (index) {\n      if (!('' + index in this)) {\n        Object.defineProperty(this, '' + index, {\n          get() {\n            return this.cues_[index];\n          }\n        });\n      }\n    };\n    if (oldLength < l) {\n      i = oldLength;\n      for (; i < l; i++) {\n        defineProp.call(this, i);\n      }\n    }\n  }\n\n  /**\n   * Get a `TextTrackCue` that is currently in the `TextTrackCueList` by id.\n   *\n   * @param {string} id\n   *        The id of the cue that should be searched for.\n   *\n   * @return {TextTrackCueList~TextTrackCue|null}\n   *         A single cue or null if none was found.\n   */\n  getCueById(id) {\n    let result = null;\n    for (let i = 0, l = this.length; i < l; i++) {\n      const cue = this[i];\n      if (cue.id === id) {\n        result = cue;\n        break;\n      }\n    }\n    return result;\n  }\n}\n\n/**\n * @file track-kinds.js\n */\n\n/**\n * All possible `VideoTrackKind`s\n *\n * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-videotrack-kind\n * @typedef VideoTrack~Kind\n * @enum\n */\nconst VideoTrackKind = {\n  alternative: 'alternative',\n  captions: 'captions',\n  main: 'main',\n  sign: 'sign',\n  subtitles: 'subtitles',\n  commentary: 'commentary'\n};\n\n/**\n * All possible `AudioTrackKind`s\n *\n * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-audiotrack-kind\n * @typedef AudioTrack~Kind\n * @enum\n */\nconst AudioTrackKind = {\n  'alternative': 'alternative',\n  'descriptions': 'descriptions',\n  'main': 'main',\n  'main-desc': 'main-desc',\n  'translation': 'translation',\n  'commentary': 'commentary'\n};\n\n/**\n * All possible `TextTrackKind`s\n *\n * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-texttrack-kind\n * @typedef TextTrack~Kind\n * @enum\n */\nconst TextTrackKind = {\n  subtitles: 'subtitles',\n  captions: 'captions',\n  descriptions: 'descriptions',\n  chapters: 'chapters',\n  metadata: 'metadata'\n};\n\n/**\n * All possible `TextTrackMode`s\n *\n * @see https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackmode\n * @typedef TextTrack~Mode\n * @enum\n */\nconst TextTrackMode = {\n  disabled: 'disabled',\n  hidden: 'hidden',\n  showing: 'showing'\n};\n\n/**\n * @file track.js\n */\n\n/**\n * A Track class that contains all of the common functionality for {@link AudioTrack},\n * {@link VideoTrack}, and {@link TextTrack}.\n *\n * > Note: This class should not be used directly\n *\n * @see {@link https://html.spec.whatwg.org/multipage/embedded-content.html}\n * @extends EventTarget\n * @abstract\n */\nclass Track extends EventTarget$2 {\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Object} [options={}]\n   *        Object of option names and values\n   *\n   * @param {string} [options.kind='']\n   *        A valid kind for the track type you are creating.\n   *\n   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]\n   *        A unique id for this AudioTrack.\n   *\n   * @param {string} [options.label='']\n   *        The menu label for this track.\n   *\n   * @param {string} [options.language='']\n   *        A valid two character language code.\n   *\n   * @abstract\n   */\n  constructor(options = {}) {\n    super();\n    const trackProps = {\n      id: options.id || 'vjs_track_' + newGUID(),\n      kind: options.kind || '',\n      language: options.language || ''\n    };\n    let label = options.label || '';\n\n    /**\n     * @memberof Track\n     * @member {string} id\n     *         The id of this track. Cannot be changed after creation.\n     * @instance\n     *\n     * @readonly\n     */\n\n    /**\n     * @memberof Track\n     * @member {string} kind\n     *         The kind of track that this is. Cannot be changed after creation.\n     * @instance\n     *\n     * @readonly\n     */\n\n    /**\n     * @memberof Track\n     * @member {string} language\n     *         The two letter language code for this track. Cannot be changed after\n     *         creation.\n     * @instance\n     *\n     * @readonly\n     */\n\n    for (const key in trackProps) {\n      Object.defineProperty(this, key, {\n        get() {\n          return trackProps[key];\n        },\n        set() {}\n      });\n    }\n\n    /**\n     * @memberof Track\n     * @member {string} label\n     *         The label of this track. Cannot be changed after creation.\n     * @instance\n     *\n     * @fires Track#labelchange\n     */\n    Object.defineProperty(this, 'label', {\n      get() {\n        return label;\n      },\n      set(newLabel) {\n        if (newLabel !== label) {\n          label = newLabel;\n\n          /**\n           * An event that fires when label changes on this track.\n           *\n           * > Note: This is not part of the spec!\n           *\n           * @event Track#labelchange\n           * @type {Event}\n           */\n          this.trigger('labelchange');\n        }\n      }\n    });\n  }\n}\n\n/**\n * @file url.js\n * @module url\n */\n\n/**\n * @typedef {Object} url:URLObject\n *\n * @property {string} protocol\n *           The protocol of the url that was parsed.\n *\n * @property {string} hostname\n *           The hostname of the url that was parsed.\n *\n * @property {string} port\n *           The port of the url that was parsed.\n *\n * @property {string} pathname\n *           The pathname of the url that was parsed.\n *\n * @property {string} search\n *           The search query of the url that was parsed.\n *\n * @property {string} hash\n *           The hash of the url that was parsed.\n *\n * @property {string} host\n *           The host of the url that was parsed.\n */\n\n/**\n * Resolve and parse the elements of a URL.\n *\n * @function\n * @param    {String} url\n *           The url to parse\n *\n * @return   {url:URLObject}\n *           An object of url details\n */\nconst parseUrl = function (url) {\n  // This entire method can be replace with URL once we are able to drop IE11\n\n  const props = ['protocol', 'hostname', 'port', 'pathname', 'search', 'hash', 'host'];\n\n  // add the url to an anchor and let the browser parse the URL\n  const a = document.createElement('a');\n  a.href = url;\n\n  // Copy the specific URL properties to a new object\n  // This is also needed for IE because the anchor loses its\n  // properties when it's removed from the dom\n  const details = {};\n  for (let i = 0; i < props.length; i++) {\n    details[props[i]] = a[props[i]];\n  }\n\n  // IE adds the port to the host property unlike everyone else. If\n  // a port identifier is added for standard ports, strip it.\n  if (details.protocol === 'http:') {\n    details.host = details.host.replace(/:80$/, '');\n  }\n  if (details.protocol === 'https:') {\n    details.host = details.host.replace(/:443$/, '');\n  }\n  if (!details.protocol) {\n    details.protocol = window$1.location.protocol;\n  }\n\n  /* istanbul ignore if */\n  if (!details.host) {\n    details.host = window$1.location.host;\n  }\n  return details;\n};\n\n/**\n * Get absolute version of relative URL.\n *\n * @function\n * @param    {string} url\n *           URL to make absolute\n *\n * @return   {string}\n *           Absolute URL\n *\n * @see      http://stackoverflow.com/questions/470832/getting-an-absolute-url-from-a-relative-one-ie6-issue\n */\nconst getAbsoluteURL = function (url) {\n  // Check if absolute URL\n  if (!url.match(/^https?:\\/\\//)) {\n    // Add the url to an anchor and let the browser parse it to convert to an absolute url\n    const a = document.createElement('a');\n    a.href = url;\n    url = a.href;\n  }\n  return url;\n};\n\n/**\n * Returns the extension of the passed file name. It will return an empty string\n * if passed an invalid path.\n *\n * @function\n * @param    {string} path\n *           The fileName path like '/path/to/file.mp4'\n *\n * @return  {string}\n *           The extension in lower case or an empty string if no\n *           extension could be found.\n */\nconst getFileExtension = function (path) {\n  if (typeof path === 'string') {\n    const splitPathRe = /^(\\/?)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?)(\\.([^\\.\\/\\?]+)))(?:[\\/]*|[\\?].*)$/;\n    const pathParts = splitPathRe.exec(path);\n    if (pathParts) {\n      return pathParts.pop().toLowerCase();\n    }\n  }\n  return '';\n};\n\n/**\n * Returns whether the url passed is a cross domain request or not.\n *\n * @function\n * @param    {string} url\n *           The url to check.\n *\n * @param    {Object} [winLoc]\n *           the domain to check the url against, defaults to window.location\n *\n * @param    {string} [winLoc.protocol]\n *           The window location protocol defaults to window.location.protocol\n *\n * @param    {string} [winLoc.host]\n *           The window location host defaults to window.location.host\n *\n * @return   {boolean}\n *           Whether it is a cross domain request or not.\n */\nconst isCrossOrigin = function (url, winLoc = window$1.location) {\n  const urlInfo = parseUrl(url);\n\n  // IE8 protocol relative urls will return ':' for protocol\n  const srcProtocol = urlInfo.protocol === ':' ? winLoc.protocol : urlInfo.protocol;\n\n  // Check if url is for another domain/origin\n  // IE8 doesn't know location.origin, so we won't rely on it here\n  const crossOrigin = srcProtocol + urlInfo.host !== winLoc.protocol + winLoc.host;\n  return crossOrigin;\n};\n\nvar Url = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  parseUrl: parseUrl,\n  getAbsoluteURL: getAbsoluteURL,\n  getFileExtension: getFileExtension,\n  isCrossOrigin: isCrossOrigin\n});\n\n/**\n * @file text-track.js\n */\n\n/**\n * Takes a webvtt file contents and parses it into cues\n *\n * @param {string} srcContent\n *        webVTT file contents\n *\n * @param {TextTrack} track\n *        TextTrack to add cues to. Cues come from the srcContent.\n *\n * @private\n */\nconst parseCues = function (srcContent, track) {\n  const parser = new window$1.WebVTT.Parser(window$1, window$1.vttjs, window$1.WebVTT.StringDecoder());\n  const errors = [];\n  parser.oncue = function (cue) {\n    track.addCue(cue);\n  };\n  parser.onparsingerror = function (error) {\n    errors.push(error);\n  };\n  parser.onflush = function () {\n    track.trigger({\n      type: 'loadeddata',\n      target: track\n    });\n  };\n  parser.parse(srcContent);\n  if (errors.length > 0) {\n    if (window$1.console && window$1.console.groupCollapsed) {\n      window$1.console.groupCollapsed(`Text Track parsing errors for ${track.src}`);\n    }\n    errors.forEach(error => log$1.error(error));\n    if (window$1.console && window$1.console.groupEnd) {\n      window$1.console.groupEnd();\n    }\n  }\n  parser.flush();\n};\n\n/**\n * Load a `TextTrack` from a specified url.\n *\n * @param {string} src\n *        Url to load track from.\n *\n * @param {TextTrack} track\n *        Track to add cues to. Comes from the content at the end of `url`.\n *\n * @private\n */\nconst loadTrack = function (src, track) {\n  const opts = {\n    uri: src\n  };\n  const crossOrigin = isCrossOrigin(src);\n  if (crossOrigin) {\n    opts.cors = crossOrigin;\n  }\n  const withCredentials = track.tech_.crossOrigin() === 'use-credentials';\n  if (withCredentials) {\n    opts.withCredentials = withCredentials;\n  }\n  XHR(opts, bind_(this, function (err, response, responseBody) {\n    if (err) {\n      return log$1.error(err, response);\n    }\n    track.loaded_ = true;\n\n    // Make sure that vttjs has loaded, otherwise, wait till it finished loading\n    // NOTE: this is only used for the alt/video.novtt.js build\n    if (typeof window$1.WebVTT !== 'function') {\n      if (track.tech_) {\n        // to prevent use before define eslint error, we define loadHandler\n        // as a let here\n        track.tech_.any(['vttjsloaded', 'vttjserror'], event => {\n          if (event.type === 'vttjserror') {\n            log$1.error(`vttjs failed to load, stopping trying to process ${track.src}`);\n            return;\n          }\n          return parseCues(responseBody, track);\n        });\n      }\n    } else {\n      parseCues(responseBody, track);\n    }\n  }));\n};\n\n/**\n * A representation of a single `TextTrack`.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttrack}\n * @extends Track\n */\nclass TextTrack extends Track {\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Object} options={}\n   *        Object of option names and values\n   *\n   * @param { import('../tech/tech').default } options.tech\n   *        A reference to the tech that owns this TextTrack.\n   *\n   * @param {TextTrack~Kind} [options.kind='subtitles']\n   *        A valid text track kind.\n   *\n   * @param {TextTrack~Mode} [options.mode='disabled']\n   *        A valid text track mode.\n   *\n   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]\n   *        A unique id for this TextTrack.\n   *\n   * @param {string} [options.label='']\n   *        The menu label for this track.\n   *\n   * @param {string} [options.language='']\n   *        A valid two character language code.\n   *\n   * @param {string} [options.srclang='']\n   *        A valid two character language code. An alternative, but deprioritized\n   *        version of `options.language`\n   *\n   * @param {string} [options.src]\n   *        A url to TextTrack cues.\n   *\n   * @param {boolean} [options.default]\n   *        If this track should default to on or off.\n   */\n  constructor(options = {}) {\n    if (!options.tech) {\n      throw new Error('A tech was not provided.');\n    }\n    const settings = merge$1(options, {\n      kind: TextTrackKind[options.kind] || 'subtitles',\n      language: options.language || options.srclang || ''\n    });\n    let mode = TextTrackMode[settings.mode] || 'disabled';\n    const default_ = settings.default;\n    if (settings.kind === 'metadata' || settings.kind === 'chapters') {\n      mode = 'hidden';\n    }\n    super(settings);\n    this.tech_ = settings.tech;\n    this.cues_ = [];\n    this.activeCues_ = [];\n    this.preload_ = this.tech_.preloadTextTracks !== false;\n    const cues = new TextTrackCueList(this.cues_);\n    const activeCues = new TextTrackCueList(this.activeCues_);\n    let changed = false;\n    this.timeupdateHandler = bind_(this, function (event = {}) {\n      if (this.tech_.isDisposed()) {\n        return;\n      }\n      if (!this.tech_.isReady_) {\n        if (event.type !== 'timeupdate') {\n          this.rvf_ = this.tech_.requestVideoFrameCallback(this.timeupdateHandler);\n        }\n        return;\n      }\n\n      // Accessing this.activeCues for the side-effects of updating itself\n      // due to its nature as a getter function. Do not remove or cues will\n      // stop updating!\n      // Use the setter to prevent deletion from uglify (pure_getters rule)\n      this.activeCues = this.activeCues;\n      if (changed) {\n        this.trigger('cuechange');\n        changed = false;\n      }\n      if (event.type !== 'timeupdate') {\n        this.rvf_ = this.tech_.requestVideoFrameCallback(this.timeupdateHandler);\n      }\n    });\n    const disposeHandler = () => {\n      this.stopTracking();\n    };\n    this.tech_.one('dispose', disposeHandler);\n    if (mode !== 'disabled') {\n      this.startTracking();\n    }\n    Object.defineProperties(this, {\n      /**\n       * @memberof TextTrack\n       * @member {boolean} default\n       *         If this track was set to be on or off by default. Cannot be changed after\n       *         creation.\n       * @instance\n       *\n       * @readonly\n       */\n      default: {\n        get() {\n          return default_;\n        },\n        set() {}\n      },\n      /**\n       * @memberof TextTrack\n       * @member {string} mode\n       *         Set the mode of this TextTrack to a valid {@link TextTrack~Mode}. Will\n       *         not be set if setting to an invalid mode.\n       * @instance\n       *\n       * @fires TextTrack#modechange\n       */\n      mode: {\n        get() {\n          return mode;\n        },\n        set(newMode) {\n          if (!TextTrackMode[newMode]) {\n            return;\n          }\n          if (mode === newMode) {\n            return;\n          }\n          mode = newMode;\n          if (!this.preload_ && mode !== 'disabled' && this.cues.length === 0) {\n            // On-demand load.\n            loadTrack(this.src, this);\n          }\n          this.stopTracking();\n          if (mode !== 'disabled') {\n            this.startTracking();\n          }\n          /**\n           * An event that fires when mode changes on this track. This allows\n           * the TextTrackList that holds this track to act accordingly.\n           *\n           * > Note: This is not part of the spec!\n           *\n           * @event TextTrack#modechange\n           * @type {Event}\n           */\n          this.trigger('modechange');\n        }\n      },\n      /**\n       * @memberof TextTrack\n       * @member {TextTrackCueList} cues\n       *         The text track cue list for this TextTrack.\n       * @instance\n       */\n      cues: {\n        get() {\n          if (!this.loaded_) {\n            return null;\n          }\n          return cues;\n        },\n        set() {}\n      },\n      /**\n       * @memberof TextTrack\n       * @member {TextTrackCueList} activeCues\n       *         The list text track cues that are currently active for this TextTrack.\n       * @instance\n       */\n      activeCues: {\n        get() {\n          if (!this.loaded_) {\n            return null;\n          }\n\n          // nothing to do\n          if (this.cues.length === 0) {\n            return activeCues;\n          }\n          const ct = this.tech_.currentTime();\n          const active = [];\n          for (let i = 0, l = this.cues.length; i < l; i++) {\n            const cue = this.cues[i];\n            if (cue.startTime <= ct && cue.endTime >= ct) {\n              active.push(cue);\n            }\n          }\n          changed = false;\n          if (active.length !== this.activeCues_.length) {\n            changed = true;\n          } else {\n            for (let i = 0; i < active.length; i++) {\n              if (this.activeCues_.indexOf(active[i]) === -1) {\n                changed = true;\n              }\n            }\n          }\n          this.activeCues_ = active;\n          activeCues.setCues_(this.activeCues_);\n          return activeCues;\n        },\n        // /!\\ Keep this setter empty (see the timeupdate handler above)\n        set() {}\n      }\n    });\n    if (settings.src) {\n      this.src = settings.src;\n      if (!this.preload_) {\n        // Tracks will load on-demand.\n        // Act like we're loaded for other purposes.\n        this.loaded_ = true;\n      }\n      if (this.preload_ || settings.kind !== 'subtitles' && settings.kind !== 'captions') {\n        loadTrack(this.src, this);\n      }\n    } else {\n      this.loaded_ = true;\n    }\n  }\n  startTracking() {\n    // More precise cues based on requestVideoFrameCallback with a requestAnimationFram fallback\n    this.rvf_ = this.tech_.requestVideoFrameCallback(this.timeupdateHandler);\n    // Also listen to timeupdate in case rVFC/rAF stops (window in background, audio in video el)\n    this.tech_.on('timeupdate', this.timeupdateHandler);\n  }\n  stopTracking() {\n    if (this.rvf_) {\n      this.tech_.cancelVideoFrameCallback(this.rvf_);\n      this.rvf_ = undefined;\n    }\n    this.tech_.off('timeupdate', this.timeupdateHandler);\n  }\n\n  /**\n   * Add a cue to the internal list of cues.\n   *\n   * @param {TextTrack~Cue} cue\n   *        The cue to add to our internal list\n   */\n  addCue(originalCue) {\n    let cue = originalCue;\n\n    // Testing if the cue is a VTTCue in a way that survives minification\n    if (!('getCueAsHTML' in cue)) {\n      cue = new window$1.vttjs.VTTCue(originalCue.startTime, originalCue.endTime, originalCue.text);\n      for (const prop in originalCue) {\n        if (!(prop in cue)) {\n          cue[prop] = originalCue[prop];\n        }\n      }\n\n      // make sure that `id` is copied over\n      cue.id = originalCue.id;\n      cue.originalCue_ = originalCue;\n    }\n    const tracks = this.tech_.textTracks();\n    for (let i = 0; i < tracks.length; i++) {\n      if (tracks[i] !== this) {\n        tracks[i].removeCue(cue);\n      }\n    }\n    this.cues_.push(cue);\n    this.cues.setCues_(this.cues_);\n  }\n\n  /**\n   * Remove a cue from our internal list\n   *\n   * @param {TextTrack~Cue} removeCue\n   *        The cue to remove from our internal list\n   */\n  removeCue(removeCue) {\n    let i = this.cues_.length;\n    while (i--) {\n      const cue = this.cues_[i];\n      if (cue === removeCue || cue.originalCue_ && cue.originalCue_ === removeCue) {\n        this.cues_.splice(i, 1);\n        this.cues.setCues_(this.cues_);\n        break;\n      }\n    }\n  }\n}\n\n/**\n * cuechange - One or more cues in the track have become active or stopped being active.\n * @protected\n */\nTextTrack.prototype.allowedEvents_ = {\n  cuechange: 'cuechange'\n};\n\n/**\n * A representation of a single `AudioTrack`. If it is part of an {@link AudioTrackList}\n * only one `AudioTrack` in the list will be enabled at a time.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotrack}\n * @extends Track\n */\nclass AudioTrack extends Track {\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Object} [options={}]\n   *        Object of option names and values\n   *\n   * @param {AudioTrack~Kind} [options.kind='']\n   *        A valid audio track kind\n   *\n   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]\n   *        A unique id for this AudioTrack.\n   *\n   * @param {string} [options.label='']\n   *        The menu label for this track.\n   *\n   * @param {string} [options.language='']\n   *        A valid two character language code.\n   *\n   * @param {boolean} [options.enabled]\n   *        If this track is the one that is currently playing. If this track is part of\n   *        an {@link AudioTrackList}, only one {@link AudioTrack} will be enabled.\n   */\n  constructor(options = {}) {\n    const settings = merge$1(options, {\n      kind: AudioTrackKind[options.kind] || ''\n    });\n    super(settings);\n    let enabled = false;\n\n    /**\n     * @memberof AudioTrack\n     * @member {boolean} enabled\n     *         If this `AudioTrack` is enabled or not. When setting this will\n     *         fire {@link AudioTrack#enabledchange} if the state of enabled is changed.\n     * @instance\n     *\n     * @fires VideoTrack#selectedchange\n     */\n    Object.defineProperty(this, 'enabled', {\n      get() {\n        return enabled;\n      },\n      set(newEnabled) {\n        // an invalid or unchanged value\n        if (typeof newEnabled !== 'boolean' || newEnabled === enabled) {\n          return;\n        }\n        enabled = newEnabled;\n\n        /**\n         * An event that fires when enabled changes on this track. This allows\n         * the AudioTrackList that holds this track to act accordingly.\n         *\n         * > Note: This is not part of the spec! Native tracks will do\n         *         this internally without an event.\n         *\n         * @event AudioTrack#enabledchange\n         * @type {Event}\n         */\n        this.trigger('enabledchange');\n      }\n    });\n\n    // if the user sets this track to selected then\n    // set selected to that true value otherwise\n    // we keep it false\n    if (settings.enabled) {\n      this.enabled = settings.enabled;\n    }\n    this.loaded_ = true;\n  }\n}\n\n/**\n * A representation of a single `VideoTrack`.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#videotrack}\n * @extends Track\n */\nclass VideoTrack extends Track {\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Object} [options={}]\n   *        Object of option names and values\n   *\n   * @param {string} [options.kind='']\n   *        A valid {@link VideoTrack~Kind}\n   *\n   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]\n   *        A unique id for this AudioTrack.\n   *\n   * @param {string} [options.label='']\n   *        The menu label for this track.\n   *\n   * @param {string} [options.language='']\n   *        A valid two character language code.\n   *\n   * @param {boolean} [options.selected]\n   *        If this track is the one that is currently playing.\n   */\n  constructor(options = {}) {\n    const settings = merge$1(options, {\n      kind: VideoTrackKind[options.kind] || ''\n    });\n    super(settings);\n    let selected = false;\n\n    /**\n     * @memberof VideoTrack\n     * @member {boolean} selected\n     *         If this `VideoTrack` is selected or not. When setting this will\n     *         fire {@link VideoTrack#selectedchange} if the state of selected changed.\n     * @instance\n     *\n     * @fires VideoTrack#selectedchange\n     */\n    Object.defineProperty(this, 'selected', {\n      get() {\n        return selected;\n      },\n      set(newSelected) {\n        // an invalid or unchanged value\n        if (typeof newSelected !== 'boolean' || newSelected === selected) {\n          return;\n        }\n        selected = newSelected;\n\n        /**\n         * An event that fires when selected changes on this track. This allows\n         * the VideoTrackList that holds this track to act accordingly.\n         *\n         * > Note: This is not part of the spec! Native tracks will do\n         *         this internally without an event.\n         *\n         * @event VideoTrack#selectedchange\n         * @type {Event}\n         */\n        this.trigger('selectedchange');\n      }\n    });\n\n    // if the user sets this track to selected then\n    // set selected to that true value otherwise\n    // we keep it false\n    if (settings.selected) {\n      this.selected = settings.selected;\n    }\n  }\n}\n\n/**\n * @file html-track-element.js\n */\n\n/**\n * A single track represented in the DOM.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#htmltrackelement}\n * @extends EventTarget\n */\nclass HTMLTrackElement extends EventTarget$2 {\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Object} options={}\n   *        Object of option names and values\n   *\n   * @param { import('../tech/tech').default } options.tech\n   *        A reference to the tech that owns this HTMLTrackElement.\n   *\n   * @param {TextTrack~Kind} [options.kind='subtitles']\n   *        A valid text track kind.\n   *\n   * @param {TextTrack~Mode} [options.mode='disabled']\n   *        A valid text track mode.\n   *\n   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]\n   *        A unique id for this TextTrack.\n   *\n   * @param {string} [options.label='']\n   *        The menu label for this track.\n   *\n   * @param {string} [options.language='']\n   *        A valid two character language code.\n   *\n   * @param {string} [options.srclang='']\n   *        A valid two character language code. An alternative, but deprioritized\n   *        version of `options.language`\n   *\n   * @param {string} [options.src]\n   *        A url to TextTrack cues.\n   *\n   * @param {boolean} [options.default]\n   *        If this track should default to on or off.\n   */\n  constructor(options = {}) {\n    super();\n    let readyState;\n    const track = new TextTrack(options);\n    this.kind = track.kind;\n    this.src = track.src;\n    this.srclang = track.language;\n    this.label = track.label;\n    this.default = track.default;\n    Object.defineProperties(this, {\n      /**\n       * @memberof HTMLTrackElement\n       * @member {HTMLTrackElement~ReadyState} readyState\n       *         The current ready state of the track element.\n       * @instance\n       */\n      readyState: {\n        get() {\n          return readyState;\n        }\n      },\n      /**\n       * @memberof HTMLTrackElement\n       * @member {TextTrack} track\n       *         The underlying TextTrack object.\n       * @instance\n       *\n       */\n      track: {\n        get() {\n          return track;\n        }\n      }\n    });\n    readyState = HTMLTrackElement.NONE;\n\n    /**\n     * @listens TextTrack#loadeddata\n     * @fires HTMLTrackElement#load\n     */\n    track.addEventListener('loadeddata', () => {\n      readyState = HTMLTrackElement.LOADED;\n      this.trigger({\n        type: 'load',\n        target: this\n      });\n    });\n  }\n}\n\n/**\n * @protected\n */\nHTMLTrackElement.prototype.allowedEvents_ = {\n  load: 'load'\n};\n\n/**\n * The text track not loaded state.\n *\n * @type {number}\n * @static\n */\nHTMLTrackElement.NONE = 0;\n\n/**\n * The text track loading state.\n *\n * @type {number}\n * @static\n */\nHTMLTrackElement.LOADING = 1;\n\n/**\n * The text track loaded state.\n *\n * @type {number}\n * @static\n */\nHTMLTrackElement.LOADED = 2;\n\n/**\n * The text track failed to load state.\n *\n * @type {number}\n * @static\n */\nHTMLTrackElement.ERROR = 3;\n\n/*\n * This file contains all track properties that are used in\n * player.js, tech.js, html5.js and possibly other techs in the future.\n */\n\nconst NORMAL = {\n  audio: {\n    ListClass: AudioTrackList,\n    TrackClass: AudioTrack,\n    capitalName: 'Audio'\n  },\n  video: {\n    ListClass: VideoTrackList,\n    TrackClass: VideoTrack,\n    capitalName: 'Video'\n  },\n  text: {\n    ListClass: TextTrackList,\n    TrackClass: TextTrack,\n    capitalName: 'Text'\n  }\n};\nObject.keys(NORMAL).forEach(function (type) {\n  NORMAL[type].getterName = `${type}Tracks`;\n  NORMAL[type].privateName = `${type}Tracks_`;\n});\nconst REMOTE = {\n  remoteText: {\n    ListClass: TextTrackList,\n    TrackClass: TextTrack,\n    capitalName: 'RemoteText',\n    getterName: 'remoteTextTracks',\n    privateName: 'remoteTextTracks_'\n  },\n  remoteTextEl: {\n    ListClass: HtmlTrackElementList,\n    TrackClass: HTMLTrackElement,\n    capitalName: 'RemoteTextTrackEls',\n    getterName: 'remoteTextTrackEls',\n    privateName: 'remoteTextTrackEls_'\n  }\n};\nconst ALL = Object.assign({}, NORMAL, REMOTE);\nREMOTE.names = Object.keys(REMOTE);\nNORMAL.names = Object.keys(NORMAL);\nALL.names = [].concat(REMOTE.names).concat(NORMAL.names);\n\n/**\n * @file tech.js\n */\n\n/**\n * An Object containing a structure like: `{src: 'url', type: 'mimetype'}` or string\n * that just contains the src url alone.\n * * `var SourceObject = {src: 'http://ex.com/video.mp4', type: 'video/mp4'};`\n   * `var SourceString = 'http://example.com/some-video.mp4';`\n *\n * @typedef {Object|string} SourceObject\n *\n * @property {string} src\n *           The url to the source\n *\n * @property {string} type\n *           The mime type of the source\n */\n\n/**\n * A function used by {@link Tech} to create a new {@link TextTrack}.\n *\n * @private\n *\n * @param {Tech} self\n *        An instance of the Tech class.\n *\n * @param {string} kind\n *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)\n *\n * @param {string} [label]\n *        Label to identify the text track\n *\n * @param {string} [language]\n *        Two letter language abbreviation\n *\n * @param {Object} [options={}]\n *        An object with additional text track options\n *\n * @return {TextTrack}\n *          The text track that was created.\n */\nfunction createTrackHelper(self, kind, label, language, options = {}) {\n  const tracks = self.textTracks();\n  options.kind = kind;\n  if (label) {\n    options.label = label;\n  }\n  if (language) {\n    options.language = language;\n  }\n  options.tech = self;\n  const track = new ALL.text.TrackClass(options);\n  tracks.addTrack(track);\n  return track;\n}\n\n/**\n * This is the base class for media playback technology controllers, such as\n * {@link HTML5}\n *\n * @extends Component\n */\nclass Tech extends Component$1 {\n  /**\n  * Create an instance of this Tech.\n  *\n  * @param {Object} [options]\n  *        The key/value store of player options.\n  *\n  * @param {Function} [ready]\n  *        Callback function to call when the `HTML5` Tech is ready.\n  */\n  constructor(options = {}, ready = function () {}) {\n    // we don't want the tech to report user activity automatically.\n    // This is done manually in addControlsListeners\n    options.reportTouchActivity = false;\n    super(null, options, ready);\n    this.onDurationChange_ = e => this.onDurationChange(e);\n    this.trackProgress_ = e => this.trackProgress(e);\n    this.trackCurrentTime_ = e => this.trackCurrentTime(e);\n    this.stopTrackingCurrentTime_ = e => this.stopTrackingCurrentTime(e);\n    this.disposeSourceHandler_ = e => this.disposeSourceHandler(e);\n    this.queuedHanders_ = new Set();\n\n    // keep track of whether the current source has played at all to\n    // implement a very limited played()\n    this.hasStarted_ = false;\n    this.on('playing', function () {\n      this.hasStarted_ = true;\n    });\n    this.on('loadstart', function () {\n      this.hasStarted_ = false;\n    });\n    ALL.names.forEach(name => {\n      const props = ALL[name];\n      if (options && options[props.getterName]) {\n        this[props.privateName] = options[props.getterName];\n      }\n    });\n\n    // Manually track progress in cases where the browser/tech doesn't report it.\n    if (!this.featuresProgressEvents) {\n      this.manualProgressOn();\n    }\n\n    // Manually track timeupdates in cases where the browser/tech doesn't report it.\n    if (!this.featuresTimeupdateEvents) {\n      this.manualTimeUpdatesOn();\n    }\n    ['Text', 'Audio', 'Video'].forEach(track => {\n      if (options[`native${track}Tracks`] === false) {\n        this[`featuresNative${track}Tracks`] = false;\n      }\n    });\n    if (options.nativeCaptions === false || options.nativeTextTracks === false) {\n      this.featuresNativeTextTracks = false;\n    } else if (options.nativeCaptions === true || options.nativeTextTracks === true) {\n      this.featuresNativeTextTracks = true;\n    }\n    if (!this.featuresNativeTextTracks) {\n      this.emulateTextTracks();\n    }\n    this.preloadTextTracks = options.preloadTextTracks !== false;\n    this.autoRemoteTextTracks_ = new ALL.text.ListClass();\n    this.initTrackListeners();\n\n    // Turn on component tap events only if not using native controls\n    if (!options.nativeControlsForTouch) {\n      this.emitTapEvents();\n    }\n    if (this.constructor) {\n      this.name_ = this.constructor.name || 'Unknown Tech';\n    }\n  }\n\n  /**\n   * A special function to trigger source set in a way that will allow player\n   * to re-trigger if the player or tech are not ready yet.\n   *\n   * @fires Tech#sourceset\n   * @param {string} src The source string at the time of the source changing.\n   */\n  triggerSourceset(src) {\n    if (!this.isReady_) {\n      // on initial ready we have to trigger source set\n      // 1ms after ready so that player can watch for it.\n      this.one('ready', () => this.setTimeout(() => this.triggerSourceset(src), 1));\n    }\n\n    /**\n     * Fired when the source is set on the tech causing the media element\n     * to reload.\n     *\n     * @see {@link Player#event:sourceset}\n     * @event Tech#sourceset\n     * @type {Event}\n     */\n    this.trigger({\n      src,\n      type: 'sourceset'\n    });\n  }\n\n  /* Fallbacks for unsupported event types\n  ================================================================================ */\n\n  /**\n   * Polyfill the `progress` event for browsers that don't support it natively.\n   *\n   * @see {@link Tech#trackProgress}\n   */\n  manualProgressOn() {\n    this.on('durationchange', this.onDurationChange_);\n    this.manualProgress = true;\n\n    // Trigger progress watching when a source begins loading\n    this.one('ready', this.trackProgress_);\n  }\n\n  /**\n   * Turn off the polyfill for `progress` events that was created in\n   * {@link Tech#manualProgressOn}\n   */\n  manualProgressOff() {\n    this.manualProgress = false;\n    this.stopTrackingProgress();\n    this.off('durationchange', this.onDurationChange_);\n  }\n\n  /**\n   * This is used to trigger a `progress` event when the buffered percent changes. It\n   * sets an interval function that will be called every 500 milliseconds to check if the\n   * buffer end percent has changed.\n   *\n   * > This function is called by {@link Tech#manualProgressOn}\n   *\n   * @param {Event} event\n   *        The `ready` event that caused this to run.\n   *\n   * @listens Tech#ready\n   * @fires Tech#progress\n   */\n  trackProgress(event) {\n    this.stopTrackingProgress();\n    this.progressInterval = this.setInterval(bind_(this, function () {\n      // Don't trigger unless buffered amount is greater than last time\n\n      const numBufferedPercent = this.bufferedPercent();\n      if (this.bufferedPercent_ !== numBufferedPercent) {\n        /**\n         * See {@link Player#progress}\n         *\n         * @event Tech#progress\n         * @type {Event}\n         */\n        this.trigger('progress');\n      }\n      this.bufferedPercent_ = numBufferedPercent;\n      if (numBufferedPercent === 1) {\n        this.stopTrackingProgress();\n      }\n    }), 500);\n  }\n\n  /**\n   * Update our internal duration on a `durationchange` event by calling\n   * {@link Tech#duration}.\n   *\n   * @param {Event} event\n   *        The `durationchange` event that caused this to run.\n   *\n   * @listens Tech#durationchange\n   */\n  onDurationChange(event) {\n    this.duration_ = this.duration();\n  }\n\n  /**\n   * Get and create a `TimeRange` object for buffering.\n   *\n   * @return { import('../utils/time').TimeRange }\n   *         The time range object that was created.\n   */\n  buffered() {\n    return createTimeRanges$1(0, 0);\n  }\n\n  /**\n   * Get the percentage of the current video that is currently buffered.\n   *\n   * @return {number}\n   *         A number from 0 to 1 that represents the decimal percentage of the\n   *         video that is buffered.\n   *\n   */\n  bufferedPercent() {\n    return bufferedPercent(this.buffered(), this.duration_);\n  }\n\n  /**\n   * Turn off the polyfill for `progress` events that was created in\n   * {@link Tech#manualProgressOn}\n   * Stop manually tracking progress events by clearing the interval that was set in\n   * {@link Tech#trackProgress}.\n   */\n  stopTrackingProgress() {\n    this.clearInterval(this.progressInterval);\n  }\n\n  /**\n   * Polyfill the `timeupdate` event for browsers that don't support it.\n   *\n   * @see {@link Tech#trackCurrentTime}\n   */\n  manualTimeUpdatesOn() {\n    this.manualTimeUpdates = true;\n    this.on('play', this.trackCurrentTime_);\n    this.on('pause', this.stopTrackingCurrentTime_);\n  }\n\n  /**\n   * Turn off the polyfill for `timeupdate` events that was created in\n   * {@link Tech#manualTimeUpdatesOn}\n   */\n  manualTimeUpdatesOff() {\n    this.manualTimeUpdates = false;\n    this.stopTrackingCurrentTime();\n    this.off('play', this.trackCurrentTime_);\n    this.off('pause', this.stopTrackingCurrentTime_);\n  }\n\n  /**\n   * Sets up an interval function to track current time and trigger `timeupdate` every\n   * 250 milliseconds.\n   *\n   * @listens Tech#play\n   * @triggers Tech#timeupdate\n   */\n  trackCurrentTime() {\n    if (this.currentTimeInterval) {\n      this.stopTrackingCurrentTime();\n    }\n    this.currentTimeInterval = this.setInterval(function () {\n      /**\n       * Triggered at an interval of 250ms to indicated that time is passing in the video.\n       *\n       * @event Tech#timeupdate\n       * @type {Event}\n       */\n      this.trigger({\n        type: 'timeupdate',\n        target: this,\n        manuallyTriggered: true\n      });\n\n      // 42 = 24 fps // 250 is what Webkit uses // FF uses 15\n    }, 250);\n  }\n\n  /**\n   * Stop the interval function created in {@link Tech#trackCurrentTime} so that the\n   * `timeupdate` event is no longer triggered.\n   *\n   * @listens {Tech#pause}\n   */\n  stopTrackingCurrentTime() {\n    this.clearInterval(this.currentTimeInterval);\n\n    // #1002 - if the video ends right before the next timeupdate would happen,\n    // the progress bar won't make it all the way to the end\n    this.trigger({\n      type: 'timeupdate',\n      target: this,\n      manuallyTriggered: true\n    });\n  }\n\n  /**\n   * Turn off all event polyfills, clear the `Tech`s {@link AudioTrackList},\n   * {@link VideoTrackList}, and {@link TextTrackList}, and dispose of this Tech.\n   *\n   * @fires Component#dispose\n   */\n  dispose() {\n    // clear out all tracks because we can't reuse them between techs\n    this.clearTracks(NORMAL.names);\n\n    // Turn off any manual progress or timeupdate tracking\n    if (this.manualProgress) {\n      this.manualProgressOff();\n    }\n    if (this.manualTimeUpdates) {\n      this.manualTimeUpdatesOff();\n    }\n    super.dispose();\n  }\n\n  /**\n   * Clear out a single `TrackList` or an array of `TrackLists` given their names.\n   *\n   * > Note: Techs without source handlers should call this between sources for `video`\n   *         & `audio` tracks. You don't want to use them between tracks!\n   *\n   * @param {string[]|string} types\n   *        TrackList names to clear, valid names are `video`, `audio`, and\n   *        `text`.\n   */\n  clearTracks(types) {\n    types = [].concat(types);\n    // clear out all tracks because we can't reuse them between techs\n    types.forEach(type => {\n      const list = this[`${type}Tracks`]() || [];\n      let i = list.length;\n      while (i--) {\n        const track = list[i];\n        if (type === 'text') {\n          this.removeRemoteTextTrack(track);\n        }\n        list.removeTrack(track);\n      }\n    });\n  }\n\n  /**\n   * Remove any TextTracks added via addRemoteTextTrack that are\n   * flagged for automatic garbage collection\n   */\n  cleanupAutoTextTracks() {\n    const list = this.autoRemoteTextTracks_ || [];\n    let i = list.length;\n    while (i--) {\n      const track = list[i];\n      this.removeRemoteTextTrack(track);\n    }\n  }\n\n  /**\n   * Reset the tech, which will removes all sources and reset the internal readyState.\n   *\n   * @abstract\n   */\n  reset() {}\n\n  /**\n   * Get the value of `crossOrigin` from the tech.\n   *\n   * @abstract\n   *\n   * @see {Html5#crossOrigin}\n   */\n  crossOrigin() {}\n\n  /**\n   * Set the value of `crossOrigin` on the tech.\n   *\n   * @abstract\n   *\n   * @param {string} crossOrigin the crossOrigin value\n   * @see {Html5#setCrossOrigin}\n   */\n  setCrossOrigin() {}\n\n  /**\n   * Get or set an error on the Tech.\n   *\n   * @param {MediaError} [err]\n   *        Error to set on the Tech\n   *\n   * @return {MediaError|null}\n   *         The current error object on the tech, or null if there isn't one.\n   */\n  error(err) {\n    if (err !== undefined) {\n      this.error_ = new MediaError(err);\n      this.trigger('error');\n    }\n    return this.error_;\n  }\n\n  /**\n   * Returns the `TimeRange`s that have been played through for the current source.\n   *\n   * > NOTE: This implementation is incomplete. It does not track the played `TimeRange`.\n   *         It only checks whether the source has played at all or not.\n   *\n   * @return { import('../utils/time').TimeRange }\n   *         - A single time range if this video has played\n   *         - An empty set of ranges if not.\n   */\n  played() {\n    if (this.hasStarted_) {\n      return createTimeRanges$1(0, 0);\n    }\n    return createTimeRanges$1();\n  }\n\n  /**\n   * Start playback\n   *\n   * @abstract\n   *\n   * @see {Html5#play}\n   */\n  play() {}\n\n  /**\n   * Set whether we are scrubbing or not\n   *\n   * @abstract\n   * @param {boolean} _isScrubbing\n   *                  - true for we are currently scrubbing\n   *                  - false for we are no longer scrubbing\n   *\n   * @see {Html5#setScrubbing}\n   */\n  setScrubbing(_isScrubbing) {}\n\n  /**\n   * Get whether we are scrubbing or not\n   *\n   * @abstract\n   *\n   * @see {Html5#scrubbing}\n   */\n  scrubbing() {}\n\n  /**\n   * Causes a manual time update to occur if {@link Tech#manualTimeUpdatesOn} was\n   * previously called.\n   *\n   * @param {number} _seconds\n   *        Set the current time of the media to this.\n   * @fires Tech#timeupdate\n   */\n  setCurrentTime(_seconds) {\n    // improve the accuracy of manual timeupdates\n    if (this.manualTimeUpdates) {\n      /**\n       * A manual `timeupdate` event.\n       *\n       * @event Tech#timeupdate\n       * @type {Event}\n       */\n      this.trigger({\n        type: 'timeupdate',\n        target: this,\n        manuallyTriggered: true\n      });\n    }\n  }\n\n  /**\n   * Turn on listeners for {@link VideoTrackList}, {@link {AudioTrackList}, and\n   * {@link TextTrackList} events.\n   *\n   * This adds {@link EventTarget~EventListeners} for `addtrack`, and  `removetrack`.\n   *\n   * @fires Tech#audiotrackchange\n   * @fires Tech#videotrackchange\n   * @fires Tech#texttrackchange\n   */\n  initTrackListeners() {\n    /**\n      * Triggered when tracks are added or removed on the Tech {@link AudioTrackList}\n      *\n      * @event Tech#audiotrackchange\n      * @type {Event}\n      */\n\n    /**\n      * Triggered when tracks are added or removed on the Tech {@link VideoTrackList}\n      *\n      * @event Tech#videotrackchange\n      * @type {Event}\n      */\n\n    /**\n      * Triggered when tracks are added or removed on the Tech {@link TextTrackList}\n      *\n      * @event Tech#texttrackchange\n      * @type {Event}\n      */\n    NORMAL.names.forEach(name => {\n      const props = NORMAL[name];\n      const trackListChanges = () => {\n        this.trigger(`${name}trackchange`);\n      };\n      const tracks = this[props.getterName]();\n      tracks.addEventListener('removetrack', trackListChanges);\n      tracks.addEventListener('addtrack', trackListChanges);\n      this.on('dispose', () => {\n        tracks.removeEventListener('removetrack', trackListChanges);\n        tracks.removeEventListener('addtrack', trackListChanges);\n      });\n    });\n  }\n\n  /**\n   * Emulate TextTracks using vtt.js if necessary\n   *\n   * @fires Tech#vttjsloaded\n   * @fires Tech#vttjserror\n   */\n  addWebVttScript_() {\n    if (window$1.WebVTT) {\n      return;\n    }\n\n    // Initially, Tech.el_ is a child of a dummy-div wait until the Component system\n    // signals that the Tech is ready at which point Tech.el_ is part of the DOM\n    // before inserting the WebVTT script\n    if (document.body.contains(this.el())) {\n      // load via require if available and vtt.js script location was not passed in\n      // as an option. novtt builds will turn the above require call into an empty object\n      // which will cause this if check to always fail.\n      if (!this.options_['vtt.js'] && isPlain(vtt) && Object.keys(vtt).length > 0) {\n        this.trigger('vttjsloaded');\n        return;\n      }\n\n      // load vtt.js via the script location option or the cdn of no location was\n      // passed in\n      const script = document.createElement('script');\n      script.src = this.options_['vtt.js'] || 'https://vjs.zencdn.net/vttjs/0.14.1/vtt.min.js';\n      script.onload = () => {\n        /**\n         * Fired when vtt.js is loaded.\n         *\n         * @event Tech#vttjsloaded\n         * @type {Event}\n         */\n        this.trigger('vttjsloaded');\n      };\n      script.onerror = () => {\n        /**\n         * Fired when vtt.js was not loaded due to an error\n         *\n         * @event Tech#vttjsloaded\n         * @type {Event}\n         */\n        this.trigger('vttjserror');\n      };\n      this.on('dispose', () => {\n        script.onload = null;\n        script.onerror = null;\n      });\n      // but have not loaded yet and we set it to true before the inject so that\n      // we don't overwrite the injected window.WebVTT if it loads right away\n      window$1.WebVTT = true;\n      this.el().parentNode.appendChild(script);\n    } else {\n      this.ready(this.addWebVttScript_);\n    }\n  }\n\n  /**\n   * Emulate texttracks\n   *\n   */\n  emulateTextTracks() {\n    const tracks = this.textTracks();\n    const remoteTracks = this.remoteTextTracks();\n    const handleAddTrack = e => tracks.addTrack(e.track);\n    const handleRemoveTrack = e => tracks.removeTrack(e.track);\n    remoteTracks.on('addtrack', handleAddTrack);\n    remoteTracks.on('removetrack', handleRemoveTrack);\n    this.addWebVttScript_();\n    const updateDisplay = () => this.trigger('texttrackchange');\n    const textTracksChanges = () => {\n      updateDisplay();\n      for (let i = 0; i < tracks.length; i++) {\n        const track = tracks[i];\n        track.removeEventListener('cuechange', updateDisplay);\n        if (track.mode === 'showing') {\n          track.addEventListener('cuechange', updateDisplay);\n        }\n      }\n    };\n    textTracksChanges();\n    tracks.addEventListener('change', textTracksChanges);\n    tracks.addEventListener('addtrack', textTracksChanges);\n    tracks.addEventListener('removetrack', textTracksChanges);\n    this.on('dispose', function () {\n      remoteTracks.off('addtrack', handleAddTrack);\n      remoteTracks.off('removetrack', handleRemoveTrack);\n      tracks.removeEventListener('change', textTracksChanges);\n      tracks.removeEventListener('addtrack', textTracksChanges);\n      tracks.removeEventListener('removetrack', textTracksChanges);\n      for (let i = 0; i < tracks.length; i++) {\n        const track = tracks[i];\n        track.removeEventListener('cuechange', updateDisplay);\n      }\n    });\n  }\n\n  /**\n   * Create and returns a remote {@link TextTrack} object.\n   *\n   * @param {string} kind\n   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)\n   *\n   * @param {string} [label]\n   *        Label to identify the text track\n   *\n   * @param {string} [language]\n   *        Two letter language abbreviation\n   *\n   * @return {TextTrack}\n   *         The TextTrack that gets created.\n   */\n  addTextTrack(kind, label, language) {\n    if (!kind) {\n      throw new Error('TextTrack kind is required but was not provided');\n    }\n    return createTrackHelper(this, kind, label, language);\n  }\n\n  /**\n   * Create an emulated TextTrack for use by addRemoteTextTrack\n   *\n   * This is intended to be overridden by classes that inherit from\n   * Tech in order to create native or custom TextTracks.\n   *\n   * @param {Object} options\n   *        The object should contain the options to initialize the TextTrack with.\n   *\n   * @param {string} [options.kind]\n   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata).\n   *\n   * @param {string} [options.label].\n   *        Label to identify the text track\n   *\n   * @param {string} [options.language]\n   *        Two letter language abbreviation.\n   *\n   * @return {HTMLTrackElement}\n   *         The track element that gets created.\n   */\n  createRemoteTextTrack(options) {\n    const track = merge$1(options, {\n      tech: this\n    });\n    return new REMOTE.remoteTextEl.TrackClass(track);\n  }\n\n  /**\n   * Creates a remote text track object and returns an html track element.\n   *\n   * > Note: This can be an emulated {@link HTMLTrackElement} or a native one.\n   *\n   * @param {Object} options\n   *        See {@link Tech#createRemoteTextTrack} for more detailed properties.\n   *\n   * @param {boolean} [manualCleanup=false]\n   *        - When false: the TextTrack will be automatically removed from the video\n   *          element whenever the source changes\n   *        - When True: The TextTrack will have to be cleaned up manually\n   *\n   * @return {HTMLTrackElement}\n   *         An Html Track Element.\n   *\n   */\n  addRemoteTextTrack(options = {}, manualCleanup) {\n    const htmlTrackElement = this.createRemoteTextTrack(options);\n    if (typeof manualCleanup !== 'boolean') {\n      manualCleanup = false;\n    }\n\n    // store HTMLTrackElement and TextTrack to remote list\n    this.remoteTextTrackEls().addTrackElement_(htmlTrackElement);\n    this.remoteTextTracks().addTrack(htmlTrackElement.track);\n    if (manualCleanup === false) {\n      // create the TextTrackList if it doesn't exist\n      this.ready(() => this.autoRemoteTextTracks_.addTrack(htmlTrackElement.track));\n    }\n    return htmlTrackElement;\n  }\n\n  /**\n   * Remove a remote text track from the remote `TextTrackList`.\n   *\n   * @param {TextTrack} track\n   *        `TextTrack` to remove from the `TextTrackList`\n   */\n  removeRemoteTextTrack(track) {\n    const trackElement = this.remoteTextTrackEls().getTrackElementByTrack_(track);\n\n    // remove HTMLTrackElement and TextTrack from remote list\n    this.remoteTextTrackEls().removeTrackElement_(trackElement);\n    this.remoteTextTracks().removeTrack(track);\n    this.autoRemoteTextTracks_.removeTrack(track);\n  }\n\n  /**\n   * Gets available media playback quality metrics as specified by the W3C's Media\n   * Playback Quality API.\n   *\n   * @see [Spec]{@link https://wicg.github.io/media-playback-quality}\n   *\n   * @return {Object}\n   *         An object with supported media playback quality metrics\n   *\n   * @abstract\n   */\n  getVideoPlaybackQuality() {\n    return {};\n  }\n\n  /**\n   * Attempt to create a floating video window always on top of other windows\n   * so that users may continue consuming media while they interact with other\n   * content sites, or applications on their device.\n   *\n   * @see [Spec]{@link https://wicg.github.io/picture-in-picture}\n   *\n   * @return {Promise|undefined}\n   *         A promise with a Picture-in-Picture window if the browser supports\n   *         Promises (or one was passed in as an option). It returns undefined\n   *         otherwise.\n   *\n   * @abstract\n   */\n  requestPictureInPicture() {\n    return Promise.reject();\n  }\n\n  /**\n   * A method to check for the value of the 'disablePictureInPicture' <video> property.\n   * Defaults to true, as it should be considered disabled if the tech does not support pip\n   *\n   * @abstract\n   */\n  disablePictureInPicture() {\n    return true;\n  }\n\n  /**\n   * A method to set or unset the 'disablePictureInPicture' <video> property.\n   *\n   * @abstract\n   */\n  setDisablePictureInPicture() {}\n\n  /**\n   * A fallback implementation of requestVideoFrameCallback using requestAnimationFrame\n   *\n   * @param {function} cb\n   * @return {number} request id\n   */\n  requestVideoFrameCallback(cb) {\n    const id = newGUID();\n    if (!this.isReady_ || this.paused()) {\n      this.queuedHanders_.add(id);\n      this.one('playing', () => {\n        if (this.queuedHanders_.has(id)) {\n          this.queuedHanders_.delete(id);\n          cb();\n        }\n      });\n    } else {\n      this.requestNamedAnimationFrame(id, cb);\n    }\n    return id;\n  }\n\n  /**\n   * A fallback implementation of cancelVideoFrameCallback\n   *\n   * @param {number} id id of callback to be cancelled\n   */\n  cancelVideoFrameCallback(id) {\n    if (this.queuedHanders_.has(id)) {\n      this.queuedHanders_.delete(id);\n    } else {\n      this.cancelNamedAnimationFrame(id);\n    }\n  }\n\n  /**\n   * A method to set a poster from a `Tech`.\n   *\n   * @abstract\n   */\n  setPoster() {}\n\n  /**\n   * A method to check for the presence of the 'playsinline' <video> attribute.\n   *\n   * @abstract\n   */\n  playsinline() {}\n\n  /**\n   * A method to set or unset the 'playsinline' <video> attribute.\n   *\n   * @abstract\n   */\n  setPlaysinline() {}\n\n  /**\n   * Attempt to force override of native audio tracks.\n   *\n   * @param {boolean} override - If set to true native audio will be overridden,\n   * otherwise native audio will potentially be used.\n   *\n   * @abstract\n   */\n  overrideNativeAudioTracks(override) {}\n\n  /**\n   * Attempt to force override of native video tracks.\n   *\n   * @param {boolean} override - If set to true native video will be overridden,\n   * otherwise native video will potentially be used.\n   *\n   * @abstract\n   */\n  overrideNativeVideoTracks(override) {}\n\n  /**\n   * Check if the tech can support the given mime-type.\n   *\n   * The base tech does not support any type, but source handlers might\n   * overwrite this.\n   *\n   * @param  {string} _type\n   *         The mimetype to check for support\n   *\n   * @return {string}\n   *         'probably', 'maybe', or empty string\n   *\n   * @see [Spec]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canPlayType}\n   *\n   * @abstract\n   */\n  canPlayType(_type) {\n    return '';\n  }\n\n  /**\n   * Check if the type is supported by this tech.\n   *\n   * The base tech does not support any type, but source handlers might\n   * overwrite this.\n   *\n   * @param {string} _type\n   *        The media type to check\n   * @return {string} Returns the native video element's response\n   */\n  static canPlayType(_type) {\n    return '';\n  }\n\n  /**\n   * Check if the tech can support the given source\n   *\n   * @param {Object} srcObj\n   *        The source object\n   * @param {Object} options\n   *        The options passed to the tech\n   * @return {string} 'probably', 'maybe', or '' (empty string)\n   */\n  static canPlaySource(srcObj, options) {\n    return Tech.canPlayType(srcObj.type);\n  }\n\n  /*\n   * Return whether the argument is a Tech or not.\n   * Can be passed either a Class like `Html5` or a instance like `player.tech_`\n   *\n   * @param {Object} component\n   *        The item to check\n   *\n   * @return {boolean}\n   *         Whether it is a tech or not\n   *         - True if it is a tech\n   *         - False if it is not\n   */\n  static isTech(component) {\n    return component.prototype instanceof Tech || component instanceof Tech || component === Tech;\n  }\n\n  /**\n   * Registers a `Tech` into a shared list for videojs.\n   *\n   * @param {string} name\n   *        Name of the `Tech` to register.\n   *\n   * @param {Object} tech\n   *        The `Tech` class to register.\n   */\n  static registerTech(name, tech) {\n    if (!Tech.techs_) {\n      Tech.techs_ = {};\n    }\n    if (!Tech.isTech(tech)) {\n      throw new Error(`Tech ${name} must be a Tech`);\n    }\n    if (!Tech.canPlayType) {\n      throw new Error('Techs must have a static canPlayType method on them');\n    }\n    if (!Tech.canPlaySource) {\n      throw new Error('Techs must have a static canPlaySource method on them');\n    }\n    name = toTitleCase$1(name);\n    Tech.techs_[name] = tech;\n    Tech.techs_[toLowerCase(name)] = tech;\n    if (name !== 'Tech') {\n      // camel case the techName for use in techOrder\n      Tech.defaultTechOrder_.push(name);\n    }\n    return tech;\n  }\n\n  /**\n   * Get a `Tech` from the shared list by name.\n   *\n   * @param {string} name\n   *        `camelCase` or `TitleCase` name of the Tech to get\n   *\n   * @return {Tech|undefined}\n   *         The `Tech` or undefined if there was no tech with the name requested.\n   */\n  static getTech(name) {\n    if (!name) {\n      return;\n    }\n    if (Tech.techs_ && Tech.techs_[name]) {\n      return Tech.techs_[name];\n    }\n    name = toTitleCase$1(name);\n    if (window$1 && window$1.videojs && window$1.videojs[name]) {\n      log$1.warn(`The ${name} tech was added to the videojs object when it should be registered using videojs.registerTech(name, tech)`);\n      return window$1.videojs[name];\n    }\n  }\n}\n\n/**\n * Get the {@link VideoTrackList}\n *\n * @returns {VideoTrackList}\n * @method Tech.prototype.videoTracks\n */\n\n/**\n * Get the {@link AudioTrackList}\n *\n * @returns {AudioTrackList}\n * @method Tech.prototype.audioTracks\n */\n\n/**\n * Get the {@link TextTrackList}\n *\n * @returns {TextTrackList}\n * @method Tech.prototype.textTracks\n */\n\n/**\n * Get the remote element {@link TextTrackList}\n *\n * @returns {TextTrackList}\n * @method Tech.prototype.remoteTextTracks\n */\n\n/**\n * Get the remote element {@link HtmlTrackElementList}\n *\n * @returns {HtmlTrackElementList}\n * @method Tech.prototype.remoteTextTrackEls\n */\n\nALL.names.forEach(function (name) {\n  const props = ALL[name];\n  Tech.prototype[props.getterName] = function () {\n    this[props.privateName] = this[props.privateName] || new props.ListClass();\n    return this[props.privateName];\n  };\n});\n\n/**\n * List of associated text tracks\n *\n * @type {TextTrackList}\n * @private\n * @property Tech#textTracks_\n */\n\n/**\n * List of associated audio tracks.\n *\n * @type {AudioTrackList}\n * @private\n * @property Tech#audioTracks_\n */\n\n/**\n * List of associated video tracks.\n *\n * @type {VideoTrackList}\n * @private\n * @property Tech#videoTracks_\n */\n\n/**\n * Boolean indicating whether the `Tech` supports volume control.\n *\n * @type {boolean}\n * @default\n */\nTech.prototype.featuresVolumeControl = true;\n\n/**\n * Boolean indicating whether the `Tech` supports muting volume.\n *\n * @type {boolean}\n * @default\n */\nTech.prototype.featuresMuteControl = true;\n\n/**\n * Boolean indicating whether the `Tech` supports fullscreen resize control.\n * Resizing plugins using request fullscreen reloads the plugin\n *\n * @type {boolean}\n * @default\n */\nTech.prototype.featuresFullscreenResize = false;\n\n/**\n * Boolean indicating whether the `Tech` supports changing the speed at which the video\n * plays. Examples:\n *   - Set player to play 2x (twice) as fast\n *   - Set player to play 0.5x (half) as fast\n *\n * @type {boolean}\n * @default\n */\nTech.prototype.featuresPlaybackRate = false;\n\n/**\n * Boolean indicating whether the `Tech` supports the `progress` event.\n * This will be used to determine if {@link Tech#manualProgressOn} should be called.\n *\n * @type {boolean}\n * @default\n */\nTech.prototype.featuresProgressEvents = false;\n\n/**\n * Boolean indicating whether the `Tech` supports the `sourceset` event.\n *\n * A tech should set this to `true` and then use {@link Tech#triggerSourceset}\n * to trigger a {@link Tech#event:sourceset} at the earliest time after getting\n * a new source.\n *\n * @type {boolean}\n * @default\n */\nTech.prototype.featuresSourceset = false;\n\n/**\n * Boolean indicating whether the `Tech` supports the `timeupdate` event.\n * This will be used to determine if {@link Tech#manualTimeUpdates} should be called.\n *\n * @type {boolean}\n * @default\n */\nTech.prototype.featuresTimeupdateEvents = false;\n\n/**\n * Boolean indicating whether the `Tech` supports the native `TextTrack`s.\n * This will help us integrate with native `TextTrack`s if the browser supports them.\n *\n * @type {boolean}\n * @default\n */\nTech.prototype.featuresNativeTextTracks = false;\n\n/**\n * Boolean indicating whether the `Tech` supports `requestVideoFrameCallback`.\n *\n * @type {boolean}\n * @default\n */\nTech.prototype.featuresVideoFrameCallback = false;\n\n/**\n * A functional mixin for techs that want to use the Source Handler pattern.\n * Source handlers are scripts for handling specific formats.\n * The source handler pattern is used for adaptive formats (HLS, DASH) that\n * manually load video data and feed it into a Source Buffer (Media Source Extensions)\n * Example: `Tech.withSourceHandlers.call(MyTech);`\n *\n * @param {Tech} _Tech\n *        The tech to add source handler functions to.\n *\n * @mixes Tech~SourceHandlerAdditions\n */\nTech.withSourceHandlers = function (_Tech) {\n  /**\n   * Register a source handler\n   *\n   * @param {Function} handler\n   *        The source handler class\n   *\n   * @param {number} [index]\n   *        Register it at the following index\n   */\n  _Tech.registerSourceHandler = function (handler, index) {\n    let handlers = _Tech.sourceHandlers;\n    if (!handlers) {\n      handlers = _Tech.sourceHandlers = [];\n    }\n    if (index === undefined) {\n      // add to the end of the list\n      index = handlers.length;\n    }\n    handlers.splice(index, 0, handler);\n  };\n\n  /**\n   * Check if the tech can support the given type. Also checks the\n   * Techs sourceHandlers.\n   *\n   * @param {string} type\n   *         The mimetype to check.\n   *\n   * @return {string}\n   *         'probably', 'maybe', or '' (empty string)\n   */\n  _Tech.canPlayType = function (type) {\n    const handlers = _Tech.sourceHandlers || [];\n    let can;\n    for (let i = 0; i < handlers.length; i++) {\n      can = handlers[i].canPlayType(type);\n      if (can) {\n        return can;\n      }\n    }\n    return '';\n  };\n\n  /**\n   * Returns the first source handler that supports the source.\n   *\n   * TODO: Answer question: should 'probably' be prioritized over 'maybe'\n   *\n   * @param {SourceObject} source\n   *        The source object\n   *\n   * @param {Object} options\n   *        The options passed to the tech\n   *\n   * @return {SourceHandler|null}\n   *          The first source handler that supports the source or null if\n   *          no SourceHandler supports the source\n   */\n  _Tech.selectSourceHandler = function (source, options) {\n    const handlers = _Tech.sourceHandlers || [];\n    let can;\n    for (let i = 0; i < handlers.length; i++) {\n      can = handlers[i].canHandleSource(source, options);\n      if (can) {\n        return handlers[i];\n      }\n    }\n    return null;\n  };\n\n  /**\n   * Check if the tech can support the given source.\n   *\n   * @param {SourceObject} srcObj\n   *        The source object\n   *\n   * @param {Object} options\n   *        The options passed to the tech\n   *\n   * @return {string}\n   *         'probably', 'maybe', or '' (empty string)\n   */\n  _Tech.canPlaySource = function (srcObj, options) {\n    const sh = _Tech.selectSourceHandler(srcObj, options);\n    if (sh) {\n      return sh.canHandleSource(srcObj, options);\n    }\n    return '';\n  };\n\n  /**\n   * When using a source handler, prefer its implementation of\n   * any function normally provided by the tech.\n   */\n  const deferrable = ['seekable', 'seeking', 'duration'];\n\n  /**\n   * A wrapper around {@link Tech#seekable} that will call a `SourceHandler`s seekable\n   * function if it exists, with a fallback to the Techs seekable function.\n   *\n   * @method _Tech.seekable\n   */\n\n  /**\n   * A wrapper around {@link Tech#duration} that will call a `SourceHandler`s duration\n   * function if it exists, otherwise it will fallback to the techs duration function.\n   *\n   * @method _Tech.duration\n   */\n\n  deferrable.forEach(function (fnName) {\n    const originalFn = this[fnName];\n    if (typeof originalFn !== 'function') {\n      return;\n    }\n    this[fnName] = function () {\n      if (this.sourceHandler_ && this.sourceHandler_[fnName]) {\n        return this.sourceHandler_[fnName].apply(this.sourceHandler_, arguments);\n      }\n      return originalFn.apply(this, arguments);\n    };\n  }, _Tech.prototype);\n\n  /**\n   * Create a function for setting the source using a source object\n   * and source handlers.\n   * Should never be called unless a source handler was found.\n   *\n   * @param {SourceObject} source\n   *        A source object with src and type keys\n   */\n  _Tech.prototype.setSource = function (source) {\n    let sh = _Tech.selectSourceHandler(source, this.options_);\n    if (!sh) {\n      // Fall back to a native source handler when unsupported sources are\n      // deliberately set\n      if (_Tech.nativeSourceHandler) {\n        sh = _Tech.nativeSourceHandler;\n      } else {\n        log$1.error('No source handler found for the current source.');\n      }\n    }\n\n    // Dispose any existing source handler\n    this.disposeSourceHandler();\n    this.off('dispose', this.disposeSourceHandler_);\n    if (sh !== _Tech.nativeSourceHandler) {\n      this.currentSource_ = source;\n    }\n    this.sourceHandler_ = sh.handleSource(source, this, this.options_);\n    this.one('dispose', this.disposeSourceHandler_);\n  };\n\n  /**\n   * Clean up any existing SourceHandlers and listeners when the Tech is disposed.\n   *\n   * @listens Tech#dispose\n   */\n  _Tech.prototype.disposeSourceHandler = function () {\n    // if we have a source and get another one\n    // then we are loading something new\n    // than clear all of our current tracks\n    if (this.currentSource_) {\n      this.clearTracks(['audio', 'video']);\n      this.currentSource_ = null;\n    }\n\n    // always clean up auto-text tracks\n    this.cleanupAutoTextTracks();\n    if (this.sourceHandler_) {\n      if (this.sourceHandler_.dispose) {\n        this.sourceHandler_.dispose();\n      }\n      this.sourceHandler_ = null;\n    }\n  };\n};\n\n// The base Tech class needs to be registered as a Component. It is the only\n// Tech that can be registered as a Component.\nComponent$1.registerComponent('Tech', Tech);\nTech.registerTech('Tech', Tech);\n\n/**\n * A list of techs that should be added to techOrder on Players\n *\n * @private\n */\nTech.defaultTechOrder_ = [];\n\n/**\n * @file middleware.js\n * @module middleware\n */\nconst middlewares = {};\nconst middlewareInstances = {};\nconst TERMINATOR = {};\n\n/**\n * A middleware object is a plain JavaScript object that has methods that\n * match the {@link Tech} methods found in the lists of allowed\n * {@link module:middleware.allowedGetters|getters},\n * {@link module:middleware.allowedSetters|setters}, and\n * {@link module:middleware.allowedMediators|mediators}.\n *\n * @typedef {Object} MiddlewareObject\n */\n\n/**\n * A middleware factory function that should return a\n * {@link module:middleware~MiddlewareObject|MiddlewareObject}.\n *\n * This factory will be called for each player when needed, with the player\n * passed in as an argument.\n *\n * @callback MiddlewareFactory\n * @param { import('../player').default } player\n *        A Video.js player.\n */\n\n/**\n * Define a middleware that the player should use by way of a factory function\n * that returns a middleware object.\n *\n * @param  {string} type\n *         The MIME type to match or `\"*\"` for all MIME types.\n *\n * @param  {MiddlewareFactory} middleware\n *         A middleware factory function that will be executed for\n *         matching types.\n */\nfunction use(type, middleware) {\n  middlewares[type] = middlewares[type] || [];\n  middlewares[type].push(middleware);\n}\n\n/**\n * Asynchronously sets a source using middleware by recursing through any\n * matching middlewares and calling `setSource` on each, passing along the\n * previous returned value each time.\n *\n * @param  { import('../player').default } player\n *         A {@link Player} instance.\n *\n * @param  {Tech~SourceObject} src\n *         A source object.\n *\n * @param  {Function}\n *         The next middleware to run.\n */\nfunction setSource(player, src, next) {\n  player.setTimeout(() => setSourceHelper(src, middlewares[src.type], next, player), 1);\n}\n\n/**\n * When the tech is set, passes the tech to each middleware's `setTech` method.\n *\n * @param {Object[]} middleware\n *        An array of middleware instances.\n *\n * @param { import('../tech/tech').default } tech\n *        A Video.js tech.\n */\nfunction setTech(middleware, tech) {\n  middleware.forEach(mw => mw.setTech && mw.setTech(tech));\n}\n\n/**\n * Calls a getter on the tech first, through each middleware\n * from right to left to the player.\n *\n * @param  {Object[]} middleware\n *         An array of middleware instances.\n *\n * @param  { import('../tech/tech').default } tech\n *         The current tech.\n *\n * @param  {string} method\n *         A method name.\n *\n * @return {*}\n *         The final value from the tech after middleware has intercepted it.\n */\nfunction get(middleware, tech, method) {\n  return middleware.reduceRight(middlewareIterator(method), tech[method]());\n}\n\n/**\n * Takes the argument given to the player and calls the setter method on each\n * middleware from left to right to the tech.\n *\n * @param  {Object[]} middleware\n *         An array of middleware instances.\n *\n * @param  { import('../tech/tech').default } tech\n *         The current tech.\n *\n * @param  {string} method\n *         A method name.\n *\n * @param  {*} arg\n *         The value to set on the tech.\n *\n * @return {*}\n *         The return value of the `method` of the `tech`.\n */\nfunction set(middleware, tech, method, arg) {\n  return tech[method](middleware.reduce(middlewareIterator(method), arg));\n}\n\n/**\n * Takes the argument given to the player and calls the `call` version of the\n * method on each middleware from left to right.\n *\n * Then, call the passed in method on the tech and return the result unchanged\n * back to the player, through middleware, this time from right to left.\n *\n * @param  {Object[]} middleware\n *         An array of middleware instances.\n *\n * @param  { import('../tech/tech').default } tech\n *         The current tech.\n *\n * @param  {string} method\n *         A method name.\n *\n * @param  {*} arg\n *         The value to set on the tech.\n *\n * @return {*}\n *         The return value of the `method` of the `tech`, regardless of the\n *         return values of middlewares.\n */\nfunction mediate(middleware, tech, method, arg = null) {\n  const callMethod = 'call' + toTitleCase$1(method);\n  const middlewareValue = middleware.reduce(middlewareIterator(callMethod), arg);\n  const terminated = middlewareValue === TERMINATOR;\n  // deprecated. The `null` return value should instead return TERMINATOR to\n  // prevent confusion if a techs method actually returns null.\n  const returnValue = terminated ? null : tech[method](middlewareValue);\n  executeRight(middleware, method, returnValue, terminated);\n  return returnValue;\n}\n\n/**\n * Enumeration of allowed getters where the keys are method names.\n *\n * @type {Object}\n */\nconst allowedGetters = {\n  buffered: 1,\n  currentTime: 1,\n  duration: 1,\n  muted: 1,\n  played: 1,\n  paused: 1,\n  seekable: 1,\n  volume: 1,\n  ended: 1\n};\n\n/**\n * Enumeration of allowed setters where the keys are method names.\n *\n * @type {Object}\n */\nconst allowedSetters = {\n  setCurrentTime: 1,\n  setMuted: 1,\n  setVolume: 1\n};\n\n/**\n * Enumeration of allowed mediators where the keys are method names.\n *\n * @type {Object}\n */\nconst allowedMediators = {\n  play: 1,\n  pause: 1\n};\nfunction middlewareIterator(method) {\n  return (value, mw) => {\n    // if the previous middleware terminated, pass along the termination\n    if (value === TERMINATOR) {\n      return TERMINATOR;\n    }\n    if (mw[method]) {\n      return mw[method](value);\n    }\n    return value;\n  };\n}\nfunction executeRight(mws, method, value, terminated) {\n  for (let i = mws.length - 1; i >= 0; i--) {\n    const mw = mws[i];\n    if (mw[method]) {\n      mw[method](terminated, value);\n    }\n  }\n}\n\n/**\n * Clear the middleware cache for a player.\n *\n * @param  { import('../player').default } player\n *         A {@link Player} instance.\n */\nfunction clearCacheForPlayer(player) {\n  middlewareInstances[player.id()] = null;\n}\n\n/**\n * {\n *  [playerId]: [[mwFactory, mwInstance], ...]\n * }\n *\n * @private\n */\nfunction getOrCreateFactory(player, mwFactory) {\n  const mws = middlewareInstances[player.id()];\n  let mw = null;\n  if (mws === undefined || mws === null) {\n    mw = mwFactory(player);\n    middlewareInstances[player.id()] = [[mwFactory, mw]];\n    return mw;\n  }\n  for (let i = 0; i < mws.length; i++) {\n    const [mwf, mwi] = mws[i];\n    if (mwf !== mwFactory) {\n      continue;\n    }\n    mw = mwi;\n  }\n  if (mw === null) {\n    mw = mwFactory(player);\n    mws.push([mwFactory, mw]);\n  }\n  return mw;\n}\nfunction setSourceHelper(src = {}, middleware = [], next, player, acc = [], lastRun = false) {\n  const [mwFactory, ...mwrest] = middleware;\n\n  // if mwFactory is a string, then we're at a fork in the road\n  if (typeof mwFactory === 'string') {\n    setSourceHelper(src, middlewares[mwFactory], next, player, acc, lastRun);\n\n    // if we have an mwFactory, call it with the player to get the mw,\n    // then call the mw's setSource method\n  } else if (mwFactory) {\n    const mw = getOrCreateFactory(player, mwFactory);\n\n    // if setSource isn't present, implicitly select this middleware\n    if (!mw.setSource) {\n      acc.push(mw);\n      return setSourceHelper(src, mwrest, next, player, acc, lastRun);\n    }\n    mw.setSource(Object.assign({}, src), function (err, _src) {\n      // something happened, try the next middleware on the current level\n      // make sure to use the old src\n      if (err) {\n        return setSourceHelper(src, mwrest, next, player, acc, lastRun);\n      }\n\n      // we've succeeded, now we need to go deeper\n      acc.push(mw);\n\n      // if it's the same type, continue down the current chain\n      // otherwise, we want to go down the new chain\n      setSourceHelper(_src, src.type === _src.type ? mwrest : middlewares[_src.type], next, player, acc, lastRun);\n    });\n  } else if (mwrest.length) {\n    setSourceHelper(src, mwrest, next, player, acc, lastRun);\n  } else if (lastRun) {\n    next(src, acc);\n  } else {\n    setSourceHelper(src, middlewares['*'], next, player, acc, true);\n  }\n}\n\n/**\n * Mimetypes\n *\n * @see https://www.iana.org/assignments/media-types/media-types.xhtml\n * @typedef Mimetypes~Kind\n * @enum\n */\nconst MimetypesKind = {\n  opus: 'video/ogg',\n  ogv: 'video/ogg',\n  mp4: 'video/mp4',\n  mov: 'video/mp4',\n  m4v: 'video/mp4',\n  mkv: 'video/x-matroska',\n  m4a: 'audio/mp4',\n  mp3: 'audio/mpeg',\n  aac: 'audio/aac',\n  caf: 'audio/x-caf',\n  flac: 'audio/flac',\n  oga: 'audio/ogg',\n  wav: 'audio/wav',\n  m3u8: 'application/x-mpegURL',\n  mpd: 'application/dash+xml',\n  jpg: 'image/jpeg',\n  jpeg: 'image/jpeg',\n  gif: 'image/gif',\n  png: 'image/png',\n  svg: 'image/svg+xml',\n  webp: 'image/webp'\n};\n\n/**\n * Get the mimetype of a given src url if possible\n *\n * @param {string} src\n *        The url to the src\n *\n * @return {string}\n *         return the mimetype if it was known or empty string otherwise\n */\nconst getMimetype = function (src = '') {\n  const ext = getFileExtension(src);\n  const mimetype = MimetypesKind[ext.toLowerCase()];\n  return mimetype || '';\n};\n\n/**\n * Find the mime type of a given source string if possible. Uses the player\n * source cache.\n *\n * @param { import('../player').default } player\n *        The player object\n *\n * @param {string} src\n *        The source string\n *\n * @return {string}\n *         The type that was found\n */\nconst findMimetype = (player, src) => {\n  if (!src) {\n    return '';\n  }\n\n  // 1. check for the type in the `source` cache\n  if (player.cache_.source.src === src && player.cache_.source.type) {\n    return player.cache_.source.type;\n  }\n\n  // 2. see if we have this source in our `currentSources` cache\n  const matchingSources = player.cache_.sources.filter(s => s.src === src);\n  if (matchingSources.length) {\n    return matchingSources[0].type;\n  }\n\n  // 3. look for the src url in source elements and use the type there\n  const sources = player.$$('source');\n  for (let i = 0; i < sources.length; i++) {\n    const s = sources[i];\n    if (s.type && s.src && s.src === src) {\n      return s.type;\n    }\n  }\n\n  // 4. finally fallback to our list of mime types based on src url extension\n  return getMimetype(src);\n};\n\n/**\n * @module filter-source\n */\n\n/**\n * Filter out single bad source objects or multiple source objects in an\n * array. Also flattens nested source object arrays into a 1 dimensional\n * array of source objects.\n *\n * @param {Tech~SourceObject|Tech~SourceObject[]} src\n *        The src object to filter\n *\n * @return {Tech~SourceObject[]}\n *         An array of sourceobjects containing only valid sources\n *\n * @private\n */\nconst filterSource = function (src) {\n  // traverse array\n  if (Array.isArray(src)) {\n    let newsrc = [];\n    src.forEach(function (srcobj) {\n      srcobj = filterSource(srcobj);\n      if (Array.isArray(srcobj)) {\n        newsrc = newsrc.concat(srcobj);\n      } else if (isObject(srcobj)) {\n        newsrc.push(srcobj);\n      }\n    });\n    src = newsrc;\n  } else if (typeof src === 'string' && src.trim()) {\n    // convert string into object\n    src = [fixSource({\n      src\n    })];\n  } else if (isObject(src) && typeof src.src === 'string' && src.src && src.src.trim()) {\n    // src is already valid\n    src = [fixSource(src)];\n  } else {\n    // invalid source, turn it into an empty array\n    src = [];\n  }\n  return src;\n};\n\n/**\n * Checks src mimetype, adding it when possible\n *\n * @param {Tech~SourceObject} src\n *        The src object to check\n * @return {Tech~SourceObject}\n *        src Object with known type\n */\nfunction fixSource(src) {\n  if (!src.type) {\n    const mimetype = getMimetype(src.src);\n    if (mimetype) {\n      src.type = mimetype;\n    }\n  }\n  return src;\n}\n\nvar icons = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n  <defs>\\n    <symbol viewBox=\\\"0 0 48 48\\\" id=\\\"vjs-icon-play\\\">\\n      <path d=\\\"M16 10v28l22-14z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 48 48\\\" id=\\\"vjs-icon-pause\\\">\\n      <path d=\\\"M12 38h8V10h-8v28zm16-28v28h8V10h-8z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 48 48\\\" id=\\\"vjs-icon-audio\\\">\\n      <path d=\\\"M24 2C14.06 2 6 10.06 6 20v14c0 3.31 2.69 6 6 6h6V24h-8v-4c0-7.73 6.27-14 14-14s14 6.27 14 14v4h-8v16h6c3.31 0 6-2.69 6-6V20c0-9.94-8.06-18-18-18z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 48 48\\\" id=\\\"vjs-icon-captions\\\">\\n      <path d=\\\"M38 8H10c-2.21 0-4 1.79-4 4v24c0 2.21 1.79 4 4 4h28c2.21 0 4-1.79 4-4V12c0-2.21-1.79-4-4-4zM22 22h-3v-1h-4v6h4v-1h3v2a2 2 0 0 1-2 2h-6a2 2 0 0 1-2-2v-8a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2v2zm14 0h-3v-1h-4v6h4v-1h3v2a2 2 0 0 1-2 2h-6a2 2 0 0 1-2-2v-8a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2v2z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 48 48\\\" id=\\\"vjs-icon-subtitles\\\">\\n      <path d=\\\"M40 8H8c-2.21 0-4 1.79-4 4v24c0 2.21 1.79 4 4 4h32c2.21 0 4-1.79 4-4V12c0-2.21-1.79-4-4-4zM8 24h8v4H8v-4zm20 12H8v-4h20v4zm12 0h-8v-4h8v4zm0-8H20v-4h20v4z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 48 48\\\" id=\\\"vjs-icon-fullscreen-enter\\\">\\n      <path d=\\\"M14 28h-4v10h10v-4h-6v-6zm-4-8h4v-6h6v-4H10v10zm24 14h-6v4h10V28h-4v6zm-6-24v4h6v6h4V10H28z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 48 48\\\" id=\\\"vjs-icon-fullscreen-exit\\\">\\n      <path d=\\\"M10 32h6v6h4V28H10v4zm6-16h-6v4h10V10h-4v6zm12 22h4v-6h6v-4H28v10zm4-22v-6h-4v10h10v-4h-6z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 48 48\\\" id=\\\"vjs-icon-play-circle\\\">\\n      <path d=\\\"M20 33l12-9-12-9v18zm4-29C12.95 4 4 12.95 4 24s8.95 20 20 20 20-8.95 20-20S35.05 4 24 4zm0 36c-8.82 0-16-7.18-16-16S15.18 8 24 8s16 7.18 16 16-7.18 16-16 16z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 48 48\\\" id=\\\"vjs-icon-volume-mute\\\">\\n      <path d=\\\"M33 24c0-3.53-2.04-6.58-5-8.05v4.42l4.91 4.91c.06-.42.09-.85.09-1.28zm5 0c0 1.88-.41 3.65-1.08 5.28l3.03 3.03C41.25 29.82 42 27 42 24c0-8.56-5.99-15.72-14-17.54v4.13c5.78 1.72 10 7.07 10 13.41zM8.55 6L6 8.55 15.45 18H6v12h8l10 10V26.55l8.51 8.51c-1.34 1.03-2.85 1.86-4.51 2.36v4.13a17.94 17.94 0 0 0 7.37-3.62L39.45 42 42 39.45l-18-18L8.55 6zM24 8l-4.18 4.18L24 16.36V8z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 48 48\\\" id=\\\"vjs-icon-volume-low\\\">\\n      <path d=\\\"M14 18v12h8l10 10V8L22 18h-8z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 48 48\\\" id=\\\"vjs-icon-volume-medium\\\">\\n      <path d=\\\"M37 24c0-3.53-2.04-6.58-5-8.05v16.11c2.96-1.48 5-4.53 5-8.06zm-27-6v12h8l10 10V8L18 18h-8z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 48 48\\\" id=\\\"vjs-icon-volume-high\\\">\\n      <path d=\\\"M6 18v12h8l10 10V8L14 18H6zm27 6c0-3.53-2.04-6.58-5-8.05v16.11c2.96-1.48 5-4.53 5-8.06zM28 6.46v4.13c5.78 1.72 10 7.07 10 13.41s-4.22 11.69-10 13.41v4.13c8.01-1.82 14-8.97 14-17.54S36.01 8.28 28 6.46z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 48 48\\\" id=\\\"vjs-icon-spinner\\\">\\n      <path d=\\\"M18.8 21l9.53-16.51C26.94 4.18 25.49 4 24 4c-4.8 0-9.19 1.69-12.64 4.51l7.33 12.69.11-.2zm24.28-3c-1.84-5.85-6.3-10.52-11.99-12.68L23.77 18h19.31zm.52 2H28.62l.58 1 9.53 16.5C41.99 33.94 44 29.21 44 24c0-1.37-.14-2.71-.4-4zm-26.53 4l-7.8-13.5C6.01 14.06 4 18.79 4 24c0 1.37.14 2.71.4 4h14.98l-2.31-4zM4.92 30c1.84 5.85 6.3 10.52 11.99 12.68L24.23 30H4.92zm22.54 0l-7.8 13.51c1.4.31 2.85.49 4.34.49 4.8 0 9.19-1.69 12.64-4.51L29.31 26.8 27.46 30z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 24 24\\\" id=\\\"vjs-icon-hd\\\">\\n      <path d=\\\"M19 3H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-8 12H9.5v-2h-2v2H6V9h1.5v2.5h2V9H11v6zm2-6h4c.55 0 1 .45 1 1v4c0 .55-.45 1-1 1h-4V9zm1.5 4.5h2v-3h-2v3z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 48 48\\\" id=\\\"vjs-icon-chapters\\\">\\n      <path d=\\\"M6 26h4v-4H6v4zm0 8h4v-4H6v4zm0-16h4v-4H6v4zm8 8h28v-4H14v4zm0 8h28v-4H14v4zm0-20v4h28v-4H14z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 40 40\\\" id=\\\"vjs-icon-downloading\\\">\\n      <path d=\\\"M18.208 36.875q-3.208-.292-5.979-1.729-2.771-1.438-4.812-3.729-2.042-2.292-3.188-5.229-1.146-2.938-1.146-6.23 0-6.583 4.334-11.416 4.333-4.834 10.833-5.5v3.166q-5.167.75-8.583 4.646Q6.25 14.75 6.25 19.958q0 5.209 3.396 9.104 3.396 3.896 8.562 4.646zM20 28.417L11.542 20l2.083-2.083 4.917 4.916v-11.25h2.916v11.25l4.875-4.916L28.417 20zm1.792 8.458v-3.167q1.833-.25 3.541-.958 1.709-.708 3.167-1.875l2.333 2.292q-1.958 1.583-4.25 2.541-2.291.959-4.791 1.167zm6.791-27.792q-1.541-1.125-3.25-1.854-1.708-.729-3.541-1.021V3.042q2.5.25 4.77 1.208 2.271.958 4.271 2.5zm4.584 21.584l-2.25-2.25q1.166-1.5 1.854-3.209.687-1.708.937-3.541h3.209q-.292 2.5-1.229 4.791-.938 2.292-2.521 4.209zm.541-12.417q-.291-1.833-.958-3.562-.667-1.73-1.833-3.188l2.375-2.208q1.541 1.916 2.458 4.208.917 2.292 1.167 4.75z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 48 48\\\" id=\\\"vjs-icon-file-download\\\">\\n      <path d=\\\"M10.8 40.55q-1.35 0-2.375-1T7.4 37.15v-7.7h3.4v7.7h26.35v-7.7h3.4v7.7q0 1.4-1 2.4t-2.4 1zM24 32.1L13.9 22.05l2.45-2.45 5.95 5.95V7.15h3.4v18.4l5.95-5.95 2.45 2.45z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 48 48\\\" id=\\\"vjs-icon-file-download-done\\\">\\n      <path d=\\\"M9.8 40.5v-3.45h28.4v3.45zm9.2-9.05L7.4 19.85l2.45-2.35L19 26.65l19.2-19.2 2.4 2.4z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 48 48\\\" id=\\\"vjs-icon-file-download-off\\\">\\n      <path d=\\\"M4.9 4.75L43.25 43.1 41 45.3l-4.75-4.75q-.05.05-.075.025-.025-.025-.075-.025H10.8q-1.35 0-2.375-1T7.4 37.15v-7.7h3.4v7.7h22.05l-7-7-1.85 1.8L13.9 21.9l1.85-1.85L2.7 7zm26.75 14.7l2.45 2.45-3.75 3.8-2.45-2.5zM25.7 7.15V21.1l-3.4-3.45V7.15z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 48 48\\\" id=\\\"vjs-icon-share\\\">\\n      <path d=\\\"M36 32.17c-1.52 0-2.89.59-3.93 1.54L17.82 25.4c.11-.45.18-.92.18-1.4s-.07-.95-.18-1.4l14.1-8.23c1.07 1 2.5 1.62 4.08 1.62 3.31 0 6-2.69 6-6s-2.69-6-6-6-6 2.69-6 6c0 .48.07.95.18 1.4l-14.1 8.23c-1.07-1-2.5-1.62-4.08-1.62-3.31 0-6 2.69-6 6s2.69 6 6 6c1.58 0 3.01-.62 4.08-1.62l14.25 8.31c-.1.42-.16.86-.16 1.31A5.83 5.83 0 1 0 36 32.17z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 48 48\\\" id=\\\"vjs-icon-cog\\\">\\n      <path d=\\\"M38.86 25.95c.08-.64.14-1.29.14-1.95s-.06-1.31-.14-1.95l4.23-3.31c.38-.3.49-.84.24-1.28l-4-6.93c-.25-.43-.77-.61-1.22-.43l-4.98 2.01c-1.03-.79-2.16-1.46-3.38-1.97L29 4.84c-.09-.47-.5-.84-1-.84h-8c-.5 0-.91.37-.99.84l-.75 5.3a14.8 14.8 0 0 0-3.38 1.97L9.9 10.1a1 1 0 0 0-1.22.43l-4 6.93c-.25.43-.14.97.24 1.28l4.22 3.31C9.06 22.69 9 23.34 9 24s.06 1.31.14 1.95l-4.22 3.31c-.38.3-.49.84-.24 1.28l4 6.93c.25.43.77.61 1.22.43l4.98-2.01c1.03.79 2.16 1.46 3.38 1.97l.75 5.3c.08.47.49.84.99.84h8c.5 0 .91-.37.99-.84l.75-5.3a14.8 14.8 0 0 0 3.38-1.97l4.98 2.01a1 1 0 0 0 1.22-.43l4-6.93c.25-.43.14-.97-.24-1.28l-4.22-3.31zM24 31c-3.87 0-7-3.13-7-7s3.13-7 7-7 7 3.13 7 7-3.13 7-7 7z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 48 48\\\" id=\\\"vjs-icon-square\\\">\\n      <path d=\\\"M36 8H12c-2.21 0-4 1.79-4 4v24c0 2.21 1.79 4 4 4h24c2.21 0 4-1.79 4-4V12c0-2.21-1.79-4-4-4zm0 28H12V12h24v24z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 48 48\\\" id=\\\"vjs-icon-circle\\\">\\n      <circle cx=\\\"24\\\" cy=\\\"24\\\" r=\\\"20\\\"></circle>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 48 48\\\" id=\\\"vjs-icon-circle-outline\\\">\\n      <path d=\\\"M24 4C12.95 4 4 12.95 4 24s8.95 20 20 20 20-8.95 20-20S35.05 4 24 4zm0 36c-8.82 0-16-7.18-16-16S15.18 8 24 8s16 7.18 16 16-7.18 16-16 16z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 48 48\\\" id=\\\"vjs-icon-circle-inner-circle\\\">\\n      <path d=\\\"M24 4C12.97 4 4 12.97 4 24s8.97 20 20 20 20-8.97 20-20S35.03 4 24 4zm0 36c-8.82 0-16-7.18-16-16S15.18 8 24 8s16 7.18 16 16-7.18 16-16 16zm6-16c0 3.31-2.69 6-6 6s-6-2.69-6-6 2.69-6 6-6 6 2.69 6 6z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 48 48\\\" id=\\\"vjs-icon-cancel\\\">\\n      <path d=\\\"M24 4C12.95 4 4 12.95 4 24s8.95 20 20 20 20-8.95 20-20S35.05 4 24 4zm10 27.17L31.17 34 24 26.83 16.83 34 14 31.17 21.17 24 14 16.83 16.83 14 24 21.17 31.17 14 34 16.83 26.83 24 34 31.17z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 48 48\\\" id=\\\"vjs-icon-replay\\\">\\n      <path d=\\\"M24 10V2L14 12l10 10v-8c6.63 0 12 5.37 12 12s-5.37 12-12 12-12-5.37-12-12H8c0 8.84 7.16 16 16 16s16-7.16 16-16-7.16-16-16-16z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 48 48\\\" id=\\\"vjs-icon-repeat\\\">\\n      <path d=\\\"M14 14h20v6l8-8-8-8v6H10v12h4v-8zm20 20H14v-6l-8 8 8 8v-6h24V26h-4v8z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 96 48 48\\\" id=\\\"vjs-icon-replay-5\\\">\\n      <path d=\\\"M17.689 98l-8.697 8.696 8.697 8.697 2.486-2.485-4.32-4.319h1.302c4.93 0 9.071 1.722 12.424 5.165 3.352 3.443 5.029 7.638 5.029 12.584h3.55c0-2.958-.553-5.73-1.658-8.313-1.104-2.583-2.622-4.841-4.555-6.774-1.932-1.932-4.19-3.45-6.773-4.555-2.584-1.104-5.355-1.657-8.313-1.657H15.5l4.615-4.615zm-8.08 21.659v13.861h11.357v5.008H9.609V143h12.7c.834 0 1.55-.298 2.146-.894.596-.597.895-1.31.895-2.145v-7.781c0-.835-.299-1.55-.895-2.147a2.929 2.929 0 0 0-2.147-.894h-8.227v-5.096H25.35v-4.384z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 96 48 48\\\" id=\\\"vjs-icon-replay-10\\\">\\n      <path d=\\\"M42.315 125.63c0-4.997-1.694-9.235-5.08-12.713-3.388-3.479-7.571-5.218-12.552-5.218h-1.315l4.363 4.363-2.51 2.51-8.787-8.786L25.221 97l2.45 2.45-4.662 4.663h1.375c2.988 0 5.788.557 8.397 1.673 2.61 1.116 4.892 2.65 6.844 4.602 1.953 1.953 3.487 4.234 4.602 6.844 1.116 2.61 1.674 5.41 1.674 8.398zM8.183 142v-19.657H3.176V117.8h9.643V142zm13.63 0c-1.156 0-2.127-.393-2.912-1.178-.778-.778-1.168-1.746-1.168-2.902v-16.04c0-1.156.393-2.127 1.178-2.912.779-.779 1.746-1.168 2.902-1.168h7.696c1.156 0 2.126.392 2.911 1.177.779.78 1.168 1.747 1.168 2.903v16.04c0 1.156-.392 2.127-1.177 2.912-.779.779-1.746 1.168-2.902 1.168zm.556-4.636h6.583v-15.02H22.37z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 96 48 48\\\" id=\\\"vjs-icon-replay-30\\\">\\n      <path d=\\\"M26.047 97l-8.733 8.732 8.733 8.733 2.496-2.494-4.336-4.338h1.307c4.95 0 9.108 1.73 12.474 5.187 3.367 3.458 5.051 7.668 5.051 12.635h3.565c0-2.97-.556-5.751-1.665-8.346-1.109-2.594-2.633-4.862-4.574-6.802-1.94-1.941-4.208-3.466-6.803-4.575-2.594-1.109-5.375-1.664-8.345-1.664H23.85l4.634-4.634zM2.555 117.531v4.688h10.297v5.25H5.873v4.687h6.979v5.156H2.555V142H13.36c1.061 0 1.95-.395 2.668-1.186.718-.79 1.076-1.772 1.076-2.94v-16.218c0-1.168-.358-2.149-1.076-2.94-.717-.79-1.607-1.185-2.668-1.185zm22.482.14c-1.149 0-2.11.39-2.885 1.165-.78.78-1.172 1.744-1.172 2.893v15.943c0 1.149.388 2.11 1.163 2.885.78.78 1.745 1.172 2.894 1.172h7.649c1.148 0 2.11-.388 2.884-1.163.78-.78 1.17-1.745 1.17-2.894v-15.943c0-1.15-.386-2.111-1.16-2.885-.78-.78-1.746-1.172-2.894-1.172zm.553 4.518h6.545v14.93H25.59z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 96 48 48\\\" id=\\\"vjs-icon-forward-5\\\">\\n      <path d=\\\"M29.508 97l-2.431 2.43 4.625 4.625h-1.364c-2.965 0-5.742.554-8.332 1.66-2.589 1.107-4.851 2.629-6.788 4.566-1.937 1.937-3.458 4.2-4.565 6.788-1.107 2.59-1.66 5.367-1.66 8.331h3.557c0-4.957 1.68-9.16 5.04-12.611 3.36-3.45 7.51-5.177 12.451-5.177h1.304l-4.326 4.33 2.49 2.49 8.715-8.716zm-9.783 21.61v13.89h11.382v5.018H19.725V142h12.727a2.93 2.93 0 0 0 2.15-.896 2.93 2.93 0 0 0 .896-2.15v-7.798c0-.837-.299-1.554-.896-2.152a2.93 2.93 0 0 0-2.15-.896h-8.245V123h11.29v-4.392z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 96 48 48\\\" id=\\\"vjs-icon-forward-10\\\">\\n      <path d=\\\"M23.119 97l-2.386 2.383 4.538 4.538h-1.339c-2.908 0-5.633.543-8.173 1.63-2.54 1.085-4.76 2.577-6.66 4.478-1.9 1.9-3.392 4.12-4.478 6.66-1.085 2.54-1.629 5.264-1.629 8.172h3.49c0-4.863 1.648-8.986 4.944-12.372 3.297-3.385 7.368-5.078 12.216-5.078h1.279l-4.245 4.247 2.443 2.442 8.55-8.55zm-9.52 21.45v4.42h4.871V142h4.513v-23.55zm18.136 0c-1.125 0-2.066.377-2.824 1.135-.764.764-1.148 1.709-1.148 2.834v15.612c0 1.124.38 2.066 1.139 2.824.764.764 1.708 1.145 2.833 1.145h7.489c1.125 0 2.066-.378 2.824-1.136.764-.764 1.145-1.709 1.145-2.833v-15.612c0-1.125-.378-2.067-1.136-2.825-.764-.764-1.708-1.145-2.833-1.145zm.54 4.42h6.408v14.617h-6.407z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 96 48 48\\\" id=\\\"vjs-icon-forward-30\\\">\\n      <path d=\\\"M25.549 97l-2.437 2.434 4.634 4.635H26.38c-2.97 0-5.753.555-8.347 1.664-2.594 1.109-4.861 2.633-6.802 4.574-1.94 1.94-3.465 4.207-4.574 6.802-1.109 2.594-1.664 5.377-1.664 8.347h3.565c0-4.967 1.683-9.178 5.05-12.636 3.366-3.458 7.525-5.187 12.475-5.187h1.307l-4.335 4.338 2.495 2.494 8.732-8.732zm-11.553 20.53v4.689h10.297v5.249h-6.978v4.688h6.978v5.156H13.996V142h10.808c1.06 0 1.948-.395 2.666-1.186.718-.79 1.077-1.771 1.077-2.94v-16.217c0-1.169-.36-2.15-1.077-2.94-.718-.79-1.605-1.186-2.666-1.186zm21.174.168c-1.149 0-2.11.389-2.884 1.163-.78.78-1.172 1.745-1.172 2.894v15.942c0 1.15.388 2.11 1.162 2.885.78.78 1.745 1.17 2.894 1.17h7.649c1.149 0 2.11-.386 2.885-1.16.78-.78 1.17-1.746 1.17-2.895v-15.942c0-1.15-.387-2.11-1.161-2.885-.78-.78-1.745-1.172-2.894-1.172zm.552 4.516h6.542v14.931h-6.542z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 512 512\\\" id=\\\"vjs-icon-audio-description\\\">\\n      <g fill-rule=\\\"evenodd\\\"><path d=\\\"M227.29 381.351V162.993c50.38-1.017 89.108-3.028 117.631 17.126 27.374 19.342 48.734 56.965 44.89 105.325-4.067 51.155-41.335 94.139-89.776 98.475-24.085 2.155-71.972 0-71.972 0s-.84-1.352-.773-2.568m48.755-54.804c31.43 1.26 53.208-16.633 56.495-45.386 4.403-38.51-21.188-63.552-58.041-60.796v103.612c-.036 1.466.575 2.22 1.546 2.57\\\"></path><path d=\\\"M383.78 381.328c13.336 3.71 17.387-11.06 23.215-21.408 12.722-22.571 22.294-51.594 22.445-84.774.221-47.594-18.343-82.517-35.6-106.182h-8.51c-.587 3.874 2.226 7.315 3.865 10.276 13.166 23.762 25.367 56.553 25.54 94.194.2 43.176-14.162 79.278-30.955 107.894\\\"></path><path d=\\\"M425.154 381.328c13.336 3.71 17.384-11.061 23.215-21.408 12.721-22.571 22.291-51.594 22.445-84.774.221-47.594-18.343-82.517-35.6-106.182h-8.511c-.586 3.874 2.226 7.315 3.866 10.276 13.166 23.762 25.367 56.553 25.54 94.194.2 43.176-14.162 79.278-30.955 107.894\\\"></path><path d=\\\"M466.26 381.328c13.337 3.71 17.385-11.061 23.216-21.408 12.722-22.571 22.292-51.594 22.445-84.774.221-47.594-18.343-82.517-35.6-106.182h-8.51c-.587 3.874 2.225 7.315 3.865 10.276 13.166 23.762 25.367 56.553 25.54 94.194.2 43.176-14.162 79.278-30.955 107.894M4.477 383.005H72.58l18.573-28.484 64.169-.135s.065 19.413.065 28.62h48.756V160.307h-58.816c-5.653 9.537-140.85 222.697-140.85 222.697zm152.667-145.282v71.158l-40.453-.27 40.453-70.888z\\\"></path></g>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 48 48\\\" id=\\\"vjs-icon-next-item\\\">\\n      <path d=\\\"M12 36l17-12-17-12v24zm20-24v24h4V12h-4z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 48 48\\\" id=\\\"vjs-icon-previous-item\\\">\\n      <path d=\\\"M12 12h4v24h-4zm7 12l17 12V12z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 48 48\\\" id=\\\"vjs-icon-shuffle\\\">\\n      <path d=\\\"M21.17 18.34L10.83 8 8 10.83l10.34 10.34 2.83-2.83zM29 8l4.09 4.09L8 37.17 10.83 40l25.09-25.09L40 19V8H29zm.66 18.83l-2.83 2.83 6.26 6.26L29 40h11V29l-4.09 4.09-6.25-6.26z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 48 48\\\" id=\\\"vjs-icon-cast\\\">\\n      <path d=\\\"M42 6H6c-2.21 0-4 1.79-4 4v6h4v-6h36v28H28v4h14c2.21 0 4-1.79 4-4V10c0-2.21-1.79-4-4-4zM2 36v6h6c0-3.31-2.69-6-6-6zm0-8v4c5.52 0 10 4.48 10 10h4c0-7.73-6.27-14-14-14zm0-8v4c9.94 0 18 8.06 18 18h4c0-12.15-9.85-22-22-22z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 48 48\\\" id=\\\"vjs-icon-picture-in-picture-enter\\\">\\n      <path d=\\\"M38 22H22v11.99h16V22zm8 16V9.96C46 7.76 44.2 6 42 6H6C3.8 6 2 7.76 2 9.96V38c0 2.2 1.8 4 4 4h36c2.2 0 4-1.8 4-4zm-4 .04H6V9.94h36v28.1z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 22 18\\\" id=\\\"vjs-icon-picture-in-picture-exit\\\">\\n      <path d=\\\"M18 4H4v10h14V4zm4 12V1.98C22 .88 21.1 0 20 0H2C.9 0 0 .88 0 1.98V16c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2zm-2 .02H2V1.97h18v14.05z\\\"></path>\\n      <path fill=\\\"none\\\" d=\\\"M-1-3h24v24H-1z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 1792 1792\\\" id=\\\"vjs-icon-facebook\\\">\\n      <path d=\\\"M1343 12v264h-157q-86 0-116 36t-30 108v189h293l-39 296h-254v759H734V905H479V609h255V391q0-186 104-288.5T1115 0q147 0 228 12z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 1792 1792\\\" id=\\\"vjs-icon-linkedin\\\">\\n      <path d=\\\"M477 625v991H147V625h330zm21-306q1 73-50.5 122T312 490h-2q-82 0-132-49t-50-122q0-74 51.5-122.5T314 148t133 48.5T498 319zm1166 729v568h-329v-530q0-105-40.5-164.5T1168 862q-63 0-105.5 34.5T999 982q-11 30-11 81v553H659q2-399 2-647t-1-296l-1-48h329v144h-2q20-32 41-56t56.5-52 87-43.5T1285 602q171 0 275 113.5t104 332.5z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 1792 1792\\\" id=\\\"vjs-icon-twitter\\\">\\n      <path d=\\\"M1684 408q-67 98-162 167 1 14 1 42 0 130-38 259.5T1369.5 1125 1185 1335.5t-258 146-323 54.5q-271 0-496-145 35 4 78 4 225 0 401-138-105-2-188-64.5T285 1033q33 5 61 5 43 0 85-11-112-23-185.5-111.5T172 710v-4q68 38 146 41-66-44-105-115t-39-154q0-88 44-163 121 149 294.5 238.5T884 653q-8-38-8-74 0-134 94.5-228.5T1199 256q140 0 236 102 109-21 205-78-37 115-142 178 93-10 186-50z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 1792 1792\\\" id=\\\"vjs-icon-tumblr\\\">\\n      <path d=\\\"M1328 1329l80 237q-23 35-111 66t-177 32q-104 2-190.5-26T787 1564t-95-106-55.5-120-16.5-118V676H452V461q72-26 129-69.5t91-90 58-102 34-99T779 12q1-5 4.5-8.5T791 0h244v424h333v252h-334v518q0 30 6.5 56t22.5 52.5 49.5 41.5 81.5 14q78-2 134-29z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 1792 1792\\\" id=\\\"vjs-icon-pinterest\\\">\\n      <path d=\\\"M1664 896q0 209-103 385.5T1281.5 1561 896 1664q-111 0-218-32 59-93 78-164 9-34 54-211 20 39 73 67.5t114 28.5q121 0 216-68.5t147-188.5 52-270q0-114-59.5-214T1180 449t-255-63q-105 0-196 29t-154.5 77-109 110.5-67 129.5T377 866q0 104 40 183t117 111q30 12 38-20 2-7 8-31t8-30q6-23-11-43-51-61-51-151 0-151 104.5-259.5T904 517q151 0 235.5 82t84.5 213q0 170-68.5 289T980 1220q-61 0-98-43.5T859 1072q8-35 26.5-93.5t30-103T927 800q0-50-27-83t-77-33q-62 0-105 57t-43 142q0 73 25 122l-99 418q-17 70-13 177-206-91-333-281T128 896q0-209 103-385.5T510.5 231 896 128t385.5 103T1561 510.5 1664 896z\\\"></path>\\n    </symbol>\\n  </defs>\\n</svg>\";\n\n/**\n * @file loader.js\n */\n\n/**\n * The `MediaLoader` is the `Component` that decides which playback technology to load\n * when a player is initialized.\n *\n * @extends Component\n */\nclass MediaLoader extends Component$1 {\n  /**\n   * Create an instance of this class.\n   *\n   * @param { import('../player').default } player\n   *        The `Player` that this class should attach to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Function} [ready]\n   *        The function that is run when this component is ready.\n   */\n  constructor(player, options, ready) {\n    // MediaLoader has no element\n    const options_ = merge$1({\n      createEl: false\n    }, options);\n    super(player, options_, ready);\n\n    // If there are no sources when the player is initialized,\n    // load the first supported playback technology.\n\n    if (!options.playerOptions.sources || options.playerOptions.sources.length === 0) {\n      for (let i = 0, j = options.playerOptions.techOrder; i < j.length; i++) {\n        const techName = toTitleCase$1(j[i]);\n        let tech = Tech.getTech(techName);\n\n        // Support old behavior of techs being registered as components.\n        // Remove once that deprecated behavior is removed.\n        if (!techName) {\n          tech = Component$1.getComponent(techName);\n        }\n\n        // Check if the browser supports this technology\n        if (tech && tech.isSupported()) {\n          player.loadTech_(techName);\n          break;\n        }\n      }\n    } else {\n      // Loop through playback technologies (e.g. HTML5) and check for support.\n      // Then load the best source.\n      // A few assumptions here:\n      //   All playback technologies respect preload false.\n      player.src(options.playerOptions.sources);\n    }\n  }\n}\nComponent$1.registerComponent('MediaLoader', MediaLoader);\n\n/**\n * @file clickable-component.js\n */\n\n/**\n * Component which is clickable or keyboard actionable, but is not a\n * native HTML button.\n *\n * @extends Component\n */\nclass ClickableComponent extends Component$1 {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param  { import('./player').default } player\n   *         The `Player` that this class should be attached to.\n   *\n   * @param  {Object} [options]\n   *         The key/value store of component options.\n   *\n   * @param  {function} [options.clickHandler]\n   *         The function to call when the button is clicked / activated\n   *\n   * @param  {string} [options.controlText]\n   *         The text to set on the button\n   *\n   * @param  {string} [options.className]\n   *         A class or space separated list of classes to add the component\n   *\n   */\n  constructor(player, options) {\n    super(player, options);\n    if (this.options_.controlText) {\n      this.controlText(this.options_.controlText);\n    }\n    this.handleMouseOver_ = e => this.handleMouseOver(e);\n    this.handleMouseOut_ = e => this.handleMouseOut(e);\n    this.handleClick_ = e => this.handleClick(e);\n    this.handleKeyDown_ = e => this.handleKeyDown(e);\n    this.emitTapEvents();\n    this.enable();\n  }\n\n  /**\n   * Create the `ClickableComponent`s DOM element.\n   *\n   * @param {string} [tag=div]\n   *        The element's node type.\n   *\n   * @param {Object} [props={}]\n   *        An object of properties that should be set on the element.\n   *\n   * @param {Object} [attributes={}]\n   *        An object of attributes that should be set on the element.\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n  createEl(tag = 'div', props = {}, attributes = {}) {\n    props = Object.assign({\n      className: this.buildCSSClass(),\n      tabIndex: 0\n    }, props);\n    if (tag === 'button') {\n      log$1.error(`Creating a ClickableComponent with an HTML element of ${tag} is not supported; use a Button instead.`);\n    }\n\n    // Add ARIA attributes for clickable element which is not a native HTML button\n    attributes = Object.assign({\n      role: 'button'\n    }, attributes);\n    this.tabIndex_ = props.tabIndex;\n    const el = createEl(tag, props, attributes);\n    if (!this.player_.options_.experimentalSvgIcons) {\n      el.appendChild(createEl('span', {\n        className: 'vjs-icon-placeholder'\n      }, {\n        'aria-hidden': true\n      }));\n    }\n    this.createControlTextEl(el);\n    return el;\n  }\n  dispose() {\n    // remove controlTextEl_ on dispose\n    this.controlTextEl_ = null;\n    super.dispose();\n  }\n\n  /**\n   * Create a control text element on this `ClickableComponent`\n   *\n   * @param {Element} [el]\n   *        Parent element for the control text.\n   *\n   * @return {Element}\n   *         The control text element that gets created.\n   */\n  createControlTextEl(el) {\n    this.controlTextEl_ = createEl('span', {\n      className: 'vjs-control-text'\n    }, {\n      // let the screen reader user know that the text of the element may change\n      'aria-live': 'polite'\n    });\n    if (el) {\n      el.appendChild(this.controlTextEl_);\n    }\n    this.controlText(this.controlText_, el);\n    return this.controlTextEl_;\n  }\n\n  /**\n   * Get or set the localize text to use for the controls on the `ClickableComponent`.\n   *\n   * @param {string} [text]\n   *        Control text for element.\n   *\n   * @param {Element} [el=this.el()]\n   *        Element to set the title on.\n   *\n   * @return {string}\n   *         - The control text when getting\n   */\n  controlText(text, el = this.el()) {\n    if (text === undefined) {\n      return this.controlText_ || 'Need Text';\n    }\n    const localizedText = this.localize(text);\n\n    /** @protected */\n    this.controlText_ = text;\n    textContent(this.controlTextEl_, localizedText);\n    if (!this.nonIconControl && !this.player_.options_.noUITitleAttributes) {\n      // Set title attribute if only an icon is shown\n      el.setAttribute('title', localizedText);\n    }\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n  buildCSSClass() {\n    return `vjs-control vjs-button ${super.buildCSSClass()}`;\n  }\n\n  /**\n   * Enable this `ClickableComponent`\n   */\n  enable() {\n    if (!this.enabled_) {\n      this.enabled_ = true;\n      this.removeClass('vjs-disabled');\n      this.el_.setAttribute('aria-disabled', 'false');\n      if (typeof this.tabIndex_ !== 'undefined') {\n        this.el_.setAttribute('tabIndex', this.tabIndex_);\n      }\n      this.on(['tap', 'click'], this.handleClick_);\n      this.on('keydown', this.handleKeyDown_);\n    }\n  }\n\n  /**\n   * Disable this `ClickableComponent`\n   */\n  disable() {\n    this.enabled_ = false;\n    this.addClass('vjs-disabled');\n    this.el_.setAttribute('aria-disabled', 'true');\n    if (typeof this.tabIndex_ !== 'undefined') {\n      this.el_.removeAttribute('tabIndex');\n    }\n    this.off('mouseover', this.handleMouseOver_);\n    this.off('mouseout', this.handleMouseOut_);\n    this.off(['tap', 'click'], this.handleClick_);\n    this.off('keydown', this.handleKeyDown_);\n  }\n\n  /**\n   * Handles language change in ClickableComponent for the player in components\n   *\n   *\n   */\n  handleLanguagechange() {\n    this.controlText(this.controlText_);\n  }\n\n  /**\n   * Event handler that is called when a `ClickableComponent` receives a\n   * `click` or `tap` event.\n   *\n   * @param {Event} event\n   *        The `tap` or `click` event that caused this function to be called.\n   *\n   * @listens tap\n   * @listens click\n   * @abstract\n   */\n  handleClick(event) {\n    if (this.options_.clickHandler) {\n      this.options_.clickHandler.call(this, arguments);\n    }\n  }\n\n  /**\n   * Event handler that is called when a `ClickableComponent` receives a\n   * `keydown` event.\n   *\n   * By default, if the key is Space or Enter, it will trigger a `click` event.\n   *\n   * @param {KeyboardEvent} event\n   *        The `keydown` event that caused this function to be called.\n   *\n   * @listens keydown\n   */\n  handleKeyDown(event) {\n    // Support Space or Enter key operation to fire a click event. Also,\n    // prevent the event from propagating through the DOM and triggering\n    // Player hotkeys.\n    if (keycode.isEventKey(event, 'Space') || keycode.isEventKey(event, 'Enter')) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.trigger('click');\n    } else {\n      // Pass keypress handling up for unsupported keys\n      super.handleKeyDown(event);\n    }\n  }\n}\nComponent$1.registerComponent('ClickableComponent', ClickableComponent);\n\n/**\n * @file poster-image.js\n */\n\n/**\n * A `ClickableComponent` that handles showing the poster image for the player.\n *\n * @extends ClickableComponent\n */\nclass PosterImage extends ClickableComponent {\n  /**\n   * Create an instance of this class.\n   *\n   * @param { import('./player').default } player\n   *        The `Player` that this class should attach to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  constructor(player, options) {\n    super(player, options);\n    this.update();\n    this.update_ = e => this.update(e);\n    player.on('posterchange', this.update_);\n  }\n\n  /**\n   * Clean up and dispose of the `PosterImage`.\n   */\n  dispose() {\n    this.player().off('posterchange', this.update_);\n    super.dispose();\n  }\n\n  /**\n   * Create the `PosterImage`s DOM element.\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n  createEl() {\n    // The el is an empty div to keep position in the DOM\n    // A picture and img el will be inserted when a source is set\n    return createEl('div', {\n      className: 'vjs-poster'\n    });\n  }\n\n  /**\n   * Get or set the `PosterImage`'s crossOrigin option.\n   *\n   * @param {string|null} [value]\n   *        The value to set the crossOrigin to. If an argument is\n   *        given, must be one of `'anonymous'` or `'use-credentials'`, or 'null'.\n   *\n   * @return {string|null}\n   *         - The current crossOrigin value of the `Player` when getting.\n   *         - undefined when setting\n   */\n  crossOrigin(value) {\n    // `null` can be set to unset a value\n    if (typeof value === 'undefined') {\n      if (this.$('img')) {\n        // If the poster's element exists, give its value\n        return this.$('img').crossOrigin;\n      } else if (this.player_.tech_ && this.player_.tech_.isReady_) {\n        // If not but the tech is ready, query the tech\n        return this.player_.crossOrigin();\n      }\n      // Otherwise check options as the  poster is usually set before the state of crossorigin\n      // can be retrieved by the getter\n      return this.player_.options_.crossOrigin || this.player_.options_.crossorigin || null;\n    }\n    if (value !== null && value !== 'anonymous' && value !== 'use-credentials') {\n      this.player_.log.warn(`crossOrigin must be null,  \"anonymous\" or \"use-credentials\", given \"${value}\"`);\n      return;\n    }\n    if (this.$('img')) {\n      this.$('img').crossOrigin = value;\n    }\n    return;\n  }\n\n  /**\n   * An {@link EventTarget~EventListener} for {@link Player#posterchange} events.\n   *\n   * @listens Player#posterchange\n   *\n   * @param {Event} [event]\n   *        The `Player#posterchange` event that triggered this function.\n   */\n  update(event) {\n    const url = this.player().poster();\n    this.setSrc(url);\n\n    // If there's no poster source we should display:none on this component\n    // so it's not still clickable or right-clickable\n    if (url) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  }\n\n  /**\n   * Set the source of the `PosterImage` depending on the display method. (Re)creates\n   * the inner picture and img elementss when needed.\n   *\n   * @param {string} [url]\n   *        The URL to the source for the `PosterImage`. If not specified or falsy,\n   *        any source and ant inner picture/img are removed.\n   */\n  setSrc(url) {\n    if (!url) {\n      this.el_.textContent = '';\n      return;\n    }\n    if (!this.$('img')) {\n      this.el_.appendChild(createEl('picture', {\n        className: 'vjs-poster',\n        // Don't want poster to be tabbable.\n        tabIndex: -1\n      }, {}, createEl('img', {\n        loading: 'lazy',\n        crossOrigin: this.crossOrigin()\n      }, {\n        alt: ''\n      })));\n    }\n    this.$('img').src = url;\n  }\n\n  /**\n   * An {@link EventTarget~EventListener} for clicks on the `PosterImage`. See\n   * {@link ClickableComponent#handleClick} for instances where this will be triggered.\n   *\n   * @listens tap\n   * @listens click\n   * @listens keydown\n   *\n   * @param {Event} event\n   +        The `click`, `tap` or `keydown` event that caused this function to be called.\n   */\n  handleClick(event) {\n    // We don't want a click to trigger playback when controls are disabled\n    if (!this.player_.controls()) {\n      return;\n    }\n    if (this.player_.tech(true)) {\n      this.player_.tech(true).focus();\n    }\n    if (this.player_.paused()) {\n      silencePromise(this.player_.play());\n    } else {\n      this.player_.pause();\n    }\n  }\n}\n\n/**\n * Get or set the `PosterImage`'s crossorigin option. For the HTML5 player, this\n * sets the `crossOrigin` property on the `<img>` tag to control the CORS\n * behavior.\n *\n * @param {string|null} [value]\n *        The value to set the `PosterImages`'s crossorigin to. If an argument is\n *        given, must be one of `anonymous` or `use-credentials`.\n *\n * @return {string|null|undefined}\n *         - The current crossorigin value of the `Player` when getting.\n *         - undefined when setting\n */\nPosterImage.prototype.crossorigin = PosterImage.prototype.crossOrigin;\nComponent$1.registerComponent('PosterImage', PosterImage);\n\n/**\n * @file text-track-display.js\n */\nconst darkGray = '#222';\nconst lightGray = '#ccc';\nconst fontMap = {\n  monospace: 'monospace',\n  sansSerif: 'sans-serif',\n  serif: 'serif',\n  monospaceSansSerif: '\"Andale Mono\", \"Lucida Console\", monospace',\n  monospaceSerif: '\"Courier New\", monospace',\n  proportionalSansSerif: 'sans-serif',\n  proportionalSerif: 'serif',\n  casual: '\"Comic Sans MS\", Impact, fantasy',\n  script: '\"Monotype Corsiva\", cursive',\n  smallcaps: '\"Andale Mono\", \"Lucida Console\", monospace, sans-serif'\n};\n\n/**\n * Construct an rgba color from a given hex color code.\n *\n * @param {number} color\n *        Hex number for color, like #f0e or #f604e2.\n *\n * @param {number} opacity\n *        Value for opacity, 0.0 - 1.0.\n *\n * @return {string}\n *         The rgba color that was created, like 'rgba(255, 0, 0, 0.3)'.\n */\nfunction constructColor(color, opacity) {\n  let hex;\n  if (color.length === 4) {\n    // color looks like \"#f0e\"\n    hex = color[1] + color[1] + color[2] + color[2] + color[3] + color[3];\n  } else if (color.length === 7) {\n    // color looks like \"#f604e2\"\n    hex = color.slice(1);\n  } else {\n    throw new Error('Invalid color code provided, ' + color + '; must be formatted as e.g. #f0e or #f604e2.');\n  }\n  return 'rgba(' + parseInt(hex.slice(0, 2), 16) + ',' + parseInt(hex.slice(2, 4), 16) + ',' + parseInt(hex.slice(4, 6), 16) + ',' + opacity + ')';\n}\n\n/**\n * Try to update the style of a DOM element. Some style changes will throw an error,\n * particularly in IE8. Those should be noops.\n *\n * @param {Element} el\n *        The DOM element to be styled.\n *\n * @param {string} style\n *        The CSS property on the element that should be styled.\n *\n * @param {string} rule\n *        The style rule that should be applied to the property.\n *\n * @private\n */\nfunction tryUpdateStyle(el, style, rule) {\n  try {\n    el.style[style] = rule;\n  } catch (e) {\n    // Satisfies linter.\n    return;\n  }\n}\n\n/**\n * Converts the CSS top/right/bottom/left property numeric value to string in pixels.\n *\n * @param {number} position\n *        The CSS top/right/bottom/left property value.\n *\n * @return {string}\n *          The CSS property value that was created, like '10px'.\n *\n * @private\n */\nfunction getCSSPositionValue(position) {\n  return position ? `${position}px` : '';\n}\n\n/**\n * The component for displaying text track cues.\n *\n * @extends Component\n */\nclass TextTrackDisplay extends Component$1 {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('../player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Function} [ready]\n   *        The function to call when `TextTrackDisplay` is ready.\n   */\n  constructor(player, options, ready) {\n    super(player, options, ready);\n    const updateDisplayTextHandler = e => this.updateDisplay(e);\n    const updateDisplayHandler = e => {\n      this.updateDisplayOverlay();\n      this.updateDisplay(e);\n    };\n    player.on('loadstart', e => this.toggleDisplay(e));\n    player.on('texttrackchange', updateDisplayTextHandler);\n    player.on('loadedmetadata', e => {\n      this.updateDisplayOverlay();\n      this.preselectTrack(e);\n    });\n\n    // This used to be called during player init, but was causing an error\n    // if a track should show by default and the display hadn't loaded yet.\n    // Should probably be moved to an external track loader when we support\n    // tracks that don't need a display.\n    player.ready(bind_(this, function () {\n      if (player.tech_ && player.tech_.featuresNativeTextTracks) {\n        this.hide();\n        return;\n      }\n      player.on('fullscreenchange', updateDisplayHandler);\n      player.on('playerresize', updateDisplayHandler);\n      const screenOrientation = window$1.screen.orientation || window$1;\n      const changeOrientationEvent = window$1.screen.orientation ? 'change' : 'orientationchange';\n      screenOrientation.addEventListener(changeOrientationEvent, updateDisplayHandler);\n      player.on('dispose', () => screenOrientation.removeEventListener(changeOrientationEvent, updateDisplayHandler));\n      const tracks = this.options_.playerOptions.tracks || [];\n      for (let i = 0; i < tracks.length; i++) {\n        this.player_.addRemoteTextTrack(tracks[i], true);\n      }\n      this.preselectTrack();\n    }));\n  }\n\n  /**\n  * Preselect a track following this precedence:\n  * - matches the previously selected {@link TextTrack}'s language and kind\n  * - matches the previously selected {@link TextTrack}'s language only\n  * - is the first default captions track\n  * - is the first default descriptions track\n  *\n  * @listens Player#loadstart\n  */\n  preselectTrack() {\n    const modes = {\n      captions: 1,\n      subtitles: 1\n    };\n    const trackList = this.player_.textTracks();\n    const userPref = this.player_.cache_.selectedLanguage;\n    let firstDesc;\n    let firstCaptions;\n    let preferredTrack;\n    for (let i = 0; i < trackList.length; i++) {\n      const track = trackList[i];\n      if (userPref && userPref.enabled && userPref.language && userPref.language === track.language && track.kind in modes) {\n        // Always choose the track that matches both language and kind\n        if (track.kind === userPref.kind) {\n          preferredTrack = track;\n          // or choose the first track that matches language\n        } else if (!preferredTrack) {\n          preferredTrack = track;\n        }\n\n        // clear everything if offTextTrackMenuItem was clicked\n      } else if (userPref && !userPref.enabled) {\n        preferredTrack = null;\n        firstDesc = null;\n        firstCaptions = null;\n      } else if (track.default) {\n        if (track.kind === 'descriptions' && !firstDesc) {\n          firstDesc = track;\n        } else if (track.kind in modes && !firstCaptions) {\n          firstCaptions = track;\n        }\n      }\n    }\n\n    // The preferredTrack matches the user preference and takes\n    // precedence over all the other tracks.\n    // So, display the preferredTrack before the first default track\n    // and the subtitles/captions track before the descriptions track\n    if (preferredTrack) {\n      preferredTrack.mode = 'showing';\n    } else if (firstCaptions) {\n      firstCaptions.mode = 'showing';\n    } else if (firstDesc) {\n      firstDesc.mode = 'showing';\n    }\n  }\n\n  /**\n   * Turn display of {@link TextTrack}'s from the current state into the other state.\n   * There are only two states:\n   * - 'shown'\n   * - 'hidden'\n   *\n   * @listens Player#loadstart\n   */\n  toggleDisplay() {\n    if (this.player_.tech_ && this.player_.tech_.featuresNativeTextTracks) {\n      this.hide();\n    } else {\n      this.show();\n    }\n  }\n\n  /**\n   * Create the {@link Component}'s DOM element.\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  createEl() {\n    return super.createEl('div', {\n      className: 'vjs-text-track-display'\n    }, {\n      'translate': 'yes',\n      'aria-live': 'off',\n      'aria-atomic': 'true'\n    });\n  }\n\n  /**\n   * Clear all displayed {@link TextTrack}s.\n   */\n  clearDisplay() {\n    if (typeof window$1.WebVTT === 'function') {\n      window$1.WebVTT.processCues(window$1, [], this.el_);\n    }\n  }\n\n  /**\n   * Update the displayed TextTrack when a either a {@link Player#texttrackchange} or\n   * a {@link Player#fullscreenchange} is fired.\n   *\n   * @listens Player#texttrackchange\n   * @listens Player#fullscreenchange\n   */\n  updateDisplay() {\n    const tracks = this.player_.textTracks();\n    const allowMultipleShowingTracks = this.options_.allowMultipleShowingTracks;\n    this.clearDisplay();\n    if (allowMultipleShowingTracks) {\n      const showingTracks = [];\n      for (let i = 0; i < tracks.length; ++i) {\n        const track = tracks[i];\n        if (track.mode !== 'showing') {\n          continue;\n        }\n        showingTracks.push(track);\n      }\n      this.updateForTrack(showingTracks);\n      return;\n    }\n\n    //  Track display prioritization model: if multiple tracks are 'showing',\n    //  display the first 'subtitles' or 'captions' track which is 'showing',\n    //  otherwise display the first 'descriptions' track which is 'showing'\n\n    let descriptionsTrack = null;\n    let captionsSubtitlesTrack = null;\n    let i = tracks.length;\n    while (i--) {\n      const track = tracks[i];\n      if (track.mode === 'showing') {\n        if (track.kind === 'descriptions') {\n          descriptionsTrack = track;\n        } else {\n          captionsSubtitlesTrack = track;\n        }\n      }\n    }\n    if (captionsSubtitlesTrack) {\n      if (this.getAttribute('aria-live') !== 'off') {\n        this.setAttribute('aria-live', 'off');\n      }\n      this.updateForTrack(captionsSubtitlesTrack);\n    } else if (descriptionsTrack) {\n      if (this.getAttribute('aria-live') !== 'assertive') {\n        this.setAttribute('aria-live', 'assertive');\n      }\n      this.updateForTrack(descriptionsTrack);\n    }\n  }\n\n  /**\n   * Updates the displayed TextTrack to be sure it overlays the video when a either\n   * a {@link Player#texttrackchange} or a {@link Player#fullscreenchange} is fired.\n   */\n  updateDisplayOverlay() {\n    // inset-inline and inset-block are not supprted on old chrome, but these are\n    // only likely to be used on TV devices\n    if (!this.player_.videoHeight() || !window$1.CSS.supports('inset-inline: 10px')) {\n      return;\n    }\n    const playerWidth = this.player_.currentWidth();\n    const playerHeight = this.player_.currentHeight();\n    const playerAspectRatio = playerWidth / playerHeight;\n    const videoAspectRatio = this.player_.videoWidth() / this.player_.videoHeight();\n    let insetInlineMatch = 0;\n    let insetBlockMatch = 0;\n    if (Math.abs(playerAspectRatio - videoAspectRatio) > 0.1) {\n      if (playerAspectRatio > videoAspectRatio) {\n        insetInlineMatch = Math.round((playerWidth - playerHeight * videoAspectRatio) / 2);\n      } else {\n        insetBlockMatch = Math.round((playerHeight - playerWidth / videoAspectRatio) / 2);\n      }\n    }\n    tryUpdateStyle(this.el_, 'insetInline', getCSSPositionValue(insetInlineMatch));\n    tryUpdateStyle(this.el_, 'insetBlock', getCSSPositionValue(insetBlockMatch));\n  }\n\n  /**\n   * Style {@Link TextTrack} activeCues according to {@Link TextTrackSettings}.\n   *\n   * @param {TextTrack} track\n   *        Text track object containing active cues to style.\n   */\n  updateDisplayState(track) {\n    const overrides = this.player_.textTrackSettings.getValues();\n    const cues = track.activeCues;\n    let i = cues.length;\n    while (i--) {\n      const cue = cues[i];\n      if (!cue) {\n        continue;\n      }\n      const cueDiv = cue.displayState;\n      if (overrides.color) {\n        cueDiv.firstChild.style.color = overrides.color;\n      }\n      if (overrides.textOpacity) {\n        tryUpdateStyle(cueDiv.firstChild, 'color', constructColor(overrides.color || '#fff', overrides.textOpacity));\n      }\n      if (overrides.backgroundColor) {\n        cueDiv.firstChild.style.backgroundColor = overrides.backgroundColor;\n      }\n      if (overrides.backgroundOpacity) {\n        tryUpdateStyle(cueDiv.firstChild, 'backgroundColor', constructColor(overrides.backgroundColor || '#000', overrides.backgroundOpacity));\n      }\n      if (overrides.windowColor) {\n        if (overrides.windowOpacity) {\n          tryUpdateStyle(cueDiv, 'backgroundColor', constructColor(overrides.windowColor, overrides.windowOpacity));\n        } else {\n          cueDiv.style.backgroundColor = overrides.windowColor;\n        }\n      }\n      if (overrides.edgeStyle) {\n        if (overrides.edgeStyle === 'dropshadow') {\n          cueDiv.firstChild.style.textShadow = `2px 2px 3px ${darkGray}, 2px 2px 4px ${darkGray}, 2px 2px 5px ${darkGray}`;\n        } else if (overrides.edgeStyle === 'raised') {\n          cueDiv.firstChild.style.textShadow = `1px 1px ${darkGray}, 2px 2px ${darkGray}, 3px 3px ${darkGray}`;\n        } else if (overrides.edgeStyle === 'depressed') {\n          cueDiv.firstChild.style.textShadow = `1px 1px ${lightGray}, 0 1px ${lightGray}, -1px -1px ${darkGray}, 0 -1px ${darkGray}`;\n        } else if (overrides.edgeStyle === 'uniform') {\n          cueDiv.firstChild.style.textShadow = `0 0 4px ${darkGray}, 0 0 4px ${darkGray}, 0 0 4px ${darkGray}, 0 0 4px ${darkGray}`;\n        }\n      }\n      if (overrides.fontPercent && overrides.fontPercent !== 1) {\n        const fontSize = window$1.parseFloat(cueDiv.style.fontSize);\n        cueDiv.style.fontSize = fontSize * overrides.fontPercent + 'px';\n        cueDiv.style.height = 'auto';\n        cueDiv.style.top = 'auto';\n      }\n      if (overrides.fontFamily && overrides.fontFamily !== 'default') {\n        if (overrides.fontFamily === 'small-caps') {\n          cueDiv.firstChild.style.fontVariant = 'small-caps';\n        } else {\n          cueDiv.firstChild.style.fontFamily = fontMap[overrides.fontFamily];\n        }\n      }\n    }\n  }\n\n  /**\n   * Add an {@link TextTrack} to to the {@link Tech}s {@link TextTrackList}.\n   *\n   * @param {TextTrack|TextTrack[]} tracks\n   *        Text track object or text track array to be added to the list.\n   */\n  updateForTrack(tracks) {\n    if (!Array.isArray(tracks)) {\n      tracks = [tracks];\n    }\n    if (typeof window$1.WebVTT !== 'function' || tracks.every(track => {\n      return !track.activeCues;\n    })) {\n      return;\n    }\n    const cues = [];\n\n    // push all active track cues\n    for (let i = 0; i < tracks.length; ++i) {\n      const track = tracks[i];\n      for (let j = 0; j < track.activeCues.length; ++j) {\n        cues.push(track.activeCues[j]);\n      }\n    }\n\n    // removes all cues before it processes new ones\n    window$1.WebVTT.processCues(window$1, cues, this.el_);\n\n    // add unique class to each language text track & add settings styling if necessary\n    for (let i = 0; i < tracks.length; ++i) {\n      const track = tracks[i];\n      for (let j = 0; j < track.activeCues.length; ++j) {\n        const cueEl = track.activeCues[j].displayState;\n        addClass(cueEl, 'vjs-text-track-cue', 'vjs-text-track-cue-' + (track.language ? track.language : i));\n        if (track.language) {\n          setAttribute(cueEl, 'lang', track.language);\n        }\n      }\n      if (this.player_.textTrackSettings) {\n        this.updateDisplayState(track);\n      }\n    }\n  }\n}\nComponent$1.registerComponent('TextTrackDisplay', TextTrackDisplay);\n\n/**\n * @file loading-spinner.js\n */\n\n/**\n * A loading spinner for use during waiting/loading events.\n *\n * @extends Component\n */\nclass LoadingSpinner extends Component$1 {\n  /**\n   * Create the `LoadingSpinner`s DOM element.\n   *\n   * @return {Element}\n   *         The dom element that gets created.\n   */\n  createEl() {\n    const isAudio = this.player_.isAudio();\n    const playerType = this.localize(isAudio ? 'Audio Player' : 'Video Player');\n    const controlText = createEl('span', {\n      className: 'vjs-control-text',\n      textContent: this.localize('{1} is loading.', [playerType])\n    });\n    const el = super.createEl('div', {\n      className: 'vjs-loading-spinner',\n      dir: 'ltr'\n    });\n    el.appendChild(controlText);\n    return el;\n  }\n\n  /**\n   * Update control text on languagechange\n   */\n  handleLanguagechange() {\n    this.$('.vjs-control-text').textContent = this.localize('{1} is loading.', [this.player_.isAudio() ? 'Audio Player' : 'Video Player']);\n  }\n}\nComponent$1.registerComponent('LoadingSpinner', LoadingSpinner);\n\n/**\n * @file button.js\n */\n\n/**\n * Base class for all buttons.\n *\n * @extends ClickableComponent\n */\nclass Button extends ClickableComponent {\n  /**\n   * Create the `Button`s DOM element.\n   *\n   * @param {string} [tag=\"button\"]\n   *        The element's node type. This argument is IGNORED: no matter what\n   *        is passed, it will always create a `button` element.\n   *\n   * @param {Object} [props={}]\n   *        An object of properties that should be set on the element.\n   *\n   * @param {Object} [attributes={}]\n   *        An object of attributes that should be set on the element.\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n  createEl(tag, props = {}, attributes = {}) {\n    tag = 'button';\n    props = Object.assign({\n      className: this.buildCSSClass()\n    }, props);\n\n    // Add attributes for button element\n    attributes = Object.assign({\n      // Necessary since the default button type is \"submit\"\n      type: 'button'\n    }, attributes);\n    const el = createEl(tag, props, attributes);\n    if (!this.player_.options_.experimentalSvgIcons) {\n      el.appendChild(createEl('span', {\n        className: 'vjs-icon-placeholder'\n      }, {\n        'aria-hidden': true\n      }));\n    }\n    this.createControlTextEl(el);\n    return el;\n  }\n\n  /**\n   * Add a child `Component` inside of this `Button`.\n   *\n   * @param {string|Component} child\n   *        The name or instance of a child to add.\n   *\n   * @param {Object} [options={}]\n   *        The key/value store of options that will get passed to children of\n   *        the child.\n   *\n   * @return {Component}\n   *         The `Component` that gets added as a child. When using a string the\n   *         `Component` will get created by this process.\n   *\n   * @deprecated since version 5\n   */\n  addChild(child, options = {}) {\n    const className = this.constructor.name;\n    log$1.warn(`Adding an actionable (user controllable) child to a Button (${className}) is not supported; use a ClickableComponent instead.`);\n\n    // Avoid the error message generated by ClickableComponent's addChild method\n    return Component$1.prototype.addChild.call(this, child, options);\n  }\n\n  /**\n   * Enable the `Button` element so that it can be activated or clicked. Use this with\n   * {@link Button#disable}.\n   */\n  enable() {\n    super.enable();\n    this.el_.removeAttribute('disabled');\n  }\n\n  /**\n   * Disable the `Button` element so that it cannot be activated or clicked. Use this with\n   * {@link Button#enable}.\n   */\n  disable() {\n    super.disable();\n    this.el_.setAttribute('disabled', 'disabled');\n  }\n\n  /**\n   * This gets called when a `Button` has focus and `keydown` is triggered via a key\n   * press.\n   *\n   * @param {KeyboardEvent} event\n   *        The event that caused this function to get called.\n   *\n   * @listens keydown\n   */\n  handleKeyDown(event) {\n    // Ignore Space or Enter key operation, which is handled by the browser for\n    // a button - though not for its super class, ClickableComponent. Also,\n    // prevent the event from propagating through the DOM and triggering Player\n    // hotkeys. We do not preventDefault here because we _want_ the browser to\n    // handle it.\n    if (keycode.isEventKey(event, 'Space') || keycode.isEventKey(event, 'Enter')) {\n      event.stopPropagation();\n      return;\n    }\n\n    // Pass keypress handling up for unsupported keys\n    super.handleKeyDown(event);\n  }\n}\nComponent$1.registerComponent('Button', Button);\n\n/**\n * @file big-play-button.js\n */\n\n/**\n * The initial play button that shows before the video has played. The hiding of the\n * `BigPlayButton` get done via CSS and `Player` states.\n *\n * @extends Button\n */\nclass BigPlayButton extends Button {\n  constructor(player, options) {\n    super(player, options);\n    this.mouseused_ = false;\n    this.setIcon('play');\n    this.on('mousedown', e => this.handleMouseDown(e));\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object. Always returns 'vjs-big-play-button'.\n   */\n  buildCSSClass() {\n    return 'vjs-big-play-button';\n  }\n\n  /**\n   * This gets called when a `BigPlayButton` \"clicked\". See {@link ClickableComponent}\n   * for more detailed information on what a click can be.\n   *\n   * @param {KeyboardEvent|MouseEvent|TouchEvent} event\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n  handleClick(event) {\n    const playPromise = this.player_.play();\n\n    // exit early if clicked via the mouse\n    if (this.mouseused_ && 'clientX' in event && 'clientY' in event) {\n      silencePromise(playPromise);\n      if (this.player_.tech(true)) {\n        this.player_.tech(true).focus();\n      }\n      return;\n    }\n    const cb = this.player_.getChild('controlBar');\n    const playToggle = cb && cb.getChild('playToggle');\n    if (!playToggle) {\n      this.player_.tech(true).focus();\n      return;\n    }\n    const playFocus = () => playToggle.focus();\n    if (isPromise(playPromise)) {\n      playPromise.then(playFocus, () => {});\n    } else {\n      this.setTimeout(playFocus, 1);\n    }\n  }\n\n  /**\n   * Event handler that is called when a `BigPlayButton` receives a\n   * `keydown` event.\n   *\n   * @param {KeyboardEvent} event\n   *        The `keydown` event that caused this function to be called.\n   *\n   * @listens keydown\n   */\n  handleKeyDown(event) {\n    this.mouseused_ = false;\n    super.handleKeyDown(event);\n  }\n\n  /**\n   * Handle `mousedown` events on the `BigPlayButton`.\n   *\n   * @param {MouseEvent} event\n   *        `mousedown` or `touchstart` event that triggered this function\n   *\n   * @listens mousedown\n   */\n  handleMouseDown(event) {\n    this.mouseused_ = true;\n  }\n}\n\n/**\n * The text that should display over the `BigPlayButton`s controls. Added to for localization.\n *\n * @type {string}\n * @protected\n */\nBigPlayButton.prototype.controlText_ = 'Play Video';\nComponent$1.registerComponent('BigPlayButton', BigPlayButton);\n\n/**\n * @file close-button.js\n */\n\n/**\n * The `CloseButton` is a `{@link Button}` that fires a `close` event when\n * it gets clicked.\n *\n * @extends Button\n */\nclass CloseButton extends Button {\n  /**\n  * Creates an instance of the this class.\n  *\n  * @param  { import('./player').default } player\n  *         The `Player` that this class should be attached to.\n  *\n  * @param  {Object} [options]\n  *         The key/value store of player options.\n  */\n  constructor(player, options) {\n    super(player, options);\n    this.setIcon('cancel');\n    this.controlText(options && options.controlText || this.localize('Close'));\n  }\n\n  /**\n  * Builds the default DOM `className`.\n  *\n  * @return {string}\n  *         The DOM `className` for this object.\n  */\n  buildCSSClass() {\n    return `vjs-close-button ${super.buildCSSClass()}`;\n  }\n\n  /**\n   * This gets called when a `CloseButton` gets clicked. See\n   * {@link ClickableComponent#handleClick} for more information on when\n   * this will be triggered\n   *\n   * @param {Event} event\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   * @fires CloseButton#close\n   */\n  handleClick(event) {\n    /**\n     * Triggered when the a `CloseButton` is clicked.\n     *\n     * @event CloseButton#close\n     * @type {Event}\n     *\n     * @property {boolean} [bubbles=false]\n     *           set to false so that the close event does not\n     *           bubble up to parents if there is no listener\n     */\n    this.trigger({\n      type: 'close',\n      bubbles: false\n    });\n  }\n  /**\n   * Event handler that is called when a `CloseButton` receives a\n   * `keydown` event.\n   *\n   * By default, if the key is Esc, it will trigger a `click` event.\n   *\n   * @param {KeyboardEvent} event\n   *        The `keydown` event that caused this function to be called.\n   *\n   * @listens keydown\n   */\n  handleKeyDown(event) {\n    // Esc button will trigger `click` event\n    if (keycode.isEventKey(event, 'Esc')) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.trigger('click');\n    } else {\n      // Pass keypress handling up for unsupported keys\n      super.handleKeyDown(event);\n    }\n  }\n}\nComponent$1.registerComponent('CloseButton', CloseButton);\n\n/**\n * @file play-toggle.js\n */\n\n/**\n * Button to toggle between play and pause.\n *\n * @extends Button\n */\nclass PlayToggle extends Button {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('./player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options={}]\n   *        The key/value store of player options.\n   */\n  constructor(player, options = {}) {\n    super(player, options);\n\n    // show or hide replay icon\n    options.replay = options.replay === undefined || options.replay;\n    this.setIcon('play');\n    this.on(player, 'play', e => this.handlePlay(e));\n    this.on(player, 'pause', e => this.handlePause(e));\n    if (options.replay) {\n      this.on(player, 'ended', e => this.handleEnded(e));\n    }\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n  buildCSSClass() {\n    return `vjs-play-control ${super.buildCSSClass()}`;\n  }\n\n  /**\n   * This gets called when an `PlayToggle` is \"clicked\". See\n   * {@link ClickableComponent} for more detailed information on what a click can be.\n   *\n   * @param {Event} [event]\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n  handleClick(event) {\n    if (this.player_.paused()) {\n      silencePromise(this.player_.play());\n    } else {\n      this.player_.pause();\n    }\n  }\n\n  /**\n   * This gets called once after the video has ended and the user seeks so that\n   * we can change the replay button back to a play button.\n   *\n   * @param {Event} [event]\n   *        The event that caused this function to run.\n   *\n   * @listens Player#seeked\n   */\n  handleSeeked(event) {\n    this.removeClass('vjs-ended');\n    if (this.player_.paused()) {\n      this.handlePause(event);\n    } else {\n      this.handlePlay(event);\n    }\n  }\n\n  /**\n   * Add the vjs-playing class to the element so it can change appearance.\n   *\n   * @param {Event} [event]\n   *        The event that caused this function to run.\n   *\n   * @listens Player#play\n   */\n  handlePlay(event) {\n    this.removeClass('vjs-ended', 'vjs-paused');\n    this.addClass('vjs-playing');\n    // change the button text to \"Pause\"\n    this.setIcon('pause');\n    this.controlText('Pause');\n  }\n\n  /**\n   * Add the vjs-paused class to the element so it can change appearance.\n   *\n   * @param {Event} [event]\n   *        The event that caused this function to run.\n   *\n   * @listens Player#pause\n   */\n  handlePause(event) {\n    this.removeClass('vjs-playing');\n    this.addClass('vjs-paused');\n    // change the button text to \"Play\"\n    this.setIcon('play');\n    this.controlText('Play');\n  }\n\n  /**\n   * Add the vjs-ended class to the element so it can change appearance\n   *\n   * @param {Event} [event]\n   *        The event that caused this function to run.\n   *\n   * @listens Player#ended\n   */\n  handleEnded(event) {\n    this.removeClass('vjs-playing');\n    this.addClass('vjs-ended');\n    // change the button text to \"Replay\"\n    this.setIcon('replay');\n    this.controlText('Replay');\n\n    // on the next seek remove the replay button\n    this.one(this.player_, 'seeked', e => this.handleSeeked(e));\n  }\n}\n\n/**\n * The text that should display over the `PlayToggle`s controls. Added for localization.\n *\n * @type {string}\n * @protected\n */\nPlayToggle.prototype.controlText_ = 'Play';\nComponent$1.registerComponent('PlayToggle', PlayToggle);\n\n/**\n * @file time-display.js\n */\n\n/**\n * Displays time information about the video\n *\n * @extends Component\n */\nclass TimeDisplay extends Component$1 {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('../../player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  constructor(player, options) {\n    super(player, options);\n    this.on(player, ['timeupdate', 'ended', 'seeking'], e => this.update(e));\n    this.updateTextNode_();\n  }\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  createEl() {\n    const className = this.buildCSSClass();\n    const el = super.createEl('div', {\n      className: `${className} vjs-time-control vjs-control`\n    });\n    const span = createEl('span', {\n      className: 'vjs-control-text',\n      textContent: `${this.localize(this.labelText_)}\\u00a0`\n    }, {\n      role: 'presentation'\n    });\n    el.appendChild(span);\n    this.contentEl_ = createEl('span', {\n      className: `${className}-display`\n    }, {\n      // span elements have no implicit role, but some screen readers (notably VoiceOver)\n      // treat them as a break between items in the DOM when using arrow keys\n      // (or left-to-right swipes on iOS) to read contents of a page. Using\n      // role='presentation' causes VoiceOver to NOT treat this span as a break.\n      role: 'presentation'\n    });\n    el.appendChild(this.contentEl_);\n    return el;\n  }\n  dispose() {\n    this.contentEl_ = null;\n    this.textNode_ = null;\n    super.dispose();\n  }\n\n  /**\n   * Updates the displayed time according to the `updateContent` function which is defined in the child class.\n   *\n   * @param {Event} [event]\n   *          The `timeupdate`, `ended` or `seeking` (if enableSmoothSeeking is true) event that caused this function to be called.\n   */\n  update(event) {\n    if (!this.player_.options_.enableSmoothSeeking && event.type === 'seeking') {\n      return;\n    }\n    this.updateContent(event);\n  }\n\n  /**\n   * Updates the time display text node with a new time\n   *\n   * @param {number} [time=0] the time to update to\n   *\n   * @private\n   */\n  updateTextNode_(time = 0) {\n    time = formatTime(time);\n    if (this.formattedTime_ === time) {\n      return;\n    }\n    this.formattedTime_ = time;\n    this.requestNamedAnimationFrame('TimeDisplay#updateTextNode_', () => {\n      if (!this.contentEl_) {\n        return;\n      }\n      let oldNode = this.textNode_;\n      if (oldNode && this.contentEl_.firstChild !== oldNode) {\n        oldNode = null;\n        log$1.warn('TimeDisplay#updateTextnode_: Prevented replacement of text node element since it was no longer a child of this node. Appending a new node instead.');\n      }\n      this.textNode_ = document.createTextNode(this.formattedTime_);\n      if (!this.textNode_) {\n        return;\n      }\n      if (oldNode) {\n        this.contentEl_.replaceChild(this.textNode_, oldNode);\n      } else {\n        this.contentEl_.appendChild(this.textNode_);\n      }\n    });\n  }\n\n  /**\n   * To be filled out in the child class, should update the displayed time\n   * in accordance with the fact that the current time has changed.\n   *\n   * @param {Event} [event]\n   *        The `timeupdate`  event that caused this to run.\n   *\n   * @listens Player#timeupdate\n   */\n  updateContent(event) {}\n}\n\n/**\n * The text that is added to the `TimeDisplay` for screen reader users.\n *\n * @type {string}\n * @private\n */\nTimeDisplay.prototype.labelText_ = 'Time';\n\n/**\n * The text that should display over the `TimeDisplay`s controls. Added to for localization.\n *\n * @type {string}\n * @protected\n *\n * @deprecated in v7; controlText_ is not used in non-active display Components\n */\nTimeDisplay.prototype.controlText_ = 'Time';\nComponent$1.registerComponent('TimeDisplay', TimeDisplay);\n\n/**\n * @file current-time-display.js\n */\n\n/**\n * Displays the current time\n *\n * @extends Component\n */\nclass CurrentTimeDisplay extends TimeDisplay {\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n  buildCSSClass() {\n    return 'vjs-current-time';\n  }\n\n  /**\n   * Update current time display\n   *\n   * @param {Event} [event]\n   *        The `timeupdate` event that caused this function to run.\n   *\n   * @listens Player#timeupdate\n   */\n  updateContent(event) {\n    // Allows for smooth scrubbing, when player can't keep up.\n    let time;\n    if (this.player_.ended()) {\n      time = this.player_.duration();\n    } else {\n      time = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();\n    }\n    this.updateTextNode_(time);\n  }\n}\n\n/**\n * The text that is added to the `CurrentTimeDisplay` for screen reader users.\n *\n * @type {string}\n * @private\n */\nCurrentTimeDisplay.prototype.labelText_ = 'Current Time';\n\n/**\n * The text that should display over the `CurrentTimeDisplay`s controls. Added to for localization.\n *\n * @type {string}\n * @protected\n *\n * @deprecated in v7; controlText_ is not used in non-active display Components\n */\nCurrentTimeDisplay.prototype.controlText_ = 'Current Time';\nComponent$1.registerComponent('CurrentTimeDisplay', CurrentTimeDisplay);\n\n/**\n * @file duration-display.js\n */\n\n/**\n * Displays the duration\n *\n * @extends Component\n */\nclass DurationDisplay extends TimeDisplay {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('../../player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  constructor(player, options) {\n    super(player, options);\n    const updateContent = e => this.updateContent(e);\n\n    // we do not want to/need to throttle duration changes,\n    // as they should always display the changed duration as\n    // it has changed\n    this.on(player, 'durationchange', updateContent);\n\n    // Listen to loadstart because the player duration is reset when a new media element is loaded,\n    // but the durationchange on the user agent will not fire.\n    // @see [Spec]{@link https://www.w3.org/TR/2011/WD-html5-20110113/video.html#media-element-load-algorithm}\n    this.on(player, 'loadstart', updateContent);\n\n    // Also listen for timeupdate (in the parent) and loadedmetadata because removing those\n    // listeners could have broken dependent applications/libraries. These\n    // can likely be removed for 7.0.\n    this.on(player, 'loadedmetadata', updateContent);\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n  buildCSSClass() {\n    return 'vjs-duration';\n  }\n\n  /**\n   * Update duration time display.\n   *\n   * @param {Event} [event]\n   *        The `durationchange`, `timeupdate`, or `loadedmetadata` event that caused\n   *        this function to be called.\n   *\n   * @listens Player#durationchange\n   * @listens Player#timeupdate\n   * @listens Player#loadedmetadata\n   */\n  updateContent(event) {\n    const duration = this.player_.duration();\n    this.updateTextNode_(duration);\n  }\n}\n\n/**\n * The text that is added to the `DurationDisplay` for screen reader users.\n *\n * @type {string}\n * @private\n */\nDurationDisplay.prototype.labelText_ = 'Duration';\n\n/**\n * The text that should display over the `DurationDisplay`s controls. Added to for localization.\n *\n * @type {string}\n * @protected\n *\n * @deprecated in v7; controlText_ is not used in non-active display Components\n */\nDurationDisplay.prototype.controlText_ = 'Duration';\nComponent$1.registerComponent('DurationDisplay', DurationDisplay);\n\n/**\n * @file time-divider.js\n */\n\n/**\n * The separator between the current time and duration.\n * Can be hidden if it's not needed in the design.\n *\n * @extends Component\n */\nclass TimeDivider extends Component$1 {\n  /**\n   * Create the component's DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  createEl() {\n    const el = super.createEl('div', {\n      className: 'vjs-time-control vjs-time-divider'\n    }, {\n      // this element and its contents can be hidden from assistive techs since\n      // it is made extraneous by the announcement of the control text\n      // for the current time and duration displays\n      'aria-hidden': true\n    });\n    const div = super.createEl('div');\n    const span = super.createEl('span', {\n      textContent: '/'\n    });\n    div.appendChild(span);\n    el.appendChild(div);\n    return el;\n  }\n}\nComponent$1.registerComponent('TimeDivider', TimeDivider);\n\n/**\n * @file remaining-time-display.js\n */\n\n/**\n * Displays the time left in the video\n *\n * @extends Component\n */\nclass RemainingTimeDisplay extends TimeDisplay {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('../../player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  constructor(player, options) {\n    super(player, options);\n    this.on(player, 'durationchange', e => this.updateContent(e));\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n  buildCSSClass() {\n    return 'vjs-remaining-time';\n  }\n\n  /**\n   * Create the `Component`'s DOM element with the \"minus\" character prepend to the time\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  createEl() {\n    const el = super.createEl();\n    if (this.options_.displayNegative !== false) {\n      el.insertBefore(createEl('span', {}, {\n        'aria-hidden': true\n      }, '-'), this.contentEl_);\n    }\n    return el;\n  }\n\n  /**\n   * Update remaining time display.\n   *\n   * @param {Event} [event]\n   *        The `timeupdate` or `durationchange` event that caused this to run.\n   *\n   * @listens Player#timeupdate\n   * @listens Player#durationchange\n   */\n  updateContent(event) {\n    if (typeof this.player_.duration() !== 'number') {\n      return;\n    }\n    let time;\n\n    // @deprecated We should only use remainingTimeDisplay\n    // as of video.js 7\n    if (this.player_.ended()) {\n      time = 0;\n    } else if (this.player_.remainingTimeDisplay) {\n      time = this.player_.remainingTimeDisplay();\n    } else {\n      time = this.player_.remainingTime();\n    }\n    this.updateTextNode_(time);\n  }\n}\n\n/**\n * The text that is added to the `RemainingTimeDisplay` for screen reader users.\n *\n * @type {string}\n * @private\n */\nRemainingTimeDisplay.prototype.labelText_ = 'Remaining Time';\n\n/**\n * The text that should display over the `RemainingTimeDisplay`s controls. Added to for localization.\n *\n * @type {string}\n * @protected\n *\n * @deprecated in v7; controlText_ is not used in non-active display Components\n */\nRemainingTimeDisplay.prototype.controlText_ = 'Remaining Time';\nComponent$1.registerComponent('RemainingTimeDisplay', RemainingTimeDisplay);\n\n/**\n * @file live-display.js\n */\n\n// TODO - Future make it click to snap to live\n\n/**\n * Displays the live indicator when duration is Infinity.\n *\n * @extends Component\n */\nclass LiveDisplay extends Component$1 {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('./player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  constructor(player, options) {\n    super(player, options);\n    this.updateShowing();\n    this.on(this.player(), 'durationchange', e => this.updateShowing(e));\n  }\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  createEl() {\n    const el = super.createEl('div', {\n      className: 'vjs-live-control vjs-control'\n    });\n    this.contentEl_ = createEl('div', {\n      className: 'vjs-live-display'\n    }, {\n      'aria-live': 'off'\n    });\n    this.contentEl_.appendChild(createEl('span', {\n      className: 'vjs-control-text',\n      textContent: `${this.localize('Stream Type')}\\u00a0`\n    }));\n    this.contentEl_.appendChild(document.createTextNode(this.localize('LIVE')));\n    el.appendChild(this.contentEl_);\n    return el;\n  }\n  dispose() {\n    this.contentEl_ = null;\n    super.dispose();\n  }\n\n  /**\n   * Check the duration to see if the LiveDisplay should be showing or not. Then show/hide\n   * it accordingly\n   *\n   * @param {Event} [event]\n   *        The {@link Player#durationchange} event that caused this function to run.\n   *\n   * @listens Player#durationchange\n   */\n  updateShowing(event) {\n    if (this.player().duration() === Infinity) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  }\n}\nComponent$1.registerComponent('LiveDisplay', LiveDisplay);\n\n/**\n * @file seek-to-live.js\n */\n\n/**\n * Displays the live indicator when duration is Infinity.\n *\n * @extends Component\n */\nclass SeekToLive extends Button {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('./player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  constructor(player, options) {\n    super(player, options);\n    this.updateLiveEdgeStatus();\n    if (this.player_.liveTracker) {\n      this.updateLiveEdgeStatusHandler_ = e => this.updateLiveEdgeStatus(e);\n      this.on(this.player_.liveTracker, 'liveedgechange', this.updateLiveEdgeStatusHandler_);\n    }\n  }\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  createEl() {\n    const el = super.createEl('button', {\n      className: 'vjs-seek-to-live-control vjs-control'\n    });\n    this.setIcon('circle', el);\n    this.textEl_ = createEl('span', {\n      className: 'vjs-seek-to-live-text',\n      textContent: this.localize('LIVE')\n    }, {\n      'aria-hidden': 'true'\n    });\n    el.appendChild(this.textEl_);\n    return el;\n  }\n\n  /**\n   * Update the state of this button if we are at the live edge\n   * or not\n   */\n  updateLiveEdgeStatus() {\n    // default to live edge\n    if (!this.player_.liveTracker || this.player_.liveTracker.atLiveEdge()) {\n      this.setAttribute('aria-disabled', true);\n      this.addClass('vjs-at-live-edge');\n      this.controlText('Seek to live, currently playing live');\n    } else {\n      this.setAttribute('aria-disabled', false);\n      this.removeClass('vjs-at-live-edge');\n      this.controlText('Seek to live, currently behind live');\n    }\n  }\n\n  /**\n   * On click bring us as near to the live point as possible.\n   * This requires that we wait for the next `live-seekable-change`\n   * event which will happen every segment length seconds.\n   */\n  handleClick() {\n    this.player_.liveTracker.seekToLiveEdge();\n  }\n\n  /**\n   * Dispose of the element and stop tracking\n   */\n  dispose() {\n    if (this.player_.liveTracker) {\n      this.off(this.player_.liveTracker, 'liveedgechange', this.updateLiveEdgeStatusHandler_);\n    }\n    this.textEl_ = null;\n    super.dispose();\n  }\n}\n/**\n * The text that should display over the `SeekToLive`s control. Added for localization.\n *\n * @type {string}\n * @protected\n */\nSeekToLive.prototype.controlText_ = 'Seek to live, currently playing live';\nComponent$1.registerComponent('SeekToLive', SeekToLive);\n\n/**\n * @file num.js\n * @module num\n */\n\n/**\n * Keep a number between a min and a max value\n *\n * @param {number} number\n *        The number to clamp\n *\n * @param {number} min\n *        The minimum value\n * @param {number} max\n *        The maximum value\n *\n * @return {number}\n *         the clamped number\n */\nfunction clamp(number, min, max) {\n  number = Number(number);\n  return Math.min(max, Math.max(min, isNaN(number) ? min : number));\n}\n\nvar Num = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  clamp: clamp\n});\n\n/**\n * @file slider.js\n */\n\n/**\n * The base functionality for a slider. Can be vertical or horizontal.\n * For instance the volume bar or the seek bar on a video is a slider.\n *\n * @extends Component\n */\nclass Slider extends Component$1 {\n  /**\n  * Create an instance of this class\n  *\n  * @param { import('../player').default } player\n  *        The `Player` that this class should be attached to.\n  *\n  * @param {Object} [options]\n  *        The key/value store of player options.\n  */\n  constructor(player, options) {\n    super(player, options);\n    this.handleMouseDown_ = e => this.handleMouseDown(e);\n    this.handleMouseUp_ = e => this.handleMouseUp(e);\n    this.handleKeyDown_ = e => this.handleKeyDown(e);\n    this.handleClick_ = e => this.handleClick(e);\n    this.handleMouseMove_ = e => this.handleMouseMove(e);\n    this.update_ = e => this.update(e);\n\n    // Set property names to bar to match with the child Slider class is looking for\n    this.bar = this.getChild(this.options_.barName);\n\n    // Set a horizontal or vertical class on the slider depending on the slider type\n    this.vertical(!!this.options_.vertical);\n    this.enable();\n  }\n\n  /**\n   * Are controls are currently enabled for this slider or not.\n   *\n   * @return {boolean}\n   *         true if controls are enabled, false otherwise\n   */\n  enabled() {\n    return this.enabled_;\n  }\n\n  /**\n   * Enable controls for this slider if they are disabled\n   */\n  enable() {\n    if (this.enabled()) {\n      return;\n    }\n    this.on('mousedown', this.handleMouseDown_);\n    this.on('touchstart', this.handleMouseDown_);\n    this.on('keydown', this.handleKeyDown_);\n    this.on('click', this.handleClick_);\n\n    // TODO: deprecated, controlsvisible does not seem to be fired\n    this.on(this.player_, 'controlsvisible', this.update);\n    if (this.playerEvent) {\n      this.on(this.player_, this.playerEvent, this.update);\n    }\n    this.removeClass('disabled');\n    this.setAttribute('tabindex', 0);\n    this.enabled_ = true;\n  }\n\n  /**\n   * Disable controls for this slider if they are enabled\n   */\n  disable() {\n    if (!this.enabled()) {\n      return;\n    }\n    const doc = this.bar.el_.ownerDocument;\n    this.off('mousedown', this.handleMouseDown_);\n    this.off('touchstart', this.handleMouseDown_);\n    this.off('keydown', this.handleKeyDown_);\n    this.off('click', this.handleClick_);\n    this.off(this.player_, 'controlsvisible', this.update_);\n    this.off(doc, 'mousemove', this.handleMouseMove_);\n    this.off(doc, 'mouseup', this.handleMouseUp_);\n    this.off(doc, 'touchmove', this.handleMouseMove_);\n    this.off(doc, 'touchend', this.handleMouseUp_);\n    this.removeAttribute('tabindex');\n    this.addClass('disabled');\n    if (this.playerEvent) {\n      this.off(this.player_, this.playerEvent, this.update);\n    }\n    this.enabled_ = false;\n  }\n\n  /**\n   * Create the `Slider`s DOM element.\n   *\n   * @param {string} type\n   *        Type of element to create.\n   *\n   * @param {Object} [props={}]\n   *        List of properties in Object form.\n   *\n   * @param {Object} [attributes={}]\n   *        list of attributes in Object form.\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n  createEl(type, props = {}, attributes = {}) {\n    // Add the slider element class to all sub classes\n    props.className = props.className + ' vjs-slider';\n    props = Object.assign({\n      tabIndex: 0\n    }, props);\n    attributes = Object.assign({\n      'role': 'slider',\n      'aria-valuenow': 0,\n      'aria-valuemin': 0,\n      'aria-valuemax': 100\n    }, attributes);\n    return super.createEl(type, props, attributes);\n  }\n\n  /**\n   * Handle `mousedown` or `touchstart` events on the `Slider`.\n   *\n   * @param {MouseEvent} event\n   *        `mousedown` or `touchstart` event that triggered this function\n   *\n   * @listens mousedown\n   * @listens touchstart\n   * @fires Slider#slideractive\n   */\n  handleMouseDown(event) {\n    const doc = this.bar.el_.ownerDocument;\n    if (event.type === 'mousedown') {\n      event.preventDefault();\n    }\n    // Do not call preventDefault() on touchstart in Chrome\n    // to avoid console warnings. Use a 'touch-action: none' style\n    // instead to prevent unintended scrolling.\n    // https://developers.google.com/web/updates/2017/01/scrolling-intervention\n    if (event.type === 'touchstart' && !IS_CHROME) {\n      event.preventDefault();\n    }\n    blockTextSelection();\n    this.addClass('vjs-sliding');\n    /**\n     * Triggered when the slider is in an active state\n     *\n     * @event Slider#slideractive\n     * @type {MouseEvent}\n     */\n    this.trigger('slideractive');\n    this.on(doc, 'mousemove', this.handleMouseMove_);\n    this.on(doc, 'mouseup', this.handleMouseUp_);\n    this.on(doc, 'touchmove', this.handleMouseMove_);\n    this.on(doc, 'touchend', this.handleMouseUp_);\n    this.handleMouseMove(event, true);\n  }\n\n  /**\n   * Handle the `mousemove`, `touchmove`, and `mousedown` events on this `Slider`.\n   * The `mousemove` and `touchmove` events will only only trigger this function during\n   * `mousedown` and `touchstart`. This is due to {@link Slider#handleMouseDown} and\n   * {@link Slider#handleMouseUp}.\n   *\n   * @param {MouseEvent} event\n   *        `mousedown`, `mousemove`, `touchstart`, or `touchmove` event that triggered\n   *        this function\n   * @param {boolean} mouseDown this is a flag that should be set to true if `handleMouseMove` is called directly. It allows us to skip things that should not happen if coming from mouse down but should happen on regular mouse move handler. Defaults to false.\n   *\n   * @listens mousemove\n   * @listens touchmove\n   */\n  handleMouseMove(event) {}\n\n  /**\n   * Handle `mouseup` or `touchend` events on the `Slider`.\n   *\n   * @param {MouseEvent} event\n   *        `mouseup` or `touchend` event that triggered this function.\n   *\n   * @listens touchend\n   * @listens mouseup\n   * @fires Slider#sliderinactive\n   */\n  handleMouseUp(event) {\n    const doc = this.bar.el_.ownerDocument;\n    unblockTextSelection();\n    this.removeClass('vjs-sliding');\n    /**\n     * Triggered when the slider is no longer in an active state.\n     *\n     * @event Slider#sliderinactive\n     * @type {Event}\n     */\n    this.trigger('sliderinactive');\n    this.off(doc, 'mousemove', this.handleMouseMove_);\n    this.off(doc, 'mouseup', this.handleMouseUp_);\n    this.off(doc, 'touchmove', this.handleMouseMove_);\n    this.off(doc, 'touchend', this.handleMouseUp_);\n    this.update();\n  }\n\n  /**\n   * Update the progress bar of the `Slider`.\n   *\n   * @return {number}\n   *          The percentage of progress the progress bar represents as a\n   *          number from 0 to 1.\n   */\n  update() {\n    // In VolumeBar init we have a setTimeout for update that pops and update\n    // to the end of the execution stack. The player is destroyed before then\n    // update will cause an error\n    // If there's no bar...\n    if (!this.el_ || !this.bar) {\n      return;\n    }\n\n    // clamp progress between 0 and 1\n    // and only round to four decimal places, as we round to two below\n    const progress = this.getProgress();\n    if (progress === this.progress_) {\n      return progress;\n    }\n    this.progress_ = progress;\n    this.requestNamedAnimationFrame('Slider#update', () => {\n      // Set the new bar width or height\n      const sizeKey = this.vertical() ? 'height' : 'width';\n\n      // Convert to a percentage for css value\n      this.bar.el().style[sizeKey] = (progress * 100).toFixed(2) + '%';\n    });\n    return progress;\n  }\n\n  /**\n   * Get the percentage of the bar that should be filled\n   * but clamped and rounded.\n   *\n   * @return {number}\n   *         percentage filled that the slider is\n   */\n  getProgress() {\n    return Number(clamp(this.getPercent(), 0, 1).toFixed(4));\n  }\n\n  /**\n   * Calculate distance for slider\n   *\n   * @param {Event} event\n   *        The event that caused this function to run.\n   *\n   * @return {number}\n   *         The current position of the Slider.\n   *         - position.x for vertical `Slider`s\n   *         - position.y for horizontal `Slider`s\n   */\n  calculateDistance(event) {\n    const position = getPointerPosition(this.el_, event);\n    if (this.vertical()) {\n      return position.y;\n    }\n    return position.x;\n  }\n\n  /**\n   * Handle a `keydown` event on the `Slider`. Watches for left, right, up, and down\n   * arrow keys. This function will only be called when the slider has focus. See\n   * {@link Slider#handleFocus} and {@link Slider#handleBlur}.\n   *\n   * @param {KeyboardEvent} event\n   *        the `keydown` event that caused this function to run.\n   *\n   * @listens keydown\n   */\n  handleKeyDown(event) {\n    // Left and Down Arrows\n    if (keycode.isEventKey(event, 'Left') || keycode.isEventKey(event, 'Down')) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.stepBack();\n\n      // Up and Right Arrows\n    } else if (keycode.isEventKey(event, 'Right') || keycode.isEventKey(event, 'Up')) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.stepForward();\n    } else {\n      // Pass keydown handling up for unsupported keys\n      super.handleKeyDown(event);\n    }\n  }\n\n  /**\n   * Listener for click events on slider, used to prevent clicks\n   *   from bubbling up to parent elements like button menus.\n   *\n   * @param {Object} event\n   *        Event that caused this object to run\n   */\n  handleClick(event) {\n    event.stopPropagation();\n    event.preventDefault();\n  }\n\n  /**\n   * Get/set if slider is horizontal for vertical\n   *\n   * @param {boolean} [bool]\n   *        - true if slider is vertical,\n   *        - false is horizontal\n   *\n   * @return {boolean}\n   *         - true if slider is vertical, and getting\n   *         - false if the slider is horizontal, and getting\n   */\n  vertical(bool) {\n    if (bool === undefined) {\n      return this.vertical_ || false;\n    }\n    this.vertical_ = !!bool;\n    if (this.vertical_) {\n      this.addClass('vjs-slider-vertical');\n    } else {\n      this.addClass('vjs-slider-horizontal');\n    }\n  }\n}\nComponent$1.registerComponent('Slider', Slider);\n\n/**\n * @file load-progress-bar.js\n */\n\n// get the percent width of a time compared to the total end\nconst percentify = (time, end) => clamp(time / end * 100, 0, 100).toFixed(2) + '%';\n\n/**\n * Shows loading progress\n *\n * @extends Component\n */\nclass LoadProgressBar extends Component$1 {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('../../player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  constructor(player, options) {\n    super(player, options);\n    this.partEls_ = [];\n    this.on(player, 'progress', e => this.update(e));\n  }\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  createEl() {\n    const el = super.createEl('div', {\n      className: 'vjs-load-progress'\n    });\n    const wrapper = createEl('span', {\n      className: 'vjs-control-text'\n    });\n    const loadedText = createEl('span', {\n      textContent: this.localize('Loaded')\n    });\n    const separator = document.createTextNode(': ');\n    this.percentageEl_ = createEl('span', {\n      className: 'vjs-control-text-loaded-percentage',\n      textContent: '0%'\n    });\n    el.appendChild(wrapper);\n    wrapper.appendChild(loadedText);\n    wrapper.appendChild(separator);\n    wrapper.appendChild(this.percentageEl_);\n    return el;\n  }\n  dispose() {\n    this.partEls_ = null;\n    this.percentageEl_ = null;\n    super.dispose();\n  }\n\n  /**\n   * Update progress bar\n   *\n   * @param {Event} [event]\n   *        The `progress` event that caused this function to run.\n   *\n   * @listens Player#progress\n   */\n  update(event) {\n    this.requestNamedAnimationFrame('LoadProgressBar#update', () => {\n      const liveTracker = this.player_.liveTracker;\n      const buffered = this.player_.buffered();\n      const duration = liveTracker && liveTracker.isLive() ? liveTracker.seekableEnd() : this.player_.duration();\n      const bufferedEnd = this.player_.bufferedEnd();\n      const children = this.partEls_;\n      const percent = percentify(bufferedEnd, duration);\n      if (this.percent_ !== percent) {\n        // update the width of the progress bar\n        this.el_.style.width = percent;\n        // update the control-text\n        textContent(this.percentageEl_, percent);\n        this.percent_ = percent;\n      }\n\n      // add child elements to represent the individual buffered time ranges\n      for (let i = 0; i < buffered.length; i++) {\n        const start = buffered.start(i);\n        const end = buffered.end(i);\n        let part = children[i];\n        if (!part) {\n          part = this.el_.appendChild(createEl());\n          children[i] = part;\n        }\n\n        //  only update if changed\n        if (part.dataset.start === start && part.dataset.end === end) {\n          continue;\n        }\n        part.dataset.start = start;\n        part.dataset.end = end;\n\n        // set the percent based on the width of the progress bar (bufferedEnd)\n        part.style.left = percentify(start, bufferedEnd);\n        part.style.width = percentify(end - start, bufferedEnd);\n      }\n\n      // remove unused buffered range elements\n      for (let i = children.length; i > buffered.length; i--) {\n        this.el_.removeChild(children[i - 1]);\n      }\n      children.length = buffered.length;\n    });\n  }\n}\nComponent$1.registerComponent('LoadProgressBar', LoadProgressBar);\n\n/**\n * @file time-tooltip.js\n */\n\n/**\n * Time tooltips display a time above the progress bar.\n *\n * @extends Component\n */\nclass TimeTooltip extends Component$1 {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('../../player').default } player\n   *        The {@link Player} that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  constructor(player, options) {\n    super(player, options);\n    this.update = throttle(bind_(this, this.update), UPDATE_REFRESH_INTERVAL);\n  }\n\n  /**\n   * Create the time tooltip DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  createEl() {\n    return super.createEl('div', {\n      className: 'vjs-time-tooltip'\n    }, {\n      'aria-hidden': 'true'\n    });\n  }\n\n  /**\n   * Updates the position of the time tooltip relative to the `SeekBar`.\n   *\n   * @param {Object} seekBarRect\n   *        The `ClientRect` for the {@link SeekBar} element.\n   *\n   * @param {number} seekBarPoint\n   *        A number from 0 to 1, representing a horizontal reference point\n   *        from the left edge of the {@link SeekBar}\n   */\n  update(seekBarRect, seekBarPoint, content) {\n    const tooltipRect = findPosition(this.el_);\n    const playerRect = getBoundingClientRect(this.player_.el());\n    const seekBarPointPx = seekBarRect.width * seekBarPoint;\n\n    // do nothing if either rect isn't available\n    // for example, if the player isn't in the DOM for testing\n    if (!playerRect || !tooltipRect) {\n      return;\n    }\n\n    // This is the space left of the `seekBarPoint` available within the bounds\n    // of the player. We calculate any gap between the left edge of the player\n    // and the left edge of the `SeekBar` and add the number of pixels in the\n    // `SeekBar` before hitting the `seekBarPoint`\n    const spaceLeftOfPoint = seekBarRect.left - playerRect.left + seekBarPointPx;\n\n    // This is the space right of the `seekBarPoint` available within the bounds\n    // of the player. We calculate the number of pixels from the `seekBarPoint`\n    // to the right edge of the `SeekBar` and add to that any gap between the\n    // right edge of the `SeekBar` and the player.\n    const spaceRightOfPoint = seekBarRect.width - seekBarPointPx + (playerRect.right - seekBarRect.right);\n\n    // This is the number of pixels by which the tooltip will need to be pulled\n    // further to the right to center it over the `seekBarPoint`.\n    let pullTooltipBy = tooltipRect.width / 2;\n\n    // Adjust the `pullTooltipBy` distance to the left or right depending on\n    // the results of the space calculations above.\n    if (spaceLeftOfPoint < pullTooltipBy) {\n      pullTooltipBy += pullTooltipBy - spaceLeftOfPoint;\n    } else if (spaceRightOfPoint < pullTooltipBy) {\n      pullTooltipBy = spaceRightOfPoint;\n    }\n\n    // Due to the imprecision of decimal/ratio based calculations and varying\n    // rounding behaviors, there are cases where the spacing adjustment is off\n    // by a pixel or two. This adds insurance to these calculations.\n    if (pullTooltipBy < 0) {\n      pullTooltipBy = 0;\n    } else if (pullTooltipBy > tooltipRect.width) {\n      pullTooltipBy = tooltipRect.width;\n    }\n\n    // prevent small width fluctuations within 0.4px from\n    // changing the value below.\n    // This really helps for live to prevent the play\n    // progress time tooltip from jittering\n    pullTooltipBy = Math.round(pullTooltipBy);\n    this.el_.style.right = `-${pullTooltipBy}px`;\n    this.write(content);\n  }\n\n  /**\n   * Write the time to the tooltip DOM element.\n   *\n   * @param {string} content\n   *        The formatted time for the tooltip.\n   */\n  write(content) {\n    textContent(this.el_, content);\n  }\n\n  /**\n   * Updates the position of the time tooltip relative to the `SeekBar`.\n   *\n   * @param {Object} seekBarRect\n   *        The `ClientRect` for the {@link SeekBar} element.\n   *\n   * @param {number} seekBarPoint\n   *        A number from 0 to 1, representing a horizontal reference point\n   *        from the left edge of the {@link SeekBar}\n   *\n   * @param {number} time\n   *        The time to update the tooltip to, not used during live playback\n   *\n   * @param {Function} cb\n   *        A function that will be called during the request animation frame\n   *        for tooltips that need to do additional animations from the default\n   */\n  updateTime(seekBarRect, seekBarPoint, time, cb) {\n    this.requestNamedAnimationFrame('TimeTooltip#updateTime', () => {\n      let content;\n      const duration = this.player_.duration();\n      if (this.player_.liveTracker && this.player_.liveTracker.isLive()) {\n        const liveWindow = this.player_.liveTracker.liveWindow();\n        const secondsBehind = liveWindow - seekBarPoint * liveWindow;\n        content = (secondsBehind < 1 ? '' : '-') + formatTime(secondsBehind, liveWindow);\n      } else {\n        content = formatTime(time, duration);\n      }\n      this.update(seekBarRect, seekBarPoint, content);\n      if (cb) {\n        cb();\n      }\n    });\n  }\n}\nComponent$1.registerComponent('TimeTooltip', TimeTooltip);\n\n/**\n * @file play-progress-bar.js\n */\n\n/**\n * Used by {@link SeekBar} to display media playback progress as part of the\n * {@link ProgressControl}.\n *\n * @extends Component\n */\nclass PlayProgressBar extends Component$1 {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('../../player').default } player\n   *        The {@link Player} that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  constructor(player, options) {\n    super(player, options);\n    this.setIcon('circle');\n    this.update = throttle(bind_(this, this.update), UPDATE_REFRESH_INTERVAL);\n  }\n\n  /**\n   * Create the the DOM element for this class.\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  createEl() {\n    return super.createEl('div', {\n      className: 'vjs-play-progress vjs-slider-bar'\n    }, {\n      'aria-hidden': 'true'\n    });\n  }\n\n  /**\n   * Enqueues updates to its own DOM as well as the DOM of its\n   * {@link TimeTooltip} child.\n   *\n   * @param {Object} seekBarRect\n   *        The `ClientRect` for the {@link SeekBar} element.\n   *\n   * @param {number} seekBarPoint\n   *        A number from 0 to 1, representing a horizontal reference point\n   *        from the left edge of the {@link SeekBar}\n   */\n  update(seekBarRect, seekBarPoint) {\n    const timeTooltip = this.getChild('timeTooltip');\n    if (!timeTooltip) {\n      return;\n    }\n    const time = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();\n    timeTooltip.updateTime(seekBarRect, seekBarPoint, time);\n  }\n}\n\n/**\n * Default options for {@link PlayProgressBar}.\n *\n * @type {Object}\n * @private\n */\nPlayProgressBar.prototype.options_ = {\n  children: []\n};\n\n// Time tooltips should not be added to a player on mobile devices\nif (!IS_IOS && !IS_ANDROID) {\n  PlayProgressBar.prototype.options_.children.push('timeTooltip');\n}\nComponent$1.registerComponent('PlayProgressBar', PlayProgressBar);\n\n/**\n * @file mouse-time-display.js\n */\n\n/**\n * The {@link MouseTimeDisplay} component tracks mouse movement over the\n * {@link ProgressControl}. It displays an indicator and a {@link TimeTooltip}\n * indicating the time which is represented by a given point in the\n * {@link ProgressControl}.\n *\n * @extends Component\n */\nclass MouseTimeDisplay extends Component$1 {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('../../player').default } player\n   *        The {@link Player} that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  constructor(player, options) {\n    super(player, options);\n    this.update = throttle(bind_(this, this.update), UPDATE_REFRESH_INTERVAL);\n  }\n\n  /**\n   * Create the DOM element for this class.\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  createEl() {\n    return super.createEl('div', {\n      className: 'vjs-mouse-display'\n    });\n  }\n\n  /**\n   * Enqueues updates to its own DOM as well as the DOM of its\n   * {@link TimeTooltip} child.\n   *\n   * @param {Object} seekBarRect\n   *        The `ClientRect` for the {@link SeekBar} element.\n   *\n   * @param {number} seekBarPoint\n   *        A number from 0 to 1, representing a horizontal reference point\n   *        from the left edge of the {@link SeekBar}\n   */\n  update(seekBarRect, seekBarPoint) {\n    const time = seekBarPoint * this.player_.duration();\n    this.getChild('timeTooltip').updateTime(seekBarRect, seekBarPoint, time, () => {\n      this.el_.style.left = `${seekBarRect.width * seekBarPoint}px`;\n    });\n  }\n}\n\n/**\n * Default options for `MouseTimeDisplay`\n *\n * @type {Object}\n * @private\n */\nMouseTimeDisplay.prototype.options_ = {\n  children: ['timeTooltip']\n};\nComponent$1.registerComponent('MouseTimeDisplay', MouseTimeDisplay);\n\n/**\n * @file seek-bar.js\n */\n\n// The number of seconds the `step*` functions move the timeline.\nconst STEP_SECONDS = 5;\n\n// The multiplier of STEP_SECONDS that PgUp/PgDown move the timeline.\nconst PAGE_KEY_MULTIPLIER = 12;\n\n/**\n * Seek bar and container for the progress bars. Uses {@link PlayProgressBar}\n * as its `bar`.\n *\n * @extends Slider\n */\nclass SeekBar extends Slider {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('../../player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  constructor(player, options) {\n    super(player, options);\n    this.setEventHandlers_();\n  }\n\n  /**\n   * Sets the event handlers\n   *\n   * @private\n   */\n  setEventHandlers_() {\n    this.update_ = bind_(this, this.update);\n    this.update = throttle(this.update_, UPDATE_REFRESH_INTERVAL);\n    this.on(this.player_, ['ended', 'durationchange', 'timeupdate'], this.update);\n    if (this.player_.liveTracker) {\n      this.on(this.player_.liveTracker, 'liveedgechange', this.update);\n    }\n\n    // when playing, let's ensure we smoothly update the play progress bar\n    // via an interval\n    this.updateInterval = null;\n    this.enableIntervalHandler_ = e => this.enableInterval_(e);\n    this.disableIntervalHandler_ = e => this.disableInterval_(e);\n    this.on(this.player_, ['playing'], this.enableIntervalHandler_);\n    this.on(this.player_, ['ended', 'pause', 'waiting'], this.disableIntervalHandler_);\n\n    // we don't need to update the play progress if the document is hidden,\n    // also, this causes the CPU to spike and eventually crash the page on IE11.\n    if ('hidden' in document && 'visibilityState' in document) {\n      this.on(document, 'visibilitychange', this.toggleVisibility_);\n    }\n  }\n  toggleVisibility_(e) {\n    if (document.visibilityState === 'hidden') {\n      this.cancelNamedAnimationFrame('SeekBar#update');\n      this.cancelNamedAnimationFrame('Slider#update');\n      this.disableInterval_(e);\n    } else {\n      if (!this.player_.ended() && !this.player_.paused()) {\n        this.enableInterval_();\n      }\n\n      // we just switched back to the page and someone may be looking, so, update ASAP\n      this.update();\n    }\n  }\n  enableInterval_() {\n    if (this.updateInterval) {\n      return;\n    }\n    this.updateInterval = this.setInterval(this.update, UPDATE_REFRESH_INTERVAL);\n  }\n  disableInterval_(e) {\n    if (this.player_.liveTracker && this.player_.liveTracker.isLive() && e && e.type !== 'ended') {\n      return;\n    }\n    if (!this.updateInterval) {\n      return;\n    }\n    this.clearInterval(this.updateInterval);\n    this.updateInterval = null;\n  }\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  createEl() {\n    return super.createEl('div', {\n      className: 'vjs-progress-holder'\n    }, {\n      'aria-label': this.localize('Progress Bar')\n    });\n  }\n\n  /**\n   * This function updates the play progress bar and accessibility\n   * attributes to whatever is passed in.\n   *\n   * @param {Event} [event]\n   *        The `timeupdate` or `ended` event that caused this to run.\n   *\n   * @listens Player#timeupdate\n   *\n   * @return {number}\n   *          The current percent at a number from 0-1\n   */\n  update(event) {\n    // ignore updates while the tab is hidden\n    if (document.visibilityState === 'hidden') {\n      return;\n    }\n    const percent = super.update();\n    this.requestNamedAnimationFrame('SeekBar#update', () => {\n      const currentTime = this.player_.ended() ? this.player_.duration() : this.getCurrentTime_();\n      const liveTracker = this.player_.liveTracker;\n      let duration = this.player_.duration();\n      if (liveTracker && liveTracker.isLive()) {\n        duration = this.player_.liveTracker.liveCurrentTime();\n      }\n      if (this.percent_ !== percent) {\n        // machine readable value of progress bar (percentage complete)\n        this.el_.setAttribute('aria-valuenow', (percent * 100).toFixed(2));\n        this.percent_ = percent;\n      }\n      if (this.currentTime_ !== currentTime || this.duration_ !== duration) {\n        // human readable value of progress bar (time complete)\n        this.el_.setAttribute('aria-valuetext', this.localize('progress bar timing: currentTime={1} duration={2}', [formatTime(currentTime, duration), formatTime(duration, duration)], '{1} of {2}'));\n        this.currentTime_ = currentTime;\n        this.duration_ = duration;\n      }\n\n      // update the progress bar time tooltip with the current time\n      if (this.bar) {\n        this.bar.update(getBoundingClientRect(this.el()), this.getProgress());\n      }\n    });\n    return percent;\n  }\n\n  /**\n   * Prevent liveThreshold from causing seeks to seem like they\n   * are not happening from a user perspective.\n   *\n   * @param {number} ct\n   *        current time to seek to\n   */\n  userSeek_(ct) {\n    if (this.player_.liveTracker && this.player_.liveTracker.isLive()) {\n      this.player_.liveTracker.nextSeekedFromUser();\n    }\n    this.player_.currentTime(ct);\n  }\n\n  /**\n   * Get the value of current time but allows for smooth scrubbing,\n   * when player can't keep up.\n   *\n   * @return {number}\n   *         The current time value to display\n   *\n   * @private\n   */\n  getCurrentTime_() {\n    return this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();\n  }\n\n  /**\n   * Get the percentage of media played so far.\n   *\n   * @return {number}\n   *         The percentage of media played so far (0 to 1).\n   */\n  getPercent() {\n    const currentTime = this.getCurrentTime_();\n    let percent;\n    const liveTracker = this.player_.liveTracker;\n    if (liveTracker && liveTracker.isLive()) {\n      percent = (currentTime - liveTracker.seekableStart()) / liveTracker.liveWindow();\n\n      // prevent the percent from changing at the live edge\n      if (liveTracker.atLiveEdge()) {\n        percent = 1;\n      }\n    } else {\n      percent = currentTime / this.player_.duration();\n    }\n    return percent;\n  }\n\n  /**\n   * Handle mouse down on seek bar\n   *\n   * @param {MouseEvent} event\n   *        The `mousedown` event that caused this to run.\n   *\n   * @listens mousedown\n   */\n  handleMouseDown(event) {\n    if (!isSingleLeftClick(event)) {\n      return;\n    }\n\n    // Stop event propagation to prevent double fire in progress-control.js\n    event.stopPropagation();\n    this.videoWasPlaying = !this.player_.paused();\n    this.player_.pause();\n    super.handleMouseDown(event);\n  }\n\n  /**\n   * Handle mouse move on seek bar\n   *\n   * @param {MouseEvent} event\n   *        The `mousemove` event that caused this to run.\n   * @param {boolean} mouseDown this is a flag that should be set to true if `handleMouseMove` is called directly. It allows us to skip things that should not happen if coming from mouse down but should happen on regular mouse move handler. Defaults to false\n   *\n   * @listens mousemove\n   */\n  handleMouseMove(event, mouseDown = false) {\n    if (!isSingleLeftClick(event) || isNaN(this.player_.duration())) {\n      return;\n    }\n    if (!mouseDown && !this.player_.scrubbing()) {\n      this.player_.scrubbing(true);\n    }\n    let newTime;\n    const distance = this.calculateDistance(event);\n    const liveTracker = this.player_.liveTracker;\n    if (!liveTracker || !liveTracker.isLive()) {\n      newTime = distance * this.player_.duration();\n\n      // Don't let video end while scrubbing.\n      if (newTime === this.player_.duration()) {\n        newTime = newTime - 0.1;\n      }\n    } else {\n      if (distance >= 0.99) {\n        liveTracker.seekToLiveEdge();\n        return;\n      }\n      const seekableStart = liveTracker.seekableStart();\n      const seekableEnd = liveTracker.liveCurrentTime();\n      newTime = seekableStart + distance * liveTracker.liveWindow();\n\n      // Don't let video end while scrubbing.\n      if (newTime >= seekableEnd) {\n        newTime = seekableEnd;\n      }\n\n      // Compensate for precision differences so that currentTime is not less\n      // than seekable start\n      if (newTime <= seekableStart) {\n        newTime = seekableStart + 0.1;\n      }\n\n      // On android seekableEnd can be Infinity sometimes,\n      // this will cause newTime to be Infinity, which is\n      // not a valid currentTime.\n      if (newTime === Infinity) {\n        return;\n      }\n    }\n\n    // Set new time (tell player to seek to new time)\n    this.userSeek_(newTime);\n    if (this.player_.options_.enableSmoothSeeking) {\n      this.update();\n    }\n  }\n  enable() {\n    super.enable();\n    const mouseTimeDisplay = this.getChild('mouseTimeDisplay');\n    if (!mouseTimeDisplay) {\n      return;\n    }\n    mouseTimeDisplay.show();\n  }\n  disable() {\n    super.disable();\n    const mouseTimeDisplay = this.getChild('mouseTimeDisplay');\n    if (!mouseTimeDisplay) {\n      return;\n    }\n    mouseTimeDisplay.hide();\n  }\n\n  /**\n   * Handle mouse up on seek bar\n   *\n   * @param {MouseEvent} event\n   *        The `mouseup` event that caused this to run.\n   *\n   * @listens mouseup\n   */\n  handleMouseUp(event) {\n    super.handleMouseUp(event);\n\n    // Stop event propagation to prevent double fire in progress-control.js\n    if (event) {\n      event.stopPropagation();\n    }\n    this.player_.scrubbing(false);\n\n    /**\n     * Trigger timeupdate because we're done seeking and the time has changed.\n     * This is particularly useful for if the player is paused to time the time displays.\n     *\n     * @event Tech#timeupdate\n     * @type {Event}\n     */\n    this.player_.trigger({\n      type: 'timeupdate',\n      target: this,\n      manuallyTriggered: true\n    });\n    if (this.videoWasPlaying) {\n      silencePromise(this.player_.play());\n    } else {\n      // We're done seeking and the time has changed.\n      // If the player is paused, make sure we display the correct time on the seek bar.\n      this.update_();\n    }\n  }\n\n  /**\n   * Move more quickly fast forward for keyboard-only users\n   */\n  stepForward() {\n    this.userSeek_(this.player_.currentTime() + STEP_SECONDS);\n  }\n\n  /**\n   * Move more quickly rewind for keyboard-only users\n   */\n  stepBack() {\n    this.userSeek_(this.player_.currentTime() - STEP_SECONDS);\n  }\n\n  /**\n   * Toggles the playback state of the player\n   * This gets called when enter or space is used on the seekbar\n   *\n   * @param {KeyboardEvent} event\n   *        The `keydown` event that caused this function to be called\n   *\n   */\n  handleAction(event) {\n    if (this.player_.paused()) {\n      this.player_.play();\n    } else {\n      this.player_.pause();\n    }\n  }\n\n  /**\n   * Called when this SeekBar has focus and a key gets pressed down.\n   * Supports the following keys:\n   *\n   *   Space or Enter key fire a click event\n   *   Home key moves to start of the timeline\n   *   End key moves to end of the timeline\n   *   Digit \"0\" through \"9\" keys move to 0%, 10% ... 80%, 90% of the timeline\n   *   PageDown key moves back a larger step than ArrowDown\n   *   PageUp key moves forward a large step\n   *\n   * @param {KeyboardEvent} event\n   *        The `keydown` event that caused this function to be called.\n   *\n   * @listens keydown\n   */\n  handleKeyDown(event) {\n    const liveTracker = this.player_.liveTracker;\n    if (keycode.isEventKey(event, 'Space') || keycode.isEventKey(event, 'Enter')) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.handleAction(event);\n    } else if (keycode.isEventKey(event, 'Home')) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.userSeek_(0);\n    } else if (keycode.isEventKey(event, 'End')) {\n      event.preventDefault();\n      event.stopPropagation();\n      if (liveTracker && liveTracker.isLive()) {\n        this.userSeek_(liveTracker.liveCurrentTime());\n      } else {\n        this.userSeek_(this.player_.duration());\n      }\n    } else if (/^[0-9]$/.test(keycode(event))) {\n      event.preventDefault();\n      event.stopPropagation();\n      const gotoFraction = (keycode.codes[keycode(event)] - keycode.codes['0']) * 10.0 / 100.0;\n      if (liveTracker && liveTracker.isLive()) {\n        this.userSeek_(liveTracker.seekableStart() + liveTracker.liveWindow() * gotoFraction);\n      } else {\n        this.userSeek_(this.player_.duration() * gotoFraction);\n      }\n    } else if (keycode.isEventKey(event, 'PgDn')) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.userSeek_(this.player_.currentTime() - STEP_SECONDS * PAGE_KEY_MULTIPLIER);\n    } else if (keycode.isEventKey(event, 'PgUp')) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.userSeek_(this.player_.currentTime() + STEP_SECONDS * PAGE_KEY_MULTIPLIER);\n    } else {\n      // Pass keydown handling up for unsupported keys\n      super.handleKeyDown(event);\n    }\n  }\n  dispose() {\n    this.disableInterval_();\n    this.off(this.player_, ['ended', 'durationchange', 'timeupdate'], this.update);\n    if (this.player_.liveTracker) {\n      this.off(this.player_.liveTracker, 'liveedgechange', this.update);\n    }\n    this.off(this.player_, ['playing'], this.enableIntervalHandler_);\n    this.off(this.player_, ['ended', 'pause', 'waiting'], this.disableIntervalHandler_);\n\n    // we don't need to update the play progress if the document is hidden,\n    // also, this causes the CPU to spike and eventually crash the page on IE11.\n    if ('hidden' in document && 'visibilityState' in document) {\n      this.off(document, 'visibilitychange', this.toggleVisibility_);\n    }\n    super.dispose();\n  }\n}\n\n/**\n * Default options for the `SeekBar`\n *\n * @type {Object}\n * @private\n */\nSeekBar.prototype.options_ = {\n  children: ['loadProgressBar', 'playProgressBar'],\n  barName: 'playProgressBar'\n};\n\n// MouseTimeDisplay tooltips should not be added to a player on mobile devices\nif (!IS_IOS && !IS_ANDROID) {\n  SeekBar.prototype.options_.children.splice(1, 0, 'mouseTimeDisplay');\n}\nComponent$1.registerComponent('SeekBar', SeekBar);\n\n/**\n * @file progress-control.js\n */\n\n/**\n * The Progress Control component contains the seek bar, load progress,\n * and play progress.\n *\n * @extends Component\n */\nclass ProgressControl extends Component$1 {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('../../player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  constructor(player, options) {\n    super(player, options);\n    this.handleMouseMove = throttle(bind_(this, this.handleMouseMove), UPDATE_REFRESH_INTERVAL);\n    this.throttledHandleMouseSeek = throttle(bind_(this, this.handleMouseSeek), UPDATE_REFRESH_INTERVAL);\n    this.handleMouseUpHandler_ = e => this.handleMouseUp(e);\n    this.handleMouseDownHandler_ = e => this.handleMouseDown(e);\n    this.enable();\n  }\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  createEl() {\n    return super.createEl('div', {\n      className: 'vjs-progress-control vjs-control'\n    });\n  }\n\n  /**\n   * When the mouse moves over the `ProgressControl`, the pointer position\n   * gets passed down to the `MouseTimeDisplay` component.\n   *\n   * @param {Event} event\n   *        The `mousemove` event that caused this function to run.\n   *\n   * @listen mousemove\n   */\n  handleMouseMove(event) {\n    const seekBar = this.getChild('seekBar');\n    if (!seekBar) {\n      return;\n    }\n    const playProgressBar = seekBar.getChild('playProgressBar');\n    const mouseTimeDisplay = seekBar.getChild('mouseTimeDisplay');\n    if (!playProgressBar && !mouseTimeDisplay) {\n      return;\n    }\n    const seekBarEl = seekBar.el();\n    const seekBarRect = findPosition(seekBarEl);\n    let seekBarPoint = getPointerPosition(seekBarEl, event).x;\n\n    // The default skin has a gap on either side of the `SeekBar`. This means\n    // that it's possible to trigger this behavior outside the boundaries of\n    // the `SeekBar`. This ensures we stay within it at all times.\n    seekBarPoint = clamp(seekBarPoint, 0, 1);\n    if (mouseTimeDisplay) {\n      mouseTimeDisplay.update(seekBarRect, seekBarPoint);\n    }\n    if (playProgressBar) {\n      playProgressBar.update(seekBarRect, seekBar.getProgress());\n    }\n  }\n\n  /**\n   * A throttled version of the {@link ProgressControl#handleMouseSeek} listener.\n   *\n   * @method ProgressControl#throttledHandleMouseSeek\n   * @param {Event} event\n   *        The `mousemove` event that caused this function to run.\n   *\n   * @listen mousemove\n   * @listen touchmove\n   */\n\n  /**\n   * Handle `mousemove` or `touchmove` events on the `ProgressControl`.\n   *\n   * @param {Event} event\n   *        `mousedown` or `touchstart` event that triggered this function\n   *\n   * @listens mousemove\n   * @listens touchmove\n   */\n  handleMouseSeek(event) {\n    const seekBar = this.getChild('seekBar');\n    if (seekBar) {\n      seekBar.handleMouseMove(event);\n    }\n  }\n\n  /**\n   * Are controls are currently enabled for this progress control.\n   *\n   * @return {boolean}\n   *         true if controls are enabled, false otherwise\n   */\n  enabled() {\n    return this.enabled_;\n  }\n\n  /**\n   * Disable all controls on the progress control and its children\n   */\n  disable() {\n    this.children().forEach(child => child.disable && child.disable());\n    if (!this.enabled()) {\n      return;\n    }\n    this.off(['mousedown', 'touchstart'], this.handleMouseDownHandler_);\n    this.off(this.el_, 'mousemove', this.handleMouseMove);\n    this.removeListenersAddedOnMousedownAndTouchstart();\n    this.addClass('disabled');\n    this.enabled_ = false;\n\n    // Restore normal playback state if controls are disabled while scrubbing\n    if (this.player_.scrubbing()) {\n      const seekBar = this.getChild('seekBar');\n      this.player_.scrubbing(false);\n      if (seekBar.videoWasPlaying) {\n        silencePromise(this.player_.play());\n      }\n    }\n  }\n\n  /**\n   * Enable all controls on the progress control and its children\n   */\n  enable() {\n    this.children().forEach(child => child.enable && child.enable());\n    if (this.enabled()) {\n      return;\n    }\n    this.on(['mousedown', 'touchstart'], this.handleMouseDownHandler_);\n    this.on(this.el_, 'mousemove', this.handleMouseMove);\n    this.removeClass('disabled');\n    this.enabled_ = true;\n  }\n\n  /**\n   * Cleanup listeners after the user finishes interacting with the progress controls\n   */\n  removeListenersAddedOnMousedownAndTouchstart() {\n    const doc = this.el_.ownerDocument;\n    this.off(doc, 'mousemove', this.throttledHandleMouseSeek);\n    this.off(doc, 'touchmove', this.throttledHandleMouseSeek);\n    this.off(doc, 'mouseup', this.handleMouseUpHandler_);\n    this.off(doc, 'touchend', this.handleMouseUpHandler_);\n  }\n\n  /**\n   * Handle `mousedown` or `touchstart` events on the `ProgressControl`.\n   *\n   * @param {Event} event\n   *        `mousedown` or `touchstart` event that triggered this function\n   *\n   * @listens mousedown\n   * @listens touchstart\n   */\n  handleMouseDown(event) {\n    const doc = this.el_.ownerDocument;\n    const seekBar = this.getChild('seekBar');\n    if (seekBar) {\n      seekBar.handleMouseDown(event);\n    }\n    this.on(doc, 'mousemove', this.throttledHandleMouseSeek);\n    this.on(doc, 'touchmove', this.throttledHandleMouseSeek);\n    this.on(doc, 'mouseup', this.handleMouseUpHandler_);\n    this.on(doc, 'touchend', this.handleMouseUpHandler_);\n  }\n\n  /**\n   * Handle `mouseup` or `touchend` events on the `ProgressControl`.\n   *\n   * @param {Event} event\n   *        `mouseup` or `touchend` event that triggered this function.\n   *\n   * @listens touchend\n   * @listens mouseup\n   */\n  handleMouseUp(event) {\n    const seekBar = this.getChild('seekBar');\n    if (seekBar) {\n      seekBar.handleMouseUp(event);\n    }\n    this.removeListenersAddedOnMousedownAndTouchstart();\n  }\n}\n\n/**\n * Default options for `ProgressControl`\n *\n * @type {Object}\n * @private\n */\nProgressControl.prototype.options_ = {\n  children: ['seekBar']\n};\nComponent$1.registerComponent('ProgressControl', ProgressControl);\n\n/**\n * @file picture-in-picture-toggle.js\n */\n\n/**\n * Toggle Picture-in-Picture mode\n *\n * @extends Button\n */\nclass PictureInPictureToggle extends Button {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('./player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @listens Player#enterpictureinpicture\n   * @listens Player#leavepictureinpicture\n   */\n  constructor(player, options) {\n    super(player, options);\n    this.setIcon('picture-in-picture-enter');\n    this.on(player, ['enterpictureinpicture', 'leavepictureinpicture'], e => this.handlePictureInPictureChange(e));\n    this.on(player, ['disablepictureinpicturechanged', 'loadedmetadata'], e => this.handlePictureInPictureEnabledChange(e));\n    this.on(player, ['loadedmetadata', 'audioonlymodechange', 'audiopostermodechange'], () => this.handlePictureInPictureAudioModeChange());\n\n    // TODO: Deactivate button on player emptied event.\n    this.disable();\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n  buildCSSClass() {\n    return `vjs-picture-in-picture-control vjs-hidden ${super.buildCSSClass()}`;\n  }\n\n  /**\n   * Displays or hides the button depending on the audio mode detection.\n   * Exits picture-in-picture if it is enabled when switching to audio mode.\n   */\n  handlePictureInPictureAudioModeChange() {\n    // This audio detection will not detect HLS or DASH audio-only streams because there was no reliable way to detect them at the time\n    const isSourceAudio = this.player_.currentType().substring(0, 5) === 'audio';\n    const isAudioMode = isSourceAudio || this.player_.audioPosterMode() || this.player_.audioOnlyMode();\n    if (!isAudioMode) {\n      this.show();\n      return;\n    }\n    if (this.player_.isInPictureInPicture()) {\n      this.player_.exitPictureInPicture();\n    }\n    this.hide();\n  }\n\n  /**\n   * Enables or disables button based on availability of a Picture-In-Picture mode.\n   *\n   * Enabled if\n   * - `player.options().enableDocumentPictureInPicture` is true and\n   *   window.documentPictureInPicture is available; or\n   * - `player.disablePictureInPicture()` is false and\n   *   element.requestPictureInPicture is available\n   */\n  handlePictureInPictureEnabledChange() {\n    if (document.pictureInPictureEnabled && this.player_.disablePictureInPicture() === false || this.player_.options_.enableDocumentPictureInPicture && 'documentPictureInPicture' in window$1) {\n      this.enable();\n    } else {\n      this.disable();\n    }\n  }\n\n  /**\n   * Handles enterpictureinpicture and leavepictureinpicture on the player and change control text accordingly.\n   *\n   * @param {Event} [event]\n   *        The {@link Player#enterpictureinpicture} or {@link Player#leavepictureinpicture} event that caused this function to be\n   *        called.\n   *\n   * @listens Player#enterpictureinpicture\n   * @listens Player#leavepictureinpicture\n   */\n  handlePictureInPictureChange(event) {\n    if (this.player_.isInPictureInPicture()) {\n      this.setIcon('picture-in-picture-exit');\n      this.controlText('Exit Picture-in-Picture');\n    } else {\n      this.setIcon('picture-in-picture-enter');\n      this.controlText('Picture-in-Picture');\n    }\n    this.handlePictureInPictureEnabledChange();\n  }\n\n  /**\n   * This gets called when an `PictureInPictureToggle` is \"clicked\". See\n   * {@link ClickableComponent} for more detailed information on what a click can be.\n   *\n   * @param {Event} [event]\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n  handleClick(event) {\n    if (!this.player_.isInPictureInPicture()) {\n      this.player_.requestPictureInPicture();\n    } else {\n      this.player_.exitPictureInPicture();\n    }\n  }\n\n  /**\n   * Show the `Component`s element if it is hidden by removing the\n   * 'vjs-hidden' class name from it only in browsers that support the Picture-in-Picture API.\n   */\n  show() {\n    // Does not allow to display the pictureInPictureToggle in browsers that do not support the Picture-in-Picture API, e.g. Firefox.\n    if (typeof document.exitPictureInPicture !== 'function') {\n      return;\n    }\n    super.show();\n  }\n}\n\n/**\n * The text that should display over the `PictureInPictureToggle`s controls. Added for localization.\n *\n * @type {string}\n * @protected\n */\nPictureInPictureToggle.prototype.controlText_ = 'Picture-in-Picture';\nComponent$1.registerComponent('PictureInPictureToggle', PictureInPictureToggle);\n\n/**\n * @file fullscreen-toggle.js\n */\n\n/**\n * Toggle fullscreen video\n *\n * @extends Button\n */\nclass FullscreenToggle extends Button {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('./player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  constructor(player, options) {\n    super(player, options);\n    this.setIcon('fullscreen-enter');\n    this.on(player, 'fullscreenchange', e => this.handleFullscreenChange(e));\n    if (document[player.fsApi_.fullscreenEnabled] === false) {\n      this.disable();\n    }\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n  buildCSSClass() {\n    return `vjs-fullscreen-control ${super.buildCSSClass()}`;\n  }\n\n  /**\n   * Handles fullscreenchange on the player and change control text accordingly.\n   *\n   * @param {Event} [event]\n   *        The {@link Player#fullscreenchange} event that caused this function to be\n   *        called.\n   *\n   * @listens Player#fullscreenchange\n   */\n  handleFullscreenChange(event) {\n    if (this.player_.isFullscreen()) {\n      this.controlText('Exit Fullscreen');\n      this.setIcon('fullscreen-exit');\n    } else {\n      this.controlText('Fullscreen');\n      this.setIcon('fullscreen-enter');\n    }\n  }\n\n  /**\n   * This gets called when an `FullscreenToggle` is \"clicked\". See\n   * {@link ClickableComponent} for more detailed information on what a click can be.\n   *\n   * @param {Event} [event]\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n  handleClick(event) {\n    if (!this.player_.isFullscreen()) {\n      this.player_.requestFullscreen();\n    } else {\n      this.player_.exitFullscreen();\n    }\n  }\n}\n\n/**\n * The text that should display over the `FullscreenToggle`s controls. Added for localization.\n *\n * @type {string}\n * @protected\n */\nFullscreenToggle.prototype.controlText_ = 'Fullscreen';\nComponent$1.registerComponent('FullscreenToggle', FullscreenToggle);\n\n/**\n * Check if volume control is supported and if it isn't hide the\n * `Component` that was passed  using the `vjs-hidden` class.\n *\n * @param { import('../../component').default } self\n *        The component that should be hidden if volume is unsupported\n *\n * @param { import('../../player').default } player\n *        A reference to the player\n *\n * @private\n */\nconst checkVolumeSupport = function (self, player) {\n  // hide volume controls when they're not supported by the current tech\n  if (player.tech_ && !player.tech_.featuresVolumeControl) {\n    self.addClass('vjs-hidden');\n  }\n  self.on(player, 'loadstart', function () {\n    if (!player.tech_.featuresVolumeControl) {\n      self.addClass('vjs-hidden');\n    } else {\n      self.removeClass('vjs-hidden');\n    }\n  });\n};\n\n/**\n * @file volume-level.js\n */\n\n/**\n * Shows volume level\n *\n * @extends Component\n */\nclass VolumeLevel extends Component$1 {\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  createEl() {\n    const el = super.createEl('div', {\n      className: 'vjs-volume-level'\n    });\n    this.setIcon('circle', el);\n    el.appendChild(super.createEl('span', {\n      className: 'vjs-control-text'\n    }));\n    return el;\n  }\n}\nComponent$1.registerComponent('VolumeLevel', VolumeLevel);\n\n/**\n * @file volume-level-tooltip.js\n */\n\n/**\n * Volume level tooltips display a volume above or side by side the volume bar.\n *\n * @extends Component\n */\nclass VolumeLevelTooltip extends Component$1 {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('../../player').default } player\n   *        The {@link Player} that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  constructor(player, options) {\n    super(player, options);\n    this.update = throttle(bind_(this, this.update), UPDATE_REFRESH_INTERVAL);\n  }\n\n  /**\n   * Create the volume tooltip DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  createEl() {\n    return super.createEl('div', {\n      className: 'vjs-volume-tooltip'\n    }, {\n      'aria-hidden': 'true'\n    });\n  }\n\n  /**\n   * Updates the position of the tooltip relative to the `VolumeBar` and\n   * its content text.\n   *\n   * @param {Object} rangeBarRect\n   *        The `ClientRect` for the {@link VolumeBar} element.\n   *\n   * @param {number} rangeBarPoint\n   *        A number from 0 to 1, representing a horizontal/vertical reference point\n   *        from the left edge of the {@link VolumeBar}\n   *\n   * @param {boolean} vertical\n   *        Referees to the Volume control position\n   *        in the control bar{@link VolumeControl}\n   *\n   */\n  update(rangeBarRect, rangeBarPoint, vertical, content) {\n    if (!vertical) {\n      const tooltipRect = getBoundingClientRect(this.el_);\n      const playerRect = getBoundingClientRect(this.player_.el());\n      const volumeBarPointPx = rangeBarRect.width * rangeBarPoint;\n      if (!playerRect || !tooltipRect) {\n        return;\n      }\n      const spaceLeftOfPoint = rangeBarRect.left - playerRect.left + volumeBarPointPx;\n      const spaceRightOfPoint = rangeBarRect.width - volumeBarPointPx + (playerRect.right - rangeBarRect.right);\n      let pullTooltipBy = tooltipRect.width / 2;\n      if (spaceLeftOfPoint < pullTooltipBy) {\n        pullTooltipBy += pullTooltipBy - spaceLeftOfPoint;\n      } else if (spaceRightOfPoint < pullTooltipBy) {\n        pullTooltipBy = spaceRightOfPoint;\n      }\n      if (pullTooltipBy < 0) {\n        pullTooltipBy = 0;\n      } else if (pullTooltipBy > tooltipRect.width) {\n        pullTooltipBy = tooltipRect.width;\n      }\n      this.el_.style.right = `-${pullTooltipBy}px`;\n    }\n    this.write(`${content}%`);\n  }\n\n  /**\n   * Write the volume to the tooltip DOM element.\n   *\n   * @param {string} content\n   *        The formatted volume for the tooltip.\n   */\n  write(content) {\n    textContent(this.el_, content);\n  }\n\n  /**\n   * Updates the position of the volume tooltip relative to the `VolumeBar`.\n   *\n   * @param {Object} rangeBarRect\n   *        The `ClientRect` for the {@link VolumeBar} element.\n   *\n   * @param {number} rangeBarPoint\n   *        A number from 0 to 1, representing a horizontal/vertical reference point\n   *        from the left edge of the {@link VolumeBar}\n   *\n   * @param {boolean} vertical\n   *        Referees to the Volume control position\n   *        in the control bar{@link VolumeControl}\n   *\n   * @param {number} volume\n   *        The volume level to update the tooltip to\n   *\n   * @param {Function} cb\n   *        A function that will be called during the request animation frame\n   *        for tooltips that need to do additional animations from the default\n   */\n  updateVolume(rangeBarRect, rangeBarPoint, vertical, volume, cb) {\n    this.requestNamedAnimationFrame('VolumeLevelTooltip#updateVolume', () => {\n      this.update(rangeBarRect, rangeBarPoint, vertical, volume.toFixed(0));\n      if (cb) {\n        cb();\n      }\n    });\n  }\n}\nComponent$1.registerComponent('VolumeLevelTooltip', VolumeLevelTooltip);\n\n/**\n * @file mouse-volume-level-display.js\n */\n\n/**\n * The {@link MouseVolumeLevelDisplay} component tracks mouse movement over the\n * {@link VolumeControl}. It displays an indicator and a {@link VolumeLevelTooltip}\n * indicating the volume level which is represented by a given point in the\n * {@link VolumeBar}.\n *\n * @extends Component\n */\nclass MouseVolumeLevelDisplay extends Component$1 {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('../../player').default } player\n   *        The {@link Player} that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  constructor(player, options) {\n    super(player, options);\n    this.update = throttle(bind_(this, this.update), UPDATE_REFRESH_INTERVAL);\n  }\n\n  /**\n   * Create the DOM element for this class.\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  createEl() {\n    return super.createEl('div', {\n      className: 'vjs-mouse-display'\n    });\n  }\n\n  /**\n   * Enquires updates to its own DOM as well as the DOM of its\n   * {@link VolumeLevelTooltip} child.\n   *\n   * @param {Object} rangeBarRect\n   *        The `ClientRect` for the {@link VolumeBar} element.\n   *\n   * @param {number} rangeBarPoint\n   *        A number from 0 to 1, representing a horizontal/vertical reference point\n   *        from the left edge of the {@link VolumeBar}\n   *\n   * @param {boolean} vertical\n   *        Referees to the Volume control position\n   *        in the control bar{@link VolumeControl}\n   *\n   */\n  update(rangeBarRect, rangeBarPoint, vertical) {\n    const volume = 100 * rangeBarPoint;\n    this.getChild('volumeLevelTooltip').updateVolume(rangeBarRect, rangeBarPoint, vertical, volume, () => {\n      if (vertical) {\n        this.el_.style.bottom = `${rangeBarRect.height * rangeBarPoint}px`;\n      } else {\n        this.el_.style.left = `${rangeBarRect.width * rangeBarPoint}px`;\n      }\n    });\n  }\n}\n\n/**\n * Default options for `MouseVolumeLevelDisplay`\n *\n * @type {Object}\n * @private\n */\nMouseVolumeLevelDisplay.prototype.options_ = {\n  children: ['volumeLevelTooltip']\n};\nComponent$1.registerComponent('MouseVolumeLevelDisplay', MouseVolumeLevelDisplay);\n\n/**\n * @file volume-bar.js\n */\n\n/**\n * The bar that contains the volume level and can be clicked on to adjust the level\n *\n * @extends Slider\n */\nclass VolumeBar extends Slider {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('../../player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  constructor(player, options) {\n    super(player, options);\n    this.on('slideractive', e => this.updateLastVolume_(e));\n    this.on(player, 'volumechange', e => this.updateARIAAttributes(e));\n    player.ready(() => this.updateARIAAttributes());\n  }\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  createEl() {\n    return super.createEl('div', {\n      className: 'vjs-volume-bar vjs-slider-bar'\n    }, {\n      'aria-label': this.localize('Volume Level'),\n      'aria-live': 'polite'\n    });\n  }\n\n  /**\n   * Handle mouse down on volume bar\n   *\n   * @param {Event} event\n   *        The `mousedown` event that caused this to run.\n   *\n   * @listens mousedown\n   */\n  handleMouseDown(event) {\n    if (!isSingleLeftClick(event)) {\n      return;\n    }\n    super.handleMouseDown(event);\n  }\n\n  /**\n   * Handle movement events on the {@link VolumeMenuButton}.\n   *\n   * @param {Event} event\n   *        The event that caused this function to run.\n   *\n   * @listens mousemove\n   */\n  handleMouseMove(event) {\n    const mouseVolumeLevelDisplay = this.getChild('mouseVolumeLevelDisplay');\n    if (mouseVolumeLevelDisplay) {\n      const volumeBarEl = this.el();\n      const volumeBarRect = getBoundingClientRect(volumeBarEl);\n      const vertical = this.vertical();\n      let volumeBarPoint = getPointerPosition(volumeBarEl, event);\n      volumeBarPoint = vertical ? volumeBarPoint.y : volumeBarPoint.x;\n      // The default skin has a gap on either side of the `VolumeBar`. This means\n      // that it's possible to trigger this behavior outside the boundaries of\n      // the `VolumeBar`. This ensures we stay within it at all times.\n      volumeBarPoint = clamp(volumeBarPoint, 0, 1);\n      mouseVolumeLevelDisplay.update(volumeBarRect, volumeBarPoint, vertical);\n    }\n    if (!isSingleLeftClick(event)) {\n      return;\n    }\n    this.checkMuted();\n    this.player_.volume(this.calculateDistance(event));\n  }\n\n  /**\n   * If the player is muted unmute it.\n   */\n  checkMuted() {\n    if (this.player_.muted()) {\n      this.player_.muted(false);\n    }\n  }\n\n  /**\n   * Get percent of volume level\n   *\n   * @return {number}\n   *         Volume level percent as a decimal number.\n   */\n  getPercent() {\n    if (this.player_.muted()) {\n      return 0;\n    }\n    return this.player_.volume();\n  }\n\n  /**\n   * Increase volume level for keyboard users\n   */\n  stepForward() {\n    this.checkMuted();\n    this.player_.volume(this.player_.volume() + 0.1);\n  }\n\n  /**\n   * Decrease volume level for keyboard users\n   */\n  stepBack() {\n    this.checkMuted();\n    this.player_.volume(this.player_.volume() - 0.1);\n  }\n\n  /**\n   * Update ARIA accessibility attributes\n   *\n   * @param {Event} [event]\n   *        The `volumechange` event that caused this function to run.\n   *\n   * @listens Player#volumechange\n   */\n  updateARIAAttributes(event) {\n    const ariaValue = this.player_.muted() ? 0 : this.volumeAsPercentage_();\n    this.el_.setAttribute('aria-valuenow', ariaValue);\n    this.el_.setAttribute('aria-valuetext', ariaValue + '%');\n  }\n\n  /**\n   * Returns the current value of the player volume as a percentage\n   *\n   * @private\n   */\n  volumeAsPercentage_() {\n    return Math.round(this.player_.volume() * 100);\n  }\n\n  /**\n   * When user starts dragging the VolumeBar, store the volume and listen for\n   * the end of the drag. When the drag ends, if the volume was set to zero,\n   * set lastVolume to the stored volume.\n   *\n   * @listens slideractive\n   * @private\n   */\n  updateLastVolume_() {\n    const volumeBeforeDrag = this.player_.volume();\n    this.one('sliderinactive', () => {\n      if (this.player_.volume() === 0) {\n        this.player_.lastVolume_(volumeBeforeDrag);\n      }\n    });\n  }\n}\n\n/**\n * Default options for the `VolumeBar`\n *\n * @type {Object}\n * @private\n */\nVolumeBar.prototype.options_ = {\n  children: ['volumeLevel'],\n  barName: 'volumeLevel'\n};\n\n// MouseVolumeLevelDisplay tooltip should not be added to a player on mobile devices\nif (!IS_IOS && !IS_ANDROID) {\n  VolumeBar.prototype.options_.children.splice(0, 0, 'mouseVolumeLevelDisplay');\n}\n\n/**\n * Call the update event for this Slider when this event happens on the player.\n *\n * @type {string}\n */\nVolumeBar.prototype.playerEvent = 'volumechange';\nComponent$1.registerComponent('VolumeBar', VolumeBar);\n\n/**\n * @file volume-control.js\n */\n\n/**\n * The component for controlling the volume level\n *\n * @extends Component\n */\nclass VolumeControl extends Component$1 {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('../../player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options={}]\n   *        The key/value store of player options.\n   */\n  constructor(player, options = {}) {\n    options.vertical = options.vertical || false;\n\n    // Pass the vertical option down to the VolumeBar if\n    // the VolumeBar is turned on.\n    if (typeof options.volumeBar === 'undefined' || isPlain(options.volumeBar)) {\n      options.volumeBar = options.volumeBar || {};\n      options.volumeBar.vertical = options.vertical;\n    }\n    super(player, options);\n\n    // hide this control if volume support is missing\n    checkVolumeSupport(this, player);\n    this.throttledHandleMouseMove = throttle(bind_(this, this.handleMouseMove), UPDATE_REFRESH_INTERVAL);\n    this.handleMouseUpHandler_ = e => this.handleMouseUp(e);\n    this.on('mousedown', e => this.handleMouseDown(e));\n    this.on('touchstart', e => this.handleMouseDown(e));\n    this.on('mousemove', e => this.handleMouseMove(e));\n\n    // while the slider is active (the mouse has been pressed down and\n    // is dragging) or in focus we do not want to hide the VolumeBar\n    this.on(this.volumeBar, ['focus', 'slideractive'], () => {\n      this.volumeBar.addClass('vjs-slider-active');\n      this.addClass('vjs-slider-active');\n      this.trigger('slideractive');\n    });\n    this.on(this.volumeBar, ['blur', 'sliderinactive'], () => {\n      this.volumeBar.removeClass('vjs-slider-active');\n      this.removeClass('vjs-slider-active');\n      this.trigger('sliderinactive');\n    });\n  }\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  createEl() {\n    let orientationClass = 'vjs-volume-horizontal';\n    if (this.options_.vertical) {\n      orientationClass = 'vjs-volume-vertical';\n    }\n    return super.createEl('div', {\n      className: `vjs-volume-control vjs-control ${orientationClass}`\n    });\n  }\n\n  /**\n   * Handle `mousedown` or `touchstart` events on the `VolumeControl`.\n   *\n   * @param {Event} event\n   *        `mousedown` or `touchstart` event that triggered this function\n   *\n   * @listens mousedown\n   * @listens touchstart\n   */\n  handleMouseDown(event) {\n    const doc = this.el_.ownerDocument;\n    this.on(doc, 'mousemove', this.throttledHandleMouseMove);\n    this.on(doc, 'touchmove', this.throttledHandleMouseMove);\n    this.on(doc, 'mouseup', this.handleMouseUpHandler_);\n    this.on(doc, 'touchend', this.handleMouseUpHandler_);\n  }\n\n  /**\n   * Handle `mouseup` or `touchend` events on the `VolumeControl`.\n   *\n   * @param {Event} event\n   *        `mouseup` or `touchend` event that triggered this function.\n   *\n   * @listens touchend\n   * @listens mouseup\n   */\n  handleMouseUp(event) {\n    const doc = this.el_.ownerDocument;\n    this.off(doc, 'mousemove', this.throttledHandleMouseMove);\n    this.off(doc, 'touchmove', this.throttledHandleMouseMove);\n    this.off(doc, 'mouseup', this.handleMouseUpHandler_);\n    this.off(doc, 'touchend', this.handleMouseUpHandler_);\n  }\n\n  /**\n   * Handle `mousedown` or `touchstart` events on the `VolumeControl`.\n   *\n   * @param {Event} event\n   *        `mousedown` or `touchstart` event that triggered this function\n   *\n   * @listens mousedown\n   * @listens touchstart\n   */\n  handleMouseMove(event) {\n    this.volumeBar.handleMouseMove(event);\n  }\n}\n\n/**\n * Default options for the `VolumeControl`\n *\n * @type {Object}\n * @private\n */\nVolumeControl.prototype.options_ = {\n  children: ['volumeBar']\n};\nComponent$1.registerComponent('VolumeControl', VolumeControl);\n\n/**\n * Check if muting volume is supported and if it isn't hide the mute toggle\n * button.\n *\n * @param { import('../../component').default } self\n *        A reference to the mute toggle button\n *\n * @param { import('../../player').default } player\n *        A reference to the player\n *\n * @private\n */\nconst checkMuteSupport = function (self, player) {\n  // hide mute toggle button if it's not supported by the current tech\n  if (player.tech_ && !player.tech_.featuresMuteControl) {\n    self.addClass('vjs-hidden');\n  }\n  self.on(player, 'loadstart', function () {\n    if (!player.tech_.featuresMuteControl) {\n      self.addClass('vjs-hidden');\n    } else {\n      self.removeClass('vjs-hidden');\n    }\n  });\n};\n\n/**\n * @file mute-toggle.js\n */\n\n/**\n * A button component for muting the audio.\n *\n * @extends Button\n */\nclass MuteToggle extends Button {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('./player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  constructor(player, options) {\n    super(player, options);\n\n    // hide this control if volume support is missing\n    checkMuteSupport(this, player);\n    this.on(player, ['loadstart', 'volumechange'], e => this.update(e));\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n  buildCSSClass() {\n    return `vjs-mute-control ${super.buildCSSClass()}`;\n  }\n\n  /**\n   * This gets called when an `MuteToggle` is \"clicked\". See\n   * {@link ClickableComponent} for more detailed information on what a click can be.\n   *\n   * @param {Event} [event]\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n  handleClick(event) {\n    const vol = this.player_.volume();\n    const lastVolume = this.player_.lastVolume_();\n    if (vol === 0) {\n      const volumeToSet = lastVolume < 0.1 ? 0.1 : lastVolume;\n      this.player_.volume(volumeToSet);\n      this.player_.muted(false);\n    } else {\n      this.player_.muted(this.player_.muted() ? false : true);\n    }\n  }\n\n  /**\n   * Update the `MuteToggle` button based on the state of `volume` and `muted`\n   * on the player.\n   *\n   * @param {Event} [event]\n   *        The {@link Player#loadstart} event if this function was called\n   *        through an event.\n   *\n   * @listens Player#loadstart\n   * @listens Player#volumechange\n   */\n  update(event) {\n    this.updateIcon_();\n    this.updateControlText_();\n  }\n\n  /**\n   * Update the appearance of the `MuteToggle` icon.\n   *\n   * Possible states (given `level` variable below):\n   * - 0: crossed out\n   * - 1: zero bars of volume\n   * - 2: one bar of volume\n   * - 3: two bars of volume\n   *\n   * @private\n   */\n  updateIcon_() {\n    const vol = this.player_.volume();\n    let level = 3;\n    this.setIcon('volume-high');\n\n    // in iOS when a player is loaded with muted attribute\n    // and volume is changed with a native mute button\n    // we want to make sure muted state is updated\n    if (IS_IOS && this.player_.tech_ && this.player_.tech_.el_) {\n      this.player_.muted(this.player_.tech_.el_.muted);\n    }\n    if (vol === 0 || this.player_.muted()) {\n      this.setIcon('volume-mute');\n      level = 0;\n    } else if (vol < 0.33) {\n      this.setIcon('volume-low');\n      level = 1;\n    } else if (vol < 0.67) {\n      this.setIcon('volume-medium');\n      level = 2;\n    }\n    removeClass(this.el_, [0, 1, 2, 3].reduce((str, i) => str + `${i ? ' ' : ''}vjs-vol-${i}`, ''));\n    addClass(this.el_, `vjs-vol-${level}`);\n  }\n\n  /**\n   * If `muted` has changed on the player, update the control text\n   * (`title` attribute on `vjs-mute-control` element and content of\n   * `vjs-control-text` element).\n   *\n   * @private\n   */\n  updateControlText_() {\n    const soundOff = this.player_.muted() || this.player_.volume() === 0;\n    const text = soundOff ? 'Unmute' : 'Mute';\n    if (this.controlText() !== text) {\n      this.controlText(text);\n    }\n  }\n}\n\n/**\n * The text that should display over the `MuteToggle`s controls. Added for localization.\n *\n * @type {string}\n * @protected\n */\nMuteToggle.prototype.controlText_ = 'Mute';\nComponent$1.registerComponent('MuteToggle', MuteToggle);\n\n/**\n * @file volume-control.js\n */\n\n/**\n * A Component to contain the MuteToggle and VolumeControl so that\n * they can work together.\n *\n * @extends Component\n */\nclass VolumePanel extends Component$1 {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('./player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options={}]\n   *        The key/value store of player options.\n   */\n  constructor(player, options = {}) {\n    if (typeof options.inline !== 'undefined') {\n      options.inline = options.inline;\n    } else {\n      options.inline = true;\n    }\n\n    // pass the inline option down to the VolumeControl as vertical if\n    // the VolumeControl is on.\n    if (typeof options.volumeControl === 'undefined' || isPlain(options.volumeControl)) {\n      options.volumeControl = options.volumeControl || {};\n      options.volumeControl.vertical = !options.inline;\n    }\n    super(player, options);\n\n    // this handler is used by mouse handler methods below\n    this.handleKeyPressHandler_ = e => this.handleKeyPress(e);\n    this.on(player, ['loadstart'], e => this.volumePanelState_(e));\n    this.on(this.muteToggle, 'keyup', e => this.handleKeyPress(e));\n    this.on(this.volumeControl, 'keyup', e => this.handleVolumeControlKeyUp(e));\n    this.on('keydown', e => this.handleKeyPress(e));\n    this.on('mouseover', e => this.handleMouseOver(e));\n    this.on('mouseout', e => this.handleMouseOut(e));\n\n    // while the slider is active (the mouse has been pressed down and\n    // is dragging) we do not want to hide the VolumeBar\n    this.on(this.volumeControl, ['slideractive'], this.sliderActive_);\n    this.on(this.volumeControl, ['sliderinactive'], this.sliderInactive_);\n  }\n\n  /**\n   * Add vjs-slider-active class to the VolumePanel\n   *\n   * @listens VolumeControl#slideractive\n   * @private\n   */\n  sliderActive_() {\n    this.addClass('vjs-slider-active');\n  }\n\n  /**\n   * Removes vjs-slider-active class to the VolumePanel\n   *\n   * @listens VolumeControl#sliderinactive\n   * @private\n   */\n  sliderInactive_() {\n    this.removeClass('vjs-slider-active');\n  }\n\n  /**\n   * Adds vjs-hidden or vjs-mute-toggle-only to the VolumePanel\n   * depending on MuteToggle and VolumeControl state\n   *\n   * @listens Player#loadstart\n   * @private\n   */\n  volumePanelState_() {\n    // hide volume panel if neither volume control or mute toggle\n    // are displayed\n    if (this.volumeControl.hasClass('vjs-hidden') && this.muteToggle.hasClass('vjs-hidden')) {\n      this.addClass('vjs-hidden');\n    }\n\n    // if only mute toggle is visible we don't want\n    // volume panel expanding when hovered or active\n    if (this.volumeControl.hasClass('vjs-hidden') && !this.muteToggle.hasClass('vjs-hidden')) {\n      this.addClass('vjs-mute-toggle-only');\n    }\n  }\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  createEl() {\n    let orientationClass = 'vjs-volume-panel-horizontal';\n    if (!this.options_.inline) {\n      orientationClass = 'vjs-volume-panel-vertical';\n    }\n    return super.createEl('div', {\n      className: `vjs-volume-panel vjs-control ${orientationClass}`\n    });\n  }\n\n  /**\n   * Dispose of the `volume-panel` and all child components.\n   */\n  dispose() {\n    this.handleMouseOut();\n    super.dispose();\n  }\n\n  /**\n   * Handles `keyup` events on the `VolumeControl`, looking for ESC, which closes\n   * the volume panel and sets focus on `MuteToggle`.\n   *\n   * @param {Event} event\n   *        The `keyup` event that caused this function to be called.\n   *\n   * @listens keyup\n   */\n  handleVolumeControlKeyUp(event) {\n    if (keycode.isEventKey(event, 'Esc')) {\n      this.muteToggle.focus();\n    }\n  }\n\n  /**\n   * This gets called when a `VolumePanel` gains hover via a `mouseover` event.\n   * Turns on listening for `mouseover` event. When they happen it\n   * calls `this.handleMouseOver`.\n   *\n   * @param {Event} event\n   *        The `mouseover` event that caused this function to be called.\n   *\n   * @listens mouseover\n   */\n  handleMouseOver(event) {\n    this.addClass('vjs-hover');\n    on(document, 'keyup', this.handleKeyPressHandler_);\n  }\n\n  /**\n   * This gets called when a `VolumePanel` gains hover via a `mouseout` event.\n   * Turns on listening for `mouseout` event. When they happen it\n   * calls `this.handleMouseOut`.\n   *\n   * @param {Event} event\n   *        The `mouseout` event that caused this function to be called.\n   *\n   * @listens mouseout\n   */\n  handleMouseOut(event) {\n    this.removeClass('vjs-hover');\n    off(document, 'keyup', this.handleKeyPressHandler_);\n  }\n\n  /**\n   * Handles `keyup` event on the document or `keydown` event on the `VolumePanel`,\n   * looking for ESC, which hides the `VolumeControl`.\n   *\n   * @param {Event} event\n   *        The keypress that triggered this event.\n   *\n   * @listens keydown | keyup\n   */\n  handleKeyPress(event) {\n    if (keycode.isEventKey(event, 'Esc')) {\n      this.handleMouseOut();\n    }\n  }\n}\n\n/**\n * Default options for the `VolumeControl`\n *\n * @type {Object}\n * @private\n */\nVolumePanel.prototype.options_ = {\n  children: ['muteToggle', 'volumeControl']\n};\nComponent$1.registerComponent('VolumePanel', VolumePanel);\n\n/**\n * Button to skip forward a configurable amount of time\n * through a video. Renders in the control bar.\n *\n * e.g. options: {controlBar: {skipButtons: forward: 5}}\n *\n * @extends Button\n */\nclass SkipForward extends Button {\n  constructor(player, options) {\n    super(player, options);\n    this.validOptions = [5, 10, 30];\n    this.skipTime = this.getSkipForwardTime();\n    if (this.skipTime && this.validOptions.includes(this.skipTime)) {\n      this.setIcon(`forward-${this.skipTime}`);\n      this.controlText(this.localize('Skip forward {1} seconds', [this.skipTime]));\n      this.show();\n    } else {\n      this.hide();\n    }\n  }\n  getSkipForwardTime() {\n    const playerOptions = this.options_.playerOptions;\n    return playerOptions.controlBar && playerOptions.controlBar.skipButtons && playerOptions.controlBar.skipButtons.forward;\n  }\n  buildCSSClass() {\n    return `vjs-skip-forward-${this.getSkipForwardTime()} ${super.buildCSSClass()}`;\n  }\n\n  /**\n   * On click, skips forward in the duration/seekable range by a configurable amount of seconds.\n   * If the time left in the duration/seekable range is less than the configured 'skip forward' time,\n   * skips to end of duration/seekable range.\n   *\n   * Handle a click on a `SkipForward` button\n   *\n   * @param {EventTarget~Event} event\n   *        The `click` event that caused this function\n   *        to be called\n   */\n  handleClick(event) {\n    if (isNaN(this.player_.duration())) {\n      return;\n    }\n    const currentVideoTime = this.player_.currentTime();\n    const liveTracker = this.player_.liveTracker;\n    const duration = liveTracker && liveTracker.isLive() ? liveTracker.seekableEnd() : this.player_.duration();\n    let newTime;\n    if (currentVideoTime + this.skipTime <= duration) {\n      newTime = currentVideoTime + this.skipTime;\n    } else {\n      newTime = duration;\n    }\n    this.player_.currentTime(newTime);\n  }\n\n  /**\n   * Update control text on languagechange\n   */\n  handleLanguagechange() {\n    this.controlText(this.localize('Skip forward {1} seconds', [this.skipTime]));\n  }\n}\nSkipForward.prototype.controlText_ = 'Skip Forward';\nComponent$1.registerComponent('SkipForward', SkipForward);\n\n/**\n * Button to skip backward a configurable amount of time\n * through a video. Renders in the control bar.\n *\n *  * e.g. options: {controlBar: {skipButtons: backward: 5}}\n *\n * @extends Button\n */\nclass SkipBackward extends Button {\n  constructor(player, options) {\n    super(player, options);\n    this.validOptions = [5, 10, 30];\n    this.skipTime = this.getSkipBackwardTime();\n    if (this.skipTime && this.validOptions.includes(this.skipTime)) {\n      this.setIcon(`replay-${this.skipTime}`);\n      this.controlText(this.localize('Skip backward {1} seconds', [this.skipTime]));\n      this.show();\n    } else {\n      this.hide();\n    }\n  }\n  getSkipBackwardTime() {\n    const playerOptions = this.options_.playerOptions;\n    return playerOptions.controlBar && playerOptions.controlBar.skipButtons && playerOptions.controlBar.skipButtons.backward;\n  }\n  buildCSSClass() {\n    return `vjs-skip-backward-${this.getSkipBackwardTime()} ${super.buildCSSClass()}`;\n  }\n\n  /**\n   * On click, skips backward in the video by a configurable amount of seconds.\n   * If the current time in the video is less than the configured 'skip backward' time,\n   * skips to beginning of video or seekable range.\n   *\n   * Handle a click on a `SkipBackward` button\n   *\n   * @param {EventTarget~Event} event\n   *        The `click` event that caused this function\n   *        to be called\n   */\n  handleClick(event) {\n    const currentVideoTime = this.player_.currentTime();\n    const liveTracker = this.player_.liveTracker;\n    const seekableStart = liveTracker && liveTracker.isLive() && liveTracker.seekableStart();\n    let newTime;\n    if (seekableStart && currentVideoTime - this.skipTime <= seekableStart) {\n      newTime = seekableStart;\n    } else if (currentVideoTime >= this.skipTime) {\n      newTime = currentVideoTime - this.skipTime;\n    } else {\n      newTime = 0;\n    }\n    this.player_.currentTime(newTime);\n  }\n\n  /**\n   * Update control text on languagechange\n   */\n  handleLanguagechange() {\n    this.controlText(this.localize('Skip backward {1} seconds', [this.skipTime]));\n  }\n}\nSkipBackward.prototype.controlText_ = 'Skip Backward';\nComponent$1.registerComponent('SkipBackward', SkipBackward);\n\n/**\n * @file menu.js\n */\n\n/**\n * The Menu component is used to build popup menus, including subtitle and\n * captions selection menus.\n *\n * @extends Component\n */\nclass Menu extends Component$1 {\n  /**\n   * Create an instance of this class.\n   *\n   * @param { import('../player').default } player\n   *        the player that this component should attach to\n   *\n   * @param {Object} [options]\n   *        Object of option names and values\n   *\n   */\n  constructor(player, options) {\n    super(player, options);\n    if (options) {\n      this.menuButton_ = options.menuButton;\n    }\n    this.focusedChild_ = -1;\n    this.on('keydown', e => this.handleKeyDown(e));\n\n    // All the menu item instances share the same blur handler provided by the menu container.\n    this.boundHandleBlur_ = e => this.handleBlur(e);\n    this.boundHandleTapClick_ = e => this.handleTapClick(e);\n  }\n\n  /**\n   * Add event listeners to the {@link MenuItem}.\n   *\n   * @param {Object} component\n   *        The instance of the `MenuItem` to add listeners to.\n   *\n   */\n  addEventListenerForItem(component) {\n    if (!(component instanceof Component$1)) {\n      return;\n    }\n    this.on(component, 'blur', this.boundHandleBlur_);\n    this.on(component, ['tap', 'click'], this.boundHandleTapClick_);\n  }\n\n  /**\n   * Remove event listeners from the {@link MenuItem}.\n   *\n   * @param {Object} component\n   *        The instance of the `MenuItem` to remove listeners.\n   *\n   */\n  removeEventListenerForItem(component) {\n    if (!(component instanceof Component$1)) {\n      return;\n    }\n    this.off(component, 'blur', this.boundHandleBlur_);\n    this.off(component, ['tap', 'click'], this.boundHandleTapClick_);\n  }\n\n  /**\n   * This method will be called indirectly when the component has been added\n   * before the component adds to the new menu instance by `addItem`.\n   * In this case, the original menu instance will remove the component\n   * by calling `removeChild`.\n   *\n   * @param {Object} component\n   *        The instance of the `MenuItem`\n   */\n  removeChild(component) {\n    if (typeof component === 'string') {\n      component = this.getChild(component);\n    }\n    this.removeEventListenerForItem(component);\n    super.removeChild(component);\n  }\n\n  /**\n   * Add a {@link MenuItem} to the menu.\n   *\n   * @param {Object|string} component\n   *        The name or instance of the `MenuItem` to add.\n   *\n   */\n  addItem(component) {\n    const childComponent = this.addChild(component);\n    if (childComponent) {\n      this.addEventListenerForItem(childComponent);\n    }\n  }\n\n  /**\n   * Create the `Menu`s DOM element.\n   *\n   * @return {Element}\n   *         the element that was created\n   */\n  createEl() {\n    const contentElType = this.options_.contentElType || 'ul';\n    this.contentEl_ = createEl(contentElType, {\n      className: 'vjs-menu-content'\n    });\n    this.contentEl_.setAttribute('role', 'menu');\n    const el = super.createEl('div', {\n      append: this.contentEl_,\n      className: 'vjs-menu'\n    });\n    el.appendChild(this.contentEl_);\n\n    // Prevent clicks from bubbling up. Needed for Menu Buttons,\n    // where a click on the parent is significant\n    on(el, 'click', function (event) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    });\n    return el;\n  }\n  dispose() {\n    this.contentEl_ = null;\n    this.boundHandleBlur_ = null;\n    this.boundHandleTapClick_ = null;\n    super.dispose();\n  }\n\n  /**\n   * Called when a `MenuItem` loses focus.\n   *\n   * @param {Event} event\n   *        The `blur` event that caused this function to be called.\n   *\n   * @listens blur\n   */\n  handleBlur(event) {\n    const relatedTarget = event.relatedTarget || document.activeElement;\n\n    // Close menu popup when a user clicks outside the menu\n    if (!this.children().some(element => {\n      return element.el() === relatedTarget;\n    })) {\n      const btn = this.menuButton_;\n      if (btn && btn.buttonPressed_ && relatedTarget !== btn.el().firstChild) {\n        btn.unpressButton();\n      }\n    }\n  }\n\n  /**\n   * Called when a `MenuItem` gets clicked or tapped.\n   *\n   * @param {Event} event\n   *        The `click` or `tap` event that caused this function to be called.\n   *\n   * @listens click,tap\n   */\n  handleTapClick(event) {\n    // Unpress the associated MenuButton, and move focus back to it\n    if (this.menuButton_) {\n      this.menuButton_.unpressButton();\n      const childComponents = this.children();\n      if (!Array.isArray(childComponents)) {\n        return;\n      }\n      const foundComponent = childComponents.filter(component => component.el() === event.target)[0];\n      if (!foundComponent) {\n        return;\n      }\n\n      // don't focus menu button if item is a caption settings item\n      // because focus will move elsewhere\n      if (foundComponent.name() !== 'CaptionSettingsMenuItem') {\n        this.menuButton_.focus();\n      }\n    }\n  }\n\n  /**\n   * Handle a `keydown` event on this menu. This listener is added in the constructor.\n   *\n   * @param {KeyboardEvent} event\n   *        A `keydown` event that happened on the menu.\n   *\n   * @listens keydown\n   */\n  handleKeyDown(event) {\n    // Left and Down Arrows\n    if (keycode.isEventKey(event, 'Left') || keycode.isEventKey(event, 'Down')) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.stepForward();\n\n      // Up and Right Arrows\n    } else if (keycode.isEventKey(event, 'Right') || keycode.isEventKey(event, 'Up')) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.stepBack();\n    }\n  }\n\n  /**\n   * Move to next (lower) menu item for keyboard users.\n   */\n  stepForward() {\n    let stepChild = 0;\n    if (this.focusedChild_ !== undefined) {\n      stepChild = this.focusedChild_ + 1;\n    }\n    this.focus(stepChild);\n  }\n\n  /**\n   * Move to previous (higher) menu item for keyboard users.\n   */\n  stepBack() {\n    let stepChild = 0;\n    if (this.focusedChild_ !== undefined) {\n      stepChild = this.focusedChild_ - 1;\n    }\n    this.focus(stepChild);\n  }\n\n  /**\n   * Set focus on a {@link MenuItem} in the `Menu`.\n   *\n   * @param {Object|string} [item=0]\n   *        Index of child item set focus on.\n   */\n  focus(item = 0) {\n    const children = this.children().slice();\n    const haveTitle = children.length && children[0].hasClass('vjs-menu-title');\n    if (haveTitle) {\n      children.shift();\n    }\n    if (children.length > 0) {\n      if (item < 0) {\n        item = 0;\n      } else if (item >= children.length) {\n        item = children.length - 1;\n      }\n      this.focusedChild_ = item;\n      children[item].el_.focus();\n    }\n  }\n}\nComponent$1.registerComponent('Menu', Menu);\n\n/**\n * @file menu-button.js\n */\n\n/**\n * A `MenuButton` class for any popup {@link Menu}.\n *\n * @extends Component\n */\nclass MenuButton extends Component$1 {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('../player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options={}]\n   *        The key/value store of player options.\n   */\n  constructor(player, options = {}) {\n    super(player, options);\n    this.menuButton_ = new Button(player, options);\n    this.menuButton_.controlText(this.controlText_);\n    this.menuButton_.el_.setAttribute('aria-haspopup', 'true');\n\n    // Add buildCSSClass values to the button, not the wrapper\n    const buttonClass = Button.prototype.buildCSSClass();\n    this.menuButton_.el_.className = this.buildCSSClass() + ' ' + buttonClass;\n    this.menuButton_.removeClass('vjs-control');\n    this.addChild(this.menuButton_);\n    this.update();\n    this.enabled_ = true;\n    const handleClick = e => this.handleClick(e);\n    this.handleMenuKeyUp_ = e => this.handleMenuKeyUp(e);\n    this.on(this.menuButton_, 'tap', handleClick);\n    this.on(this.menuButton_, 'click', handleClick);\n    this.on(this.menuButton_, 'keydown', e => this.handleKeyDown(e));\n    this.on(this.menuButton_, 'mouseenter', () => {\n      this.addClass('vjs-hover');\n      this.menu.show();\n      on(document, 'keyup', this.handleMenuKeyUp_);\n    });\n    this.on('mouseleave', e => this.handleMouseLeave(e));\n    this.on('keydown', e => this.handleSubmenuKeyDown(e));\n  }\n\n  /**\n   * Update the menu based on the current state of its items.\n   */\n  update() {\n    const menu = this.createMenu();\n    if (this.menu) {\n      this.menu.dispose();\n      this.removeChild(this.menu);\n    }\n    this.menu = menu;\n    this.addChild(menu);\n\n    /**\n     * Track the state of the menu button\n     *\n     * @type {Boolean}\n     * @private\n     */\n    this.buttonPressed_ = false;\n    this.menuButton_.el_.setAttribute('aria-expanded', 'false');\n    if (this.items && this.items.length <= this.hideThreshold_) {\n      this.hide();\n      this.menu.contentEl_.removeAttribute('role');\n    } else {\n      this.show();\n      this.menu.contentEl_.setAttribute('role', 'menu');\n    }\n  }\n\n  /**\n   * Create the menu and add all items to it.\n   *\n   * @return {Menu}\n   *         The constructed menu\n   */\n  createMenu() {\n    const menu = new Menu(this.player_, {\n      menuButton: this\n    });\n\n    /**\n     * Hide the menu if the number of items is less than or equal to this threshold. This defaults\n     * to 0 and whenever we add items which can be hidden to the menu we'll increment it. We list\n     * it here because every time we run `createMenu` we need to reset the value.\n     *\n     * @protected\n     * @type {Number}\n     */\n    this.hideThreshold_ = 0;\n\n    // Add a title list item to the top\n    if (this.options_.title) {\n      const titleEl = createEl('li', {\n        className: 'vjs-menu-title',\n        textContent: toTitleCase$1(this.options_.title),\n        tabIndex: -1\n      });\n      const titleComponent = new Component$1(this.player_, {\n        el: titleEl\n      });\n      menu.addItem(titleComponent);\n    }\n    this.items = this.createItems();\n    if (this.items) {\n      // Add menu items to the menu\n      for (let i = 0; i < this.items.length; i++) {\n        menu.addItem(this.items[i]);\n      }\n    }\n    return menu;\n  }\n\n  /**\n   * Create the list of menu items. Specific to each subclass.\n   *\n   * @abstract\n   */\n  createItems() {}\n\n  /**\n   * Create the `MenuButtons`s DOM element.\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n  createEl() {\n    return super.createEl('div', {\n      className: this.buildWrapperCSSClass()\n    }, {});\n  }\n\n  /**\n   * Overwrites the `setIcon` method from `Component`.\n   * In this case, we want the icon to be appended to the menuButton.\n   *\n   * @param {string} name\n   *         The icon name to be added.\n   */\n  setIcon(name) {\n    super.setIcon(name, this.menuButton_.el_);\n  }\n\n  /**\n   * Allow sub components to stack CSS class names for the wrapper element\n   *\n   * @return {string}\n   *         The constructed wrapper DOM `className`\n   */\n  buildWrapperCSSClass() {\n    let menuButtonClass = 'vjs-menu-button';\n\n    // If the inline option is passed, we want to use different styles altogether.\n    if (this.options_.inline === true) {\n      menuButtonClass += '-inline';\n    } else {\n      menuButtonClass += '-popup';\n    }\n\n    // TODO: Fix the CSS so that this isn't necessary\n    const buttonClass = Button.prototype.buildCSSClass();\n    return `vjs-menu-button ${menuButtonClass} ${buttonClass} ${super.buildCSSClass()}`;\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n  buildCSSClass() {\n    let menuButtonClass = 'vjs-menu-button';\n\n    // If the inline option is passed, we want to use different styles altogether.\n    if (this.options_.inline === true) {\n      menuButtonClass += '-inline';\n    } else {\n      menuButtonClass += '-popup';\n    }\n    return `vjs-menu-button ${menuButtonClass} ${super.buildCSSClass()}`;\n  }\n\n  /**\n   * Get or set the localized control text that will be used for accessibility.\n   *\n   * > NOTE: This will come from the internal `menuButton_` element.\n   *\n   * @param {string} [text]\n   *        Control text for element.\n   *\n   * @param {Element} [el=this.menuButton_.el()]\n   *        Element to set the title on.\n   *\n   * @return {string}\n   *         - The control text when getting\n   */\n  controlText(text, el = this.menuButton_.el()) {\n    return this.menuButton_.controlText(text, el);\n  }\n\n  /**\n   * Dispose of the `menu-button` and all child components.\n   */\n  dispose() {\n    this.handleMouseLeave();\n    super.dispose();\n  }\n\n  /**\n   * Handle a click on a `MenuButton`.\n   * See {@link ClickableComponent#handleClick} for instances where this is called.\n   *\n   * @param {Event} event\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n  handleClick(event) {\n    if (this.buttonPressed_) {\n      this.unpressButton();\n    } else {\n      this.pressButton();\n    }\n  }\n\n  /**\n   * Handle `mouseleave` for `MenuButton`.\n   *\n   * @param {Event} event\n   *        The `mouseleave` event that caused this function to be called.\n   *\n   * @listens mouseleave\n   */\n  handleMouseLeave(event) {\n    this.removeClass('vjs-hover');\n    off(document, 'keyup', this.handleMenuKeyUp_);\n  }\n\n  /**\n   * Set the focus to the actual button, not to this element\n   */\n  focus() {\n    this.menuButton_.focus();\n  }\n\n  /**\n   * Remove the focus from the actual button, not this element\n   */\n  blur() {\n    this.menuButton_.blur();\n  }\n\n  /**\n   * Handle tab, escape, down arrow, and up arrow keys for `MenuButton`. See\n   * {@link ClickableComponent#handleKeyDown} for instances where this is called.\n   *\n   * @param {Event} event\n   *        The `keydown` event that caused this function to be called.\n   *\n   * @listens keydown\n   */\n  handleKeyDown(event) {\n    // Escape or Tab unpress the 'button'\n    if (keycode.isEventKey(event, 'Esc') || keycode.isEventKey(event, 'Tab')) {\n      if (this.buttonPressed_) {\n        this.unpressButton();\n      }\n\n      // Don't preventDefault for Tab key - we still want to lose focus\n      if (!keycode.isEventKey(event, 'Tab')) {\n        event.preventDefault();\n        // Set focus back to the menu button's button\n        this.menuButton_.focus();\n      }\n      // Up Arrow or Down Arrow also 'press' the button to open the menu\n    } else if (keycode.isEventKey(event, 'Up') || keycode.isEventKey(event, 'Down')) {\n      if (!this.buttonPressed_) {\n        event.preventDefault();\n        this.pressButton();\n      }\n    }\n  }\n\n  /**\n   * Handle a `keyup` event on a `MenuButton`. The listener for this is added in\n   * the constructor.\n   *\n   * @param {Event} event\n   *        Key press event\n   *\n   * @listens keyup\n   */\n  handleMenuKeyUp(event) {\n    // Escape hides popup menu\n    if (keycode.isEventKey(event, 'Esc') || keycode.isEventKey(event, 'Tab')) {\n      this.removeClass('vjs-hover');\n    }\n  }\n\n  /**\n   * This method name now delegates to `handleSubmenuKeyDown`. This means\n   * anyone calling `handleSubmenuKeyPress` will not see their method calls\n   * stop working.\n   *\n   * @param {Event} event\n   *        The event that caused this function to be called.\n   */\n  handleSubmenuKeyPress(event) {\n    this.handleSubmenuKeyDown(event);\n  }\n\n  /**\n   * Handle a `keydown` event on a sub-menu. The listener for this is added in\n   * the constructor.\n   *\n   * @param {Event} event\n   *        Key press event\n   *\n   * @listens keydown\n   */\n  handleSubmenuKeyDown(event) {\n    // Escape or Tab unpress the 'button'\n    if (keycode.isEventKey(event, 'Esc') || keycode.isEventKey(event, 'Tab')) {\n      if (this.buttonPressed_) {\n        this.unpressButton();\n      }\n      // Don't preventDefault for Tab key - we still want to lose focus\n      if (!keycode.isEventKey(event, 'Tab')) {\n        event.preventDefault();\n        // Set focus back to the menu button's button\n        this.menuButton_.focus();\n      }\n    }\n  }\n\n  /**\n   * Put the current `MenuButton` into a pressed state.\n   */\n  pressButton() {\n    if (this.enabled_) {\n      this.buttonPressed_ = true;\n      this.menu.show();\n      this.menu.lockShowing();\n      this.menuButton_.el_.setAttribute('aria-expanded', 'true');\n\n      // set the focus into the submenu, except on iOS where it is resulting in\n      // undesired scrolling behavior when the player is in an iframe\n      if (IS_IOS && isInFrame()) {\n        // Return early so that the menu isn't focused\n        return;\n      }\n      this.menu.focus();\n    }\n  }\n\n  /**\n   * Take the current `MenuButton` out of a pressed state.\n   */\n  unpressButton() {\n    if (this.enabled_) {\n      this.buttonPressed_ = false;\n      this.menu.unlockShowing();\n      this.menu.hide();\n      this.menuButton_.el_.setAttribute('aria-expanded', 'false');\n    }\n  }\n\n  /**\n   * Disable the `MenuButton`. Don't allow it to be clicked.\n   */\n  disable() {\n    this.unpressButton();\n    this.enabled_ = false;\n    this.addClass('vjs-disabled');\n    this.menuButton_.disable();\n  }\n\n  /**\n   * Enable the `MenuButton`. Allow it to be clicked.\n   */\n  enable() {\n    this.enabled_ = true;\n    this.removeClass('vjs-disabled');\n    this.menuButton_.enable();\n  }\n}\nComponent$1.registerComponent('MenuButton', MenuButton);\n\n/**\n * @file track-button.js\n */\n\n/**\n * The base class for buttons that toggle specific  track types (e.g. subtitles).\n *\n * @extends MenuButton\n */\nclass TrackButton extends MenuButton {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('./player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  constructor(player, options) {\n    const tracks = options.tracks;\n    super(player, options);\n    if (this.items.length <= 1) {\n      this.hide();\n    }\n    if (!tracks) {\n      return;\n    }\n    const updateHandler = bind_(this, this.update);\n    tracks.addEventListener('removetrack', updateHandler);\n    tracks.addEventListener('addtrack', updateHandler);\n    tracks.addEventListener('labelchange', updateHandler);\n    this.player_.on('ready', updateHandler);\n    this.player_.on('dispose', function () {\n      tracks.removeEventListener('removetrack', updateHandler);\n      tracks.removeEventListener('addtrack', updateHandler);\n      tracks.removeEventListener('labelchange', updateHandler);\n    });\n  }\n}\nComponent$1.registerComponent('TrackButton', TrackButton);\n\n/**\n * @file menu-keys.js\n */\n\n/**\n  * All keys used for operation of a menu (`MenuButton`, `Menu`, and `MenuItem`)\n  * Note that 'Enter' and 'Space' are not included here (otherwise they would\n  * prevent the `MenuButton` and `MenuItem` from being keyboard-clickable)\n *\n  * @typedef MenuKeys\n  * @array\n  */\nconst MenuKeys = ['Tab', 'Esc', 'Up', 'Down', 'Right', 'Left'];\n\n/**\n * @file menu-item.js\n */\n\n/**\n * The component for a menu item. `<li>`\n *\n * @extends ClickableComponent\n */\nclass MenuItem extends ClickableComponent {\n  /**\n   * Creates an instance of the this class.\n   *\n   * @param { import('../player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options={}]\n   *        The key/value store of player options.\n   *\n   */\n  constructor(player, options) {\n    super(player, options);\n    this.selectable = options.selectable;\n    this.isSelected_ = options.selected || false;\n    this.multiSelectable = options.multiSelectable;\n    this.selected(this.isSelected_);\n    if (this.selectable) {\n      if (this.multiSelectable) {\n        this.el_.setAttribute('role', 'menuitemcheckbox');\n      } else {\n        this.el_.setAttribute('role', 'menuitemradio');\n      }\n    } else {\n      this.el_.setAttribute('role', 'menuitem');\n    }\n  }\n\n  /**\n   * Create the `MenuItem's DOM element\n   *\n   * @param {string} [type=li]\n   *        Element's node type, not actually used, always set to `li`.\n   *\n   * @param {Object} [props={}]\n   *        An object of properties that should be set on the element\n   *\n   * @param {Object} [attrs={}]\n   *        An object of attributes that should be set on the element\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n  createEl(type, props, attrs) {\n    // The control is textual, not just an icon\n    this.nonIconControl = true;\n    const el = super.createEl('li', Object.assign({\n      className: 'vjs-menu-item',\n      tabIndex: -1\n    }, props), attrs);\n\n    // swap icon with menu item text.\n    const menuItemEl = createEl('span', {\n      className: 'vjs-menu-item-text',\n      textContent: this.localize(this.options_.label)\n    });\n\n    // If using SVG icons, the element with vjs-icon-placeholder will be added separately.\n    if (this.player_.options_.experimentalSvgIcons) {\n      el.appendChild(menuItemEl);\n    } else {\n      el.replaceChild(menuItemEl, el.querySelector('.vjs-icon-placeholder'));\n    }\n    return el;\n  }\n\n  /**\n   * Ignore keys which are used by the menu, but pass any other ones up. See\n   * {@link ClickableComponent#handleKeyDown} for instances where this is called.\n   *\n   * @param {KeyboardEvent} event\n   *        The `keydown` event that caused this function to be called.\n   *\n   * @listens keydown\n   */\n  handleKeyDown(event) {\n    if (!MenuKeys.some(key => keycode.isEventKey(event, key))) {\n      // Pass keydown handling up for unused keys\n      super.handleKeyDown(event);\n    }\n  }\n\n  /**\n   * Any click on a `MenuItem` puts it into the selected state.\n   * See {@link ClickableComponent#handleClick} for instances where this is called.\n   *\n   * @param {Event} event\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n  handleClick(event) {\n    this.selected(true);\n  }\n\n  /**\n   * Set the state for this menu item as selected or not.\n   *\n   * @param {boolean} selected\n   *        if the menu item is selected or not\n   */\n  selected(selected) {\n    if (this.selectable) {\n      if (selected) {\n        this.addClass('vjs-selected');\n        this.el_.setAttribute('aria-checked', 'true');\n        // aria-checked isn't fully supported by browsers/screen readers,\n        // so indicate selected state to screen reader in the control text.\n        this.controlText(', selected');\n        this.isSelected_ = true;\n      } else {\n        this.removeClass('vjs-selected');\n        this.el_.setAttribute('aria-checked', 'false');\n        // Indicate un-selected state to screen reader\n        this.controlText('');\n        this.isSelected_ = false;\n      }\n    }\n  }\n}\nComponent$1.registerComponent('MenuItem', MenuItem);\n\n/**\n * @file text-track-menu-item.js\n */\n\n/**\n * The specific menu item type for selecting a language within a text track kind\n *\n * @extends MenuItem\n */\nclass TextTrackMenuItem extends MenuItem {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('../../player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  constructor(player, options) {\n    const track = options.track;\n    const tracks = player.textTracks();\n\n    // Modify options for parent MenuItem class's init.\n    options.label = track.label || track.language || 'Unknown';\n    options.selected = track.mode === 'showing';\n    super(player, options);\n    this.track = track;\n    // Determine the relevant kind(s) of tracks for this component and filter\n    // out empty kinds.\n    this.kinds = (options.kinds || [options.kind || this.track.kind]).filter(Boolean);\n    const changeHandler = (...args) => {\n      this.handleTracksChange.apply(this, args);\n    };\n    const selectedLanguageChangeHandler = (...args) => {\n      this.handleSelectedLanguageChange.apply(this, args);\n    };\n    player.on(['loadstart', 'texttrackchange'], changeHandler);\n    tracks.addEventListener('change', changeHandler);\n    tracks.addEventListener('selectedlanguagechange', selectedLanguageChangeHandler);\n    this.on('dispose', function () {\n      player.off(['loadstart', 'texttrackchange'], changeHandler);\n      tracks.removeEventListener('change', changeHandler);\n      tracks.removeEventListener('selectedlanguagechange', selectedLanguageChangeHandler);\n    });\n\n    // iOS7 doesn't dispatch change events to TextTrackLists when an\n    // associated track's mode changes. Without something like\n    // Object.observe() (also not present on iOS7), it's not\n    // possible to detect changes to the mode attribute and polyfill\n    // the change event. As a poor substitute, we manually dispatch\n    // change events whenever the controls modify the mode.\n    if (tracks.onchange === undefined) {\n      let event;\n      this.on(['tap', 'click'], function () {\n        if (typeof window$1.Event !== 'object') {\n          // Android 2.3 throws an Illegal Constructor error for window.Event\n          try {\n            event = new window$1.Event('change');\n          } catch (err) {\n            // continue regardless of error\n          }\n        }\n        if (!event) {\n          event = document.createEvent('Event');\n          event.initEvent('change', true, true);\n        }\n        tracks.dispatchEvent(event);\n      });\n    }\n\n    // set the default state based on current tracks\n    this.handleTracksChange();\n  }\n\n  /**\n   * This gets called when an `TextTrackMenuItem` is \"clicked\". See\n   * {@link ClickableComponent} for more detailed information on what a click can be.\n   *\n   * @param {Event} event\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n  handleClick(event) {\n    const referenceTrack = this.track;\n    const tracks = this.player_.textTracks();\n    super.handleClick(event);\n    if (!tracks) {\n      return;\n    }\n    for (let i = 0; i < tracks.length; i++) {\n      const track = tracks[i];\n\n      // If the track from the text tracks list is not of the right kind,\n      // skip it. We do not want to affect tracks of incompatible kind(s).\n      if (this.kinds.indexOf(track.kind) === -1) {\n        continue;\n      }\n\n      // If this text track is the component's track and it is not showing,\n      // set it to showing.\n      if (track === referenceTrack) {\n        if (track.mode !== 'showing') {\n          track.mode = 'showing';\n        }\n\n        // If this text track is not the component's track and it is not\n        // disabled, set it to disabled.\n      } else if (track.mode !== 'disabled') {\n        track.mode = 'disabled';\n      }\n    }\n  }\n\n  /**\n   * Handle text track list change\n   *\n   * @param {Event} event\n   *        The `change` event that caused this function to be called.\n   *\n   * @listens TextTrackList#change\n   */\n  handleTracksChange(event) {\n    const shouldBeSelected = this.track.mode === 'showing';\n\n    // Prevent redundant selected() calls because they may cause\n    // screen readers to read the appended control text unnecessarily\n    if (shouldBeSelected !== this.isSelected_) {\n      this.selected(shouldBeSelected);\n    }\n  }\n  handleSelectedLanguageChange(event) {\n    if (this.track.mode === 'showing') {\n      const selectedLanguage = this.player_.cache_.selectedLanguage;\n\n      // Don't replace the kind of track across the same language\n      if (selectedLanguage && selectedLanguage.enabled && selectedLanguage.language === this.track.language && selectedLanguage.kind !== this.track.kind) {\n        return;\n      }\n      this.player_.cache_.selectedLanguage = {\n        enabled: true,\n        language: this.track.language,\n        kind: this.track.kind\n      };\n    }\n  }\n  dispose() {\n    // remove reference to track object on dispose\n    this.track = null;\n    super.dispose();\n  }\n}\nComponent$1.registerComponent('TextTrackMenuItem', TextTrackMenuItem);\n\n/**\n * @file off-text-track-menu-item.js\n */\n\n/**\n * A special menu item for turning off a specific type of text track\n *\n * @extends TextTrackMenuItem\n */\nclass OffTextTrackMenuItem extends TextTrackMenuItem {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('../../player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  constructor(player, options) {\n    // Create pseudo track info\n    // Requires options['kind']\n    options.track = {\n      player,\n      // it is no longer necessary to store `kind` or `kinds` on the track itself\n      // since they are now stored in the `kinds` property of all instances of\n      // TextTrackMenuItem, but this will remain for backwards compatibility\n      kind: options.kind,\n      kinds: options.kinds,\n      default: false,\n      mode: 'disabled'\n    };\n    if (!options.kinds) {\n      options.kinds = [options.kind];\n    }\n    if (options.label) {\n      options.track.label = options.label;\n    } else {\n      options.track.label = options.kinds.join(' and ') + ' off';\n    }\n\n    // MenuItem is selectable\n    options.selectable = true;\n    // MenuItem is NOT multiSelectable (i.e. only one can be marked \"selected\" at a time)\n    options.multiSelectable = false;\n    super(player, options);\n  }\n\n  /**\n   * Handle text track change\n   *\n   * @param {Event} event\n   *        The event that caused this function to run\n   */\n  handleTracksChange(event) {\n    const tracks = this.player().textTracks();\n    let shouldBeSelected = true;\n    for (let i = 0, l = tracks.length; i < l; i++) {\n      const track = tracks[i];\n      if (this.options_.kinds.indexOf(track.kind) > -1 && track.mode === 'showing') {\n        shouldBeSelected = false;\n        break;\n      }\n    }\n\n    // Prevent redundant selected() calls because they may cause\n    // screen readers to read the appended control text unnecessarily\n    if (shouldBeSelected !== this.isSelected_) {\n      this.selected(shouldBeSelected);\n    }\n  }\n  handleSelectedLanguageChange(event) {\n    const tracks = this.player().textTracks();\n    let allHidden = true;\n    for (let i = 0, l = tracks.length; i < l; i++) {\n      const track = tracks[i];\n      if (['captions', 'descriptions', 'subtitles'].indexOf(track.kind) > -1 && track.mode === 'showing') {\n        allHidden = false;\n        break;\n      }\n    }\n    if (allHidden) {\n      this.player_.cache_.selectedLanguage = {\n        enabled: false\n      };\n    }\n  }\n\n  /**\n   * Update control text and label on languagechange\n   */\n  handleLanguagechange() {\n    this.$('.vjs-menu-item-text').textContent = this.player_.localize(this.options_.label);\n    super.handleLanguagechange();\n  }\n}\nComponent$1.registerComponent('OffTextTrackMenuItem', OffTextTrackMenuItem);\n\n/**\n * @file text-track-button.js\n */\n\n/**\n * The base class for buttons that toggle specific text track types (e.g. subtitles)\n *\n * @extends MenuButton\n */\nclass TextTrackButton extends TrackButton {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('../../player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options={}]\n   *        The key/value store of player options.\n   */\n  constructor(player, options = {}) {\n    options.tracks = player.textTracks();\n    super(player, options);\n  }\n\n  /**\n   * Create a menu item for each text track\n   *\n   * @param {TextTrackMenuItem[]} [items=[]]\n   *        Existing array of items to use during creation\n   *\n   * @return {TextTrackMenuItem[]}\n   *         Array of menu items that were created\n   */\n  createItems(items = [], TrackMenuItem = TextTrackMenuItem) {\n    // Label is an override for the [track] off label\n    // USed to localise captions/subtitles\n    let label;\n    if (this.label_) {\n      label = `${this.label_} off`;\n    }\n    // Add an OFF menu item to turn all tracks off\n    items.push(new OffTextTrackMenuItem(this.player_, {\n      kinds: this.kinds_,\n      kind: this.kind_,\n      label\n    }));\n    this.hideThreshold_ += 1;\n    const tracks = this.player_.textTracks();\n    if (!Array.isArray(this.kinds_)) {\n      this.kinds_ = [this.kind_];\n    }\n    for (let i = 0; i < tracks.length; i++) {\n      const track = tracks[i];\n\n      // only add tracks that are of an appropriate kind and have a label\n      if (this.kinds_.indexOf(track.kind) > -1) {\n        const item = new TrackMenuItem(this.player_, {\n          track,\n          kinds: this.kinds_,\n          kind: this.kind_,\n          // MenuItem is selectable\n          selectable: true,\n          // MenuItem is NOT multiSelectable (i.e. only one can be marked \"selected\" at a time)\n          multiSelectable: false\n        });\n        item.addClass(`vjs-${track.kind}-menu-item`);\n        items.push(item);\n      }\n    }\n    return items;\n  }\n}\nComponent$1.registerComponent('TextTrackButton', TextTrackButton);\n\n/**\n * @file chapters-track-menu-item.js\n */\n\n/**\n * The chapter track menu item\n *\n * @extends MenuItem\n */\nclass ChaptersTrackMenuItem extends MenuItem {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('../../player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  constructor(player, options) {\n    const track = options.track;\n    const cue = options.cue;\n    const currentTime = player.currentTime();\n\n    // Modify options for parent MenuItem class's init.\n    options.selectable = true;\n    options.multiSelectable = false;\n    options.label = cue.text;\n    options.selected = cue.startTime <= currentTime && currentTime < cue.endTime;\n    super(player, options);\n    this.track = track;\n    this.cue = cue;\n  }\n\n  /**\n   * This gets called when an `ChaptersTrackMenuItem` is \"clicked\". See\n   * {@link ClickableComponent} for more detailed information on what a click can be.\n   *\n   * @param {Event} [event]\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n  handleClick(event) {\n    super.handleClick();\n    this.player_.currentTime(this.cue.startTime);\n  }\n}\nComponent$1.registerComponent('ChaptersTrackMenuItem', ChaptersTrackMenuItem);\n\n/**\n * @file chapters-button.js\n */\n\n/**\n * The button component for toggling and selecting chapters\n * Chapters act much differently than other text tracks\n * Cues are navigation vs. other tracks of alternative languages\n *\n * @extends TextTrackButton\n */\nclass ChaptersButton extends TextTrackButton {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('../../player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Function} [ready]\n   *        The function to call when this function is ready.\n   */\n  constructor(player, options, ready) {\n    super(player, options, ready);\n    this.setIcon('chapters');\n    this.selectCurrentItem_ = () => {\n      this.items.forEach(item => {\n        item.selected(this.track_.activeCues[0] === item.cue);\n      });\n    };\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n  buildCSSClass() {\n    return `vjs-chapters-button ${super.buildCSSClass()}`;\n  }\n  buildWrapperCSSClass() {\n    return `vjs-chapters-button ${super.buildWrapperCSSClass()}`;\n  }\n\n  /**\n   * Update the menu based on the current state of its items.\n   *\n   * @param {Event} [event]\n   *        An event that triggered this function to run.\n   *\n   * @listens TextTrackList#addtrack\n   * @listens TextTrackList#removetrack\n   * @listens TextTrackList#change\n   */\n  update(event) {\n    if (event && event.track && event.track.kind !== 'chapters') {\n      return;\n    }\n    const track = this.findChaptersTrack();\n    if (track !== this.track_) {\n      this.setTrack(track);\n      super.update();\n    } else if (!this.items || track && track.cues && track.cues.length !== this.items.length) {\n      // Update the menu initially or if the number of cues has changed since set\n      super.update();\n    }\n  }\n\n  /**\n   * Set the currently selected track for the chapters button.\n   *\n   * @param {TextTrack} track\n   *        The new track to select. Nothing will change if this is the currently selected\n   *        track.\n   */\n  setTrack(track) {\n    if (this.track_ === track) {\n      return;\n    }\n    if (!this.updateHandler_) {\n      this.updateHandler_ = this.update.bind(this);\n    }\n\n    // here this.track_ refers to the old track instance\n    if (this.track_) {\n      const remoteTextTrackEl = this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);\n      if (remoteTextTrackEl) {\n        remoteTextTrackEl.removeEventListener('load', this.updateHandler_);\n      }\n      this.track_.removeEventListener('cuechange', this.selectCurrentItem_);\n      this.track_ = null;\n    }\n    this.track_ = track;\n\n    // here this.track_ refers to the new track instance\n    if (this.track_) {\n      this.track_.mode = 'hidden';\n      const remoteTextTrackEl = this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);\n      if (remoteTextTrackEl) {\n        remoteTextTrackEl.addEventListener('load', this.updateHandler_);\n      }\n      this.track_.addEventListener('cuechange', this.selectCurrentItem_);\n    }\n  }\n\n  /**\n   * Find the track object that is currently in use by this ChaptersButton\n   *\n   * @return {TextTrack|undefined}\n   *         The current track or undefined if none was found.\n   */\n  findChaptersTrack() {\n    const tracks = this.player_.textTracks() || [];\n    for (let i = tracks.length - 1; i >= 0; i--) {\n      // We will always choose the last track as our chaptersTrack\n      const track = tracks[i];\n      if (track.kind === this.kind_) {\n        return track;\n      }\n    }\n  }\n\n  /**\n   * Get the caption for the ChaptersButton based on the track label. This will also\n   * use the current tracks localized kind as a fallback if a label does not exist.\n   *\n   * @return {string}\n   *         The tracks current label or the localized track kind.\n   */\n  getMenuCaption() {\n    if (this.track_ && this.track_.label) {\n      return this.track_.label;\n    }\n    return this.localize(toTitleCase$1(this.kind_));\n  }\n\n  /**\n   * Create menu from chapter track\n   *\n   * @return { import('../../menu/menu').default }\n   *         New menu for the chapter buttons\n   */\n  createMenu() {\n    this.options_.title = this.getMenuCaption();\n    return super.createMenu();\n  }\n\n  /**\n   * Create a menu item for each text track\n   *\n   * @return  { import('./text-track-menu-item').default[] }\n   *         Array of menu items\n   */\n  createItems() {\n    const items = [];\n    if (!this.track_) {\n      return items;\n    }\n    const cues = this.track_.cues;\n    if (!cues) {\n      return items;\n    }\n    for (let i = 0, l = cues.length; i < l; i++) {\n      const cue = cues[i];\n      const mi = new ChaptersTrackMenuItem(this.player_, {\n        track: this.track_,\n        cue\n      });\n      items.push(mi);\n    }\n    return items;\n  }\n}\n\n/**\n * `kind` of TextTrack to look for to associate it with this menu.\n *\n * @type {string}\n * @private\n */\nChaptersButton.prototype.kind_ = 'chapters';\n\n/**\n * The text that should display over the `ChaptersButton`s controls. Added for localization.\n *\n * @type {string}\n * @protected\n */\nChaptersButton.prototype.controlText_ = 'Chapters';\nComponent$1.registerComponent('ChaptersButton', ChaptersButton);\n\n/**\n * @file descriptions-button.js\n */\n\n/**\n * The button component for toggling and selecting descriptions\n *\n * @extends TextTrackButton\n */\nclass DescriptionsButton extends TextTrackButton {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('../../player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Function} [ready]\n   *        The function to call when this component is ready.\n   */\n  constructor(player, options, ready) {\n    super(player, options, ready);\n    this.setIcon('audio-description');\n    const tracks = player.textTracks();\n    const changeHandler = bind_(this, this.handleTracksChange);\n    tracks.addEventListener('change', changeHandler);\n    this.on('dispose', function () {\n      tracks.removeEventListener('change', changeHandler);\n    });\n  }\n\n  /**\n   * Handle text track change\n   *\n   * @param {Event} event\n   *        The event that caused this function to run\n   *\n   * @listens TextTrackList#change\n   */\n  handleTracksChange(event) {\n    const tracks = this.player().textTracks();\n    let disabled = false;\n\n    // Check whether a track of a different kind is showing\n    for (let i = 0, l = tracks.length; i < l; i++) {\n      const track = tracks[i];\n      if (track.kind !== this.kind_ && track.mode === 'showing') {\n        disabled = true;\n        break;\n      }\n    }\n\n    // If another track is showing, disable this menu button\n    if (disabled) {\n      this.disable();\n    } else {\n      this.enable();\n    }\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n  buildCSSClass() {\n    return `vjs-descriptions-button ${super.buildCSSClass()}`;\n  }\n  buildWrapperCSSClass() {\n    return `vjs-descriptions-button ${super.buildWrapperCSSClass()}`;\n  }\n}\n\n/**\n * `kind` of TextTrack to look for to associate it with this menu.\n *\n * @type {string}\n * @private\n */\nDescriptionsButton.prototype.kind_ = 'descriptions';\n\n/**\n * The text that should display over the `DescriptionsButton`s controls. Added for localization.\n *\n * @type {string}\n * @protected\n */\nDescriptionsButton.prototype.controlText_ = 'Descriptions';\nComponent$1.registerComponent('DescriptionsButton', DescriptionsButton);\n\n/**\n * @file subtitles-button.js\n */\n\n/**\n * The button component for toggling and selecting subtitles\n *\n * @extends TextTrackButton\n */\nclass SubtitlesButton extends TextTrackButton {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('../../player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Function} [ready]\n   *        The function to call when this component is ready.\n   */\n  constructor(player, options, ready) {\n    super(player, options, ready);\n    this.setIcon('subtitles');\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n  buildCSSClass() {\n    return `vjs-subtitles-button ${super.buildCSSClass()}`;\n  }\n  buildWrapperCSSClass() {\n    return `vjs-subtitles-button ${super.buildWrapperCSSClass()}`;\n  }\n}\n\n/**\n * `kind` of TextTrack to look for to associate it with this menu.\n *\n * @type {string}\n * @private\n */\nSubtitlesButton.prototype.kind_ = 'subtitles';\n\n/**\n * The text that should display over the `SubtitlesButton`s controls. Added for localization.\n *\n * @type {string}\n * @protected\n */\nSubtitlesButton.prototype.controlText_ = 'Subtitles';\nComponent$1.registerComponent('SubtitlesButton', SubtitlesButton);\n\n/**\n * @file caption-settings-menu-item.js\n */\n\n/**\n * The menu item for caption track settings menu\n *\n * @extends TextTrackMenuItem\n */\nclass CaptionSettingsMenuItem extends TextTrackMenuItem {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('../../player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  constructor(player, options) {\n    options.track = {\n      player,\n      kind: options.kind,\n      label: options.kind + ' settings',\n      selectable: false,\n      default: false,\n      mode: 'disabled'\n    };\n\n    // CaptionSettingsMenuItem has no concept of 'selected'\n    options.selectable = false;\n    options.name = 'CaptionSettingsMenuItem';\n    super(player, options);\n    this.addClass('vjs-texttrack-settings');\n    this.controlText(', opens ' + options.kind + ' settings dialog');\n  }\n\n  /**\n   * This gets called when an `CaptionSettingsMenuItem` is \"clicked\". See\n   * {@link ClickableComponent} for more detailed information on what a click can be.\n   *\n   * @param {Event} [event]\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n  handleClick(event) {\n    this.player().getChild('textTrackSettings').open();\n  }\n\n  /**\n   * Update control text and label on languagechange\n   */\n  handleLanguagechange() {\n    this.$('.vjs-menu-item-text').textContent = this.player_.localize(this.options_.kind + ' settings');\n    super.handleLanguagechange();\n  }\n}\nComponent$1.registerComponent('CaptionSettingsMenuItem', CaptionSettingsMenuItem);\n\n/**\n * @file captions-button.js\n */\n\n/**\n * The button component for toggling and selecting captions\n *\n * @extends TextTrackButton\n */\nclass CaptionsButton extends TextTrackButton {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('../../player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Function} [ready]\n   *        The function to call when this component is ready.\n   */\n  constructor(player, options, ready) {\n    super(player, options, ready);\n    this.setIcon('captions');\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n  buildCSSClass() {\n    return `vjs-captions-button ${super.buildCSSClass()}`;\n  }\n  buildWrapperCSSClass() {\n    return `vjs-captions-button ${super.buildWrapperCSSClass()}`;\n  }\n\n  /**\n   * Create caption menu items\n   *\n   * @return {CaptionSettingsMenuItem[]}\n   *         The array of current menu items.\n   */\n  createItems() {\n    const items = [];\n    if (!(this.player().tech_ && this.player().tech_.featuresNativeTextTracks) && this.player().getChild('textTrackSettings')) {\n      items.push(new CaptionSettingsMenuItem(this.player_, {\n        kind: this.kind_\n      }));\n      this.hideThreshold_ += 1;\n    }\n    return super.createItems(items);\n  }\n}\n\n/**\n * `kind` of TextTrack to look for to associate it with this menu.\n *\n * @type {string}\n * @private\n */\nCaptionsButton.prototype.kind_ = 'captions';\n\n/**\n * The text that should display over the `CaptionsButton`s controls. Added for localization.\n *\n * @type {string}\n * @protected\n */\nCaptionsButton.prototype.controlText_ = 'Captions';\nComponent$1.registerComponent('CaptionsButton', CaptionsButton);\n\n/**\n * @file subs-caps-menu-item.js\n */\n\n/**\n * SubsCapsMenuItem has an [cc] icon to distinguish captions from subtitles\n * in the SubsCapsMenu.\n *\n * @extends TextTrackMenuItem\n */\nclass SubsCapsMenuItem extends TextTrackMenuItem {\n  createEl(type, props, attrs) {\n    const el = super.createEl(type, props, attrs);\n    const parentSpan = el.querySelector('.vjs-menu-item-text');\n    if (this.options_.track.kind === 'captions') {\n      if (this.player_.options_.experimentalSvgIcons) {\n        this.setIcon('captions', el);\n      } else {\n        parentSpan.appendChild(createEl('span', {\n          className: 'vjs-icon-placeholder'\n        }, {\n          'aria-hidden': true\n        }));\n      }\n      parentSpan.appendChild(createEl('span', {\n        className: 'vjs-control-text',\n        // space added as the text will visually flow with the\n        // label\n        textContent: ` ${this.localize('Captions')}`\n      }));\n    }\n    return el;\n  }\n}\nComponent$1.registerComponent('SubsCapsMenuItem', SubsCapsMenuItem);\n\n/**\n * @file sub-caps-button.js\n */\n\n/**\n * The button component for toggling and selecting captions and/or subtitles\n *\n * @extends TextTrackButton\n */\nclass SubsCapsButton extends TextTrackButton {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('../../player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Function} [ready]\n   *        The function to call when this component is ready.\n   */\n  constructor(player, options = {}) {\n    super(player, options);\n\n    // Although North America uses \"captions\" in most cases for\n    // \"captions and subtitles\" other locales use \"subtitles\"\n    this.label_ = 'subtitles';\n    this.setIcon('subtitles');\n    if (['en', 'en-us', 'en-ca', 'fr-ca'].indexOf(this.player_.language_) > -1) {\n      this.label_ = 'captions';\n      this.setIcon('captions');\n    }\n    this.menuButton_.controlText(toTitleCase$1(this.label_));\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n  buildCSSClass() {\n    return `vjs-subs-caps-button ${super.buildCSSClass()}`;\n  }\n  buildWrapperCSSClass() {\n    return `vjs-subs-caps-button ${super.buildWrapperCSSClass()}`;\n  }\n\n  /**\n   * Create caption/subtitles menu items\n   *\n   * @return {CaptionSettingsMenuItem[]}\n   *         The array of current menu items.\n   */\n  createItems() {\n    let items = [];\n    if (!(this.player().tech_ && this.player().tech_.featuresNativeTextTracks) && this.player().getChild('textTrackSettings')) {\n      items.push(new CaptionSettingsMenuItem(this.player_, {\n        kind: this.label_\n      }));\n      this.hideThreshold_ += 1;\n    }\n    items = super.createItems(items, SubsCapsMenuItem);\n    return items;\n  }\n}\n\n/**\n * `kind`s of TextTrack to look for to associate it with this menu.\n *\n * @type {array}\n * @private\n */\nSubsCapsButton.prototype.kinds_ = ['captions', 'subtitles'];\n\n/**\n * The text that should display over the `SubsCapsButton`s controls.\n *\n *\n * @type {string}\n * @protected\n */\nSubsCapsButton.prototype.controlText_ = 'Subtitles';\nComponent$1.registerComponent('SubsCapsButton', SubsCapsButton);\n\n/**\n * @file audio-track-menu-item.js\n */\n\n/**\n * An {@link AudioTrack} {@link MenuItem}\n *\n * @extends MenuItem\n */\nclass AudioTrackMenuItem extends MenuItem {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('../../player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  constructor(player, options) {\n    const track = options.track;\n    const tracks = player.audioTracks();\n\n    // Modify options for parent MenuItem class's init.\n    options.label = track.label || track.language || 'Unknown';\n    options.selected = track.enabled;\n    super(player, options);\n    this.track = track;\n    this.addClass(`vjs-${track.kind}-menu-item`);\n    const changeHandler = (...args) => {\n      this.handleTracksChange.apply(this, args);\n    };\n    tracks.addEventListener('change', changeHandler);\n    this.on('dispose', () => {\n      tracks.removeEventListener('change', changeHandler);\n    });\n  }\n  createEl(type, props, attrs) {\n    const el = super.createEl(type, props, attrs);\n    const parentSpan = el.querySelector('.vjs-menu-item-text');\n    if (['main-desc', 'description'].indexOf(this.options_.track.kind) >= 0) {\n      parentSpan.appendChild(createEl('span', {\n        className: 'vjs-icon-placeholder'\n      }, {\n        'aria-hidden': true\n      }));\n      parentSpan.appendChild(createEl('span', {\n        className: 'vjs-control-text',\n        textContent: ' ' + this.localize('Descriptions')\n      }));\n    }\n    return el;\n  }\n\n  /**\n   * This gets called when an `AudioTrackMenuItem is \"clicked\". See {@link ClickableComponent}\n   * for more detailed information on what a click can be.\n   *\n   * @param {Event} [event]\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n  handleClick(event) {\n    super.handleClick(event);\n\n    // the audio track list will automatically toggle other tracks\n    // off for us.\n    this.track.enabled = true;\n\n    // when native audio tracks are used, we want to make sure that other tracks are turned off\n    if (this.player_.tech_.featuresNativeAudioTracks) {\n      const tracks = this.player_.audioTracks();\n      for (let i = 0; i < tracks.length; i++) {\n        const track = tracks[i];\n\n        // skip the current track since we enabled it above\n        if (track === this.track) {\n          continue;\n        }\n        track.enabled = track === this.track;\n      }\n    }\n  }\n\n  /**\n   * Handle any {@link AudioTrack} change.\n   *\n   * @param {Event} [event]\n   *        The {@link AudioTrackList#change} event that caused this to run.\n   *\n   * @listens AudioTrackList#change\n   */\n  handleTracksChange(event) {\n    this.selected(this.track.enabled);\n  }\n}\nComponent$1.registerComponent('AudioTrackMenuItem', AudioTrackMenuItem);\n\n/**\n * @file audio-track-button.js\n */\n\n/**\n * The base class for buttons that toggle specific {@link AudioTrack} types.\n *\n * @extends TrackButton\n */\nclass AudioTrackButton extends TrackButton {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options={}]\n   *        The key/value store of player options.\n   */\n  constructor(player, options = {}) {\n    options.tracks = player.audioTracks();\n    super(player, options);\n    this.setIcon('audio');\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n  buildCSSClass() {\n    return `vjs-audio-button ${super.buildCSSClass()}`;\n  }\n  buildWrapperCSSClass() {\n    return `vjs-audio-button ${super.buildWrapperCSSClass()}`;\n  }\n\n  /**\n   * Create a menu item for each audio track\n   *\n   * @param {AudioTrackMenuItem[]} [items=[]]\n   *        An array of existing menu items to use.\n   *\n   * @return {AudioTrackMenuItem[]}\n   *         An array of menu items\n   */\n  createItems(items = []) {\n    // if there's only one audio track, there no point in showing it\n    this.hideThreshold_ = 1;\n    const tracks = this.player_.audioTracks();\n    for (let i = 0; i < tracks.length; i++) {\n      const track = tracks[i];\n      items.push(new AudioTrackMenuItem(this.player_, {\n        track,\n        // MenuItem is selectable\n        selectable: true,\n        // MenuItem is NOT multiSelectable (i.e. only one can be marked \"selected\" at a time)\n        multiSelectable: false\n      }));\n    }\n    return items;\n  }\n}\n\n/**\n * The text that should display over the `AudioTrackButton`s controls. Added for localization.\n *\n * @type {string}\n * @protected\n */\nAudioTrackButton.prototype.controlText_ = 'Audio Track';\nComponent$1.registerComponent('AudioTrackButton', AudioTrackButton);\n\n/**\n * @file playback-rate-menu-item.js\n */\n\n/**\n * The specific menu item type for selecting a playback rate.\n *\n * @extends MenuItem\n */\nclass PlaybackRateMenuItem extends MenuItem {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('../../player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  constructor(player, options) {\n    const label = options.rate;\n    const rate = parseFloat(label, 10);\n\n    // Modify options for parent MenuItem class's init.\n    options.label = label;\n    options.selected = rate === player.playbackRate();\n    options.selectable = true;\n    options.multiSelectable = false;\n    super(player, options);\n    this.label = label;\n    this.rate = rate;\n    this.on(player, 'ratechange', e => this.update(e));\n  }\n\n  /**\n   * This gets called when an `PlaybackRateMenuItem` is \"clicked\". See\n   * {@link ClickableComponent} for more detailed information on what a click can be.\n   *\n   * @param {Event} [event]\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n  handleClick(event) {\n    super.handleClick();\n    this.player().playbackRate(this.rate);\n  }\n\n  /**\n   * Update the PlaybackRateMenuItem when the playbackrate changes.\n   *\n   * @param {Event} [event]\n   *        The `ratechange` event that caused this function to run.\n   *\n   * @listens Player#ratechange\n   */\n  update(event) {\n    this.selected(this.player().playbackRate() === this.rate);\n  }\n}\n\n/**\n * The text that should display over the `PlaybackRateMenuItem`s controls. Added for localization.\n *\n * @type {string}\n * @private\n */\nPlaybackRateMenuItem.prototype.contentElType = 'button';\nComponent$1.registerComponent('PlaybackRateMenuItem', PlaybackRateMenuItem);\n\n/**\n * @file playback-rate-menu-button.js\n */\n\n/**\n * The component for controlling the playback rate.\n *\n * @extends MenuButton\n */\nclass PlaybackRateMenuButton extends MenuButton {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('../../player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  constructor(player, options) {\n    super(player, options);\n    this.menuButton_.el_.setAttribute('aria-describedby', this.labelElId_);\n    this.updateVisibility();\n    this.updateLabel();\n    this.on(player, 'loadstart', e => this.updateVisibility(e));\n    this.on(player, 'ratechange', e => this.updateLabel(e));\n    this.on(player, 'playbackrateschange', e => this.handlePlaybackRateschange(e));\n  }\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  createEl() {\n    const el = super.createEl();\n    this.labelElId_ = 'vjs-playback-rate-value-label-' + this.id_;\n    this.labelEl_ = createEl('div', {\n      className: 'vjs-playback-rate-value',\n      id: this.labelElId_,\n      textContent: '1x'\n    });\n    el.appendChild(this.labelEl_);\n    return el;\n  }\n  dispose() {\n    this.labelEl_ = null;\n    super.dispose();\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n  buildCSSClass() {\n    return `vjs-playback-rate ${super.buildCSSClass()}`;\n  }\n  buildWrapperCSSClass() {\n    return `vjs-playback-rate ${super.buildWrapperCSSClass()}`;\n  }\n\n  /**\n   * Create the list of menu items. Specific to each subclass.\n   *\n   */\n  createItems() {\n    const rates = this.playbackRates();\n    const items = [];\n    for (let i = rates.length - 1; i >= 0; i--) {\n      items.push(new PlaybackRateMenuItem(this.player(), {\n        rate: rates[i] + 'x'\n      }));\n    }\n    return items;\n  }\n\n  /**\n   * On playbackrateschange, update the menu to account for the new items.\n   *\n   * @listens Player#playbackrateschange\n   */\n  handlePlaybackRateschange(event) {\n    this.update();\n  }\n\n  /**\n   * Get possible playback rates\n   *\n   * @return {Array}\n   *         All possible playback rates\n   */\n  playbackRates() {\n    const player = this.player();\n    return player.playbackRates && player.playbackRates() || [];\n  }\n\n  /**\n   * Get whether playback rates is supported by the tech\n   * and an array of playback rates exists\n   *\n   * @return {boolean}\n   *         Whether changing playback rate is supported\n   */\n  playbackRateSupported() {\n    return this.player().tech_ && this.player().tech_.featuresPlaybackRate && this.playbackRates() && this.playbackRates().length > 0;\n  }\n\n  /**\n   * Hide playback rate controls when they're no playback rate options to select\n   *\n   * @param {Event} [event]\n   *        The event that caused this function to run.\n   *\n   * @listens Player#loadstart\n   */\n  updateVisibility(event) {\n    if (this.playbackRateSupported()) {\n      this.removeClass('vjs-hidden');\n    } else {\n      this.addClass('vjs-hidden');\n    }\n  }\n\n  /**\n   * Update button label when rate changed\n   *\n   * @param {Event} [event]\n   *        The event that caused this function to run.\n   *\n   * @listens Player#ratechange\n   */\n  updateLabel(event) {\n    if (this.playbackRateSupported()) {\n      this.labelEl_.textContent = this.player().playbackRate() + 'x';\n    }\n  }\n}\n\n/**\n * The text that should display over the `PlaybackRateMenuButton`s controls.\n *\n * Added for localization.\n *\n * @type {string}\n * @protected\n */\nPlaybackRateMenuButton.prototype.controlText_ = 'Playback Rate';\nComponent$1.registerComponent('PlaybackRateMenuButton', PlaybackRateMenuButton);\n\n/**\n * @file spacer.js\n */\n\n/**\n * Just an empty spacer element that can be used as an append point for plugins, etc.\n * Also can be used to create space between elements when necessary.\n *\n * @extends Component\n */\nclass Spacer extends Component$1 {\n  /**\n  * Builds the default DOM `className`.\n  *\n  * @return {string}\n  *         The DOM `className` for this object.\n  */\n  buildCSSClass() {\n    return `vjs-spacer ${super.buildCSSClass()}`;\n  }\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  createEl(tag = 'div', props = {}, attributes = {}) {\n    if (!props.className) {\n      props.className = this.buildCSSClass();\n    }\n    return super.createEl(tag, props, attributes);\n  }\n}\nComponent$1.registerComponent('Spacer', Spacer);\n\n/**\n * @file custom-control-spacer.js\n */\n\n/**\n * Spacer specifically meant to be used as an insertion point for new plugins, etc.\n *\n * @extends Spacer\n */\nclass CustomControlSpacer extends Spacer {\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n  buildCSSClass() {\n    return `vjs-custom-control-spacer ${super.buildCSSClass()}`;\n  }\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  createEl() {\n    return super.createEl('div', {\n      className: this.buildCSSClass(),\n      // No-flex/table-cell mode requires there be some content\n      // in the cell to fill the remaining space of the table.\n      textContent: '\\u00a0'\n    });\n  }\n}\nComponent$1.registerComponent('CustomControlSpacer', CustomControlSpacer);\n\n/**\n * @file control-bar.js\n */\n\n/**\n * Container of main controls.\n *\n * @extends Component\n */\nclass ControlBar extends Component$1 {\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  createEl() {\n    return super.createEl('div', {\n      className: 'vjs-control-bar',\n      dir: 'ltr'\n    });\n  }\n}\n\n/**\n * Default options for `ControlBar`\n *\n * @type {Object}\n * @private\n */\nControlBar.prototype.options_ = {\n  children: ['playToggle', 'skipBackward', 'skipForward', 'volumePanel', 'currentTimeDisplay', 'timeDivider', 'durationDisplay', 'progressControl', 'liveDisplay', 'seekToLive', 'remainingTimeDisplay', 'customControlSpacer', 'playbackRateMenuButton', 'chaptersButton', 'descriptionsButton', 'subsCapsButton', 'audioTrackButton', 'pictureInPictureToggle', 'fullscreenToggle']\n};\nComponent$1.registerComponent('ControlBar', ControlBar);\n\n/**\n * @file error-display.js\n */\n\n/**\n * A display that indicates an error has occurred. This means that the video\n * is unplayable.\n *\n * @extends ModalDialog\n */\nclass ErrorDisplay extends ModalDialog {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param  { import('./player').default } player\n   *         The `Player` that this class should be attached to.\n   *\n   * @param  {Object} [options]\n   *         The key/value store of player options.\n   */\n  constructor(player, options) {\n    super(player, options);\n    this.on(player, 'error', e => {\n      this.close();\n      this.open(e);\n    });\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   *\n   * @deprecated Since version 5.\n   */\n  buildCSSClass() {\n    return `vjs-error-display ${super.buildCSSClass()}`;\n  }\n\n  /**\n   * Gets the localized error message based on the `Player`s error.\n   *\n   * @return {string}\n   *         The `Player`s error message localized or an empty string.\n   */\n  content() {\n    const error = this.player().error();\n    return error ? this.localize(error.message) : '';\n  }\n}\n\n/**\n * The default options for an `ErrorDisplay`.\n *\n * @private\n */\nErrorDisplay.prototype.options_ = Object.assign({}, ModalDialog.prototype.options_, {\n  pauseOnOpen: false,\n  fillAlways: true,\n  temporary: false,\n  uncloseable: true\n});\nComponent$1.registerComponent('ErrorDisplay', ErrorDisplay);\n\n/**\n * @file text-track-settings.js\n */\nconst LOCAL_STORAGE_KEY$1 = 'vjs-text-track-settings';\nconst COLOR_BLACK = ['#000', 'Black'];\nconst COLOR_BLUE = ['#00F', 'Blue'];\nconst COLOR_CYAN = ['#0FF', 'Cyan'];\nconst COLOR_GREEN = ['#0F0', 'Green'];\nconst COLOR_MAGENTA = ['#F0F', 'Magenta'];\nconst COLOR_RED = ['#F00', 'Red'];\nconst COLOR_WHITE = ['#FFF', 'White'];\nconst COLOR_YELLOW = ['#FF0', 'Yellow'];\nconst OPACITY_OPAQUE = ['1', 'Opaque'];\nconst OPACITY_SEMI = ['0.5', 'Semi-Transparent'];\nconst OPACITY_TRANS = ['0', 'Transparent'];\n\n// Configuration for the various <select> elements in the DOM of this component.\n//\n// Possible keys include:\n//\n// `default`:\n//   The default option index. Only needs to be provided if not zero.\n// `parser`:\n//   A function which is used to parse the value from the selected option in\n//   a customized way.\n// `selector`:\n//   The selector used to find the associated <select> element.\nconst selectConfigs = {\n  backgroundColor: {\n    selector: '.vjs-bg-color > select',\n    id: 'captions-background-color-%s',\n    label: 'Color',\n    options: [COLOR_BLACK, COLOR_WHITE, COLOR_RED, COLOR_GREEN, COLOR_BLUE, COLOR_YELLOW, COLOR_MAGENTA, COLOR_CYAN]\n  },\n  backgroundOpacity: {\n    selector: '.vjs-bg-opacity > select',\n    id: 'captions-background-opacity-%s',\n    label: 'Opacity',\n    options: [OPACITY_OPAQUE, OPACITY_SEMI, OPACITY_TRANS]\n  },\n  color: {\n    selector: '.vjs-text-color > select',\n    id: 'captions-foreground-color-%s',\n    label: 'Color',\n    options: [COLOR_WHITE, COLOR_BLACK, COLOR_RED, COLOR_GREEN, COLOR_BLUE, COLOR_YELLOW, COLOR_MAGENTA, COLOR_CYAN]\n  },\n  edgeStyle: {\n    selector: '.vjs-edge-style > select',\n    id: '%s',\n    label: 'Text Edge Style',\n    options: [['none', 'None'], ['raised', 'Raised'], ['depressed', 'Depressed'], ['uniform', 'Uniform'], ['dropshadow', 'Drop shadow']]\n  },\n  fontFamily: {\n    selector: '.vjs-font-family > select',\n    id: 'captions-font-family-%s',\n    label: 'Font Family',\n    options: [['proportionalSansSerif', 'Proportional Sans-Serif'], ['monospaceSansSerif', 'Monospace Sans-Serif'], ['proportionalSerif', 'Proportional Serif'], ['monospaceSerif', 'Monospace Serif'], ['casual', 'Casual'], ['script', 'Script'], ['small-caps', 'Small Caps']]\n  },\n  fontPercent: {\n    selector: '.vjs-font-percent > select',\n    id: 'captions-font-size-%s',\n    label: 'Font Size',\n    options: [['0.50', '50%'], ['0.75', '75%'], ['1.00', '100%'], ['1.25', '125%'], ['1.50', '150%'], ['1.75', '175%'], ['2.00', '200%'], ['3.00', '300%'], ['4.00', '400%']],\n    default: 2,\n    parser: v => v === '1.00' ? null : Number(v)\n  },\n  textOpacity: {\n    selector: '.vjs-text-opacity > select',\n    id: 'captions-foreground-opacity-%s',\n    label: 'Opacity',\n    options: [OPACITY_OPAQUE, OPACITY_SEMI]\n  },\n  // Options for this object are defined below.\n  windowColor: {\n    selector: '.vjs-window-color > select',\n    id: 'captions-window-color-%s',\n    label: 'Color'\n  },\n  // Options for this object are defined below.\n  windowOpacity: {\n    selector: '.vjs-window-opacity > select',\n    id: 'captions-window-opacity-%s',\n    label: 'Opacity',\n    options: [OPACITY_TRANS, OPACITY_SEMI, OPACITY_OPAQUE]\n  }\n};\nselectConfigs.windowColor.options = selectConfigs.backgroundColor.options;\n\n/**\n * Get the actual value of an option.\n *\n * @param  {string} value\n *         The value to get\n *\n * @param  {Function} [parser]\n *         Optional function to adjust the value.\n *\n * @return {*}\n *         - Will be `undefined` if no value exists\n *         - Will be `undefined` if the given value is \"none\".\n *         - Will be the actual value otherwise.\n *\n * @private\n */\nfunction parseOptionValue(value, parser) {\n  if (parser) {\n    value = parser(value);\n  }\n  if (value && value !== 'none') {\n    return value;\n  }\n}\n\n/**\n * Gets the value of the selected <option> element within a <select> element.\n *\n * @param  {Element} el\n *         the element to look in\n *\n * @param  {Function} [parser]\n *         Optional function to adjust the value.\n *\n * @return {*}\n *         - Will be `undefined` if no value exists\n *         - Will be `undefined` if the given value is \"none\".\n *         - Will be the actual value otherwise.\n *\n * @private\n */\nfunction getSelectedOptionValue(el, parser) {\n  const value = el.options[el.options.selectedIndex].value;\n  return parseOptionValue(value, parser);\n}\n\n/**\n * Sets the selected <option> element within a <select> element based on a\n * given value.\n *\n * @param {Element} el\n *        The element to look in.\n *\n * @param {string} value\n *        the property to look on.\n *\n * @param {Function} [parser]\n *        Optional function to adjust the value before comparing.\n *\n * @private\n */\nfunction setSelectedOption(el, value, parser) {\n  if (!value) {\n    return;\n  }\n  for (let i = 0; i < el.options.length; i++) {\n    if (parseOptionValue(el.options[i].value, parser) === value) {\n      el.selectedIndex = i;\n      break;\n    }\n  }\n}\n\n/**\n * Manipulate Text Tracks settings.\n *\n * @extends ModalDialog\n */\nclass TextTrackSettings extends ModalDialog {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('../player').default } player\n   *         The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *         The key/value store of player options.\n   */\n  constructor(player, options) {\n    options.temporary = false;\n    super(player, options);\n    this.updateDisplay = this.updateDisplay.bind(this);\n\n    // fill the modal and pretend we have opened it\n    this.fill();\n    this.hasBeenOpened_ = this.hasBeenFilled_ = true;\n    this.endDialog = createEl('p', {\n      className: 'vjs-control-text',\n      textContent: this.localize('End of dialog window.')\n    });\n    this.el().appendChild(this.endDialog);\n    this.setDefaults();\n\n    // Grab `persistTextTrackSettings` from the player options if not passed in child options\n    if (options.persistTextTrackSettings === undefined) {\n      this.options_.persistTextTrackSettings = this.options_.playerOptions.persistTextTrackSettings;\n    }\n    this.on(this.$('.vjs-done-button'), 'click', () => {\n      this.saveSettings();\n      this.close();\n    });\n    this.on(this.$('.vjs-default-button'), 'click', () => {\n      this.setDefaults();\n      this.updateDisplay();\n    });\n    each(selectConfigs, config => {\n      this.on(this.$(config.selector), 'change', this.updateDisplay);\n    });\n    if (this.options_.persistTextTrackSettings) {\n      this.restoreSettings();\n    }\n  }\n  dispose() {\n    this.endDialog = null;\n    super.dispose();\n  }\n\n  /**\n   * Create a <select> element with configured options.\n   *\n   * @param {string} key\n   *        Configuration key to use during creation.\n   *\n   * @param {string} [legendId]\n   *        Id of associated <legend>.\n   *\n   * @param {string} [type=label]\n   *        Type of labelling element, `label` or `legend`\n   *\n   * @return {string}\n   *         An HTML string.\n   *\n   * @private\n   */\n  createElSelect_(key, legendId = '', type = 'label') {\n    const config = selectConfigs[key];\n    const id = config.id.replace('%s', this.id_);\n    const selectLabelledbyIds = [legendId, id].join(' ').trim();\n    const guid = `vjs_select_${newGUID()}`;\n    return [`<${type} id=\"${id}\"${type === 'label' ? ` for=\"${guid}\" class=\"vjs-label\"` : ''}>`, this.localize(config.label), `</${type}>`, `<select aria-labelledby=\"${selectLabelledbyIds}\" id=\"${guid}\">`].concat(config.options.map(o => {\n      const optionId = id + '-' + o[1].replace(/\\W+/g, '');\n      return [`<option id=\"${optionId}\" value=\"${o[0]}\" `, `aria-labelledby=\"${selectLabelledbyIds} ${optionId}\">`, this.localize(o[1]), '</option>'].join('');\n    })).concat('</select>').join('');\n  }\n\n  /**\n   * Create foreground color element for the component\n   *\n   * @return {string}\n   *         An HTML string.\n   *\n   * @private\n   */\n  createElFgColor_() {\n    const legendId = `captions-text-legend-${this.id_}`;\n    return ['<fieldset class=\"vjs-fg vjs-track-setting\">', `<legend id=\"${legendId}\">`, this.localize('Text'), '</legend>', '<span class=\"vjs-text-color\">', this.createElSelect_('color', legendId), '</span>', '<span class=\"vjs-text-opacity vjs-opacity\">', this.createElSelect_('textOpacity', legendId), '</span>', '</fieldset>'].join('');\n  }\n\n  /**\n   * Create background color element for the component\n   *\n   * @return {string}\n   *         An HTML string.\n   *\n   * @private\n   */\n  createElBgColor_() {\n    const legendId = `captions-background-${this.id_}`;\n    return ['<fieldset class=\"vjs-bg vjs-track-setting\">', `<legend id=\"${legendId}\">`, this.localize('Text Background'), '</legend>', '<span class=\"vjs-bg-color\">', this.createElSelect_('backgroundColor', legendId), '</span>', '<span class=\"vjs-bg-opacity vjs-opacity\">', this.createElSelect_('backgroundOpacity', legendId), '</span>', '</fieldset>'].join('');\n  }\n\n  /**\n   * Create window color element for the component\n   *\n   * @return {string}\n   *         An HTML string.\n   *\n   * @private\n   */\n  createElWinColor_() {\n    const legendId = `captions-window-${this.id_}`;\n    return ['<fieldset class=\"vjs-window vjs-track-setting\">', `<legend id=\"${legendId}\">`, this.localize('Caption Area Background'), '</legend>', '<span class=\"vjs-window-color\">', this.createElSelect_('windowColor', legendId), '</span>', '<span class=\"vjs-window-opacity vjs-opacity\">', this.createElSelect_('windowOpacity', legendId), '</span>', '</fieldset>'].join('');\n  }\n\n  /**\n   * Create color elements for the component\n   *\n   * @return {Element}\n   *         The element that was created\n   *\n   * @private\n   */\n  createElColors_() {\n    return createEl('div', {\n      className: 'vjs-track-settings-colors',\n      innerHTML: [this.createElFgColor_(), this.createElBgColor_(), this.createElWinColor_()].join('')\n    });\n  }\n\n  /**\n   * Create font elements for the component\n   *\n   * @return {Element}\n   *         The element that was created.\n   *\n   * @private\n   */\n  createElFont_() {\n    return createEl('div', {\n      className: 'vjs-track-settings-font',\n      innerHTML: ['<fieldset class=\"vjs-font-percent vjs-track-setting\">', this.createElSelect_('fontPercent', '', 'legend'), '</fieldset>', '<fieldset class=\"vjs-edge-style vjs-track-setting\">', this.createElSelect_('edgeStyle', '', 'legend'), '</fieldset>', '<fieldset class=\"vjs-font-family vjs-track-setting\">', this.createElSelect_('fontFamily', '', 'legend'), '</fieldset>'].join('')\n    });\n  }\n\n  /**\n   * Create controls for the component\n   *\n   * @return {Element}\n   *         The element that was created.\n   *\n   * @private\n   */\n  createElControls_() {\n    const defaultsDescription = this.localize('restore all settings to the default values');\n    return createEl('div', {\n      className: 'vjs-track-settings-controls',\n      innerHTML: [`<button type=\"button\" class=\"vjs-default-button\" title=\"${defaultsDescription}\">`, this.localize('Reset'), `<span class=\"vjs-control-text\"> ${defaultsDescription}</span>`, '</button>', `<button type=\"button\" class=\"vjs-done-button\">${this.localize('Done')}</button>`].join('')\n    });\n  }\n  content() {\n    return [this.createElColors_(), this.createElFont_(), this.createElControls_()];\n  }\n  label() {\n    return this.localize('Caption Settings Dialog');\n  }\n  description() {\n    return this.localize('Beginning of dialog window. Escape will cancel and close the window.');\n  }\n  buildCSSClass() {\n    return super.buildCSSClass() + ' vjs-text-track-settings';\n  }\n\n  /**\n   * Gets an object of text track settings (or null).\n   *\n   * @return {Object}\n   *         An object with config values parsed from the DOM or localStorage.\n   */\n  getValues() {\n    return reduce(selectConfigs, (accum, config, key) => {\n      const value = getSelectedOptionValue(this.$(config.selector), config.parser);\n      if (value !== undefined) {\n        accum[key] = value;\n      }\n      return accum;\n    }, {});\n  }\n\n  /**\n   * Sets text track settings from an object of values.\n   *\n   * @param {Object} values\n   *        An object with config values parsed from the DOM or localStorage.\n   */\n  setValues(values) {\n    each(selectConfigs, (config, key) => {\n      setSelectedOption(this.$(config.selector), values[key], config.parser);\n    });\n  }\n\n  /**\n   * Sets all `<select>` elements to their default values.\n   */\n  setDefaults() {\n    each(selectConfigs, config => {\n      const index = config.hasOwnProperty('default') ? config.default : 0;\n      this.$(config.selector).selectedIndex = index;\n    });\n  }\n\n  /**\n   * Restore texttrack settings from localStorage\n   */\n  restoreSettings() {\n    let values;\n    try {\n      values = JSON.parse(window$1.localStorage.getItem(LOCAL_STORAGE_KEY$1));\n    } catch (err) {\n      log$1.warn(err);\n    }\n    if (values) {\n      this.setValues(values);\n    }\n  }\n\n  /**\n   * Save text track settings to localStorage\n   */\n  saveSettings() {\n    if (!this.options_.persistTextTrackSettings) {\n      return;\n    }\n    const values = this.getValues();\n    try {\n      if (Object.keys(values).length) {\n        window$1.localStorage.setItem(LOCAL_STORAGE_KEY$1, JSON.stringify(values));\n      } else {\n        window$1.localStorage.removeItem(LOCAL_STORAGE_KEY$1);\n      }\n    } catch (err) {\n      log$1.warn(err);\n    }\n  }\n\n  /**\n   * Update display of text track settings\n   */\n  updateDisplay() {\n    const ttDisplay = this.player_.getChild('textTrackDisplay');\n    if (ttDisplay) {\n      ttDisplay.updateDisplay();\n    }\n  }\n\n  /**\n   * conditionally blur the element and refocus the captions button\n   *\n   * @private\n   */\n  conditionalBlur_() {\n    this.previouslyActiveEl_ = null;\n    const cb = this.player_.controlBar;\n    const subsCapsBtn = cb && cb.subsCapsButton;\n    const ccBtn = cb && cb.captionsButton;\n    if (subsCapsBtn) {\n      subsCapsBtn.focus();\n    } else if (ccBtn) {\n      ccBtn.focus();\n    }\n  }\n\n  /**\n   * Repopulate dialog with new localizations on languagechange\n   */\n  handleLanguagechange() {\n    this.fill();\n  }\n}\nComponent$1.registerComponent('TextTrackSettings', TextTrackSettings);\n\n/**\n * @file resize-manager.js\n */\n\n/**\n * A Resize Manager. It is in charge of triggering `playerresize` on the player in the right conditions.\n *\n * It'll either create an iframe and use a debounced resize handler on it or use the new {@link https://wicg.github.io/ResizeObserver/|ResizeObserver}.\n *\n * If the ResizeObserver is available natively, it will be used. A polyfill can be passed in as an option.\n * If a `playerresize` event is not needed, the ResizeManager component can be removed from the player, see the example below.\n *\n * @example <caption>How to disable the resize manager</caption>\n * const player = videojs('#vid', {\n *   resizeManager: false\n * });\n *\n * @see {@link https://wicg.github.io/ResizeObserver/|ResizeObserver specification}\n *\n * @extends Component\n */\nclass ResizeManager extends Component$1 {\n  /**\n   * Create the ResizeManager.\n   *\n   * @param {Object} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of ResizeManager options.\n   *\n   * @param {Object} [options.ResizeObserver]\n   *        A polyfill for ResizeObserver can be passed in here.\n   *        If this is set to null it will ignore the native ResizeObserver and fall back to the iframe fallback.\n   */\n  constructor(player, options) {\n    let RESIZE_OBSERVER_AVAILABLE = options.ResizeObserver || window$1.ResizeObserver;\n\n    // if `null` was passed, we want to disable the ResizeObserver\n    if (options.ResizeObserver === null) {\n      RESIZE_OBSERVER_AVAILABLE = false;\n    }\n\n    // Only create an element when ResizeObserver isn't available\n    const options_ = merge$1({\n      createEl: !RESIZE_OBSERVER_AVAILABLE,\n      reportTouchActivity: false\n    }, options);\n    super(player, options_);\n    this.ResizeObserver = options.ResizeObserver || window$1.ResizeObserver;\n    this.loadListener_ = null;\n    this.resizeObserver_ = null;\n    this.debouncedHandler_ = debounce(() => {\n      this.resizeHandler();\n    }, 100, false, this);\n    if (RESIZE_OBSERVER_AVAILABLE) {\n      this.resizeObserver_ = new this.ResizeObserver(this.debouncedHandler_);\n      this.resizeObserver_.observe(player.el());\n    } else {\n      this.loadListener_ = () => {\n        if (!this.el_ || !this.el_.contentWindow) {\n          return;\n        }\n        const debouncedHandler_ = this.debouncedHandler_;\n        let unloadListener_ = this.unloadListener_ = function () {\n          off(this, 'resize', debouncedHandler_);\n          off(this, 'unload', unloadListener_);\n          unloadListener_ = null;\n        };\n\n        // safari and edge can unload the iframe before resizemanager dispose\n        // we have to dispose of event handlers correctly before that happens\n        on(this.el_.contentWindow, 'unload', unloadListener_);\n        on(this.el_.contentWindow, 'resize', debouncedHandler_);\n      };\n      this.one('load', this.loadListener_);\n    }\n  }\n  createEl() {\n    return super.createEl('iframe', {\n      className: 'vjs-resize-manager',\n      tabIndex: -1,\n      title: this.localize('No content')\n    }, {\n      'aria-hidden': 'true'\n    });\n  }\n\n  /**\n   * Called when a resize is triggered on the iframe or a resize is observed via the ResizeObserver\n   *\n   * @fires Player#playerresize\n   */\n  resizeHandler() {\n    /**\n     * Called when the player size has changed\n     *\n     * @event Player#playerresize\n     * @type {Event}\n     */\n    // make sure player is still around to trigger\n    // prevents this from causing an error after dispose\n    if (!this.player_ || !this.player_.trigger) {\n      return;\n    }\n    this.player_.trigger('playerresize');\n  }\n  dispose() {\n    if (this.debouncedHandler_) {\n      this.debouncedHandler_.cancel();\n    }\n    if (this.resizeObserver_) {\n      if (this.player_.el()) {\n        this.resizeObserver_.unobserve(this.player_.el());\n      }\n      this.resizeObserver_.disconnect();\n    }\n    if (this.loadListener_) {\n      this.off('load', this.loadListener_);\n    }\n    if (this.el_ && this.el_.contentWindow && this.unloadListener_) {\n      this.unloadListener_.call(this.el_.contentWindow);\n    }\n    this.ResizeObserver = null;\n    this.resizeObserver = null;\n    this.debouncedHandler_ = null;\n    this.loadListener_ = null;\n    super.dispose();\n  }\n}\nComponent$1.registerComponent('ResizeManager', ResizeManager);\n\nconst defaults = {\n  trackingThreshold: 20,\n  liveTolerance: 15\n};\n\n/*\n  track when we are at the live edge, and other helpers for live playback */\n\n/**\n * A class for checking live current time and determining when the player\n * is at or behind the live edge.\n */\nclass LiveTracker extends Component$1 {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('./player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {number} [options.trackingThreshold=20]\n   *        Number of seconds of live window (seekableEnd - seekableStart) that\n   *        media needs to have before the liveui will be shown.\n   *\n   * @param {number} [options.liveTolerance=15]\n   *        Number of seconds behind live that we have to be\n   *        before we will be considered non-live. Note that this will only\n   *        be used when playing at the live edge. This allows large seekable end\n   *        changes to not effect whether we are live or not.\n   */\n  constructor(player, options) {\n    // LiveTracker does not need an element\n    const options_ = merge$1(defaults, options, {\n      createEl: false\n    });\n    super(player, options_);\n    this.trackLiveHandler_ = () => this.trackLive_();\n    this.handlePlay_ = e => this.handlePlay(e);\n    this.handleFirstTimeupdate_ = e => this.handleFirstTimeupdate(e);\n    this.handleSeeked_ = e => this.handleSeeked(e);\n    this.seekToLiveEdge_ = e => this.seekToLiveEdge(e);\n    this.reset_();\n    this.on(this.player_, 'durationchange', e => this.handleDurationchange(e));\n    // we should try to toggle tracking on canplay as native playback engines, like Safari\n    // may not have the proper values for things like seekableEnd until then\n    this.on(this.player_, 'canplay', () => this.toggleTracking());\n  }\n\n  /**\n   * all the functionality for tracking when seek end changes\n   * and for tracking how far past seek end we should be\n   */\n  trackLive_() {\n    const seekable = this.player_.seekable();\n\n    // skip undefined seekable\n    if (!seekable || !seekable.length) {\n      return;\n    }\n    const newTime = Number(window$1.performance.now().toFixed(4));\n    const deltaTime = this.lastTime_ === -1 ? 0 : (newTime - this.lastTime_) / 1000;\n    this.lastTime_ = newTime;\n    this.pastSeekEnd_ = this.pastSeekEnd() + deltaTime;\n    const liveCurrentTime = this.liveCurrentTime();\n    const currentTime = this.player_.currentTime();\n\n    // we are behind live if any are true\n    // 1. the player is paused\n    // 2. the user seeked to a location 2 seconds away from live\n    // 3. the difference between live and current time is greater\n    //    liveTolerance which defaults to 15s\n    let isBehind = this.player_.paused() || this.seekedBehindLive_ || Math.abs(liveCurrentTime - currentTime) > this.options_.liveTolerance;\n\n    // we cannot be behind if\n    // 1. until we have not seen a timeupdate yet\n    // 2. liveCurrentTime is Infinity, which happens on Android and Native Safari\n    if (!this.timeupdateSeen_ || liveCurrentTime === Infinity) {\n      isBehind = false;\n    }\n    if (isBehind !== this.behindLiveEdge_) {\n      this.behindLiveEdge_ = isBehind;\n      this.trigger('liveedgechange');\n    }\n  }\n\n  /**\n   * handle a durationchange event on the player\n   * and start/stop tracking accordingly.\n   */\n  handleDurationchange() {\n    this.toggleTracking();\n  }\n\n  /**\n   * start/stop tracking\n   */\n  toggleTracking() {\n    if (this.player_.duration() === Infinity && this.liveWindow() >= this.options_.trackingThreshold) {\n      if (this.player_.options_.liveui) {\n        this.player_.addClass('vjs-liveui');\n      }\n      this.startTracking();\n    } else {\n      this.player_.removeClass('vjs-liveui');\n      this.stopTracking();\n    }\n  }\n\n  /**\n   * start tracking live playback\n   */\n  startTracking() {\n    if (this.isTracking()) {\n      return;\n    }\n\n    // If we haven't seen a timeupdate, we need to check whether playback\n    // began before this component started tracking. This can happen commonly\n    // when using autoplay.\n    if (!this.timeupdateSeen_) {\n      this.timeupdateSeen_ = this.player_.hasStarted();\n    }\n    this.trackingInterval_ = this.setInterval(this.trackLiveHandler_, UPDATE_REFRESH_INTERVAL);\n    this.trackLive_();\n    this.on(this.player_, ['play', 'pause'], this.trackLiveHandler_);\n    if (!this.timeupdateSeen_) {\n      this.one(this.player_, 'play', this.handlePlay_);\n      this.one(this.player_, 'timeupdate', this.handleFirstTimeupdate_);\n    } else {\n      this.on(this.player_, 'seeked', this.handleSeeked_);\n    }\n  }\n\n  /**\n   * handle the first timeupdate on the player if it wasn't already playing\n   * when live tracker started tracking.\n   */\n  handleFirstTimeupdate() {\n    this.timeupdateSeen_ = true;\n    this.on(this.player_, 'seeked', this.handleSeeked_);\n  }\n\n  /**\n   * Keep track of what time a seek starts, and listen for seeked\n   * to find where a seek ends.\n   */\n  handleSeeked() {\n    const timeDiff = Math.abs(this.liveCurrentTime() - this.player_.currentTime());\n    this.seekedBehindLive_ = this.nextSeekedFromUser_ && timeDiff > 2;\n    this.nextSeekedFromUser_ = false;\n    this.trackLive_();\n  }\n\n  /**\n   * handle the first play on the player, and make sure that we seek\n   * right to the live edge.\n   */\n  handlePlay() {\n    this.one(this.player_, 'timeupdate', this.seekToLiveEdge_);\n  }\n\n  /**\n   * Stop tracking, and set all internal variables to\n   * their initial value.\n   */\n  reset_() {\n    this.lastTime_ = -1;\n    this.pastSeekEnd_ = 0;\n    this.lastSeekEnd_ = -1;\n    this.behindLiveEdge_ = true;\n    this.timeupdateSeen_ = false;\n    this.seekedBehindLive_ = false;\n    this.nextSeekedFromUser_ = false;\n    this.clearInterval(this.trackingInterval_);\n    this.trackingInterval_ = null;\n    this.off(this.player_, ['play', 'pause'], this.trackLiveHandler_);\n    this.off(this.player_, 'seeked', this.handleSeeked_);\n    this.off(this.player_, 'play', this.handlePlay_);\n    this.off(this.player_, 'timeupdate', this.handleFirstTimeupdate_);\n    this.off(this.player_, 'timeupdate', this.seekToLiveEdge_);\n  }\n\n  /**\n   * The next seeked event is from the user. Meaning that any seek\n   * > 2s behind live will be considered behind live for real and\n   * liveTolerance will be ignored.\n   */\n  nextSeekedFromUser() {\n    this.nextSeekedFromUser_ = true;\n  }\n\n  /**\n   * stop tracking live playback\n   */\n  stopTracking() {\n    if (!this.isTracking()) {\n      return;\n    }\n    this.reset_();\n    this.trigger('liveedgechange');\n  }\n\n  /**\n   * A helper to get the player seekable end\n   * so that we don't have to null check everywhere\n   *\n   * @return {number}\n   *         The furthest seekable end or Infinity.\n   */\n  seekableEnd() {\n    const seekable = this.player_.seekable();\n    const seekableEnds = [];\n    let i = seekable ? seekable.length : 0;\n    while (i--) {\n      seekableEnds.push(seekable.end(i));\n    }\n\n    // grab the furthest seekable end after sorting, or if there are none\n    // default to Infinity\n    return seekableEnds.length ? seekableEnds.sort()[seekableEnds.length - 1] : Infinity;\n  }\n\n  /**\n   * A helper to get the player seekable start\n   * so that we don't have to null check everywhere\n   *\n   * @return {number}\n   *         The earliest seekable start or 0.\n   */\n  seekableStart() {\n    const seekable = this.player_.seekable();\n    const seekableStarts = [];\n    let i = seekable ? seekable.length : 0;\n    while (i--) {\n      seekableStarts.push(seekable.start(i));\n    }\n\n    // grab the first seekable start after sorting, or if there are none\n    // default to 0\n    return seekableStarts.length ? seekableStarts.sort()[0] : 0;\n  }\n\n  /**\n   * Get the live time window aka\n   * the amount of time between seekable start and\n   * live current time.\n   *\n   * @return {number}\n   *         The amount of seconds that are seekable in\n   *         the live video.\n   */\n  liveWindow() {\n    const liveCurrentTime = this.liveCurrentTime();\n\n    // if liveCurrenTime is Infinity then we don't have a liveWindow at all\n    if (liveCurrentTime === Infinity) {\n      return 0;\n    }\n    return liveCurrentTime - this.seekableStart();\n  }\n\n  /**\n   * Determines if the player is live, only checks if this component\n   * is tracking live playback or not\n   *\n   * @return {boolean}\n   *         Whether liveTracker is tracking\n   */\n  isLive() {\n    return this.isTracking();\n  }\n\n  /**\n   * Determines if currentTime is at the live edge and won't fall behind\n   * on each seekableendchange\n   *\n   * @return {boolean}\n   *         Whether playback is at the live edge\n   */\n  atLiveEdge() {\n    return !this.behindLiveEdge();\n  }\n\n  /**\n   * get what we expect the live current time to be\n   *\n   * @return {number}\n   *         The expected live current time\n   */\n  liveCurrentTime() {\n    return this.pastSeekEnd() + this.seekableEnd();\n  }\n\n  /**\n   * The number of seconds that have occurred after seekable end\n   * changed. This will be reset to 0 once seekable end changes.\n   *\n   * @return {number}\n   *         Seconds past the current seekable end\n   */\n  pastSeekEnd() {\n    const seekableEnd = this.seekableEnd();\n    if (this.lastSeekEnd_ !== -1 && seekableEnd !== this.lastSeekEnd_) {\n      this.pastSeekEnd_ = 0;\n    }\n    this.lastSeekEnd_ = seekableEnd;\n    return this.pastSeekEnd_;\n  }\n\n  /**\n   * If we are currently behind the live edge, aka currentTime will be\n   * behind on a seekableendchange\n   *\n   * @return {boolean}\n   *         If we are behind the live edge\n   */\n  behindLiveEdge() {\n    return this.behindLiveEdge_;\n  }\n\n  /**\n   * Whether live tracker is currently tracking or not.\n   */\n  isTracking() {\n    return typeof this.trackingInterval_ === 'number';\n  }\n\n  /**\n   * Seek to the live edge if we are behind the live edge\n   */\n  seekToLiveEdge() {\n    this.seekedBehindLive_ = false;\n    if (this.atLiveEdge()) {\n      return;\n    }\n    this.nextSeekedFromUser_ = false;\n    this.player_.currentTime(this.liveCurrentTime());\n  }\n\n  /**\n   * Dispose of liveTracker\n   */\n  dispose() {\n    this.stopTracking();\n    super.dispose();\n  }\n}\nComponent$1.registerComponent('LiveTracker', LiveTracker);\n\n/**\n * Displays an element over the player which contains an optional title and\n * description for the current content.\n *\n * Much of the code for this component originated in the now obsolete\n * videojs-dock plugin: https://github.com/brightcove/videojs-dock/\n *\n * @extends Component\n */\nclass TitleBar extends Component$1 {\n  constructor(player, options) {\n    super(player, options);\n    this.on('statechanged', e => this.updateDom_());\n    this.updateDom_();\n  }\n\n  /**\n   * Create the `TitleBar`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  createEl() {\n    this.els = {\n      title: createEl('div', {\n        className: 'vjs-title-bar-title',\n        id: `vjs-title-bar-title-${newGUID()}`\n      }),\n      description: createEl('div', {\n        className: 'vjs-title-bar-description',\n        id: `vjs-title-bar-description-${newGUID()}`\n      })\n    };\n    return createEl('div', {\n      className: 'vjs-title-bar'\n    }, {}, values(this.els));\n  }\n\n  /**\n   * Updates the DOM based on the component's state object.\n   */\n  updateDom_() {\n    const tech = this.player_.tech_;\n    const techEl = tech && tech.el_;\n    const techAriaAttrs = {\n      title: 'aria-labelledby',\n      description: 'aria-describedby'\n    };\n    ['title', 'description'].forEach(k => {\n      const value = this.state[k];\n      const el = this.els[k];\n      const techAriaAttr = techAriaAttrs[k];\n      emptyEl(el);\n      if (value) {\n        textContent(el, value);\n      }\n\n      // If there is a tech element available, update its ARIA attributes\n      // according to whether a title and/or description have been provided.\n      if (techEl) {\n        techEl.removeAttribute(techAriaAttr);\n        if (value) {\n          techEl.setAttribute(techAriaAttr, el.id);\n        }\n      }\n    });\n    if (this.state.title || this.state.description) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  }\n\n  /**\n   * Update the contents of the title bar component with new title and\n   * description text.\n   *\n   * If both title and description are missing, the title bar will be hidden.\n   *\n   * If either title or description are present, the title bar will be visible.\n   *\n   * NOTE: Any previously set value will be preserved. To unset a previously\n   * set value, you must pass an empty string or null.\n   *\n   * For example:\n   *\n   * ```\n   * update({title: 'foo', description: 'bar'}) // title: 'foo', description: 'bar'\n   * update({description: 'bar2'}) // title: 'foo', description: 'bar2'\n   * update({title: ''}) // title: '', description: 'bar2'\n   * update({title: 'foo', description: null}) // title: 'foo', description: null\n   * ```\n   *\n   * @param  {Object} [options={}]\n   *         An options object. When empty, the title bar will be hidden.\n   *\n   * @param  {string} [options.title]\n   *         A title to display in the title bar.\n   *\n   * @param  {string} [options.description]\n   *         A description to display in the title bar.\n   */\n  update(options) {\n    this.setState(options);\n  }\n\n  /**\n   * Dispose the component.\n   */\n  dispose() {\n    const tech = this.player_.tech_;\n    const techEl = tech && tech.el_;\n    if (techEl) {\n      techEl.removeAttribute('aria-labelledby');\n      techEl.removeAttribute('aria-describedby');\n    }\n    super.dispose();\n    this.els = null;\n  }\n}\nComponent$1.registerComponent('TitleBar', TitleBar);\n\n/**\n * This function is used to fire a sourceset when there is something\n * similar to `mediaEl.load()` being called. It will try to find the source via\n * the `src` attribute and then the `<source>` elements. It will then fire `sourceset`\n * with the source that was found or empty string if we cannot know. If it cannot\n * find a source then `sourceset` will not be fired.\n *\n * @param { import('./html5').default } tech\n *        The tech object that sourceset was setup on\n *\n * @return {boolean}\n *         returns false if the sourceset was not fired and true otherwise.\n */\nconst sourcesetLoad = tech => {\n  const el = tech.el();\n\n  // if `el.src` is set, that source will be loaded.\n  if (el.hasAttribute('src')) {\n    tech.triggerSourceset(el.src);\n    return true;\n  }\n\n  /**\n   * Since there isn't a src property on the media element, source elements will be used for\n   * implementing the source selection algorithm. This happens asynchronously and\n   * for most cases were there is more than one source we cannot tell what source will\n   * be loaded, without re-implementing the source selection algorithm. At this time we are not\n   * going to do that. There are three special cases that we do handle here though:\n   *\n   * 1. If there are no sources, do not fire `sourceset`.\n   * 2. If there is only one `<source>` with a `src` property/attribute that is our `src`\n   * 3. If there is more than one `<source>` but all of them have the same `src` url.\n   *    That will be our src.\n   */\n  const sources = tech.$$('source');\n  const srcUrls = [];\n  let src = '';\n\n  // if there are no sources, do not fire sourceset\n  if (!sources.length) {\n    return false;\n  }\n\n  // only count valid/non-duplicate source elements\n  for (let i = 0; i < sources.length; i++) {\n    const url = sources[i].src;\n    if (url && srcUrls.indexOf(url) === -1) {\n      srcUrls.push(url);\n    }\n  }\n\n  // there were no valid sources\n  if (!srcUrls.length) {\n    return false;\n  }\n\n  // there is only one valid source element url\n  // use that\n  if (srcUrls.length === 1) {\n    src = srcUrls[0];\n  }\n  tech.triggerSourceset(src);\n  return true;\n};\n\n/**\n * our implementation of an `innerHTML` descriptor for browsers\n * that do not have one.\n */\nconst innerHTMLDescriptorPolyfill = Object.defineProperty({}, 'innerHTML', {\n  get() {\n    return this.cloneNode(true).innerHTML;\n  },\n  set(v) {\n    // make a dummy node to use innerHTML on\n    const dummy = document.createElement(this.nodeName.toLowerCase());\n\n    // set innerHTML to the value provided\n    dummy.innerHTML = v;\n\n    // make a document fragment to hold the nodes from dummy\n    const docFrag = document.createDocumentFragment();\n\n    // copy all of the nodes created by the innerHTML on dummy\n    // to the document fragment\n    while (dummy.childNodes.length) {\n      docFrag.appendChild(dummy.childNodes[0]);\n    }\n\n    // remove content\n    this.innerText = '';\n\n    // now we add all of that html in one by appending the\n    // document fragment. This is how innerHTML does it.\n    window$1.Element.prototype.appendChild.call(this, docFrag);\n\n    // then return the result that innerHTML's setter would\n    return this.innerHTML;\n  }\n});\n\n/**\n * Get a property descriptor given a list of priorities and the\n * property to get.\n */\nconst getDescriptor = (priority, prop) => {\n  let descriptor = {};\n  for (let i = 0; i < priority.length; i++) {\n    descriptor = Object.getOwnPropertyDescriptor(priority[i], prop);\n    if (descriptor && descriptor.set && descriptor.get) {\n      break;\n    }\n  }\n  descriptor.enumerable = true;\n  descriptor.configurable = true;\n  return descriptor;\n};\nconst getInnerHTMLDescriptor = tech => getDescriptor([tech.el(), window$1.HTMLMediaElement.prototype, window$1.Element.prototype, innerHTMLDescriptorPolyfill], 'innerHTML');\n\n/**\n * Patches browser internal functions so that we can tell synchronously\n * if a `<source>` was appended to the media element. For some reason this\n * causes a `sourceset` if the the media element is ready and has no source.\n * This happens when:\n * - The page has just loaded and the media element does not have a source.\n * - The media element was emptied of all sources, then `load()` was called.\n *\n * It does this by patching the following functions/properties when they are supported:\n *\n * - `append()` - can be used to add a `<source>` element to the media element\n * - `appendChild()` - can be used to add a `<source>` element to the media element\n * - `insertAdjacentHTML()` -  can be used to add a `<source>` element to the media element\n * - `innerHTML` -  can be used to add a `<source>` element to the media element\n *\n * @param {Html5} tech\n *        The tech object that sourceset is being setup on.\n */\nconst firstSourceWatch = function (tech) {\n  const el = tech.el();\n\n  // make sure firstSourceWatch isn't setup twice.\n  if (el.resetSourceWatch_) {\n    return;\n  }\n  const old = {};\n  const innerDescriptor = getInnerHTMLDescriptor(tech);\n  const appendWrapper = appendFn => (...args) => {\n    const retval = appendFn.apply(el, args);\n    sourcesetLoad(tech);\n    return retval;\n  };\n  ['append', 'appendChild', 'insertAdjacentHTML'].forEach(k => {\n    if (!el[k]) {\n      return;\n    }\n\n    // store the old function\n    old[k] = el[k];\n\n    // call the old function with a sourceset if a source\n    // was loaded\n    el[k] = appendWrapper(old[k]);\n  });\n  Object.defineProperty(el, 'innerHTML', merge$1(innerDescriptor, {\n    set: appendWrapper(innerDescriptor.set)\n  }));\n  el.resetSourceWatch_ = () => {\n    el.resetSourceWatch_ = null;\n    Object.keys(old).forEach(k => {\n      el[k] = old[k];\n    });\n    Object.defineProperty(el, 'innerHTML', innerDescriptor);\n  };\n\n  // on the first sourceset, we need to revert our changes\n  tech.one('sourceset', el.resetSourceWatch_);\n};\n\n/**\n * our implementation of a `src` descriptor for browsers\n * that do not have one\n */\nconst srcDescriptorPolyfill = Object.defineProperty({}, 'src', {\n  get() {\n    if (this.hasAttribute('src')) {\n      return getAbsoluteURL(window$1.Element.prototype.getAttribute.call(this, 'src'));\n    }\n    return '';\n  },\n  set(v) {\n    window$1.Element.prototype.setAttribute.call(this, 'src', v);\n    return v;\n  }\n});\nconst getSrcDescriptor = tech => getDescriptor([tech.el(), window$1.HTMLMediaElement.prototype, srcDescriptorPolyfill], 'src');\n\n/**\n * setup `sourceset` handling on the `Html5` tech. This function\n * patches the following element properties/functions:\n *\n * - `src` - to determine when `src` is set\n * - `setAttribute()` - to determine when `src` is set\n * - `load()` - this re-triggers the source selection algorithm, and can\n *              cause a sourceset.\n *\n * If there is no source when we are adding `sourceset` support or during a `load()`\n * we also patch the functions listed in `firstSourceWatch`.\n *\n * @param {Html5} tech\n *        The tech to patch\n */\nconst setupSourceset = function (tech) {\n  if (!tech.featuresSourceset) {\n    return;\n  }\n  const el = tech.el();\n\n  // make sure sourceset isn't setup twice.\n  if (el.resetSourceset_) {\n    return;\n  }\n  const srcDescriptor = getSrcDescriptor(tech);\n  const oldSetAttribute = el.setAttribute;\n  const oldLoad = el.load;\n  Object.defineProperty(el, 'src', merge$1(srcDescriptor, {\n    set: v => {\n      const retval = srcDescriptor.set.call(el, v);\n\n      // we use the getter here to get the actual value set on src\n      tech.triggerSourceset(el.src);\n      return retval;\n    }\n  }));\n  el.setAttribute = (n, v) => {\n    const retval = oldSetAttribute.call(el, n, v);\n    if (/src/i.test(n)) {\n      tech.triggerSourceset(el.src);\n    }\n    return retval;\n  };\n  el.load = () => {\n    const retval = oldLoad.call(el);\n\n    // if load was called, but there was no source to fire\n    // sourceset on. We have to watch for a source append\n    // as that can trigger a `sourceset` when the media element\n    // has no source\n    if (!sourcesetLoad(tech)) {\n      tech.triggerSourceset('');\n      firstSourceWatch(tech);\n    }\n    return retval;\n  };\n  if (el.currentSrc) {\n    tech.triggerSourceset(el.currentSrc);\n  } else if (!sourcesetLoad(tech)) {\n    firstSourceWatch(tech);\n  }\n  el.resetSourceset_ = () => {\n    el.resetSourceset_ = null;\n    el.load = oldLoad;\n    el.setAttribute = oldSetAttribute;\n    Object.defineProperty(el, 'src', srcDescriptor);\n    if (el.resetSourceWatch_) {\n      el.resetSourceWatch_();\n    }\n  };\n};\n\n/**\n * @file html5.js\n */\n\n/**\n * HTML5 Media Controller - Wrapper for HTML5 Media API\n *\n * @mixes Tech~SourceHandlerAdditions\n * @extends Tech\n */\nclass Html5 extends Tech {\n  /**\n  * Create an instance of this Tech.\n  *\n  * @param {Object} [options]\n  *        The key/value store of player options.\n  *\n  * @param {Function} [ready]\n  *        Callback function to call when the `HTML5` Tech is ready.\n  */\n  constructor(options, ready) {\n    super(options, ready);\n    const source = options.source;\n    let crossoriginTracks = false;\n    this.featuresVideoFrameCallback = this.featuresVideoFrameCallback && this.el_.tagName === 'VIDEO';\n\n    // Set the source if one is provided\n    // 1) Check if the source is new (if not, we want to keep the original so playback isn't interrupted)\n    // 2) Check to see if the network state of the tag was failed at init, and if so, reset the source\n    // anyway so the error gets fired.\n    if (source && (this.el_.currentSrc !== source.src || options.tag && options.tag.initNetworkState_ === 3)) {\n      this.setSource(source);\n    } else {\n      this.handleLateInit_(this.el_);\n    }\n\n    // setup sourceset after late sourceset/init\n    if (options.enableSourceset) {\n      this.setupSourcesetHandling_();\n    }\n    this.isScrubbing_ = false;\n    if (this.el_.hasChildNodes()) {\n      const nodes = this.el_.childNodes;\n      let nodesLength = nodes.length;\n      const removeNodes = [];\n      while (nodesLength--) {\n        const node = nodes[nodesLength];\n        const nodeName = node.nodeName.toLowerCase();\n        if (nodeName === 'track') {\n          if (!this.featuresNativeTextTracks) {\n            // Empty video tag tracks so the built-in player doesn't use them also.\n            // This may not be fast enough to stop HTML5 browsers from reading the tags\n            // so we'll need to turn off any default tracks if we're manually doing\n            // captions and subtitles. videoElement.textTracks\n            removeNodes.push(node);\n          } else {\n            // store HTMLTrackElement and TextTrack to remote list\n            this.remoteTextTrackEls().addTrackElement_(node);\n            this.remoteTextTracks().addTrack(node.track);\n            this.textTracks().addTrack(node.track);\n            if (!crossoriginTracks && !this.el_.hasAttribute('crossorigin') && isCrossOrigin(node.src)) {\n              crossoriginTracks = true;\n            }\n          }\n        }\n      }\n      for (let i = 0; i < removeNodes.length; i++) {\n        this.el_.removeChild(removeNodes[i]);\n      }\n    }\n    this.proxyNativeTracks_();\n    if (this.featuresNativeTextTracks && crossoriginTracks) {\n      log$1.warn('Text Tracks are being loaded from another origin but the crossorigin attribute isn\\'t used.\\n' + 'This may prevent text tracks from loading.');\n    }\n\n    // prevent iOS Safari from disabling metadata text tracks during native playback\n    this.restoreMetadataTracksInIOSNativePlayer_();\n\n    // Determine if native controls should be used\n    // Our goal should be to get the custom controls on mobile solid everywhere\n    // so we can remove this all together. Right now this will block custom\n    // controls on touch enabled laptops like the Chrome Pixel\n    if ((TOUCH_ENABLED || IS_IPHONE) && options.nativeControlsForTouch === true) {\n      this.setControls(true);\n    }\n\n    // on iOS, we want to proxy `webkitbeginfullscreen` and `webkitendfullscreen`\n    // into a `fullscreenchange` event\n    this.proxyWebkitFullscreen_();\n    this.triggerReady();\n  }\n\n  /**\n   * Dispose of `HTML5` media element and remove all tracks.\n   */\n  dispose() {\n    if (this.el_ && this.el_.resetSourceset_) {\n      this.el_.resetSourceset_();\n    }\n    Html5.disposeMediaElement(this.el_);\n    this.options_ = null;\n\n    // tech will handle clearing of the emulated track list\n    super.dispose();\n  }\n\n  /**\n   * Modify the media element so that we can detect when\n   * the source is changed. Fires `sourceset` just after the source has changed\n   */\n  setupSourcesetHandling_() {\n    setupSourceset(this);\n  }\n\n  /**\n   * When a captions track is enabled in the iOS Safari native player, all other\n   * tracks are disabled (including metadata tracks), which nulls all of their\n   * associated cue points. This will restore metadata tracks to their pre-fullscreen\n   * state in those cases so that cue points are not needlessly lost.\n   *\n   * @private\n   */\n  restoreMetadataTracksInIOSNativePlayer_() {\n    const textTracks = this.textTracks();\n    let metadataTracksPreFullscreenState;\n\n    // captures a snapshot of every metadata track's current state\n    const takeMetadataTrackSnapshot = () => {\n      metadataTracksPreFullscreenState = [];\n      for (let i = 0; i < textTracks.length; i++) {\n        const track = textTracks[i];\n        if (track.kind === 'metadata') {\n          metadataTracksPreFullscreenState.push({\n            track,\n            storedMode: track.mode\n          });\n        }\n      }\n    };\n\n    // snapshot each metadata track's initial state, and update the snapshot\n    // each time there is a track 'change' event\n    takeMetadataTrackSnapshot();\n    textTracks.addEventListener('change', takeMetadataTrackSnapshot);\n    this.on('dispose', () => textTracks.removeEventListener('change', takeMetadataTrackSnapshot));\n    const restoreTrackMode = () => {\n      for (let i = 0; i < metadataTracksPreFullscreenState.length; i++) {\n        const storedTrack = metadataTracksPreFullscreenState[i];\n        if (storedTrack.track.mode === 'disabled' && storedTrack.track.mode !== storedTrack.storedMode) {\n          storedTrack.track.mode = storedTrack.storedMode;\n        }\n      }\n      // we only want this handler to be executed on the first 'change' event\n      textTracks.removeEventListener('change', restoreTrackMode);\n    };\n\n    // when we enter fullscreen playback, stop updating the snapshot and\n    // restore all track modes to their pre-fullscreen state\n    this.on('webkitbeginfullscreen', () => {\n      textTracks.removeEventListener('change', takeMetadataTrackSnapshot);\n\n      // remove the listener before adding it just in case it wasn't previously removed\n      textTracks.removeEventListener('change', restoreTrackMode);\n      textTracks.addEventListener('change', restoreTrackMode);\n    });\n\n    // start updating the snapshot again after leaving fullscreen\n    this.on('webkitendfullscreen', () => {\n      // remove the listener before adding it just in case it wasn't previously removed\n      textTracks.removeEventListener('change', takeMetadataTrackSnapshot);\n      textTracks.addEventListener('change', takeMetadataTrackSnapshot);\n\n      // remove the restoreTrackMode handler in case it wasn't triggered during fullscreen playback\n      textTracks.removeEventListener('change', restoreTrackMode);\n    });\n  }\n\n  /**\n   * Attempt to force override of tracks for the given type\n   *\n   * @param {string} type - Track type to override, possible values include 'Audio',\n   * 'Video', and 'Text'.\n   * @param {boolean} override - If set to true native audio/video will be overridden,\n   * otherwise native audio/video will potentially be used.\n   * @private\n   */\n  overrideNative_(type, override) {\n    // If there is no behavioral change don't add/remove listeners\n    if (override !== this[`featuresNative${type}Tracks`]) {\n      return;\n    }\n    const lowerCaseType = type.toLowerCase();\n    if (this[`${lowerCaseType}TracksListeners_`]) {\n      Object.keys(this[`${lowerCaseType}TracksListeners_`]).forEach(eventName => {\n        const elTracks = this.el()[`${lowerCaseType}Tracks`];\n        elTracks.removeEventListener(eventName, this[`${lowerCaseType}TracksListeners_`][eventName]);\n      });\n    }\n    this[`featuresNative${type}Tracks`] = !override;\n    this[`${lowerCaseType}TracksListeners_`] = null;\n    this.proxyNativeTracksForType_(lowerCaseType);\n  }\n\n  /**\n   * Attempt to force override of native audio tracks.\n   *\n   * @param {boolean} override - If set to true native audio will be overridden,\n   * otherwise native audio will potentially be used.\n   */\n  overrideNativeAudioTracks(override) {\n    this.overrideNative_('Audio', override);\n  }\n\n  /**\n   * Attempt to force override of native video tracks.\n   *\n   * @param {boolean} override - If set to true native video will be overridden,\n   * otherwise native video will potentially be used.\n   */\n  overrideNativeVideoTracks(override) {\n    this.overrideNative_('Video', override);\n  }\n\n  /**\n   * Proxy native track list events for the given type to our track\n   * lists if the browser we are playing in supports that type of track list.\n   *\n   * @param {string} name - Track type; values include 'audio', 'video', and 'text'\n   * @private\n   */\n  proxyNativeTracksForType_(name) {\n    const props = NORMAL[name];\n    const elTracks = this.el()[props.getterName];\n    const techTracks = this[props.getterName]();\n    if (!this[`featuresNative${props.capitalName}Tracks`] || !elTracks || !elTracks.addEventListener) {\n      return;\n    }\n    const listeners = {\n      change: e => {\n        const event = {\n          type: 'change',\n          target: techTracks,\n          currentTarget: techTracks,\n          srcElement: techTracks\n        };\n        techTracks.trigger(event);\n\n        // if we are a text track change event, we should also notify the\n        // remote text track list. This can potentially cause a false positive\n        // if we were to get a change event on a non-remote track and\n        // we triggered the event on the remote text track list which doesn't\n        // contain that track. However, best practices mean looping through the\n        // list of tracks and searching for the appropriate mode value, so,\n        // this shouldn't pose an issue\n        if (name === 'text') {\n          this[REMOTE.remoteText.getterName]().trigger(event);\n        }\n      },\n      addtrack(e) {\n        techTracks.addTrack(e.track);\n      },\n      removetrack(e) {\n        techTracks.removeTrack(e.track);\n      }\n    };\n    const removeOldTracks = function () {\n      const removeTracks = [];\n      for (let i = 0; i < techTracks.length; i++) {\n        let found = false;\n        for (let j = 0; j < elTracks.length; j++) {\n          if (elTracks[j] === techTracks[i]) {\n            found = true;\n            break;\n          }\n        }\n        if (!found) {\n          removeTracks.push(techTracks[i]);\n        }\n      }\n      while (removeTracks.length) {\n        techTracks.removeTrack(removeTracks.shift());\n      }\n    };\n    this[props.getterName + 'Listeners_'] = listeners;\n    Object.keys(listeners).forEach(eventName => {\n      const listener = listeners[eventName];\n      elTracks.addEventListener(eventName, listener);\n      this.on('dispose', e => elTracks.removeEventListener(eventName, listener));\n    });\n\n    // Remove (native) tracks that are not used anymore\n    this.on('loadstart', removeOldTracks);\n    this.on('dispose', e => this.off('loadstart', removeOldTracks));\n  }\n\n  /**\n   * Proxy all native track list events to our track lists if the browser we are playing\n   * in supports that type of track list.\n   *\n   * @private\n   */\n  proxyNativeTracks_() {\n    NORMAL.names.forEach(name => {\n      this.proxyNativeTracksForType_(name);\n    });\n  }\n\n  /**\n   * Create the `Html5` Tech's DOM element.\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n  createEl() {\n    let el = this.options_.tag;\n\n    // Check if this browser supports moving the element into the box.\n    // On the iPhone video will break if you move the element,\n    // So we have to create a brand new element.\n    // If we ingested the player div, we do not need to move the media element.\n    if (!el || !(this.options_.playerElIngest || this.movingMediaElementInDOM)) {\n      // If the original tag is still there, clone and remove it.\n      if (el) {\n        const clone = el.cloneNode(true);\n        if (el.parentNode) {\n          el.parentNode.insertBefore(clone, el);\n        }\n        Html5.disposeMediaElement(el);\n        el = clone;\n      } else {\n        el = document.createElement('video');\n\n        // determine if native controls should be used\n        const tagAttributes = this.options_.tag && getAttributes(this.options_.tag);\n        const attributes = merge$1({}, tagAttributes);\n        if (!TOUCH_ENABLED || this.options_.nativeControlsForTouch !== true) {\n          delete attributes.controls;\n        }\n        setAttributes(el, Object.assign(attributes, {\n          id: this.options_.techId,\n          class: 'vjs-tech'\n        }));\n      }\n      el.playerId = this.options_.playerId;\n    }\n    if (typeof this.options_.preload !== 'undefined') {\n      setAttribute(el, 'preload', this.options_.preload);\n    }\n    if (this.options_.disablePictureInPicture !== undefined) {\n      el.disablePictureInPicture = this.options_.disablePictureInPicture;\n    }\n\n    // Update specific tag settings, in case they were overridden\n    // `autoplay` has to be *last* so that `muted` and `playsinline` are present\n    // when iOS/Safari or other browsers attempt to autoplay.\n    const settingsAttrs = ['loop', 'muted', 'playsinline', 'autoplay'];\n    for (let i = 0; i < settingsAttrs.length; i++) {\n      const attr = settingsAttrs[i];\n      const value = this.options_[attr];\n      if (typeof value !== 'undefined') {\n        if (value) {\n          setAttribute(el, attr, attr);\n        } else {\n          removeAttribute(el, attr);\n        }\n        el[attr] = value;\n      }\n    }\n    return el;\n  }\n\n  /**\n   * This will be triggered if the loadstart event has already fired, before videojs was\n   * ready. Two known examples of when this can happen are:\n   * 1. If we're loading the playback object after it has started loading\n   * 2. The media is already playing the (often with autoplay on) then\n   *\n   * This function will fire another loadstart so that videojs can catchup.\n   *\n   * @fires Tech#loadstart\n   *\n   * @return {undefined}\n   *         returns nothing.\n   */\n  handleLateInit_(el) {\n    if (el.networkState === 0 || el.networkState === 3) {\n      // The video element hasn't started loading the source yet\n      // or didn't find a source\n      return;\n    }\n    if (el.readyState === 0) {\n      // NetworkState is set synchronously BUT loadstart is fired at the\n      // end of the current stack, usually before setInterval(fn, 0).\n      // So at this point we know loadstart may have already fired or is\n      // about to fire, and either way the player hasn't seen it yet.\n      // We don't want to fire loadstart prematurely here and cause a\n      // double loadstart so we'll wait and see if it happens between now\n      // and the next loop, and fire it if not.\n      // HOWEVER, we also want to make sure it fires before loadedmetadata\n      // which could also happen between now and the next loop, so we'll\n      // watch for that also.\n      let loadstartFired = false;\n      const setLoadstartFired = function () {\n        loadstartFired = true;\n      };\n      this.on('loadstart', setLoadstartFired);\n      const triggerLoadstart = function () {\n        // We did miss the original loadstart. Make sure the player\n        // sees loadstart before loadedmetadata\n        if (!loadstartFired) {\n          this.trigger('loadstart');\n        }\n      };\n      this.on('loadedmetadata', triggerLoadstart);\n      this.ready(function () {\n        this.off('loadstart', setLoadstartFired);\n        this.off('loadedmetadata', triggerLoadstart);\n        if (!loadstartFired) {\n          // We did miss the original native loadstart. Fire it now.\n          this.trigger('loadstart');\n        }\n      });\n      return;\n    }\n\n    // From here on we know that loadstart already fired and we missed it.\n    // The other readyState events aren't as much of a problem if we double\n    // them, so not going to go to as much trouble as loadstart to prevent\n    // that unless we find reason to.\n    const eventsToTrigger = ['loadstart'];\n\n    // loadedmetadata: newly equal to HAVE_METADATA (1) or greater\n    eventsToTrigger.push('loadedmetadata');\n\n    // loadeddata: newly increased to HAVE_CURRENT_DATA (2) or greater\n    if (el.readyState >= 2) {\n      eventsToTrigger.push('loadeddata');\n    }\n\n    // canplay: newly increased to HAVE_FUTURE_DATA (3) or greater\n    if (el.readyState >= 3) {\n      eventsToTrigger.push('canplay');\n    }\n\n    // canplaythrough: newly equal to HAVE_ENOUGH_DATA (4)\n    if (el.readyState >= 4) {\n      eventsToTrigger.push('canplaythrough');\n    }\n\n    // We still need to give the player time to add event listeners\n    this.ready(function () {\n      eventsToTrigger.forEach(function (type) {\n        this.trigger(type);\n      }, this);\n    });\n  }\n\n  /**\n   * Set whether we are scrubbing or not.\n   * This is used to decide whether we should use `fastSeek` or not.\n   * `fastSeek` is used to provide trick play on Safari browsers.\n   *\n   * @param {boolean} isScrubbing\n   *                  - true for we are currently scrubbing\n   *                  - false for we are no longer scrubbing\n   */\n  setScrubbing(isScrubbing) {\n    this.isScrubbing_ = isScrubbing;\n  }\n\n  /**\n   * Get whether we are scrubbing or not.\n   *\n   * @return {boolean} isScrubbing\n   *                  - true for we are currently scrubbing\n   *                  - false for we are no longer scrubbing\n   */\n  scrubbing() {\n    return this.isScrubbing_;\n  }\n\n  /**\n   * Set current time for the `HTML5` tech.\n   *\n   * @param {number} seconds\n   *        Set the current time of the media to this.\n   */\n  setCurrentTime(seconds) {\n    try {\n      if (this.isScrubbing_ && this.el_.fastSeek && IS_ANY_SAFARI) {\n        this.el_.fastSeek(seconds);\n      } else {\n        this.el_.currentTime = seconds;\n      }\n    } catch (e) {\n      log$1(e, 'Video is not ready. (Video.js)');\n      // this.warning(VideoJS.warnings.videoNotReady);\n    }\n  }\n\n  /**\n   * Get the current duration of the HTML5 media element.\n   *\n   * @return {number}\n   *         The duration of the media or 0 if there is no duration.\n   */\n  duration() {\n    // Android Chrome will report duration as Infinity for VOD HLS until after\n    // playback has started, which triggers the live display erroneously.\n    // Return NaN if playback has not started and trigger a durationupdate once\n    // the duration can be reliably known.\n    if (this.el_.duration === Infinity && IS_ANDROID && IS_CHROME && this.el_.currentTime === 0) {\n      // Wait for the first `timeupdate` with currentTime > 0 - there may be\n      // several with 0\n      const checkProgress = () => {\n        if (this.el_.currentTime > 0) {\n          // Trigger durationchange for genuinely live video\n          if (this.el_.duration === Infinity) {\n            this.trigger('durationchange');\n          }\n          this.off('timeupdate', checkProgress);\n        }\n      };\n      this.on('timeupdate', checkProgress);\n      return NaN;\n    }\n    return this.el_.duration || NaN;\n  }\n\n  /**\n   * Get the current width of the HTML5 media element.\n   *\n   * @return {number}\n   *         The width of the HTML5 media element.\n   */\n  width() {\n    return this.el_.offsetWidth;\n  }\n\n  /**\n   * Get the current height of the HTML5 media element.\n   *\n   * @return {number}\n   *         The height of the HTML5 media element.\n   */\n  height() {\n    return this.el_.offsetHeight;\n  }\n\n  /**\n   * Proxy iOS `webkitbeginfullscreen` and `webkitendfullscreen` into\n   * `fullscreenchange` event.\n   *\n   * @private\n   * @fires fullscreenchange\n   * @listens webkitendfullscreen\n   * @listens webkitbeginfullscreen\n   * @listens webkitbeginfullscreen\n   */\n  proxyWebkitFullscreen_() {\n    if (!('webkitDisplayingFullscreen' in this.el_)) {\n      return;\n    }\n    const endFn = function () {\n      this.trigger('fullscreenchange', {\n        isFullscreen: false\n      });\n      // Safari will sometimes set controls on the videoelement when existing fullscreen.\n      if (this.el_.controls && !this.options_.nativeControlsForTouch && this.controls()) {\n        this.el_.controls = false;\n      }\n    };\n    const beginFn = function () {\n      if ('webkitPresentationMode' in this.el_ && this.el_.webkitPresentationMode !== 'picture-in-picture') {\n        this.one('webkitendfullscreen', endFn);\n        this.trigger('fullscreenchange', {\n          isFullscreen: true,\n          // set a flag in case another tech triggers fullscreenchange\n          nativeIOSFullscreen: true\n        });\n      }\n    };\n    this.on('webkitbeginfullscreen', beginFn);\n    this.on('dispose', () => {\n      this.off('webkitbeginfullscreen', beginFn);\n      this.off('webkitendfullscreen', endFn);\n    });\n  }\n\n  /**\n   * Check if fullscreen is supported on the video el.\n   *\n   * @return {boolean}\n   *         - True if fullscreen is supported.\n   *         - False if fullscreen is not supported.\n   */\n  supportsFullScreen() {\n    return typeof this.el_.webkitEnterFullScreen === 'function';\n  }\n\n  /**\n   * Request that the `HTML5` Tech enter fullscreen.\n   */\n  enterFullScreen() {\n    const video = this.el_;\n    if (video.paused && video.networkState <= video.HAVE_METADATA) {\n      // attempt to prime the video element for programmatic access\n      // this isn't necessary on the desktop but shouldn't hurt\n      silencePromise(this.el_.play());\n\n      // playing and pausing synchronously during the transition to fullscreen\n      // can get iOS ~6.1 devices into a play/pause loop\n      this.setTimeout(function () {\n        video.pause();\n        try {\n          video.webkitEnterFullScreen();\n        } catch (e) {\n          this.trigger('fullscreenerror', e);\n        }\n      }, 0);\n    } else {\n      try {\n        video.webkitEnterFullScreen();\n      } catch (e) {\n        this.trigger('fullscreenerror', e);\n      }\n    }\n  }\n\n  /**\n   * Request that the `HTML5` Tech exit fullscreen.\n   */\n  exitFullScreen() {\n    if (!this.el_.webkitDisplayingFullscreen) {\n      this.trigger('fullscreenerror', new Error('The video is not fullscreen'));\n      return;\n    }\n    this.el_.webkitExitFullScreen();\n  }\n\n  /**\n   * Create a floating video window always on top of other windows so that users may\n   * continue consuming media while they interact with other content sites, or\n   * applications on their device.\n   *\n   * @see [Spec]{@link https://wicg.github.io/picture-in-picture}\n   *\n   * @return {Promise}\n   *         A promise with a Picture-in-Picture window.\n   */\n  requestPictureInPicture() {\n    return this.el_.requestPictureInPicture();\n  }\n\n  /**\n   * Native requestVideoFrameCallback if supported by browser/tech, or fallback\n   * Don't use rVCF on Safari when DRM is playing, as it doesn't fire\n   * Needs to be checked later than the constructor\n   * This will be a false positive for clear sources loaded after a Fairplay source\n   *\n   * @param {function} cb function to call\n   * @return {number} id of request\n   */\n  requestVideoFrameCallback(cb) {\n    if (this.featuresVideoFrameCallback && !this.el_.webkitKeys) {\n      return this.el_.requestVideoFrameCallback(cb);\n    }\n    return super.requestVideoFrameCallback(cb);\n  }\n\n  /**\n   * Native or fallback requestVideoFrameCallback\n   *\n   * @param {number} id request id to cancel\n   */\n  cancelVideoFrameCallback(id) {\n    if (this.featuresVideoFrameCallback && !this.el_.webkitKeys) {\n      this.el_.cancelVideoFrameCallback(id);\n    } else {\n      super.cancelVideoFrameCallback(id);\n    }\n  }\n\n  /**\n   * A getter/setter for the `Html5` Tech's source object.\n   * > Note: Please use {@link Html5#setSource}\n   *\n   * @param {Tech~SourceObject} [src]\n   *        The source object you want to set on the `HTML5` techs element.\n   *\n   * @return {Tech~SourceObject|undefined}\n   *         - The current source object when a source is not passed in.\n   *         - undefined when setting\n   *\n   * @deprecated Since version 5.\n   */\n  src(src) {\n    if (src === undefined) {\n      return this.el_.src;\n    }\n\n    // Setting src through `src` instead of `setSrc` will be deprecated\n    this.setSrc(src);\n  }\n\n  /**\n   * Reset the tech by removing all sources and then calling\n   * {@link Html5.resetMediaElement}.\n   */\n  reset() {\n    Html5.resetMediaElement(this.el_);\n  }\n\n  /**\n   * Get the current source on the `HTML5` Tech. Falls back to returning the source from\n   * the HTML5 media element.\n   *\n   * @return {Tech~SourceObject}\n   *         The current source object from the HTML5 tech. With a fallback to the\n   *         elements source.\n   */\n  currentSrc() {\n    if (this.currentSource_) {\n      return this.currentSource_.src;\n    }\n    return this.el_.currentSrc;\n  }\n\n  /**\n   * Set controls attribute for the HTML5 media Element.\n   *\n   * @param {string} val\n   *        Value to set the controls attribute to\n   */\n  setControls(val) {\n    this.el_.controls = !!val;\n  }\n\n  /**\n   * Create and returns a remote {@link TextTrack} object.\n   *\n   * @param {string} kind\n   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)\n   *\n   * @param {string} [label]\n   *        Label to identify the text track\n   *\n   * @param {string} [language]\n   *        Two letter language abbreviation\n   *\n   * @return {TextTrack}\n   *         The TextTrack that gets created.\n   */\n  addTextTrack(kind, label, language) {\n    if (!this.featuresNativeTextTracks) {\n      return super.addTextTrack(kind, label, language);\n    }\n    return this.el_.addTextTrack(kind, label, language);\n  }\n\n  /**\n   * Creates either native TextTrack or an emulated TextTrack depending\n   * on the value of `featuresNativeTextTracks`\n   *\n   * @param {Object} options\n   *        The object should contain the options to initialize the TextTrack with.\n   *\n   * @param {string} [options.kind]\n   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata).\n   *\n   * @param {string} [options.label]\n   *        Label to identify the text track\n   *\n   * @param {string} [options.language]\n   *        Two letter language abbreviation.\n   *\n   * @param {boolean} [options.default]\n   *        Default this track to on.\n   *\n   * @param {string} [options.id]\n   *        The internal id to assign this track.\n   *\n   * @param {string} [options.src]\n   *        A source url for the track.\n   *\n   * @return {HTMLTrackElement}\n   *         The track element that gets created.\n   */\n  createRemoteTextTrack(options) {\n    if (!this.featuresNativeTextTracks) {\n      return super.createRemoteTextTrack(options);\n    }\n    const htmlTrackElement = document.createElement('track');\n    if (options.kind) {\n      htmlTrackElement.kind = options.kind;\n    }\n    if (options.label) {\n      htmlTrackElement.label = options.label;\n    }\n    if (options.language || options.srclang) {\n      htmlTrackElement.srclang = options.language || options.srclang;\n    }\n    if (options.default) {\n      htmlTrackElement.default = options.default;\n    }\n    if (options.id) {\n      htmlTrackElement.id = options.id;\n    }\n    if (options.src) {\n      htmlTrackElement.src = options.src;\n    }\n    return htmlTrackElement;\n  }\n\n  /**\n   * Creates a remote text track object and returns an html track element.\n   *\n   * @param {Object} options The object should contain values for\n   * kind, language, label, and src (location of the WebVTT file)\n   * @param {boolean} [manualCleanup=false] if set to true, the TextTrack\n   * will not be removed from the TextTrackList and HtmlTrackElementList\n   * after a source change\n   * @return {HTMLTrackElement} An Html Track Element.\n   * This can be an emulated {@link HTMLTrackElement} or a native one.\n   *\n   */\n  addRemoteTextTrack(options, manualCleanup) {\n    const htmlTrackElement = super.addRemoteTextTrack(options, manualCleanup);\n    if (this.featuresNativeTextTracks) {\n      this.el().appendChild(htmlTrackElement);\n    }\n    return htmlTrackElement;\n  }\n\n  /**\n   * Remove remote `TextTrack` from `TextTrackList` object\n   *\n   * @param {TextTrack} track\n   *        `TextTrack` object to remove\n   */\n  removeRemoteTextTrack(track) {\n    super.removeRemoteTextTrack(track);\n    if (this.featuresNativeTextTracks) {\n      const tracks = this.$$('track');\n      let i = tracks.length;\n      while (i--) {\n        if (track === tracks[i] || track === tracks[i].track) {\n          this.el().removeChild(tracks[i]);\n        }\n      }\n    }\n  }\n\n  /**\n   * Gets available media playback quality metrics as specified by the W3C's Media\n   * Playback Quality API.\n   *\n   * @see [Spec]{@link https://wicg.github.io/media-playback-quality}\n   *\n   * @return {Object}\n   *         An object with supported media playback quality metrics\n   */\n  getVideoPlaybackQuality() {\n    if (typeof this.el().getVideoPlaybackQuality === 'function') {\n      return this.el().getVideoPlaybackQuality();\n    }\n    const videoPlaybackQuality = {};\n    if (typeof this.el().webkitDroppedFrameCount !== 'undefined' && typeof this.el().webkitDecodedFrameCount !== 'undefined') {\n      videoPlaybackQuality.droppedVideoFrames = this.el().webkitDroppedFrameCount;\n      videoPlaybackQuality.totalVideoFrames = this.el().webkitDecodedFrameCount;\n    }\n    if (window$1.performance) {\n      videoPlaybackQuality.creationTime = window$1.performance.now();\n    }\n    return videoPlaybackQuality;\n  }\n}\n\n/* HTML5 Support Testing ---------------------------------------------------- */\n\n/**\n * Element for testing browser HTML5 media capabilities\n *\n * @type {Element}\n * @constant\n * @private\n */\ndefineLazyProperty(Html5, 'TEST_VID', function () {\n  if (!isReal()) {\n    return;\n  }\n  const video = document.createElement('video');\n  const track = document.createElement('track');\n  track.kind = 'captions';\n  track.srclang = 'en';\n  track.label = 'English';\n  video.appendChild(track);\n  return video;\n});\n\n/**\n * Check if HTML5 media is supported by this browser/device.\n *\n * @return {boolean}\n *         - True if HTML5 media is supported.\n *         - False if HTML5 media is not supported.\n */\nHtml5.isSupported = function () {\n  // IE with no Media Player is a LIAR! (#984)\n  try {\n    Html5.TEST_VID.volume = 0.5;\n  } catch (e) {\n    return false;\n  }\n  return !!(Html5.TEST_VID && Html5.TEST_VID.canPlayType);\n};\n\n/**\n * Check if the tech can support the given type\n *\n * @param {string} type\n *        The mimetype to check\n * @return {string} 'probably', 'maybe', or '' (empty string)\n */\nHtml5.canPlayType = function (type) {\n  return Html5.TEST_VID.canPlayType(type);\n};\n\n/**\n * Check if the tech can support the given source\n *\n * @param {Object} srcObj\n *        The source object\n * @param {Object} options\n *        The options passed to the tech\n * @return {string} 'probably', 'maybe', or '' (empty string)\n */\nHtml5.canPlaySource = function (srcObj, options) {\n  return Html5.canPlayType(srcObj.type);\n};\n\n/**\n * Check if the volume can be changed in this browser/device.\n * Volume cannot be changed in a lot of mobile devices.\n * Specifically, it can't be changed from 1 on iOS.\n *\n * @return {boolean}\n *         - True if volume can be controlled\n *         - False otherwise\n */\nHtml5.canControlVolume = function () {\n  // IE will error if Windows Media Player not installed #3315\n  try {\n    const volume = Html5.TEST_VID.volume;\n    Html5.TEST_VID.volume = volume / 2 + 0.1;\n    const canControl = volume !== Html5.TEST_VID.volume;\n\n    // With the introduction of iOS 15, there are cases where the volume is read as\n    // changed but reverts back to its original state at the start of the next tick.\n    // To determine whether volume can be controlled on iOS,\n    // a timeout is set and the volume is checked asynchronously.\n    // Since `features` doesn't currently work asynchronously, the value is manually set.\n    if (canControl && IS_IOS) {\n      window$1.setTimeout(() => {\n        if (Html5 && Html5.prototype) {\n          Html5.prototype.featuresVolumeControl = volume !== Html5.TEST_VID.volume;\n        }\n      });\n\n      // default iOS to false, which will be updated in the timeout above.\n      return false;\n    }\n    return canControl;\n  } catch (e) {\n    return false;\n  }\n};\n\n/**\n * Check if the volume can be muted in this browser/device.\n * Some devices, e.g. iOS, don't allow changing volume\n * but permits muting/unmuting.\n *\n * @return {boolean}\n *      - True if volume can be muted\n *      - False otherwise\n */\nHtml5.canMuteVolume = function () {\n  try {\n    const muted = Html5.TEST_VID.muted;\n\n    // in some versions of iOS muted property doesn't always\n    // work, so we want to set both property and attribute\n    Html5.TEST_VID.muted = !muted;\n    if (Html5.TEST_VID.muted) {\n      setAttribute(Html5.TEST_VID, 'muted', 'muted');\n    } else {\n      removeAttribute(Html5.TEST_VID, 'muted', 'muted');\n    }\n    return muted !== Html5.TEST_VID.muted;\n  } catch (e) {\n    return false;\n  }\n};\n\n/**\n * Check if the playback rate can be changed in this browser/device.\n *\n * @return {boolean}\n *         - True if playback rate can be controlled\n *         - False otherwise\n */\nHtml5.canControlPlaybackRate = function () {\n  // Playback rate API is implemented in Android Chrome, but doesn't do anything\n  // https://github.com/videojs/video.js/issues/3180\n  if (IS_ANDROID && IS_CHROME && CHROME_VERSION < 58) {\n    return false;\n  }\n  // IE will error if Windows Media Player not installed #3315\n  try {\n    const playbackRate = Html5.TEST_VID.playbackRate;\n    Html5.TEST_VID.playbackRate = playbackRate / 2 + 0.1;\n    return playbackRate !== Html5.TEST_VID.playbackRate;\n  } catch (e) {\n    return false;\n  }\n};\n\n/**\n * Check if we can override a video/audio elements attributes, with\n * Object.defineProperty.\n *\n * @return {boolean}\n *         - True if builtin attributes can be overridden\n *         - False otherwise\n */\nHtml5.canOverrideAttributes = function () {\n  // if we cannot overwrite the src/innerHTML property, there is no support\n  // iOS 7 safari for instance cannot do this.\n  try {\n    const noop = () => {};\n    Object.defineProperty(document.createElement('video'), 'src', {\n      get: noop,\n      set: noop\n    });\n    Object.defineProperty(document.createElement('audio'), 'src', {\n      get: noop,\n      set: noop\n    });\n    Object.defineProperty(document.createElement('video'), 'innerHTML', {\n      get: noop,\n      set: noop\n    });\n    Object.defineProperty(document.createElement('audio'), 'innerHTML', {\n      get: noop,\n      set: noop\n    });\n  } catch (e) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * Check to see if native `TextTrack`s are supported by this browser/device.\n *\n * @return {boolean}\n *         - True if native `TextTrack`s are supported.\n *         - False otherwise\n */\nHtml5.supportsNativeTextTracks = function () {\n  return IS_ANY_SAFARI || IS_IOS && IS_CHROME;\n};\n\n/**\n * Check to see if native `VideoTrack`s are supported by this browser/device\n *\n * @return {boolean}\n *        - True if native `VideoTrack`s are supported.\n *        - False otherwise\n */\nHtml5.supportsNativeVideoTracks = function () {\n  return !!(Html5.TEST_VID && Html5.TEST_VID.videoTracks);\n};\n\n/**\n * Check to see if native `AudioTrack`s are supported by this browser/device\n *\n * @return {boolean}\n *        - True if native `AudioTrack`s are supported.\n *        - False otherwise\n */\nHtml5.supportsNativeAudioTracks = function () {\n  return !!(Html5.TEST_VID && Html5.TEST_VID.audioTracks);\n};\n\n/**\n * An array of events available on the Html5 tech.\n *\n * @private\n * @type {Array}\n */\nHtml5.Events = ['loadstart', 'suspend', 'abort', 'error', 'emptied', 'stalled', 'loadedmetadata', 'loadeddata', 'canplay', 'canplaythrough', 'playing', 'waiting', 'seeking', 'seeked', 'ended', 'durationchange', 'timeupdate', 'progress', 'play', 'pause', 'ratechange', 'resize', 'volumechange'];\n\n/**\n * Boolean indicating whether the `Tech` supports volume control.\n *\n * @type {boolean}\n * @default {@link Html5.canControlVolume}\n */\n/**\n * Boolean indicating whether the `Tech` supports muting volume.\n *\n * @type {boolean}\n * @default {@link Html5.canMuteVolume}\n */\n\n/**\n * Boolean indicating whether the `Tech` supports changing the speed at which the media\n * plays. Examples:\n *   - Set player to play 2x (twice) as fast\n *   - Set player to play 0.5x (half) as fast\n *\n * @type {boolean}\n * @default {@link Html5.canControlPlaybackRate}\n */\n\n/**\n * Boolean indicating whether the `Tech` supports the `sourceset` event.\n *\n * @type {boolean}\n * @default\n */\n/**\n * Boolean indicating whether the `HTML5` tech currently supports native `TextTrack`s.\n *\n * @type {boolean}\n * @default {@link Html5.supportsNativeTextTracks}\n */\n/**\n * Boolean indicating whether the `HTML5` tech currently supports native `VideoTrack`s.\n *\n * @type {boolean}\n * @default {@link Html5.supportsNativeVideoTracks}\n */\n/**\n * Boolean indicating whether the `HTML5` tech currently supports native `AudioTrack`s.\n *\n * @type {boolean}\n * @default {@link Html5.supportsNativeAudioTracks}\n */\n[['featuresMuteControl', 'canMuteVolume'], ['featuresPlaybackRate', 'canControlPlaybackRate'], ['featuresSourceset', 'canOverrideAttributes'], ['featuresNativeTextTracks', 'supportsNativeTextTracks'], ['featuresNativeVideoTracks', 'supportsNativeVideoTracks'], ['featuresNativeAudioTracks', 'supportsNativeAudioTracks']].forEach(function ([key, fn]) {\n  defineLazyProperty(Html5.prototype, key, () => Html5[fn](), true);\n});\nHtml5.prototype.featuresVolumeControl = Html5.canControlVolume();\n\n/**\n * Boolean indicating whether the `HTML5` tech currently supports the media element\n * moving in the DOM. iOS breaks if you move the media element, so this is set this to\n * false there. Everywhere else this should be true.\n *\n * @type {boolean}\n * @default\n */\nHtml5.prototype.movingMediaElementInDOM = !IS_IOS;\n\n// TODO: Previous comment: No longer appears to be used. Can probably be removed.\n//       Is this true?\n/**\n * Boolean indicating whether the `HTML5` tech currently supports automatic media resize\n * when going into fullscreen.\n *\n * @type {boolean}\n * @default\n */\nHtml5.prototype.featuresFullscreenResize = true;\n\n/**\n * Boolean indicating whether the `HTML5` tech currently supports the progress event.\n * If this is false, manual `progress` events will be triggered instead.\n *\n * @type {boolean}\n * @default\n */\nHtml5.prototype.featuresProgressEvents = true;\n\n/**\n * Boolean indicating whether the `HTML5` tech currently supports the timeupdate event.\n * If this is false, manual `timeupdate` events will be triggered instead.\n *\n * @default\n */\nHtml5.prototype.featuresTimeupdateEvents = true;\n\n/**\n * Whether the HTML5 el supports `requestVideoFrameCallback`\n *\n * @type {boolean}\n */\nHtml5.prototype.featuresVideoFrameCallback = !!(Html5.TEST_VID && Html5.TEST_VID.requestVideoFrameCallback);\nHtml5.disposeMediaElement = function (el) {\n  if (!el) {\n    return;\n  }\n  if (el.parentNode) {\n    el.parentNode.removeChild(el);\n  }\n\n  // remove any child track or source nodes to prevent their loading\n  while (el.hasChildNodes()) {\n    el.removeChild(el.firstChild);\n  }\n\n  // remove any src reference. not setting `src=''` because that causes a warning\n  // in firefox\n  el.removeAttribute('src');\n\n  // force the media element to update its loading state by calling load()\n  // however IE on Windows 7N has a bug that throws an error so need a try/catch (#793)\n  if (typeof el.load === 'function') {\n    // wrapping in an iife so it's not deoptimized (#1060#discussion_r10324473)\n    (function () {\n      try {\n        el.load();\n      } catch (e) {\n        // not supported\n      }\n    })();\n  }\n};\nHtml5.resetMediaElement = function (el) {\n  if (!el) {\n    return;\n  }\n  const sources = el.querySelectorAll('source');\n  let i = sources.length;\n  while (i--) {\n    el.removeChild(sources[i]);\n  }\n\n  // remove any src reference.\n  // not setting `src=''` because that throws an error\n  el.removeAttribute('src');\n  if (typeof el.load === 'function') {\n    // wrapping in an iife so it's not deoptimized (#1060#discussion_r10324473)\n    (function () {\n      try {\n        el.load();\n      } catch (e) {\n        // satisfy linter\n      }\n    })();\n  }\n};\n\n/* Native HTML5 element property wrapping ----------------------------------- */\n// Wrap native boolean attributes with getters that check both property and attribute\n// The list is as followed:\n// muted, defaultMuted, autoplay, controls, loop, playsinline\n[\n/**\n * Get the value of `muted` from the media element. `muted` indicates\n * that the volume for the media should be set to silent. This does not actually change\n * the `volume` attribute.\n *\n * @method Html5#muted\n * @return {boolean}\n *         - True if the value of `volume` should be ignored and the audio set to silent.\n *         - False if the value of `volume` should be used.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-muted}\n */\n'muted',\n/**\n * Get the value of `defaultMuted` from the media element. `defaultMuted` indicates\n * whether the media should start muted or not. Only changes the default state of the\n * media. `muted` and `defaultMuted` can have different values. {@link Html5#muted} indicates the\n * current state.\n *\n * @method Html5#defaultMuted\n * @return {boolean}\n *         - The value of `defaultMuted` from the media element.\n *         - True indicates that the media should start muted.\n *         - False indicates that the media should not start muted\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultmuted}\n */\n'defaultMuted',\n/**\n * Get the value of `autoplay` from the media element. `autoplay` indicates\n * that the media should start to play as soon as the page is ready.\n *\n * @method Html5#autoplay\n * @return {boolean}\n *         - The value of `autoplay` from the media element.\n *         - True indicates that the media should start as soon as the page loads.\n *         - False indicates that the media should not start as soon as the page loads.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-autoplay}\n */\n'autoplay',\n/**\n * Get the value of `controls` from the media element. `controls` indicates\n * whether the native media controls should be shown or hidden.\n *\n * @method Html5#controls\n * @return {boolean}\n *         - The value of `controls` from the media element.\n *         - True indicates that native controls should be showing.\n *         - False indicates that native controls should be hidden.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-controls}\n */\n'controls',\n/**\n * Get the value of `loop` from the media element. `loop` indicates\n * that the media should return to the start of the media and continue playing once\n * it reaches the end.\n *\n * @method Html5#loop\n * @return {boolean}\n *         - The value of `loop` from the media element.\n *         - True indicates that playback should seek back to start once\n *           the end of a media is reached.\n *         - False indicates that playback should not loop back to the start when the\n *           end of the media is reached.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-loop}\n */\n'loop',\n/**\n * Get the value of `playsinline` from the media element. `playsinline` indicates\n * to the browser that non-fullscreen playback is preferred when fullscreen\n * playback is the native default, such as in iOS Safari.\n *\n * @method Html5#playsinline\n * @return {boolean}\n *         - The value of `playsinline` from the media element.\n *         - True indicates that the media should play inline.\n *         - False indicates that the media should not play inline.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}\n */\n'playsinline'].forEach(function (prop) {\n  Html5.prototype[prop] = function () {\n    return this.el_[prop] || this.el_.hasAttribute(prop);\n  };\n});\n\n// Wrap native boolean attributes with setters that set both property and attribute\n// The list is as followed:\n// setMuted, setDefaultMuted, setAutoplay, setLoop, setPlaysinline\n// setControls is special-cased above\n[\n/**\n * Set the value of `muted` on the media element. `muted` indicates that the current\n * audio level should be silent.\n *\n * @method Html5#setMuted\n * @param {boolean} muted\n *        - True if the audio should be set to silent\n *        - False otherwise\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-muted}\n */\n'muted',\n/**\n * Set the value of `defaultMuted` on the media element. `defaultMuted` indicates that the current\n * audio level should be silent, but will only effect the muted level on initial playback..\n *\n * @method Html5.prototype.setDefaultMuted\n * @param {boolean} defaultMuted\n *        - True if the audio should be set to silent\n *        - False otherwise\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultmuted}\n */\n'defaultMuted',\n/**\n * Set the value of `autoplay` on the media element. `autoplay` indicates\n * that the media should start to play as soon as the page is ready.\n *\n * @method Html5#setAutoplay\n * @param {boolean} autoplay\n *         - True indicates that the media should start as soon as the page loads.\n *         - False indicates that the media should not start as soon as the page loads.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-autoplay}\n */\n'autoplay',\n/**\n * Set the value of `loop` on the media element. `loop` indicates\n * that the media should return to the start of the media and continue playing once\n * it reaches the end.\n *\n * @method Html5#setLoop\n * @param {boolean} loop\n *         - True indicates that playback should seek back to start once\n *           the end of a media is reached.\n *         - False indicates that playback should not loop back to the start when the\n *           end of the media is reached.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-loop}\n */\n'loop',\n/**\n * Set the value of `playsinline` from the media element. `playsinline` indicates\n * to the browser that non-fullscreen playback is preferred when fullscreen\n * playback is the native default, such as in iOS Safari.\n *\n * @method Html5#setPlaysinline\n * @param {boolean} playsinline\n *         - True indicates that the media should play inline.\n *         - False indicates that the media should not play inline.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}\n */\n'playsinline'].forEach(function (prop) {\n  Html5.prototype['set' + toTitleCase$1(prop)] = function (v) {\n    this.el_[prop] = v;\n    if (v) {\n      this.el_.setAttribute(prop, prop);\n    } else {\n      this.el_.removeAttribute(prop);\n    }\n  };\n});\n\n// Wrap native properties with a getter\n// The list is as followed\n// paused, currentTime, buffered, volume, poster, preload, error, seeking\n// seekable, ended, playbackRate, defaultPlaybackRate, disablePictureInPicture\n// played, networkState, readyState, videoWidth, videoHeight, crossOrigin\n[\n/**\n * Get the value of `paused` from the media element. `paused` indicates whether the media element\n * is currently paused or not.\n *\n * @method Html5#paused\n * @return {boolean}\n *         The value of `paused` from the media element.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-paused}\n */\n'paused',\n/**\n * Get the value of `currentTime` from the media element. `currentTime` indicates\n * the current second that the media is at in playback.\n *\n * @method Html5#currentTime\n * @return {number}\n *         The value of `currentTime` from the media element.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-currenttime}\n */\n'currentTime',\n/**\n * Get the value of `buffered` from the media element. `buffered` is a `TimeRange`\n * object that represents the parts of the media that are already downloaded and\n * available for playback.\n *\n * @method Html5#buffered\n * @return {TimeRange}\n *         The value of `buffered` from the media element.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-buffered}\n */\n'buffered',\n/**\n * Get the value of `volume` from the media element. `volume` indicates\n * the current playback volume of audio for a media. `volume` will be a value from 0\n * (silent) to 1 (loudest and default).\n *\n * @method Html5#volume\n * @return {number}\n *         The value of `volume` from the media element. Value will be between 0-1.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-a-volume}\n */\n'volume',\n/**\n * Get the value of `poster` from the media element. `poster` indicates\n * that the url of an image file that can/will be shown when no media data is available.\n *\n * @method Html5#poster\n * @return {string}\n *         The value of `poster` from the media element. Value will be a url to an\n *         image.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-video-poster}\n */\n'poster',\n/**\n * Get the value of `preload` from the media element. `preload` indicates\n * what should download before the media is interacted with. It can have the following\n * values:\n * - none: nothing should be downloaded\n * - metadata: poster and the first few frames of the media may be downloaded to get\n *   media dimensions and other metadata\n * - auto: allow the media and metadata for the media to be downloaded before\n *    interaction\n *\n * @method Html5#preload\n * @return {string}\n *         The value of `preload` from the media element. Will be 'none', 'metadata',\n *         or 'auto'.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-preload}\n */\n'preload',\n/**\n * Get the value of the `error` from the media element. `error` indicates any\n * MediaError that may have occurred during playback. If error returns null there is no\n * current error.\n *\n * @method Html5#error\n * @return {MediaError|null}\n *         The value of `error` from the media element. Will be `MediaError` if there\n *         is a current error and null otherwise.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-error}\n */\n'error',\n/**\n * Get the value of `seeking` from the media element. `seeking` indicates whether the\n * media is currently seeking to a new position or not.\n *\n * @method Html5#seeking\n * @return {boolean}\n *         - The value of `seeking` from the media element.\n *         - True indicates that the media is currently seeking to a new position.\n *         - False indicates that the media is not seeking to a new position at this time.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-seeking}\n */\n'seeking',\n/**\n * Get the value of `seekable` from the media element. `seekable` returns a\n * `TimeRange` object indicating ranges of time that can currently be `seeked` to.\n *\n * @method Html5#seekable\n * @return {TimeRange}\n *         The value of `seekable` from the media element. A `TimeRange` object\n *         indicating the current ranges of time that can be seeked to.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-seekable}\n */\n'seekable',\n/**\n * Get the value of `ended` from the media element. `ended` indicates whether\n * the media has reached the end or not.\n *\n * @method Html5#ended\n * @return {boolean}\n *         - The value of `ended` from the media element.\n *         - True indicates that the media has ended.\n *         - False indicates that the media has not ended.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-ended}\n */\n'ended',\n/**\n * Get the value of `playbackRate` from the media element. `playbackRate` indicates\n * the rate at which the media is currently playing back. Examples:\n *   - if playbackRate is set to 2, media will play twice as fast.\n *   - if playbackRate is set to 0.5, media will play half as fast.\n *\n * @method Html5#playbackRate\n * @return {number}\n *         The value of `playbackRate` from the media element. A number indicating\n *         the current playback speed of the media, where 1 is normal speed.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}\n */\n'playbackRate',\n/**\n * Get the value of `defaultPlaybackRate` from the media element. `defaultPlaybackRate` indicates\n * the rate at which the media is currently playing back. This value will not indicate the current\n * `playbackRate` after playback has started, use {@link Html5#playbackRate} for that.\n *\n * Examples:\n *   - if defaultPlaybackRate is set to 2, media will play twice as fast.\n *   - if defaultPlaybackRate is set to 0.5, media will play half as fast.\n *\n * @method Html5.prototype.defaultPlaybackRate\n * @return {number}\n *         The value of `defaultPlaybackRate` from the media element. A number indicating\n *         the current playback speed of the media, where 1 is normal speed.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}\n */\n'defaultPlaybackRate',\n/**\n * Get the value of 'disablePictureInPicture' from the video element.\n *\n * @method Html5#disablePictureInPicture\n * @return {boolean} value\n *         - The value of `disablePictureInPicture` from the video element.\n *         - True indicates that the video can't be played in Picture-In-Picture mode\n *         - False indicates that the video can be played in Picture-In-Picture mode\n *\n * @see [Spec]{@link https://w3c.github.io/picture-in-picture/#disable-pip}\n */\n'disablePictureInPicture',\n/**\n * Get the value of `played` from the media element. `played` returns a `TimeRange`\n * object representing points in the media timeline that have been played.\n *\n * @method Html5#played\n * @return {TimeRange}\n *         The value of `played` from the media element. A `TimeRange` object indicating\n *         the ranges of time that have been played.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-played}\n */\n'played',\n/**\n * Get the value of `networkState` from the media element. `networkState` indicates\n * the current network state. It returns an enumeration from the following list:\n * - 0: NETWORK_EMPTY\n * - 1: NETWORK_IDLE\n * - 2: NETWORK_LOADING\n * - 3: NETWORK_NO_SOURCE\n *\n * @method Html5#networkState\n * @return {number}\n *         The value of `networkState` from the media element. This will be a number\n *         from the list in the description.\n *\n * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-networkstate}\n */\n'networkState',\n/**\n * Get the value of `readyState` from the media element. `readyState` indicates\n * the current state of the media element. It returns an enumeration from the\n * following list:\n * - 0: HAVE_NOTHING\n * - 1: HAVE_METADATA\n * - 2: HAVE_CURRENT_DATA\n * - 3: HAVE_FUTURE_DATA\n * - 4: HAVE_ENOUGH_DATA\n *\n * @method Html5#readyState\n * @return {number}\n *         The value of `readyState` from the media element. This will be a number\n *         from the list in the description.\n *\n * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#ready-states}\n */\n'readyState',\n/**\n * Get the value of `videoWidth` from the video element. `videoWidth` indicates\n * the current width of the video in css pixels.\n *\n * @method Html5#videoWidth\n * @return {number}\n *         The value of `videoWidth` from the video element. This will be a number\n *         in css pixels.\n *\n * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-video-videowidth}\n */\n'videoWidth',\n/**\n * Get the value of `videoHeight` from the video element. `videoHeight` indicates\n * the current height of the video in css pixels.\n *\n * @method Html5#videoHeight\n * @return {number}\n *         The value of `videoHeight` from the video element. This will be a number\n *         in css pixels.\n *\n * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-video-videowidth}\n */\n'videoHeight',\n/**\n * Get the value of `crossOrigin` from the media element. `crossOrigin` indicates\n * to the browser that should sent the cookies along with the requests for the\n * different assets/playlists\n *\n * @method Html5#crossOrigin\n * @return {string}\n *         - anonymous indicates that the media should not sent cookies.\n *         - use-credentials indicates that the media should sent cookies along the requests.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/#attr-media-crossorigin}\n */\n'crossOrigin'].forEach(function (prop) {\n  Html5.prototype[prop] = function () {\n    return this.el_[prop];\n  };\n});\n\n// Wrap native properties with a setter in this format:\n// set + toTitleCase(name)\n// The list is as follows:\n// setVolume, setSrc, setPoster, setPreload, setPlaybackRate, setDefaultPlaybackRate,\n// setDisablePictureInPicture, setCrossOrigin\n[\n/**\n * Set the value of `volume` on the media element. `volume` indicates the current\n * audio level as a percentage in decimal form. This means that 1 is 100%, 0.5 is 50%, and\n * so on.\n *\n * @method Html5#setVolume\n * @param {number} percentAsDecimal\n *        The volume percent as a decimal. Valid range is from 0-1.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-a-volume}\n */\n'volume',\n/**\n * Set the value of `src` on the media element. `src` indicates the current\n * {@link Tech~SourceObject} for the media.\n *\n * @method Html5#setSrc\n * @param {Tech~SourceObject} src\n *        The source object to set as the current source.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-src}\n */\n'src',\n/**\n * Set the value of `poster` on the media element. `poster` is the url to\n * an image file that can/will be shown when no media data is available.\n *\n * @method Html5#setPoster\n * @param {string} poster\n *        The url to an image that should be used as the `poster` for the media\n *        element.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-poster}\n */\n'poster',\n/**\n * Set the value of `preload` on the media element. `preload` indicates\n * what should download before the media is interacted with. It can have the following\n * values:\n * - none: nothing should be downloaded\n * - metadata: poster and the first few frames of the media may be downloaded to get\n *   media dimensions and other metadata\n * - auto: allow the media and metadata for the media to be downloaded before\n *    interaction\n *\n * @method Html5#setPreload\n * @param {string} preload\n *         The value of `preload` to set on the media element. Must be 'none', 'metadata',\n *         or 'auto'.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-preload}\n */\n'preload',\n/**\n * Set the value of `playbackRate` on the media element. `playbackRate` indicates\n * the rate at which the media should play back. Examples:\n *   - if playbackRate is set to 2, media will play twice as fast.\n *   - if playbackRate is set to 0.5, media will play half as fast.\n *\n * @method Html5#setPlaybackRate\n * @return {number}\n *         The value of `playbackRate` from the media element. A number indicating\n *         the current playback speed of the media, where 1 is normal speed.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}\n */\n'playbackRate',\n/**\n * Set the value of `defaultPlaybackRate` on the media element. `defaultPlaybackRate` indicates\n * the rate at which the media should play back upon initial startup. Changing this value\n * after a video has started will do nothing. Instead you should used {@link Html5#setPlaybackRate}.\n *\n * Example Values:\n *   - if playbackRate is set to 2, media will play twice as fast.\n *   - if playbackRate is set to 0.5, media will play half as fast.\n *\n * @method Html5.prototype.setDefaultPlaybackRate\n * @return {number}\n *         The value of `defaultPlaybackRate` from the media element. A number indicating\n *         the current playback speed of the media, where 1 is normal speed.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultplaybackrate}\n */\n'defaultPlaybackRate',\n/**\n * Prevents the browser from suggesting a Picture-in-Picture context menu\n * or to request Picture-in-Picture automatically in some cases.\n *\n * @method Html5#setDisablePictureInPicture\n * @param {boolean} value\n *         The true value will disable Picture-in-Picture mode.\n *\n * @see [Spec]{@link https://w3c.github.io/picture-in-picture/#disable-pip}\n */\n'disablePictureInPicture',\n/**\n * Set the value of `crossOrigin` from the media element. `crossOrigin` indicates\n * to the browser that should sent the cookies along with the requests for the\n * different assets/playlists\n *\n * @method Html5#setCrossOrigin\n * @param {string} crossOrigin\n *         - anonymous indicates that the media should not sent cookies.\n *         - use-credentials indicates that the media should sent cookies along the requests.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/#attr-media-crossorigin}\n */\n'crossOrigin'].forEach(function (prop) {\n  Html5.prototype['set' + toTitleCase$1(prop)] = function (v) {\n    this.el_[prop] = v;\n  };\n});\n\n// wrap native functions with a function\n// The list is as follows:\n// pause, load, play\n[\n/**\n * A wrapper around the media elements `pause` function. This will call the `HTML5`\n * media elements `pause` function.\n *\n * @method Html5#pause\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-pause}\n */\n'pause',\n/**\n * A wrapper around the media elements `load` function. This will call the `HTML5`s\n * media element `load` function.\n *\n * @method Html5#load\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-load}\n */\n'load',\n/**\n * A wrapper around the media elements `play` function. This will call the `HTML5`s\n * media element `play` function.\n *\n * @method Html5#play\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-play}\n */\n'play'].forEach(function (prop) {\n  Html5.prototype[prop] = function () {\n    return this.el_[prop]();\n  };\n});\nTech.withSourceHandlers(Html5);\n\n/**\n * Native source handler for Html5, simply passes the source to the media element.\n *\n * @property {Tech~SourceObject} source\n *        The source object\n *\n * @property {Html5} tech\n *        The instance of the HTML5 tech.\n */\nHtml5.nativeSourceHandler = {};\n\n/**\n * Check if the media element can play the given mime type.\n *\n * @param {string} type\n *        The mimetype to check\n *\n * @return {string}\n *         'probably', 'maybe', or '' (empty string)\n */\nHtml5.nativeSourceHandler.canPlayType = function (type) {\n  // IE without MediaPlayer throws an error (#519)\n  try {\n    return Html5.TEST_VID.canPlayType(type);\n  } catch (e) {\n    return '';\n  }\n};\n\n/**\n * Check if the media element can handle a source natively.\n *\n * @param {Tech~SourceObject} source\n *         The source object\n *\n * @param {Object} [options]\n *         Options to be passed to the tech.\n *\n * @return {string}\n *         'probably', 'maybe', or '' (empty string).\n */\nHtml5.nativeSourceHandler.canHandleSource = function (source, options) {\n  // If a type was provided we should rely on that\n  if (source.type) {\n    return Html5.nativeSourceHandler.canPlayType(source.type);\n\n    // If no type, fall back to checking 'video/[EXTENSION]'\n  } else if (source.src) {\n    const ext = getFileExtension(source.src);\n    return Html5.nativeSourceHandler.canPlayType(`video/${ext}`);\n  }\n  return '';\n};\n\n/**\n * Pass the source to the native media element.\n *\n * @param {Tech~SourceObject} source\n *        The source object\n *\n * @param {Html5} tech\n *        The instance of the Html5 tech\n *\n * @param {Object} [options]\n *        The options to pass to the source\n */\nHtml5.nativeSourceHandler.handleSource = function (source, tech, options) {\n  tech.setSrc(source.src);\n};\n\n/**\n * A noop for the native dispose function, as cleanup is not needed.\n */\nHtml5.nativeSourceHandler.dispose = function () {};\n\n// Register the native source handler\nHtml5.registerSourceHandler(Html5.nativeSourceHandler);\nTech.registerTech('Html5', Html5);\n\n/**\n * @file player.js\n */\n\n// The following tech events are simply re-triggered\n// on the player when they happen\nconst TECH_EVENTS_RETRIGGER = [\n/**\n * Fired while the user agent is downloading media data.\n *\n * @event Player#progress\n * @type {Event}\n */\n/**\n * Retrigger the `progress` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechProgress_\n * @fires Player#progress\n * @listens Tech#progress\n */\n'progress',\n/**\n * Fires when the loading of an audio/video is aborted.\n *\n * @event Player#abort\n * @type {Event}\n */\n/**\n * Retrigger the `abort` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechAbort_\n * @fires Player#abort\n * @listens Tech#abort\n */\n'abort',\n/**\n * Fires when the browser is intentionally not getting media data.\n *\n * @event Player#suspend\n * @type {Event}\n */\n/**\n * Retrigger the `suspend` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechSuspend_\n * @fires Player#suspend\n * @listens Tech#suspend\n */\n'suspend',\n/**\n * Fires when the current playlist is empty.\n *\n * @event Player#emptied\n * @type {Event}\n */\n/**\n * Retrigger the `emptied` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechEmptied_\n * @fires Player#emptied\n * @listens Tech#emptied\n */\n'emptied',\n/**\n * Fires when the browser is trying to get media data, but data is not available.\n *\n * @event Player#stalled\n * @type {Event}\n */\n/**\n * Retrigger the `stalled` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechStalled_\n * @fires Player#stalled\n * @listens Tech#stalled\n */\n'stalled',\n/**\n * Fires when the browser has loaded meta data for the audio/video.\n *\n * @event Player#loadedmetadata\n * @type {Event}\n */\n/**\n * Retrigger the `loadedmetadata` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechLoadedmetadata_\n * @fires Player#loadedmetadata\n * @listens Tech#loadedmetadata\n */\n'loadedmetadata',\n/**\n * Fires when the browser has loaded the current frame of the audio/video.\n *\n * @event Player#loadeddata\n * @type {event}\n */\n/**\n * Retrigger the `loadeddata` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechLoaddeddata_\n * @fires Player#loadeddata\n * @listens Tech#loadeddata\n */\n'loadeddata',\n/**\n * Fires when the current playback position has changed.\n *\n * @event Player#timeupdate\n * @type {event}\n */\n/**\n * Retrigger the `timeupdate` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechTimeUpdate_\n * @fires Player#timeupdate\n * @listens Tech#timeupdate\n */\n'timeupdate',\n/**\n * Fires when the video's intrinsic dimensions change\n *\n * @event Player#resize\n * @type {event}\n */\n/**\n * Retrigger the `resize` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechResize_\n * @fires Player#resize\n * @listens Tech#resize\n */\n'resize',\n/**\n * Fires when the volume has been changed\n *\n * @event Player#volumechange\n * @type {event}\n */\n/**\n * Retrigger the `volumechange` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechVolumechange_\n * @fires Player#volumechange\n * @listens Tech#volumechange\n */\n'volumechange',\n/**\n * Fires when the text track has been changed\n *\n * @event Player#texttrackchange\n * @type {event}\n */\n/**\n * Retrigger the `texttrackchange` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechTexttrackchange_\n * @fires Player#texttrackchange\n * @listens Tech#texttrackchange\n */\n'texttrackchange'];\n\n// events to queue when playback rate is zero\n// this is a hash for the sole purpose of mapping non-camel-cased event names\n// to camel-cased function names\nconst TECH_EVENTS_QUEUE = {\n  canplay: 'CanPlay',\n  canplaythrough: 'CanPlayThrough',\n  playing: 'Playing',\n  seeked: 'Seeked'\n};\nconst BREAKPOINT_ORDER = ['tiny', 'xsmall', 'small', 'medium', 'large', 'xlarge', 'huge'];\nconst BREAKPOINT_CLASSES = {};\n\n// grep: vjs-layout-tiny\n// grep: vjs-layout-x-small\n// grep: vjs-layout-small\n// grep: vjs-layout-medium\n// grep: vjs-layout-large\n// grep: vjs-layout-x-large\n// grep: vjs-layout-huge\nBREAKPOINT_ORDER.forEach(k => {\n  const v = k.charAt(0) === 'x' ? `x-${k.substring(1)}` : k;\n  BREAKPOINT_CLASSES[k] = `vjs-layout-${v}`;\n});\nconst DEFAULT_BREAKPOINTS = {\n  tiny: 210,\n  xsmall: 320,\n  small: 425,\n  medium: 768,\n  large: 1440,\n  xlarge: 2560,\n  huge: Infinity\n};\n\n/**\n * An instance of the `Player` class is created when any of the Video.js setup methods\n * are used to initialize a video.\n *\n * After an instance has been created it can be accessed globally in three ways:\n * 1. By calling `videojs.getPlayer('example_video_1');`\n * 2. By calling `videojs('example_video_1');` (not recommended)\n * 2. By using it directly via `videojs.players.example_video_1;`\n *\n * @extends Component\n * @global\n */\nclass Player extends Component$1 {\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Element} tag\n   *        The original video DOM element used for configuring options.\n   *\n   * @param {Object} [options]\n   *        Object of option names and values.\n   *\n   * @param {Function} [ready]\n   *        Ready callback function.\n   */\n  constructor(tag, options, ready) {\n    // Make sure tag ID exists\n    // also here.. probably better\n    tag.id = tag.id || options.id || `vjs_video_${newGUID()}`;\n\n    // Set Options\n    // The options argument overrides options set in the video tag\n    // which overrides globally set options.\n    // This latter part coincides with the load order\n    // (tag must exist before Player)\n    options = Object.assign(Player.getTagSettings(tag), options);\n\n    // Delay the initialization of children because we need to set up\n    // player properties first, and can't use `this` before `super()`\n    options.initChildren = false;\n\n    // Same with creating the element\n    options.createEl = false;\n\n    // don't auto mixin the evented mixin\n    options.evented = false;\n\n    // we don't want the player to report touch activity on itself\n    // see enableTouchActivity in Component\n    options.reportTouchActivity = false;\n\n    // If language is not set, get the closest lang attribute\n    if (!options.language) {\n      const closest = tag.closest('[lang]');\n      if (closest) {\n        options.language = closest.getAttribute('lang');\n      }\n    }\n\n    // Run base component initializing with new options\n    super(null, options, ready);\n\n    // Create bound methods for document listeners.\n    this.boundDocumentFullscreenChange_ = e => this.documentFullscreenChange_(e);\n    this.boundFullWindowOnEscKey_ = e => this.fullWindowOnEscKey(e);\n    this.boundUpdateStyleEl_ = e => this.updateStyleEl_(e);\n    this.boundApplyInitTime_ = e => this.applyInitTime_(e);\n    this.boundUpdateCurrentBreakpoint_ = e => this.updateCurrentBreakpoint_(e);\n    this.boundHandleTechClick_ = e => this.handleTechClick_(e);\n    this.boundHandleTechDoubleClick_ = e => this.handleTechDoubleClick_(e);\n    this.boundHandleTechTouchStart_ = e => this.handleTechTouchStart_(e);\n    this.boundHandleTechTouchMove_ = e => this.handleTechTouchMove_(e);\n    this.boundHandleTechTouchEnd_ = e => this.handleTechTouchEnd_(e);\n    this.boundHandleTechTap_ = e => this.handleTechTap_(e);\n\n    // default isFullscreen_ to false\n    this.isFullscreen_ = false;\n\n    // create logger\n    this.log = createLogger(this.id_);\n\n    // Hold our own reference to fullscreen api so it can be mocked in tests\n    this.fsApi_ = FullscreenApi;\n\n    // Tracks when a tech changes the poster\n    this.isPosterFromTech_ = false;\n\n    // Holds callback info that gets queued when playback rate is zero\n    // and a seek is happening\n    this.queuedCallbacks_ = [];\n\n    // Turn off API access because we're loading a new tech that might load asynchronously\n    this.isReady_ = false;\n\n    // Init state hasStarted_\n    this.hasStarted_ = false;\n\n    // Init state userActive_\n    this.userActive_ = false;\n\n    // Init debugEnabled_\n    this.debugEnabled_ = false;\n\n    // Init state audioOnlyMode_\n    this.audioOnlyMode_ = false;\n\n    // Init state audioPosterMode_\n    this.audioPosterMode_ = false;\n\n    // Init state audioOnlyCache_\n    this.audioOnlyCache_ = {\n      playerHeight: null,\n      hiddenChildren: []\n    };\n\n    // if the global option object was accidentally blown away by\n    // someone, bail early with an informative error\n    if (!this.options_ || !this.options_.techOrder || !this.options_.techOrder.length) {\n      throw new Error('No techOrder specified. Did you overwrite ' + 'videojs.options instead of just changing the ' + 'properties you want to override?');\n    }\n\n    // Store the original tag used to set options\n    this.tag = tag;\n\n    // Store the tag attributes used to restore html5 element\n    this.tagAttributes = tag && getAttributes(tag);\n\n    // Update current language\n    this.language(this.options_.language);\n\n    // Update Supported Languages\n    if (options.languages) {\n      // Normalise player option languages to lowercase\n      const languagesToLower = {};\n      Object.getOwnPropertyNames(options.languages).forEach(function (name) {\n        languagesToLower[name.toLowerCase()] = options.languages[name];\n      });\n      this.languages_ = languagesToLower;\n    } else {\n      this.languages_ = Player.prototype.options_.languages;\n    }\n    this.resetCache_();\n\n    // Set poster\n    /** @type string */\n    this.poster_ = options.poster || '';\n\n    // Set controls\n    /** @type {boolean} */\n    this.controls_ = !!options.controls;\n\n    // Original tag settings stored in options\n    // now remove immediately so native controls don't flash.\n    // May be turned back on by HTML5 tech if nativeControlsForTouch is true\n    tag.controls = false;\n    tag.removeAttribute('controls');\n    this.changingSrc_ = false;\n    this.playCallbacks_ = [];\n    this.playTerminatedQueue_ = [];\n\n    // the attribute overrides the option\n    if (tag.hasAttribute('autoplay')) {\n      this.autoplay(true);\n    } else {\n      // otherwise use the setter to validate and\n      // set the correct value.\n      this.autoplay(this.options_.autoplay);\n    }\n\n    // check plugins\n    if (options.plugins) {\n      Object.keys(options.plugins).forEach(name => {\n        if (typeof this[name] !== 'function') {\n          throw new Error(`plugin \"${name}\" does not exist`);\n        }\n      });\n    }\n\n    /*\n     * Store the internal state of scrubbing\n     *\n     * @private\n     * @return {Boolean} True if the user is scrubbing\n     */\n    this.scrubbing_ = false;\n    this.el_ = this.createEl();\n\n    // Make this an evented object and use `el_` as its event bus.\n    evented(this, {\n      eventBusKey: 'el_'\n    });\n\n    // listen to document and player fullscreenchange handlers so we receive those events\n    // before a user can receive them so we can update isFullscreen appropriately.\n    // make sure that we listen to fullscreenchange events before everything else to make sure that\n    // our isFullscreen method is updated properly for internal components as well as external.\n    if (this.fsApi_.requestFullscreen) {\n      on(document, this.fsApi_.fullscreenchange, this.boundDocumentFullscreenChange_);\n      this.on(this.fsApi_.fullscreenchange, this.boundDocumentFullscreenChange_);\n    }\n    if (this.fluid_) {\n      this.on(['playerreset', 'resize'], this.boundUpdateStyleEl_);\n    }\n    // We also want to pass the original player options to each component and plugin\n    // as well so they don't need to reach back into the player for options later.\n    // We also need to do another copy of this.options_ so we don't end up with\n    // an infinite loop.\n    const playerOptionsCopy = merge$1(this.options_);\n\n    // Load plugins\n    if (options.plugins) {\n      Object.keys(options.plugins).forEach(name => {\n        this[name](options.plugins[name]);\n      });\n    }\n\n    // Enable debug mode to fire debugon event for all plugins.\n    if (options.debug) {\n      this.debug(true);\n    }\n    this.options_.playerOptions = playerOptionsCopy;\n    this.middleware_ = [];\n    this.playbackRates(options.playbackRates);\n    if (options.experimentalSvgIcons) {\n      // Add SVG Sprite to the DOM\n      const parser = new window$1.DOMParser();\n      const parsedSVG = parser.parseFromString(icons, 'image/svg+xml');\n      const errorNode = parsedSVG.querySelector('parsererror');\n      if (errorNode) {\n        log$1.warn('Failed to load SVG Icons. Falling back to Font Icons.');\n        this.options_.experimentalSvgIcons = null;\n      } else {\n        const sprite = parsedSVG.documentElement;\n        sprite.style.display = 'none';\n        this.el_.appendChild(sprite);\n        this.addClass('vjs-svg-icons-enabled');\n      }\n    }\n    this.initChildren();\n\n    // Set isAudio based on whether or not an audio tag was used\n    this.isAudio(tag.nodeName.toLowerCase() === 'audio');\n\n    // Update controls className. Can't do this when the controls are initially\n    // set because the element doesn't exist yet.\n    if (this.controls()) {\n      this.addClass('vjs-controls-enabled');\n    } else {\n      this.addClass('vjs-controls-disabled');\n    }\n\n    // Set ARIA label and region role depending on player type\n    this.el_.setAttribute('role', 'region');\n    if (this.isAudio()) {\n      this.el_.setAttribute('aria-label', this.localize('Audio Player'));\n    } else {\n      this.el_.setAttribute('aria-label', this.localize('Video Player'));\n    }\n    if (this.isAudio()) {\n      this.addClass('vjs-audio');\n    }\n\n    // TODO: Make this smarter. Toggle user state between touching/mousing\n    // using events, since devices can have both touch and mouse events.\n    // TODO: Make this check be performed again when the window switches between monitors\n    // (See https://github.com/videojs/video.js/issues/5683)\n    if (TOUCH_ENABLED) {\n      this.addClass('vjs-touch-enabled');\n    }\n\n    // iOS Safari has broken hover handling\n    if (!IS_IOS) {\n      this.addClass('vjs-workinghover');\n    }\n\n    // Make player easily findable by ID\n    Player.players[this.id_] = this;\n\n    // Add a major version class to aid css in plugins\n    const majorVersion = version$6.split('.')[0];\n    this.addClass(`vjs-v${majorVersion}`);\n\n    // When the player is first initialized, trigger activity so components\n    // like the control bar show themselves if needed\n    this.userActive(true);\n    this.reportUserActivity();\n    this.one('play', e => this.listenForUserActivity_(e));\n    this.on('keydown', e => this.handleKeyDown(e));\n    this.on('languagechange', e => this.handleLanguagechange(e));\n    this.breakpoints(this.options_.breakpoints);\n    this.responsive(this.options_.responsive);\n\n    // Calling both the audio mode methods after the player is fully\n    // setup to be able to listen to the events triggered by them\n    this.on('ready', () => {\n      // Calling the audioPosterMode method first so that\n      // the audioOnlyMode can take precedence when both options are set to true\n      this.audioPosterMode(this.options_.audioPosterMode);\n      this.audioOnlyMode(this.options_.audioOnlyMode);\n    });\n  }\n\n  /**\n   * Destroys the video player and does any necessary cleanup.\n   *\n   * This is especially helpful if you are dynamically adding and removing videos\n   * to/from the DOM.\n   *\n   * @fires Player#dispose\n   */\n  dispose() {\n    /**\n     * Called when the player is being disposed of.\n     *\n     * @event Player#dispose\n     * @type {Event}\n     */\n    this.trigger('dispose');\n    // prevent dispose from being called twice\n    this.off('dispose');\n\n    // Make sure all player-specific document listeners are unbound. This is\n    off(document, this.fsApi_.fullscreenchange, this.boundDocumentFullscreenChange_);\n    off(document, 'keydown', this.boundFullWindowOnEscKey_);\n    if (this.styleEl_ && this.styleEl_.parentNode) {\n      this.styleEl_.parentNode.removeChild(this.styleEl_);\n      this.styleEl_ = null;\n    }\n\n    // Kill reference to this player\n    Player.players[this.id_] = null;\n    if (this.tag && this.tag.player) {\n      this.tag.player = null;\n    }\n    if (this.el_ && this.el_.player) {\n      this.el_.player = null;\n    }\n    if (this.tech_) {\n      this.tech_.dispose();\n      this.isPosterFromTech_ = false;\n      this.poster_ = '';\n    }\n    if (this.playerElIngest_) {\n      this.playerElIngest_ = null;\n    }\n    if (this.tag) {\n      this.tag = null;\n    }\n    clearCacheForPlayer(this);\n\n    // remove all event handlers for track lists\n    // all tracks and track listeners are removed on\n    // tech dispose\n    ALL.names.forEach(name => {\n      const props = ALL[name];\n      const list = this[props.getterName]();\n\n      // if it is not a native list\n      // we have to manually remove event listeners\n      if (list && list.off) {\n        list.off();\n      }\n    });\n\n    // the actual .el_ is removed here, or replaced if\n    super.dispose({\n      restoreEl: this.options_.restoreEl\n    });\n  }\n\n  /**\n   * Create the `Player`'s DOM element.\n   *\n   * @return {Element}\n   *         The DOM element that gets created.\n   */\n  createEl() {\n    let tag = this.tag;\n    let el;\n    let playerElIngest = this.playerElIngest_ = tag.parentNode && tag.parentNode.hasAttribute && tag.parentNode.hasAttribute('data-vjs-player');\n    const divEmbed = this.tag.tagName.toLowerCase() === 'video-js';\n    if (playerElIngest) {\n      el = this.el_ = tag.parentNode;\n    } else if (!divEmbed) {\n      el = this.el_ = super.createEl('div');\n    }\n\n    // Copy over all the attributes from the tag, including ID and class\n    // ID will now reference player box, not the video tag\n    const attrs = getAttributes(tag);\n    if (divEmbed) {\n      el = this.el_ = tag;\n      tag = this.tag = document.createElement('video');\n      while (el.children.length) {\n        tag.appendChild(el.firstChild);\n      }\n      if (!hasClass(el, 'video-js')) {\n        addClass(el, 'video-js');\n      }\n      el.appendChild(tag);\n      playerElIngest = this.playerElIngest_ = el;\n      // move properties over from our custom `video-js` element\n      // to our new `video` element. This will move things like\n      // `src` or `controls` that were set via js before the player\n      // was initialized.\n      Object.keys(el).forEach(k => {\n        try {\n          tag[k] = el[k];\n        } catch (e) {\n          // we got a a property like outerHTML which we can't actually copy, ignore it\n        }\n      });\n    }\n\n    // set tabindex to -1 to remove the video element from the focus order\n    tag.setAttribute('tabindex', '-1');\n    attrs.tabindex = '-1';\n\n    // Workaround for #4583 on Chrome (on Windows) with JAWS.\n    // See https://github.com/FreedomScientific/VFO-standards-support/issues/78\n    // Note that we can't detect if JAWS is being used, but this ARIA attribute\n    // doesn't change behavior of Chrome if JAWS is not being used\n    if (IS_CHROME && IS_WINDOWS) {\n      tag.setAttribute('role', 'application');\n      attrs.role = 'application';\n    }\n\n    // Remove width/height attrs from tag so CSS can make it 100% width/height\n    tag.removeAttribute('width');\n    tag.removeAttribute('height');\n    if ('width' in attrs) {\n      delete attrs.width;\n    }\n    if ('height' in attrs) {\n      delete attrs.height;\n    }\n    Object.getOwnPropertyNames(attrs).forEach(function (attr) {\n      // don't copy over the class attribute to the player element when we're in a div embed\n      // the class is already set up properly in the divEmbed case\n      // and we want to make sure that the `video-js` class doesn't get lost\n      if (!(divEmbed && attr === 'class')) {\n        el.setAttribute(attr, attrs[attr]);\n      }\n      if (divEmbed) {\n        tag.setAttribute(attr, attrs[attr]);\n      }\n    });\n\n    // Update tag id/class for use as HTML5 playback tech\n    // Might think we should do this after embedding in container so .vjs-tech class\n    // doesn't flash 100% width/height, but class only applies with .video-js parent\n    tag.playerId = tag.id;\n    tag.id += '_html5_api';\n    tag.className = 'vjs-tech';\n\n    // Make player findable on elements\n    tag.player = el.player = this;\n    // Default state of video is paused\n    this.addClass('vjs-paused');\n\n    // Add a style element in the player that we'll use to set the width/height\n    // of the player in a way that's still overridable by CSS, just like the\n    // video element\n    if (window$1.VIDEOJS_NO_DYNAMIC_STYLE !== true) {\n      this.styleEl_ = createStyleElement('vjs-styles-dimensions');\n      const defaultsStyleEl = $('.vjs-styles-defaults');\n      const head = $('head');\n      head.insertBefore(this.styleEl_, defaultsStyleEl ? defaultsStyleEl.nextSibling : head.firstChild);\n    }\n    this.fill_ = false;\n    this.fluid_ = false;\n\n    // Pass in the width/height/aspectRatio options which will update the style el\n    this.width(this.options_.width);\n    this.height(this.options_.height);\n    this.fill(this.options_.fill);\n    this.fluid(this.options_.fluid);\n    this.aspectRatio(this.options_.aspectRatio);\n    // support both crossOrigin and crossorigin to reduce confusion and issues around the name\n    this.crossOrigin(this.options_.crossOrigin || this.options_.crossorigin);\n\n    // Hide any links within the video/audio tag,\n    // because IE doesn't hide them completely from screen readers.\n    const links = tag.getElementsByTagName('a');\n    for (let i = 0; i < links.length; i++) {\n      const linkEl = links.item(i);\n      addClass(linkEl, 'vjs-hidden');\n      linkEl.setAttribute('hidden', 'hidden');\n    }\n\n    // insertElFirst seems to cause the networkState to flicker from 3 to 2, so\n    // keep track of the original for later so we can know if the source originally failed\n    tag.initNetworkState_ = tag.networkState;\n\n    // Wrap video tag in div (el/box) container\n    if (tag.parentNode && !playerElIngest) {\n      tag.parentNode.insertBefore(el, tag);\n    }\n\n    // insert the tag as the first child of the player element\n    // then manually add it to the children array so that this.addChild\n    // will work properly for other components\n    //\n    // Breaks iPhone, fixed in HTML5 setup.\n    prependTo(tag, el);\n    this.children_.unshift(tag);\n\n    // Set lang attr on player to ensure CSS :lang() in consistent with player\n    // if it's been set to something different to the doc\n    this.el_.setAttribute('lang', this.language_);\n    this.el_.setAttribute('translate', 'no');\n    this.el_ = el;\n    return el;\n  }\n\n  /**\n   * Get or set the `Player`'s crossOrigin option. For the HTML5 player, this\n   * sets the `crossOrigin` property on the `<video>` tag to control the CORS\n   * behavior.\n   *\n   * @see [Video Element Attributes]{@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#attr-crossorigin}\n   *\n   * @param {string|null} [value]\n   *        The value to set the `Player`'s crossOrigin to. If an argument is\n   *        given, must be one of `'anonymous'` or `'use-credentials'`, or 'null'.\n   *\n   * @return {string|null|undefined}\n   *         - The current crossOrigin value of the `Player` when getting.\n   *         - undefined when setting\n   */\n  crossOrigin(value) {\n    // `null` can be set to unset a value\n    if (typeof value === 'undefined') {\n      return this.techGet_('crossOrigin');\n    }\n    if (value !== null && value !== 'anonymous' && value !== 'use-credentials') {\n      log$1.warn(`crossOrigin must be null,  \"anonymous\" or \"use-credentials\", given \"${value}\"`);\n      return;\n    }\n    this.techCall_('setCrossOrigin', value);\n    if (this.posterImage) {\n      this.posterImage.crossOrigin(value);\n    }\n    return;\n  }\n\n  /**\n   * A getter/setter for the `Player`'s width. Returns the player's configured value.\n   * To get the current width use `currentWidth()`.\n   *\n   * @param {number|string} [value]\n   *        CSS value to set the `Player`'s width to.\n   *\n   * @return {number|undefined}\n   *         - The current width of the `Player` when getting.\n   *         - Nothing when setting\n   */\n  width(value) {\n    return this.dimension('width', value);\n  }\n\n  /**\n   * A getter/setter for the `Player`'s height. Returns the player's configured value.\n   * To get the current height use `currentheight()`.\n   *\n   * @param {number|string} [value]\n   *        CSS value to set the `Player`'s height to.\n   *\n   * @return {number|undefined}\n   *         - The current height of the `Player` when getting.\n   *         - Nothing when setting\n   */\n  height(value) {\n    return this.dimension('height', value);\n  }\n\n  /**\n   * A getter/setter for the `Player`'s width & height.\n   *\n   * @param {string} dimension\n   *        This string can be:\n   *        - 'width'\n   *        - 'height'\n   *\n   * @param {number|string} [value]\n   *        Value for dimension specified in the first argument.\n   *\n   * @return {number}\n   *         The dimension arguments value when getting (width/height).\n   */\n  dimension(dimension, value) {\n    const privDimension = dimension + '_';\n    if (value === undefined) {\n      return this[privDimension] || 0;\n    }\n    if (value === '' || value === 'auto') {\n      // If an empty string is given, reset the dimension to be automatic\n      this[privDimension] = undefined;\n      this.updateStyleEl_();\n      return;\n    }\n    const parsedVal = parseFloat(value);\n    if (isNaN(parsedVal)) {\n      log$1.error(`Improper value \"${value}\" supplied for for ${dimension}`);\n      return;\n    }\n    this[privDimension] = parsedVal;\n    this.updateStyleEl_();\n  }\n\n  /**\n   * A getter/setter/toggler for the vjs-fluid `className` on the `Player`.\n   *\n   * Turning this on will turn off fill mode.\n   *\n   * @param {boolean} [bool]\n   *        - A value of true adds the class.\n   *        - A value of false removes the class.\n   *        - No value will be a getter.\n   *\n   * @return {boolean|undefined}\n   *         - The value of fluid when getting.\n   *         - `undefined` when setting.\n   */\n  fluid(bool) {\n    if (bool === undefined) {\n      return !!this.fluid_;\n    }\n    this.fluid_ = !!bool;\n    if (isEvented(this)) {\n      this.off(['playerreset', 'resize'], this.boundUpdateStyleEl_);\n    }\n    if (bool) {\n      this.addClass('vjs-fluid');\n      this.fill(false);\n      addEventedCallback(this, () => {\n        this.on(['playerreset', 'resize'], this.boundUpdateStyleEl_);\n      });\n    } else {\n      this.removeClass('vjs-fluid');\n    }\n    this.updateStyleEl_();\n  }\n\n  /**\n   * A getter/setter/toggler for the vjs-fill `className` on the `Player`.\n   *\n   * Turning this on will turn off fluid mode.\n   *\n   * @param {boolean} [bool]\n   *        - A value of true adds the class.\n   *        - A value of false removes the class.\n   *        - No value will be a getter.\n   *\n   * @return {boolean|undefined}\n   *         - The value of fluid when getting.\n   *         - `undefined` when setting.\n   */\n  fill(bool) {\n    if (bool === undefined) {\n      return !!this.fill_;\n    }\n    this.fill_ = !!bool;\n    if (bool) {\n      this.addClass('vjs-fill');\n      this.fluid(false);\n    } else {\n      this.removeClass('vjs-fill');\n    }\n  }\n\n  /**\n   * Get/Set the aspect ratio\n   *\n   * @param {string} [ratio]\n   *        Aspect ratio for player\n   *\n   * @return {string|undefined}\n   *         returns the current aspect ratio when getting\n   */\n\n  /**\n   * A getter/setter for the `Player`'s aspect ratio.\n   *\n   * @param {string} [ratio]\n   *        The value to set the `Player`'s aspect ratio to.\n   *\n   * @return {string|undefined}\n   *         - The current aspect ratio of the `Player` when getting.\n   *         - undefined when setting\n   */\n  aspectRatio(ratio) {\n    if (ratio === undefined) {\n      return this.aspectRatio_;\n    }\n\n    // Check for width:height format\n    if (!/^\\d+\\:\\d+$/.test(ratio)) {\n      throw new Error('Improper value supplied for aspect ratio. The format should be width:height, for example 16:9.');\n    }\n    this.aspectRatio_ = ratio;\n\n    // We're assuming if you set an aspect ratio you want fluid mode,\n    // because in fixed mode you could calculate width and height yourself.\n    this.fluid(true);\n    this.updateStyleEl_();\n  }\n\n  /**\n   * Update styles of the `Player` element (height, width and aspect ratio).\n   *\n   * @private\n   * @listens Tech#loadedmetadata\n   */\n  updateStyleEl_() {\n    if (window$1.VIDEOJS_NO_DYNAMIC_STYLE === true) {\n      const width = typeof this.width_ === 'number' ? this.width_ : this.options_.width;\n      const height = typeof this.height_ === 'number' ? this.height_ : this.options_.height;\n      const techEl = this.tech_ && this.tech_.el();\n      if (techEl) {\n        if (width >= 0) {\n          techEl.width = width;\n        }\n        if (height >= 0) {\n          techEl.height = height;\n        }\n      }\n      return;\n    }\n    let width;\n    let height;\n    let aspectRatio;\n    let idClass;\n\n    // The aspect ratio is either used directly or to calculate width and height.\n    if (this.aspectRatio_ !== undefined && this.aspectRatio_ !== 'auto') {\n      // Use any aspectRatio that's been specifically set\n      aspectRatio = this.aspectRatio_;\n    } else if (this.videoWidth() > 0) {\n      // Otherwise try to get the aspect ratio from the video metadata\n      aspectRatio = this.videoWidth() + ':' + this.videoHeight();\n    } else {\n      // Or use a default. The video element's is 2:1, but 16:9 is more common.\n      aspectRatio = '16:9';\n    }\n\n    // Get the ratio as a decimal we can use to calculate dimensions\n    const ratioParts = aspectRatio.split(':');\n    const ratioMultiplier = ratioParts[1] / ratioParts[0];\n    if (this.width_ !== undefined) {\n      // Use any width that's been specifically set\n      width = this.width_;\n    } else if (this.height_ !== undefined) {\n      // Or calculate the width from the aspect ratio if a height has been set\n      width = this.height_ / ratioMultiplier;\n    } else {\n      // Or use the video's metadata, or use the video el's default of 300\n      width = this.videoWidth() || 300;\n    }\n    if (this.height_ !== undefined) {\n      // Use any height that's been specifically set\n      height = this.height_;\n    } else {\n      // Otherwise calculate the height from the ratio and the width\n      height = width * ratioMultiplier;\n    }\n\n    // Ensure the CSS class is valid by starting with an alpha character\n    if (/^[^a-zA-Z]/.test(this.id())) {\n      idClass = 'dimensions-' + this.id();\n    } else {\n      idClass = this.id() + '-dimensions';\n    }\n\n    // Ensure the right class is still on the player for the style element\n    this.addClass(idClass);\n    setTextContent(this.styleEl_, `\n      .${idClass} {\n        width: ${width}px;\n        height: ${height}px;\n      }\n\n      .${idClass}.vjs-fluid:not(.vjs-audio-only-mode) {\n        padding-top: ${ratioMultiplier * 100}%;\n      }\n    `);\n  }\n\n  /**\n   * Load/Create an instance of playback {@link Tech} including element\n   * and API methods. Then append the `Tech` element in `Player` as a child.\n   *\n   * @param {string} techName\n   *        name of the playback technology\n   *\n   * @param {string} source\n   *        video source\n   *\n   * @private\n   */\n  loadTech_(techName, source) {\n    // Pause and remove current playback technology\n    if (this.tech_) {\n      this.unloadTech_();\n    }\n    const titleTechName = toTitleCase$1(techName);\n    const camelTechName = techName.charAt(0).toLowerCase() + techName.slice(1);\n\n    // get rid of the HTML5 video tag as soon as we are using another tech\n    if (titleTechName !== 'Html5' && this.tag) {\n      Tech.getTech('Html5').disposeMediaElement(this.tag);\n      this.tag.player = null;\n      this.tag = null;\n    }\n    this.techName_ = titleTechName;\n\n    // Turn off API access because we're loading a new tech that might load asynchronously\n    this.isReady_ = false;\n    let autoplay = this.autoplay();\n\n    // if autoplay is a string (or `true` with normalizeAutoplay: true) we pass false to the tech\n    // because the player is going to handle autoplay on `loadstart`\n    if (typeof this.autoplay() === 'string' || this.autoplay() === true && this.options_.normalizeAutoplay) {\n      autoplay = false;\n    }\n\n    // Grab tech-specific options from player options and add source and parent element to use.\n    const techOptions = {\n      source,\n      autoplay,\n      'nativeControlsForTouch': this.options_.nativeControlsForTouch,\n      'playerId': this.id(),\n      'techId': `${this.id()}_${camelTechName}_api`,\n      'playsinline': this.options_.playsinline,\n      'preload': this.options_.preload,\n      'loop': this.options_.loop,\n      'disablePictureInPicture': this.options_.disablePictureInPicture,\n      'muted': this.options_.muted,\n      'poster': this.poster(),\n      'language': this.language(),\n      'playerElIngest': this.playerElIngest_ || false,\n      'vtt.js': this.options_['vtt.js'],\n      'canOverridePoster': !!this.options_.techCanOverridePoster,\n      'enableSourceset': this.options_.enableSourceset\n    };\n    ALL.names.forEach(name => {\n      const props = ALL[name];\n      techOptions[props.getterName] = this[props.privateName];\n    });\n    Object.assign(techOptions, this.options_[titleTechName]);\n    Object.assign(techOptions, this.options_[camelTechName]);\n    Object.assign(techOptions, this.options_[techName.toLowerCase()]);\n    if (this.tag) {\n      techOptions.tag = this.tag;\n    }\n    if (source && source.src === this.cache_.src && this.cache_.currentTime > 0) {\n      techOptions.startTime = this.cache_.currentTime;\n    }\n\n    // Initialize tech instance\n    const TechClass = Tech.getTech(techName);\n    if (!TechClass) {\n      throw new Error(`No Tech named '${titleTechName}' exists! '${titleTechName}' should be registered using videojs.registerTech()'`);\n    }\n    this.tech_ = new TechClass(techOptions);\n\n    // player.triggerReady is always async, so don't need this to be async\n    this.tech_.ready(bind_(this, this.handleTechReady_), true);\n    textTrackConverter.jsonToTextTracks(this.textTracksJson_ || [], this.tech_);\n\n    // Listen to all HTML5-defined events and trigger them on the player\n    TECH_EVENTS_RETRIGGER.forEach(event => {\n      this.on(this.tech_, event, e => this[`handleTech${toTitleCase$1(event)}_`](e));\n    });\n    Object.keys(TECH_EVENTS_QUEUE).forEach(event => {\n      this.on(this.tech_, event, eventObj => {\n        if (this.tech_.playbackRate() === 0 && this.tech_.seeking()) {\n          this.queuedCallbacks_.push({\n            callback: this[`handleTech${TECH_EVENTS_QUEUE[event]}_`].bind(this),\n            event: eventObj\n          });\n          return;\n        }\n        this[`handleTech${TECH_EVENTS_QUEUE[event]}_`](eventObj);\n      });\n    });\n    this.on(this.tech_, 'loadstart', e => this.handleTechLoadStart_(e));\n    this.on(this.tech_, 'sourceset', e => this.handleTechSourceset_(e));\n    this.on(this.tech_, 'waiting', e => this.handleTechWaiting_(e));\n    this.on(this.tech_, 'ended', e => this.handleTechEnded_(e));\n    this.on(this.tech_, 'seeking', e => this.handleTechSeeking_(e));\n    this.on(this.tech_, 'play', e => this.handleTechPlay_(e));\n    this.on(this.tech_, 'pause', e => this.handleTechPause_(e));\n    this.on(this.tech_, 'durationchange', e => this.handleTechDurationChange_(e));\n    this.on(this.tech_, 'fullscreenchange', (e, data) => this.handleTechFullscreenChange_(e, data));\n    this.on(this.tech_, 'fullscreenerror', (e, err) => this.handleTechFullscreenError_(e, err));\n    this.on(this.tech_, 'enterpictureinpicture', e => this.handleTechEnterPictureInPicture_(e));\n    this.on(this.tech_, 'leavepictureinpicture', e => this.handleTechLeavePictureInPicture_(e));\n    this.on(this.tech_, 'error', e => this.handleTechError_(e));\n    this.on(this.tech_, 'posterchange', e => this.handleTechPosterChange_(e));\n    this.on(this.tech_, 'textdata', e => this.handleTechTextData_(e));\n    this.on(this.tech_, 'ratechange', e => this.handleTechRateChange_(e));\n    this.on(this.tech_, 'loadedmetadata', this.boundUpdateStyleEl_);\n    this.usingNativeControls(this.techGet_('controls'));\n    if (this.controls() && !this.usingNativeControls()) {\n      this.addTechControlsListeners_();\n    }\n\n    // Add the tech element in the DOM if it was not already there\n    // Make sure to not insert the original video element if using Html5\n    if (this.tech_.el().parentNode !== this.el() && (titleTechName !== 'Html5' || !this.tag)) {\n      prependTo(this.tech_.el(), this.el());\n    }\n\n    // Get rid of the original video tag reference after the first tech is loaded\n    if (this.tag) {\n      this.tag.player = null;\n      this.tag = null;\n    }\n  }\n\n  /**\n   * Unload and dispose of the current playback {@link Tech}.\n   *\n   * @private\n   */\n  unloadTech_() {\n    // Save the current text tracks so that we can reuse the same text tracks with the next tech\n    ALL.names.forEach(name => {\n      const props = ALL[name];\n      this[props.privateName] = this[props.getterName]();\n    });\n    this.textTracksJson_ = textTrackConverter.textTracksToJson(this.tech_);\n    this.isReady_ = false;\n    this.tech_.dispose();\n    this.tech_ = false;\n    if (this.isPosterFromTech_) {\n      this.poster_ = '';\n      this.trigger('posterchange');\n    }\n    this.isPosterFromTech_ = false;\n  }\n\n  /**\n   * Return a reference to the current {@link Tech}.\n   * It will print a warning by default about the danger of using the tech directly\n   * but any argument that is passed in will silence the warning.\n   *\n   * @param {*} [safety]\n   *        Anything passed in to silence the warning\n   *\n   * @return {Tech}\n   *         The Tech\n   */\n  tech(safety) {\n    if (safety === undefined) {\n      log$1.warn('Using the tech directly can be dangerous. I hope you know what you\\'re doing.\\n' + 'See https://github.com/videojs/video.js/issues/2617 for more info.\\n');\n    }\n    return this.tech_;\n  }\n\n  /**\n   * An object that contains Video.js version.\n   *\n   * @typedef {Object} PlayerVersion\n   *\n   * @property {string} 'video.js' - Video.js version\n   */\n\n  /**\n   * Returns an object with Video.js version.\n   *\n   * @return {PlayerVersion}\n   *          An object with Video.js version.\n   */\n  version() {\n    return {\n      'video.js': version$6\n    };\n  }\n\n  /**\n   * Set up click and touch listeners for the playback element\n   *\n   * - On desktops: a click on the video itself will toggle playback\n   * - On mobile devices: a click on the video toggles controls\n   *   which is done by toggling the user state between active and\n   *   inactive\n   * - A tap can signal that a user has become active or has become inactive\n   *   e.g. a quick tap on an iPhone movie should reveal the controls. Another\n   *   quick tap should hide them again (signaling the user is in an inactive\n   *   viewing state)\n   * - In addition to this, we still want the user to be considered inactive after\n   *   a few seconds of inactivity.\n   *\n   * > Note: the only part of iOS interaction we can't mimic with this setup\n   * is a touch and hold on the video element counting as activity in order to\n   * keep the controls showing, but that shouldn't be an issue. A touch and hold\n   * on any controls will still keep the user active\n   *\n   * @private\n   */\n  addTechControlsListeners_() {\n    // Make sure to remove all the previous listeners in case we are called multiple times.\n    this.removeTechControlsListeners_();\n    this.on(this.tech_, 'click', this.boundHandleTechClick_);\n    this.on(this.tech_, 'dblclick', this.boundHandleTechDoubleClick_);\n\n    // If the controls were hidden we don't want that to change without a tap event\n    // so we'll check if the controls were already showing before reporting user\n    // activity\n    this.on(this.tech_, 'touchstart', this.boundHandleTechTouchStart_);\n    this.on(this.tech_, 'touchmove', this.boundHandleTechTouchMove_);\n    this.on(this.tech_, 'touchend', this.boundHandleTechTouchEnd_);\n\n    // The tap listener needs to come after the touchend listener because the tap\n    // listener cancels out any reportedUserActivity when setting userActive(false)\n    this.on(this.tech_, 'tap', this.boundHandleTechTap_);\n  }\n\n  /**\n   * Remove the listeners used for click and tap controls. This is needed for\n   * toggling to controls disabled, where a tap/touch should do nothing.\n   *\n   * @private\n   */\n  removeTechControlsListeners_() {\n    // We don't want to just use `this.off()` because there might be other needed\n    // listeners added by techs that extend this.\n    this.off(this.tech_, 'tap', this.boundHandleTechTap_);\n    this.off(this.tech_, 'touchstart', this.boundHandleTechTouchStart_);\n    this.off(this.tech_, 'touchmove', this.boundHandleTechTouchMove_);\n    this.off(this.tech_, 'touchend', this.boundHandleTechTouchEnd_);\n    this.off(this.tech_, 'click', this.boundHandleTechClick_);\n    this.off(this.tech_, 'dblclick', this.boundHandleTechDoubleClick_);\n  }\n\n  /**\n   * Player waits for the tech to be ready\n   *\n   * @private\n   */\n  handleTechReady_() {\n    this.triggerReady();\n\n    // Keep the same volume as before\n    if (this.cache_.volume) {\n      this.techCall_('setVolume', this.cache_.volume);\n    }\n\n    // Look if the tech found a higher resolution poster while loading\n    this.handleTechPosterChange_();\n\n    // Update the duration if available\n    this.handleTechDurationChange_();\n  }\n\n  /**\n   * Retrigger the `loadstart` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#loadstart\n   * @listens Tech#loadstart\n   * @private\n   */\n  handleTechLoadStart_() {\n    // TODO: Update to use `emptied` event instead. See #1277.\n\n    this.removeClass('vjs-ended', 'vjs-seeking');\n\n    // reset the error state\n    this.error(null);\n\n    // Update the duration\n    this.handleTechDurationChange_();\n    if (!this.paused()) {\n      /**\n       * Fired when the user agent begins looking for media data\n       *\n       * @event Player#loadstart\n       * @type {Event}\n       */\n      this.trigger('loadstart');\n    } else {\n      // reset the hasStarted state\n      this.hasStarted(false);\n      this.trigger('loadstart');\n    }\n\n    // autoplay happens after loadstart for the browser,\n    // so we mimic that behavior\n    this.manualAutoplay_(this.autoplay() === true && this.options_.normalizeAutoplay ? 'play' : this.autoplay());\n  }\n\n  /**\n   * Handle autoplay string values, rather than the typical boolean\n   * values that should be handled by the tech. Note that this is not\n   * part of any specification. Valid values and what they do can be\n   * found on the autoplay getter at Player#autoplay()\n   */\n  manualAutoplay_(type) {\n    if (!this.tech_ || typeof type !== 'string') {\n      return;\n    }\n\n    // Save original muted() value, set muted to true, and attempt to play().\n    // On promise rejection, restore muted from saved value\n    const resolveMuted = () => {\n      const previouslyMuted = this.muted();\n      this.muted(true);\n      const restoreMuted = () => {\n        this.muted(previouslyMuted);\n      };\n\n      // restore muted on play terminatation\n      this.playTerminatedQueue_.push(restoreMuted);\n      const mutedPromise = this.play();\n      if (!isPromise(mutedPromise)) {\n        return;\n      }\n      return mutedPromise.catch(err => {\n        restoreMuted();\n        throw new Error(`Rejection at manualAutoplay. Restoring muted value. ${err ? err : ''}`);\n      });\n    };\n    let promise;\n\n    // if muted defaults to true\n    // the only thing we can do is call play\n    if (type === 'any' && !this.muted()) {\n      promise = this.play();\n      if (isPromise(promise)) {\n        promise = promise.catch(resolveMuted);\n      }\n    } else if (type === 'muted' && !this.muted()) {\n      promise = resolveMuted();\n    } else {\n      promise = this.play();\n    }\n    if (!isPromise(promise)) {\n      return;\n    }\n    return promise.then(() => {\n      this.trigger({\n        type: 'autoplay-success',\n        autoplay: type\n      });\n    }).catch(() => {\n      this.trigger({\n        type: 'autoplay-failure',\n        autoplay: type\n      });\n    });\n  }\n\n  /**\n   * Update the internal source caches so that we return the correct source from\n   * `src()`, `currentSource()`, and `currentSources()`.\n   *\n   * > Note: `currentSources` will not be updated if the source that is passed in exists\n   *         in the current `currentSources` cache.\n   *\n   *\n   * @param {Tech~SourceObject} srcObj\n   *        A string or object source to update our caches to.\n   */\n  updateSourceCaches_(srcObj = '') {\n    let src = srcObj;\n    let type = '';\n    if (typeof src !== 'string') {\n      src = srcObj.src;\n      type = srcObj.type;\n    }\n\n    // make sure all the caches are set to default values\n    // to prevent null checking\n    this.cache_.source = this.cache_.source || {};\n    this.cache_.sources = this.cache_.sources || [];\n\n    // try to get the type of the src that was passed in\n    if (src && !type) {\n      type = findMimetype(this, src);\n    }\n\n    // update `currentSource` cache always\n    this.cache_.source = merge$1({}, srcObj, {\n      src,\n      type\n    });\n    const matchingSources = this.cache_.sources.filter(s => s.src && s.src === src);\n    const sourceElSources = [];\n    const sourceEls = this.$$('source');\n    const matchingSourceEls = [];\n    for (let i = 0; i < sourceEls.length; i++) {\n      const sourceObj = getAttributes(sourceEls[i]);\n      sourceElSources.push(sourceObj);\n      if (sourceObj.src && sourceObj.src === src) {\n        matchingSourceEls.push(sourceObj.src);\n      }\n    }\n\n    // if we have matching source els but not matching sources\n    // the current source cache is not up to date\n    if (matchingSourceEls.length && !matchingSources.length) {\n      this.cache_.sources = sourceElSources;\n      // if we don't have matching source or source els set the\n      // sources cache to the `currentSource` cache\n    } else if (!matchingSources.length) {\n      this.cache_.sources = [this.cache_.source];\n    }\n\n    // update the tech `src` cache\n    this.cache_.src = src;\n  }\n\n  /**\n   * *EXPERIMENTAL* Fired when the source is set or changed on the {@link Tech}\n   * causing the media element to reload.\n   *\n   * It will fire for the initial source and each subsequent source.\n   * This event is a custom event from Video.js and is triggered by the {@link Tech}.\n   *\n   * The event object for this event contains a `src` property that will contain the source\n   * that was available when the event was triggered. This is generally only necessary if Video.js\n   * is switching techs while the source was being changed.\n   *\n   * It is also fired when `load` is called on the player (or media element)\n   * because the {@link https://html.spec.whatwg.org/multipage/media.html#dom-media-load|specification for `load`}\n   * says that the resource selection algorithm needs to be aborted and restarted.\n   * In this case, it is very likely that the `src` property will be set to the\n   * empty string `\"\"` to indicate we do not know what the source will be but\n   * that it is changing.\n   *\n   * *This event is currently still experimental and may change in minor releases.*\n   * __To use this, pass `enableSourceset` option to the player.__\n   *\n   * @event Player#sourceset\n   * @type {Event}\n   * @prop {string} src\n   *                The source url available when the `sourceset` was triggered.\n   *                It will be an empty string if we cannot know what the source is\n   *                but know that the source will change.\n   */\n  /**\n   * Retrigger the `sourceset` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#sourceset\n   * @listens Tech#sourceset\n   * @private\n   */\n  handleTechSourceset_(event) {\n    // only update the source cache when the source\n    // was not updated using the player api\n    if (!this.changingSrc_) {\n      let updateSourceCaches = src => this.updateSourceCaches_(src);\n      const playerSrc = this.currentSource().src;\n      const eventSrc = event.src;\n\n      // if we have a playerSrc that is not a blob, and a tech src that is a blob\n      if (playerSrc && !/^blob:/.test(playerSrc) && /^blob:/.test(eventSrc)) {\n        // if both the tech source and the player source were updated we assume\n        // something like @videojs/http-streaming did the sourceset and skip updating the source cache.\n        if (!this.lastSource_ || this.lastSource_.tech !== eventSrc && this.lastSource_.player !== playerSrc) {\n          updateSourceCaches = () => {};\n        }\n      }\n\n      // update the source to the initial source right away\n      // in some cases this will be empty string\n      updateSourceCaches(eventSrc);\n\n      // if the `sourceset` `src` was an empty string\n      // wait for a `loadstart` to update the cache to `currentSrc`.\n      // If a sourceset happens before a `loadstart`, we reset the state\n      if (!event.src) {\n        this.tech_.any(['sourceset', 'loadstart'], e => {\n          // if a sourceset happens before a `loadstart` there\n          // is nothing to do as this `handleTechSourceset_`\n          // will be called again and this will be handled there.\n          if (e.type === 'sourceset') {\n            return;\n          }\n          const techSrc = this.techGet_('currentSrc');\n          this.lastSource_.tech = techSrc;\n          this.updateSourceCaches_(techSrc);\n        });\n      }\n    }\n    this.lastSource_ = {\n      player: this.currentSource().src,\n      tech: event.src\n    };\n    this.trigger({\n      src: event.src,\n      type: 'sourceset'\n    });\n  }\n\n  /**\n   * Add/remove the vjs-has-started class\n   *\n   *\n   * @param {boolean} request\n   *        - true: adds the class\n   *        - false: remove the class\n   *\n   * @return {boolean}\n   *         the boolean value of hasStarted_\n   */\n  hasStarted(request) {\n    if (request === undefined) {\n      // act as getter, if we have no request to change\n      return this.hasStarted_;\n    }\n    if (request === this.hasStarted_) {\n      return;\n    }\n    this.hasStarted_ = request;\n    if (this.hasStarted_) {\n      this.addClass('vjs-has-started');\n    } else {\n      this.removeClass('vjs-has-started');\n    }\n  }\n\n  /**\n   * Fired whenever the media begins or resumes playback\n   *\n   * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-play}\n   * @fires Player#play\n   * @listens Tech#play\n   * @private\n   */\n  handleTechPlay_() {\n    this.removeClass('vjs-ended', 'vjs-paused');\n    this.addClass('vjs-playing');\n\n    // hide the poster when the user hits play\n    this.hasStarted(true);\n    /**\n     * Triggered whenever an {@link Tech#play} event happens. Indicates that\n     * playback has started or resumed.\n     *\n     * @event Player#play\n     * @type {Event}\n     */\n    this.trigger('play');\n  }\n\n  /**\n   * Retrigger the `ratechange` event that was triggered by the {@link Tech}.\n   *\n   * If there were any events queued while the playback rate was zero, fire\n   * those events now.\n   *\n   * @private\n   * @method Player#handleTechRateChange_\n   * @fires Player#ratechange\n   * @listens Tech#ratechange\n   */\n  handleTechRateChange_() {\n    if (this.tech_.playbackRate() > 0 && this.cache_.lastPlaybackRate === 0) {\n      this.queuedCallbacks_.forEach(queued => queued.callback(queued.event));\n      this.queuedCallbacks_ = [];\n    }\n    this.cache_.lastPlaybackRate = this.tech_.playbackRate();\n    /**\n     * Fires when the playing speed of the audio/video is changed\n     *\n     * @event Player#ratechange\n     * @type {event}\n     */\n    this.trigger('ratechange');\n  }\n\n  /**\n   * Retrigger the `waiting` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#waiting\n   * @listens Tech#waiting\n   * @private\n   */\n  handleTechWaiting_() {\n    this.addClass('vjs-waiting');\n    /**\n     * A readyState change on the DOM element has caused playback to stop.\n     *\n     * @event Player#waiting\n     * @type {Event}\n     */\n    this.trigger('waiting');\n\n    // Browsers may emit a timeupdate event after a waiting event. In order to prevent\n    // premature removal of the waiting class, wait for the time to change.\n    const timeWhenWaiting = this.currentTime();\n    const timeUpdateListener = () => {\n      if (timeWhenWaiting !== this.currentTime()) {\n        this.removeClass('vjs-waiting');\n        this.off('timeupdate', timeUpdateListener);\n      }\n    };\n    this.on('timeupdate', timeUpdateListener);\n  }\n\n  /**\n   * Retrigger the `canplay` event that was triggered by the {@link Tech}.\n   * > Note: This is not consistent between browsers. See #1351\n   *\n   * @fires Player#canplay\n   * @listens Tech#canplay\n   * @private\n   */\n  handleTechCanPlay_() {\n    this.removeClass('vjs-waiting');\n    /**\n     * The media has a readyState of HAVE_FUTURE_DATA or greater.\n     *\n     * @event Player#canplay\n     * @type {Event}\n     */\n    this.trigger('canplay');\n  }\n\n  /**\n   * Retrigger the `canplaythrough` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#canplaythrough\n   * @listens Tech#canplaythrough\n   * @private\n   */\n  handleTechCanPlayThrough_() {\n    this.removeClass('vjs-waiting');\n    /**\n     * The media has a readyState of HAVE_ENOUGH_DATA or greater. This means that the\n     * entire media file can be played without buffering.\n     *\n     * @event Player#canplaythrough\n     * @type {Event}\n     */\n    this.trigger('canplaythrough');\n  }\n\n  /**\n   * Retrigger the `playing` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#playing\n   * @listens Tech#playing\n   * @private\n   */\n  handleTechPlaying_() {\n    this.removeClass('vjs-waiting');\n    /**\n     * The media is no longer blocked from playback, and has started playing.\n     *\n     * @event Player#playing\n     * @type {Event}\n     */\n    this.trigger('playing');\n  }\n\n  /**\n   * Retrigger the `seeking` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#seeking\n   * @listens Tech#seeking\n   * @private\n   */\n  handleTechSeeking_() {\n    this.addClass('vjs-seeking');\n    /**\n     * Fired whenever the player is jumping to a new time\n     *\n     * @event Player#seeking\n     * @type {Event}\n     */\n    this.trigger('seeking');\n  }\n\n  /**\n   * Retrigger the `seeked` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#seeked\n   * @listens Tech#seeked\n   * @private\n   */\n  handleTechSeeked_() {\n    this.removeClass('vjs-seeking', 'vjs-ended');\n    /**\n     * Fired when the player has finished jumping to a new time\n     *\n     * @event Player#seeked\n     * @type {Event}\n     */\n    this.trigger('seeked');\n  }\n\n  /**\n   * Retrigger the `pause` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#pause\n   * @listens Tech#pause\n   * @private\n   */\n  handleTechPause_() {\n    this.removeClass('vjs-playing');\n    this.addClass('vjs-paused');\n    /**\n     * Fired whenever the media has been paused\n     *\n     * @event Player#pause\n     * @type {Event}\n     */\n    this.trigger('pause');\n  }\n\n  /**\n   * Retrigger the `ended` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#ended\n   * @listens Tech#ended\n   * @private\n   */\n  handleTechEnded_() {\n    this.addClass('vjs-ended');\n    this.removeClass('vjs-waiting');\n    if (this.options_.loop) {\n      this.currentTime(0);\n      this.play();\n    } else if (!this.paused()) {\n      this.pause();\n    }\n\n    /**\n     * Fired when the end of the media resource is reached (currentTime == duration)\n     *\n     * @event Player#ended\n     * @type {Event}\n     */\n    this.trigger('ended');\n  }\n\n  /**\n   * Fired when the duration of the media resource is first known or changed\n   *\n   * @listens Tech#durationchange\n   * @private\n   */\n  handleTechDurationChange_() {\n    this.duration(this.techGet_('duration'));\n  }\n\n  /**\n   * Handle a click on the media element to play/pause\n   *\n   * @param {Event} event\n   *        the event that caused this function to trigger\n   *\n   * @listens Tech#click\n   * @private\n   */\n  handleTechClick_(event) {\n    // When controls are disabled a click should not toggle playback because\n    // the click is considered a control\n    if (!this.controls_) {\n      return;\n    }\n    if (this.options_ === undefined || this.options_.userActions === undefined || this.options_.userActions.click === undefined || this.options_.userActions.click !== false) {\n      if (this.options_ !== undefined && this.options_.userActions !== undefined && typeof this.options_.userActions.click === 'function') {\n        this.options_.userActions.click.call(this, event);\n      } else if (this.paused()) {\n        silencePromise(this.play());\n      } else {\n        this.pause();\n      }\n    }\n  }\n\n  /**\n   * Handle a double-click on the media element to enter/exit fullscreen\n   *\n   * @param {Event} event\n   *        the event that caused this function to trigger\n   *\n   * @listens Tech#dblclick\n   * @private\n   */\n  handleTechDoubleClick_(event) {\n    if (!this.controls_) {\n      return;\n    }\n\n    // we do not want to toggle fullscreen state\n    // when double-clicking inside a control bar or a modal\n    const inAllowedEls = Array.prototype.some.call(this.$$('.vjs-control-bar, .vjs-modal-dialog'), el => el.contains(event.target));\n    if (!inAllowedEls) {\n      /*\n       * options.userActions.doubleClick\n       *\n       * If `undefined` or `true`, double-click toggles fullscreen if controls are present\n       * Set to `false` to disable double-click handling\n       * Set to a function to substitute an external double-click handler\n       */\n      if (this.options_ === undefined || this.options_.userActions === undefined || this.options_.userActions.doubleClick === undefined || this.options_.userActions.doubleClick !== false) {\n        if (this.options_ !== undefined && this.options_.userActions !== undefined && typeof this.options_.userActions.doubleClick === 'function') {\n          this.options_.userActions.doubleClick.call(this, event);\n        } else if (this.isFullscreen()) {\n          this.exitFullscreen();\n        } else {\n          this.requestFullscreen();\n        }\n      }\n    }\n  }\n\n  /**\n   * Handle a tap on the media element. It will toggle the user\n   * activity state, which hides and shows the controls.\n   *\n   * @listens Tech#tap\n   * @private\n   */\n  handleTechTap_() {\n    this.userActive(!this.userActive());\n  }\n\n  /**\n   * Handle touch to start\n   *\n   * @listens Tech#touchstart\n   * @private\n   */\n  handleTechTouchStart_() {\n    this.userWasActive = this.userActive();\n  }\n\n  /**\n   * Handle touch to move\n   *\n   * @listens Tech#touchmove\n   * @private\n   */\n  handleTechTouchMove_() {\n    if (this.userWasActive) {\n      this.reportUserActivity();\n    }\n  }\n\n  /**\n   * Handle touch to end\n   *\n   * @param {Event} event\n   *        the touchend event that triggered\n   *        this function\n   *\n   * @listens Tech#touchend\n   * @private\n   */\n  handleTechTouchEnd_(event) {\n    // Stop the mouse events from also happening\n    if (event.cancelable) {\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * @private\n   */\n  toggleFullscreenClass_() {\n    if (this.isFullscreen()) {\n      this.addClass('vjs-fullscreen');\n    } else {\n      this.removeClass('vjs-fullscreen');\n    }\n  }\n\n  /**\n   * when the document fschange event triggers it calls this\n   */\n  documentFullscreenChange_(e) {\n    const targetPlayer = e.target.player;\n\n    // if another player was fullscreen\n    // do a null check for targetPlayer because older firefox's would put document as e.target\n    if (targetPlayer && targetPlayer !== this) {\n      return;\n    }\n    const el = this.el();\n    let isFs = document[this.fsApi_.fullscreenElement] === el;\n    if (!isFs && el.matches) {\n      isFs = el.matches(':' + this.fsApi_.fullscreen);\n    }\n    this.isFullscreen(isFs);\n  }\n\n  /**\n   * Handle Tech Fullscreen Change\n   *\n   * @param {Event} event\n   *        the fullscreenchange event that triggered this function\n   *\n   * @param {Object} data\n   *        the data that was sent with the event\n   *\n   * @private\n   * @listens Tech#fullscreenchange\n   * @fires Player#fullscreenchange\n   */\n  handleTechFullscreenChange_(event, data) {\n    if (data) {\n      if (data.nativeIOSFullscreen) {\n        this.addClass('vjs-ios-native-fs');\n        this.tech_.one('webkitendfullscreen', () => {\n          this.removeClass('vjs-ios-native-fs');\n        });\n      }\n      this.isFullscreen(data.isFullscreen);\n    }\n  }\n  handleTechFullscreenError_(event, err) {\n    this.trigger('fullscreenerror', err);\n  }\n\n  /**\n   * @private\n   */\n  togglePictureInPictureClass_() {\n    if (this.isInPictureInPicture()) {\n      this.addClass('vjs-picture-in-picture');\n    } else {\n      this.removeClass('vjs-picture-in-picture');\n    }\n  }\n\n  /**\n   * Handle Tech Enter Picture-in-Picture.\n   *\n   * @param {Event} event\n   *        the enterpictureinpicture event that triggered this function\n   *\n   * @private\n   * @listens Tech#enterpictureinpicture\n   */\n  handleTechEnterPictureInPicture_(event) {\n    this.isInPictureInPicture(true);\n  }\n\n  /**\n   * Handle Tech Leave Picture-in-Picture.\n   *\n   * @param {Event} event\n   *        the leavepictureinpicture event that triggered this function\n   *\n   * @private\n   * @listens Tech#leavepictureinpicture\n   */\n  handleTechLeavePictureInPicture_(event) {\n    this.isInPictureInPicture(false);\n  }\n\n  /**\n   * Fires when an error occurred during the loading of an audio/video.\n   *\n   * @private\n   * @listens Tech#error\n   */\n  handleTechError_() {\n    const error = this.tech_.error();\n    if (error) {\n      this.error(error);\n    }\n  }\n\n  /**\n   * Retrigger the `textdata` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#textdata\n   * @listens Tech#textdata\n   * @private\n   */\n  handleTechTextData_() {\n    let data = null;\n    if (arguments.length > 1) {\n      data = arguments[1];\n    }\n\n    /**\n     * Fires when we get a textdata event from tech\n     *\n     * @event Player#textdata\n     * @type {Event}\n     */\n    this.trigger('textdata', data);\n  }\n\n  /**\n   * Get object for cached values.\n   *\n   * @return {Object}\n   *         get the current object cache\n   */\n  getCache() {\n    return this.cache_;\n  }\n\n  /**\n   * Resets the internal cache object.\n   *\n   * Using this function outside the player constructor or reset method may\n   * have unintended side-effects.\n   *\n   * @private\n   */\n  resetCache_() {\n    this.cache_ = {\n      // Right now, the currentTime is not _really_ cached because it is always\n      // retrieved from the tech (see: currentTime). However, for completeness,\n      // we set it to zero here to ensure that if we do start actually caching\n      // it, we reset it along with everything else.\n      currentTime: 0,\n      initTime: 0,\n      inactivityTimeout: this.options_.inactivityTimeout,\n      duration: NaN,\n      lastVolume: 1,\n      lastPlaybackRate: this.defaultPlaybackRate(),\n      media: null,\n      src: '',\n      source: {},\n      sources: [],\n      playbackRates: [],\n      volume: 1\n    };\n  }\n\n  /**\n   * Pass values to the playback tech\n   *\n   * @param {string} [method]\n   *        the method to call\n   *\n   * @param {Object} [arg]\n   *        the argument to pass\n   *\n   * @private\n   */\n  techCall_(method, arg) {\n    // If it's not ready yet, call method when it is\n\n    this.ready(function () {\n      if (method in allowedSetters) {\n        return set(this.middleware_, this.tech_, method, arg);\n      } else if (method in allowedMediators) {\n        return mediate(this.middleware_, this.tech_, method, arg);\n      }\n      try {\n        if (this.tech_) {\n          this.tech_[method](arg);\n        }\n      } catch (e) {\n        log$1(e);\n        throw e;\n      }\n    }, true);\n  }\n\n  /**\n   * Mediate attempt to call playback tech method\n   * and return the value of the method called.\n   *\n   * @param {string} method\n   *        Tech method\n   *\n   * @return {*}\n   *         Value returned by the tech method called, undefined if tech\n   *         is not ready or tech method is not present\n   *\n   * @private\n   */\n  techGet_(method) {\n    if (!this.tech_ || !this.tech_.isReady_) {\n      return;\n    }\n    if (method in allowedGetters) {\n      return get(this.middleware_, this.tech_, method);\n    } else if (method in allowedMediators) {\n      return mediate(this.middleware_, this.tech_, method);\n    }\n\n    // Log error when playback tech object is present but method\n    // is undefined or unavailable\n    try {\n      return this.tech_[method]();\n    } catch (e) {\n      // When building additional tech libs, an expected method may not be defined yet\n      if (this.tech_[method] === undefined) {\n        log$1(`Video.js: ${method} method not defined for ${this.techName_} playback technology.`, e);\n        throw e;\n      }\n\n      // When a method isn't available on the object it throws a TypeError\n      if (e.name === 'TypeError') {\n        log$1(`Video.js: ${method} unavailable on ${this.techName_} playback technology element.`, e);\n        this.tech_.isReady_ = false;\n        throw e;\n      }\n\n      // If error unknown, just log and throw\n      log$1(e);\n      throw e;\n    }\n  }\n\n  /**\n   * Attempt to begin playback at the first opportunity.\n   *\n   * @return {Promise|undefined}\n   *         Returns a promise if the browser supports Promises (or one\n   *         was passed in as an option). This promise will be resolved on\n   *         the return value of play. If this is undefined it will fulfill the\n   *         promise chain otherwise the promise chain will be fulfilled when\n   *         the promise from play is fulfilled.\n   */\n  play() {\n    return new Promise(resolve => {\n      this.play_(resolve);\n    });\n  }\n\n  /**\n   * The actual logic for play, takes a callback that will be resolved on the\n   * return value of play. This allows us to resolve to the play promise if there\n   * is one on modern browsers.\n   *\n   * @private\n   * @param {Function} [callback]\n   *        The callback that should be called when the techs play is actually called\n   */\n  play_(callback = silencePromise) {\n    this.playCallbacks_.push(callback);\n    const isSrcReady = Boolean(!this.changingSrc_ && (this.src() || this.currentSrc()));\n    const isSafariOrIOS = Boolean(IS_ANY_SAFARI || IS_IOS);\n\n    // treat calls to play_ somewhat like the `one` event function\n    if (this.waitToPlay_) {\n      this.off(['ready', 'loadstart'], this.waitToPlay_);\n      this.waitToPlay_ = null;\n    }\n\n    // if the player/tech is not ready or the src itself is not ready\n    // queue up a call to play on `ready` or `loadstart`\n    if (!this.isReady_ || !isSrcReady) {\n      this.waitToPlay_ = e => {\n        this.play_();\n      };\n      this.one(['ready', 'loadstart'], this.waitToPlay_);\n\n      // if we are in Safari, there is a high chance that loadstart will trigger after the gesture timeperiod\n      // in that case, we need to prime the video element by calling load so it'll be ready in time\n      if (!isSrcReady && isSafariOrIOS) {\n        this.load();\n      }\n      return;\n    }\n\n    // If the player/tech is ready and we have a source, we can attempt playback.\n    const val = this.techGet_('play');\n\n    // For native playback, reset the progress bar if we get a play call from a replay.\n    const isNativeReplay = isSafariOrIOS && this.hasClass('vjs-ended');\n    if (isNativeReplay) {\n      this.resetProgressBar_();\n    }\n    // play was terminated if the returned value is null\n    if (val === null) {\n      this.runPlayTerminatedQueue_();\n    } else {\n      this.runPlayCallbacks_(val);\n    }\n  }\n\n  /**\n   * These functions will be run when if play is terminated. If play\n   * runPlayCallbacks_ is run these function will not be run. This allows us\n   * to differentiate between a terminated play and an actual call to play.\n   */\n  runPlayTerminatedQueue_() {\n    const queue = this.playTerminatedQueue_.slice(0);\n    this.playTerminatedQueue_ = [];\n    queue.forEach(function (q) {\n      q();\n    });\n  }\n\n  /**\n   * When a callback to play is delayed we have to run these\n   * callbacks when play is actually called on the tech. This function\n   * runs the callbacks that were delayed and accepts the return value\n   * from the tech.\n   *\n   * @param {undefined|Promise} val\n   *        The return value from the tech.\n   */\n  runPlayCallbacks_(val) {\n    const callbacks = this.playCallbacks_.slice(0);\n    this.playCallbacks_ = [];\n    // clear play terminatedQueue since we finished a real play\n    this.playTerminatedQueue_ = [];\n    callbacks.forEach(function (cb) {\n      cb(val);\n    });\n  }\n\n  /**\n   * Pause the video playback\n   */\n  pause() {\n    this.techCall_('pause');\n  }\n\n  /**\n   * Check if the player is paused or has yet to play\n   *\n   * @return {boolean}\n   *         - false: if the media is currently playing\n   *         - true: if media is not currently playing\n   */\n  paused() {\n    // The initial state of paused should be true (in Safari it's actually false)\n    return this.techGet_('paused') === false ? false : true;\n  }\n\n  /**\n   * Get a TimeRange object representing the current ranges of time that the user\n   * has played.\n   *\n   * @return { import('./utils/time').TimeRange }\n   *         A time range object that represents all the increments of time that have\n   *         been played.\n   */\n  played() {\n    return this.techGet_('played') || createTimeRanges$1(0, 0);\n  }\n\n  /**\n   * Sets or returns whether or not the user is \"scrubbing\". Scrubbing is\n   * when the user has clicked the progress bar handle and is\n   * dragging it along the progress bar.\n   *\n   * @param {boolean} [isScrubbing]\n   *        whether the user is or is not scrubbing\n   *\n   * @return {boolean|undefined}\n   *         - The value of scrubbing when getting\n   *         - Nothing when setting\n   */\n  scrubbing(isScrubbing) {\n    if (typeof isScrubbing === 'undefined') {\n      return this.scrubbing_;\n    }\n    this.scrubbing_ = !!isScrubbing;\n    this.techCall_('setScrubbing', this.scrubbing_);\n    if (isScrubbing) {\n      this.addClass('vjs-scrubbing');\n    } else {\n      this.removeClass('vjs-scrubbing');\n    }\n  }\n\n  /**\n   * Get or set the current time (in seconds)\n   *\n   * @param {number|string} [seconds]\n   *        The time to seek to in seconds\n   *\n   * @return {number|undefined}\n   *         - the current time in seconds when getting\n   *         - Nothing when setting\n   */\n  currentTime(seconds) {\n    if (seconds === undefined) {\n      // cache last currentTime and return. default to 0 seconds\n      //\n      // Caching the currentTime is meant to prevent a massive amount of reads on the tech's\n      // currentTime when scrubbing, but may not provide much performance benefit after all.\n      // Should be tested. Also something has to read the actual current time or the cache will\n      // never get updated.\n      this.cache_.currentTime = this.techGet_('currentTime') || 0;\n      return this.cache_.currentTime;\n    }\n    if (seconds < 0) {\n      seconds = 0;\n    }\n    if (!this.isReady_ || this.changingSrc_ || !this.tech_ || !this.tech_.isReady_) {\n      this.cache_.initTime = seconds;\n      this.off('canplay', this.boundApplyInitTime_);\n      this.one('canplay', this.boundApplyInitTime_);\n      return;\n    }\n    this.techCall_('setCurrentTime', seconds);\n    this.cache_.initTime = 0;\n    if (isFinite(seconds)) {\n      this.cache_.currentTime = Number(seconds);\n    }\n  }\n\n  /**\n   * Apply the value of initTime stored in cache as currentTime.\n   *\n   * @private\n   */\n  applyInitTime_() {\n    this.currentTime(this.cache_.initTime);\n  }\n\n  /**\n   * Normally gets the length in time of the video in seconds;\n   * in all but the rarest use cases an argument will NOT be passed to the method\n   *\n   * > **NOTE**: The video must have started loading before the duration can be\n   * known, and depending on preload behaviour may not be known until the video starts\n   * playing.\n   *\n   * @fires Player#durationchange\n   *\n   * @param {number} [seconds]\n   *        The duration of the video to set in seconds\n   *\n   * @return {number|undefined}\n   *         - The duration of the video in seconds when getting\n   *         - Nothing when setting\n   */\n  duration(seconds) {\n    if (seconds === undefined) {\n      // return NaN if the duration is not known\n      return this.cache_.duration !== undefined ? this.cache_.duration : NaN;\n    }\n    seconds = parseFloat(seconds);\n\n    // Standardize on Infinity for signaling video is live\n    if (seconds < 0) {\n      seconds = Infinity;\n    }\n    if (seconds !== this.cache_.duration) {\n      // Cache the last set value for optimized scrubbing\n      this.cache_.duration = seconds;\n      if (seconds === Infinity) {\n        this.addClass('vjs-live');\n      } else {\n        this.removeClass('vjs-live');\n      }\n      if (!isNaN(seconds)) {\n        // Do not fire durationchange unless the duration value is known.\n        // @see [Spec]{@link https://www.w3.org/TR/2011/WD-html5-20110113/video.html#media-element-load-algorithm}\n\n        /**\n         * @event Player#durationchange\n         * @type {Event}\n         */\n        this.trigger('durationchange');\n      }\n    }\n  }\n\n  /**\n   * Calculates how much time is left in the video. Not part\n   * of the native video API.\n   *\n   * @return {number}\n   *         The time remaining in seconds\n   */\n  remainingTime() {\n    return this.duration() - this.currentTime();\n  }\n\n  /**\n   * A remaining time function that is intended to be used when\n   * the time is to be displayed directly to the user.\n   *\n   * @return {number}\n   *         The rounded time remaining in seconds\n   */\n  remainingTimeDisplay() {\n    return Math.floor(this.duration()) - Math.floor(this.currentTime());\n  }\n\n  //\n  // Kind of like an array of portions of the video that have been downloaded.\n\n  /**\n   * Get a TimeRange object with an array of the times of the video\n   * that have been downloaded. If you just want the percent of the\n   * video that's been downloaded, use bufferedPercent.\n   *\n   * @see [Buffered Spec]{@link http://dev.w3.org/html5/spec/video.html#dom-media-buffered}\n   *\n   * @return { import('./utils/time').TimeRange }\n   *         A mock {@link TimeRanges} object (following HTML spec)\n   */\n  buffered() {\n    let buffered = this.techGet_('buffered');\n    if (!buffered || !buffered.length) {\n      buffered = createTimeRanges$1(0, 0);\n    }\n    return buffered;\n  }\n\n  /**\n   * Get the TimeRanges of the media that are currently available\n   * for seeking to.\n   *\n   * @see [Seekable Spec]{@link https://html.spec.whatwg.org/multipage/media.html#dom-media-seekable}\n   *\n   * @return { import('./utils/time').TimeRange }\n   *         A mock {@link TimeRanges} object (following HTML spec)\n   */\n  seekable() {\n    let seekable = this.techGet_('seekable');\n    if (!seekable || !seekable.length) {\n      seekable = createTimeRanges$1(0, 0);\n    }\n    return seekable;\n  }\n\n  /**\n   * Returns whether the player is in the \"seeking\" state.\n   *\n   * @return {boolean} True if the player is in the seeking state, false if not.\n   */\n  seeking() {\n    return this.techGet_('seeking');\n  }\n\n  /**\n   * Returns whether the player is in the \"ended\" state.\n   *\n   * @return {boolean} True if the player is in the ended state, false if not.\n   */\n  ended() {\n    return this.techGet_('ended');\n  }\n\n  /**\n   * Returns the current state of network activity for the element, from\n   * the codes in the list below.\n   * - NETWORK_EMPTY (numeric value 0)\n   *   The element has not yet been initialised. All attributes are in\n   *   their initial states.\n   * - NETWORK_IDLE (numeric value 1)\n   *   The element's resource selection algorithm is active and has\n   *   selected a resource, but it is not actually using the network at\n   *   this time.\n   * - NETWORK_LOADING (numeric value 2)\n   *   The user agent is actively trying to download data.\n   * - NETWORK_NO_SOURCE (numeric value 3)\n   *   The element's resource selection algorithm is active, but it has\n   *   not yet found a resource to use.\n   *\n   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#network-states\n   * @return {number} the current network activity state\n   */\n  networkState() {\n    return this.techGet_('networkState');\n  }\n\n  /**\n   * Returns a value that expresses the current state of the element\n   * with respect to rendering the current playback position, from the\n   * codes in the list below.\n   * - HAVE_NOTHING (numeric value 0)\n   *   No information regarding the media resource is available.\n   * - HAVE_METADATA (numeric value 1)\n   *   Enough of the resource has been obtained that the duration of the\n   *   resource is available.\n   * - HAVE_CURRENT_DATA (numeric value 2)\n   *   Data for the immediate current playback position is available.\n   * - HAVE_FUTURE_DATA (numeric value 3)\n   *   Data for the immediate current playback position is available, as\n   *   well as enough data for the user agent to advance the current\n   *   playback position in the direction of playback.\n   * - HAVE_ENOUGH_DATA (numeric value 4)\n   *   The user agent estimates that enough data is available for\n   *   playback to proceed uninterrupted.\n   *\n   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-readystate\n   * @return {number} the current playback rendering state\n   */\n  readyState() {\n    return this.techGet_('readyState');\n  }\n\n  /**\n   * Get the percent (as a decimal) of the video that's been downloaded.\n   * This method is not a part of the native HTML video API.\n   *\n   * @return {number}\n   *         A decimal between 0 and 1 representing the percent\n   *         that is buffered 0 being 0% and 1 being 100%\n   */\n  bufferedPercent() {\n    return bufferedPercent(this.buffered(), this.duration());\n  }\n\n  /**\n   * Get the ending time of the last buffered time range\n   * This is used in the progress bar to encapsulate all time ranges.\n   *\n   * @return {number}\n   *         The end of the last buffered time range\n   */\n  bufferedEnd() {\n    const buffered = this.buffered();\n    const duration = this.duration();\n    let end = buffered.end(buffered.length - 1);\n    if (end > duration) {\n      end = duration;\n    }\n    return end;\n  }\n\n  /**\n   * Get or set the current volume of the media\n   *\n   * @param  {number} [percentAsDecimal]\n   *         The new volume as a decimal percent:\n   *         - 0 is muted/0%/off\n   *         - 1.0 is 100%/full\n   *         - 0.5 is half volume or 50%\n   *\n   * @return {number|undefined}\n   *         The current volume as a percent when getting\n   */\n  volume(percentAsDecimal) {\n    let vol;\n    if (percentAsDecimal !== undefined) {\n      // Force value to between 0 and 1\n      vol = Math.max(0, Math.min(1, percentAsDecimal));\n      this.cache_.volume = vol;\n      this.techCall_('setVolume', vol);\n      if (vol > 0) {\n        this.lastVolume_(vol);\n      }\n      return;\n    }\n\n    // Default to 1 when returning current volume.\n    vol = parseFloat(this.techGet_('volume'));\n    return isNaN(vol) ? 1 : vol;\n  }\n\n  /**\n   * Get the current muted state, or turn mute on or off\n   *\n   * @param {boolean} [muted]\n   *        - true to mute\n   *        - false to unmute\n   *\n   * @return {boolean|undefined}\n   *         - true if mute is on and getting\n   *         - false if mute is off and getting\n   *         - nothing if setting\n   */\n  muted(muted) {\n    if (muted !== undefined) {\n      this.techCall_('setMuted', muted);\n      return;\n    }\n    return this.techGet_('muted') || false;\n  }\n\n  /**\n   * Get the current defaultMuted state, or turn defaultMuted on or off. defaultMuted\n   * indicates the state of muted on initial playback.\n   *\n   * ```js\n   *   var myPlayer = videojs('some-player-id');\n   *\n   *   myPlayer.src(\"http://www.example.com/path/to/video.mp4\");\n   *\n   *   // get, should be false\n   *   console.log(myPlayer.defaultMuted());\n   *   // set to true\n   *   myPlayer.defaultMuted(true);\n   *   // get should be true\n   *   console.log(myPlayer.defaultMuted());\n   * ```\n   *\n   * @param {boolean} [defaultMuted]\n   *        - true to mute\n   *        - false to unmute\n   *\n   * @return {boolean|undefined}\n   *         - true if defaultMuted is on and getting\n   *         - false if defaultMuted is off and getting\n   *         - Nothing when setting\n   */\n  defaultMuted(defaultMuted) {\n    if (defaultMuted !== undefined) {\n      this.techCall_('setDefaultMuted', defaultMuted);\n    }\n    return this.techGet_('defaultMuted') || false;\n  }\n\n  /**\n   * Get the last volume, or set it\n   *\n   * @param  {number} [percentAsDecimal]\n   *         The new last volume as a decimal percent:\n   *         - 0 is muted/0%/off\n   *         - 1.0 is 100%/full\n   *         - 0.5 is half volume or 50%\n   *\n   * @return {number|undefined}\n   *         - The current value of lastVolume as a percent when getting\n   *         - Nothing when setting\n   *\n   * @private\n   */\n  lastVolume_(percentAsDecimal) {\n    if (percentAsDecimal !== undefined && percentAsDecimal !== 0) {\n      this.cache_.lastVolume = percentAsDecimal;\n      return;\n    }\n    return this.cache_.lastVolume;\n  }\n\n  /**\n   * Check if current tech can support native fullscreen\n   * (e.g. with built in controls like iOS)\n   *\n   * @return {boolean}\n   *         if native fullscreen is supported\n   */\n  supportsFullScreen() {\n    return this.techGet_('supportsFullScreen') || false;\n  }\n\n  /**\n   * Check if the player is in fullscreen mode or tell the player that it\n   * is or is not in fullscreen mode.\n   *\n   * > NOTE: As of the latest HTML5 spec, isFullscreen is no longer an official\n   * property and instead document.fullscreenElement is used. But isFullscreen is\n   * still a valuable property for internal player workings.\n   *\n   * @param  {boolean} [isFS]\n   *         Set the players current fullscreen state\n   *\n   * @return {boolean|undefined}\n   *         - true if fullscreen is on and getting\n   *         - false if fullscreen is off and getting\n   *         - Nothing when setting\n   */\n  isFullscreen(isFS) {\n    if (isFS !== undefined) {\n      const oldValue = this.isFullscreen_;\n      this.isFullscreen_ = Boolean(isFS);\n\n      // if we changed fullscreen state and we're in prefixed mode, trigger fullscreenchange\n      // this is the only place where we trigger fullscreenchange events for older browsers\n      // fullWindow mode is treated as a prefixed event and will get a fullscreenchange event as well\n      if (this.isFullscreen_ !== oldValue && this.fsApi_.prefixed) {\n        /**\n           * @event Player#fullscreenchange\n           * @type {Event}\n           */\n        this.trigger('fullscreenchange');\n      }\n      this.toggleFullscreenClass_();\n      return;\n    }\n    return this.isFullscreen_;\n  }\n\n  /**\n   * Increase the size of the video to full screen\n   * In some browsers, full screen is not supported natively, so it enters\n   * \"full window mode\", where the video fills the browser window.\n   * In browsers and devices that support native full screen, sometimes the\n   * browser's default controls will be shown, and not the Video.js custom skin.\n   * This includes most mobile devices (iOS, Android) and older versions of\n   * Safari.\n   *\n   * @param  {Object} [fullscreenOptions]\n   *         Override the player fullscreen options\n   *\n   * @fires Player#fullscreenchange\n   */\n  requestFullscreen(fullscreenOptions) {\n    if (this.isInPictureInPicture()) {\n      this.exitPictureInPicture();\n    }\n    const self = this;\n    return new Promise((resolve, reject) => {\n      function offHandler() {\n        self.off('fullscreenerror', errorHandler);\n        self.off('fullscreenchange', changeHandler);\n      }\n      function changeHandler() {\n        offHandler();\n        resolve();\n      }\n      function errorHandler(e, err) {\n        offHandler();\n        reject(err);\n      }\n      self.one('fullscreenchange', changeHandler);\n      self.one('fullscreenerror', errorHandler);\n      const promise = self.requestFullscreenHelper_(fullscreenOptions);\n      if (promise) {\n        promise.then(offHandler, offHandler);\n        promise.then(resolve, reject);\n      }\n    });\n  }\n  requestFullscreenHelper_(fullscreenOptions) {\n    let fsOptions;\n\n    // Only pass fullscreen options to requestFullscreen in spec-compliant browsers.\n    // Use defaults or player configured option unless passed directly to this method.\n    if (!this.fsApi_.prefixed) {\n      fsOptions = this.options_.fullscreen && this.options_.fullscreen.options || {};\n      if (fullscreenOptions !== undefined) {\n        fsOptions = fullscreenOptions;\n      }\n    }\n\n    // This method works as follows:\n    // 1. if a fullscreen api is available, use it\n    //   1. call requestFullscreen with potential options\n    //   2. if we got a promise from above, use it to update isFullscreen()\n    // 2. otherwise, if the tech supports fullscreen, call `enterFullScreen` on it.\n    //   This is particularly used for iPhone, older iPads, and non-safari browser on iOS.\n    // 3. otherwise, use \"fullWindow\" mode\n    if (this.fsApi_.requestFullscreen) {\n      const promise = this.el_[this.fsApi_.requestFullscreen](fsOptions);\n\n      // Even on browsers with promise support this may not return a promise\n      if (promise) {\n        promise.then(() => this.isFullscreen(true), () => this.isFullscreen(false));\n      }\n      return promise;\n    } else if (this.tech_.supportsFullScreen() && !this.options_.preferFullWindow === true) {\n      // we can't take the video.js controls fullscreen but we can go fullscreen\n      // with native controls\n      this.techCall_('enterFullScreen');\n    } else {\n      // fullscreen isn't supported so we'll just stretch the video element to\n      // fill the viewport\n      this.enterFullWindow();\n    }\n  }\n\n  /**\n   * Return the video to its normal size after having been in full screen mode\n   *\n   * @fires Player#fullscreenchange\n   */\n  exitFullscreen() {\n    const self = this;\n    return new Promise((resolve, reject) => {\n      function offHandler() {\n        self.off('fullscreenerror', errorHandler);\n        self.off('fullscreenchange', changeHandler);\n      }\n      function changeHandler() {\n        offHandler();\n        resolve();\n      }\n      function errorHandler(e, err) {\n        offHandler();\n        reject(err);\n      }\n      self.one('fullscreenchange', changeHandler);\n      self.one('fullscreenerror', errorHandler);\n      const promise = self.exitFullscreenHelper_();\n      if (promise) {\n        promise.then(offHandler, offHandler);\n        // map the promise to our resolve/reject methods\n        promise.then(resolve, reject);\n      }\n    });\n  }\n  exitFullscreenHelper_() {\n    if (this.fsApi_.requestFullscreen) {\n      const promise = document[this.fsApi_.exitFullscreen]();\n\n      // Even on browsers with promise support this may not return a promise\n      if (promise) {\n        // we're splitting the promise here, so, we want to catch the\n        // potential error so that this chain doesn't have unhandled errors\n        silencePromise(promise.then(() => this.isFullscreen(false)));\n      }\n      return promise;\n    } else if (this.tech_.supportsFullScreen() && !this.options_.preferFullWindow === true) {\n      this.techCall_('exitFullScreen');\n    } else {\n      this.exitFullWindow();\n    }\n  }\n\n  /**\n   * When fullscreen isn't supported we can stretch the\n   * video container to as wide as the browser will let us.\n   *\n   * @fires Player#enterFullWindow\n   */\n  enterFullWindow() {\n    this.isFullscreen(true);\n    this.isFullWindow = true;\n\n    // Storing original doc overflow value to return to when fullscreen is off\n    this.docOrigOverflow = document.documentElement.style.overflow;\n\n    // Add listener for esc key to exit fullscreen\n    on(document, 'keydown', this.boundFullWindowOnEscKey_);\n\n    // Hide any scroll bars\n    document.documentElement.style.overflow = 'hidden';\n\n    // Apply fullscreen styles\n    addClass(document.body, 'vjs-full-window');\n\n    /**\n     * @event Player#enterFullWindow\n     * @type {Event}\n     */\n    this.trigger('enterFullWindow');\n  }\n\n  /**\n   * Check for call to either exit full window or\n   * full screen on ESC key\n   *\n   * @param {string} event\n   *        Event to check for key press\n   */\n  fullWindowOnEscKey(event) {\n    if (keycode.isEventKey(event, 'Esc')) {\n      if (this.isFullscreen() === true) {\n        if (!this.isFullWindow) {\n          this.exitFullscreen();\n        } else {\n          this.exitFullWindow();\n        }\n      }\n    }\n  }\n\n  /**\n   * Exit full window\n   *\n   * @fires Player#exitFullWindow\n   */\n  exitFullWindow() {\n    this.isFullscreen(false);\n    this.isFullWindow = false;\n    off(document, 'keydown', this.boundFullWindowOnEscKey_);\n\n    // Unhide scroll bars.\n    document.documentElement.style.overflow = this.docOrigOverflow;\n\n    // Remove fullscreen styles\n    removeClass(document.body, 'vjs-full-window');\n\n    // Resize the box, controller, and poster to original sizes\n    // this.positionAll();\n    /**\n     * @event Player#exitFullWindow\n     * @type {Event}\n     */\n    this.trigger('exitFullWindow');\n  }\n\n  /**\n   * Get or set disable Picture-in-Picture mode.\n   *\n   * @param {boolean} [value]\n   *                  - true will disable Picture-in-Picture mode\n   *                  - false will enable Picture-in-Picture mode\n   */\n  disablePictureInPicture(value) {\n    if (value === undefined) {\n      return this.techGet_('disablePictureInPicture');\n    }\n    this.techCall_('setDisablePictureInPicture', value);\n    this.options_.disablePictureInPicture = value;\n    this.trigger('disablepictureinpicturechanged');\n  }\n\n  /**\n   * Check if the player is in Picture-in-Picture mode or tell the player that it\n   * is or is not in Picture-in-Picture mode.\n   *\n   * @param  {boolean} [isPiP]\n   *         Set the players current Picture-in-Picture state\n   *\n   * @return {boolean|undefined}\n   *         - true if Picture-in-Picture is on and getting\n   *         - false if Picture-in-Picture is off and getting\n   *         - nothing if setting\n   */\n  isInPictureInPicture(isPiP) {\n    if (isPiP !== undefined) {\n      this.isInPictureInPicture_ = !!isPiP;\n      this.togglePictureInPictureClass_();\n      return;\n    }\n    return !!this.isInPictureInPicture_;\n  }\n\n  /**\n   * Create a floating video window always on top of other windows so that users may\n   * continue consuming media while they interact with other content sites, or\n   * applications on their device.\n   *\n   * This can use document picture-in-picture or element picture in picture\n   *\n   * Set `enableDocumentPictureInPicture` to `true` to use docPiP on a supported browser\n   * Else set `disablePictureInPicture` to `false` to disable elPiP on a supported browser\n   *\n   *\n   * @see [Spec]{@link https://w3c.github.io/picture-in-picture/}\n   * @see [Spec]{@link https://wicg.github.io/document-picture-in-picture/}\n   *\n   * @fires Player#enterpictureinpicture\n   *\n   * @return {Promise}\n   *         A promise with a Picture-in-Picture window.\n   */\n  requestPictureInPicture() {\n    if (this.options_.enableDocumentPictureInPicture && window$1.documentPictureInPicture) {\n      const pipContainer = document.createElement(this.el().tagName);\n      pipContainer.classList = this.el().classList;\n      pipContainer.classList.add('vjs-pip-container');\n      if (this.posterImage) {\n        pipContainer.appendChild(this.posterImage.el().cloneNode(true));\n      }\n      if (this.titleBar) {\n        pipContainer.appendChild(this.titleBar.el().cloneNode(true));\n      }\n      pipContainer.appendChild(createEl('p', {\n        className: 'vjs-pip-text'\n      }, {}, this.localize('Playing in picture-in-picture')));\n      return window$1.documentPictureInPicture.requestWindow({\n        // The aspect ratio won't be correct, Chrome bug https://crbug.com/1407629\n        width: this.videoWidth(),\n        height: this.videoHeight()\n      }).then(pipWindow => {\n        copyStyleSheetsToWindow(pipWindow);\n        this.el_.parentNode.insertBefore(pipContainer, this.el_);\n        pipWindow.document.body.appendChild(this.el_);\n        pipWindow.document.body.classList.add('vjs-pip-window');\n        this.player_.isInPictureInPicture(true);\n        this.player_.trigger('enterpictureinpicture');\n\n        // Listen for the PiP closing event to move the video back.\n        pipWindow.addEventListener('pagehide', event => {\n          const pipVideo = event.target.querySelector('.video-js');\n          pipContainer.parentNode.replaceChild(pipVideo, pipContainer);\n          this.player_.isInPictureInPicture(false);\n          this.player_.trigger('leavepictureinpicture');\n        });\n        return pipWindow;\n      });\n    }\n    if ('pictureInPictureEnabled' in document && this.disablePictureInPicture() === false) {\n      /**\n       * This event fires when the player enters picture in picture mode\n       *\n       * @event Player#enterpictureinpicture\n       * @type {Event}\n       */\n      return this.techGet_('requestPictureInPicture');\n    }\n    return Promise.reject('No PiP mode is available');\n  }\n\n  /**\n   * Exit Picture-in-Picture mode.\n   *\n   * @see [Spec]{@link https://wicg.github.io/picture-in-picture}\n   *\n   * @fires Player#leavepictureinpicture\n   *\n   * @return {Promise}\n   *         A promise.\n   */\n  exitPictureInPicture() {\n    if (window$1.documentPictureInPicture && window$1.documentPictureInPicture.window) {\n      // With documentPictureInPicture, Player#leavepictureinpicture is fired in the pagehide handler\n      window$1.documentPictureInPicture.window.close();\n      return Promise.resolve();\n    }\n    if ('pictureInPictureEnabled' in document) {\n      /**\n       * This event fires when the player leaves picture in picture mode\n       *\n       * @event Player#leavepictureinpicture\n       * @type {Event}\n       */\n      return document.exitPictureInPicture();\n    }\n  }\n\n  /**\n   * Called when this Player has focus and a key gets pressed down, or when\n   * any Component of this player receives a key press that it doesn't handle.\n   * This allows player-wide hotkeys (either as defined below, or optionally\n   * by an external function).\n   *\n   * @param {KeyboardEvent} event\n   *        The `keydown` event that caused this function to be called.\n   *\n   * @listens keydown\n   */\n  handleKeyDown(event) {\n    const {\n      userActions\n    } = this.options_;\n\n    // Bail out if hotkeys are not configured.\n    if (!userActions || !userActions.hotkeys) {\n      return;\n    }\n\n    // Function that determines whether or not to exclude an element from\n    // hotkeys handling.\n    const excludeElement = el => {\n      const tagName = el.tagName.toLowerCase();\n\n      // The first and easiest test is for `contenteditable` elements.\n      if (el.isContentEditable) {\n        return true;\n      }\n\n      // Inputs matching these types will still trigger hotkey handling as\n      // they are not text inputs.\n      const allowedInputTypes = ['button', 'checkbox', 'hidden', 'radio', 'reset', 'submit'];\n      if (tagName === 'input') {\n        return allowedInputTypes.indexOf(el.type) === -1;\n      }\n\n      // The final test is by tag name. These tags will be excluded entirely.\n      const excludedTags = ['textarea'];\n      return excludedTags.indexOf(tagName) !== -1;\n    };\n\n    // Bail out if the user is focused on an interactive form element.\n    if (excludeElement(this.el_.ownerDocument.activeElement)) {\n      return;\n    }\n    if (typeof userActions.hotkeys === 'function') {\n      userActions.hotkeys.call(this, event);\n    } else {\n      this.handleHotkeys(event);\n    }\n  }\n\n  /**\n   * Called when this Player receives a hotkey keydown event.\n   * Supported player-wide hotkeys are:\n   *\n   *   f          - toggle fullscreen\n   *   m          - toggle mute\n   *   k or Space - toggle play/pause\n   *\n   * @param {Event} event\n   *        The `keydown` event that caused this function to be called.\n   */\n  handleHotkeys(event) {\n    const hotkeys = this.options_.userActions ? this.options_.userActions.hotkeys : {};\n\n    // set fullscreenKey, muteKey, playPauseKey from `hotkeys`, use defaults if not set\n    const {\n      fullscreenKey = keydownEvent => keycode.isEventKey(keydownEvent, 'f'),\n      muteKey = keydownEvent => keycode.isEventKey(keydownEvent, 'm'),\n      playPauseKey = keydownEvent => keycode.isEventKey(keydownEvent, 'k') || keycode.isEventKey(keydownEvent, 'Space')\n    } = hotkeys;\n    if (fullscreenKey.call(this, event)) {\n      event.preventDefault();\n      event.stopPropagation();\n      const FSToggle = Component$1.getComponent('FullscreenToggle');\n      if (document[this.fsApi_.fullscreenEnabled] !== false) {\n        FSToggle.prototype.handleClick.call(this, event);\n      }\n    } else if (muteKey.call(this, event)) {\n      event.preventDefault();\n      event.stopPropagation();\n      const MuteToggle = Component$1.getComponent('MuteToggle');\n      MuteToggle.prototype.handleClick.call(this, event);\n    } else if (playPauseKey.call(this, event)) {\n      event.preventDefault();\n      event.stopPropagation();\n      const PlayToggle = Component$1.getComponent('PlayToggle');\n      PlayToggle.prototype.handleClick.call(this, event);\n    }\n  }\n\n  /**\n   * Check whether the player can play a given mimetype\n   *\n   * @see https://www.w3.org/TR/2011/WD-html5-20110113/video.html#dom-navigator-canplaytype\n   *\n   * @param {string} type\n   *        The mimetype to check\n   *\n   * @return {string}\n   *         'probably', 'maybe', or '' (empty string)\n   */\n  canPlayType(type) {\n    let can;\n\n    // Loop through each playback technology in the options order\n    for (let i = 0, j = this.options_.techOrder; i < j.length; i++) {\n      const techName = j[i];\n      let tech = Tech.getTech(techName);\n\n      // Support old behavior of techs being registered as components.\n      // Remove once that deprecated behavior is removed.\n      if (!tech) {\n        tech = Component$1.getComponent(techName);\n      }\n\n      // Check if the current tech is defined before continuing\n      if (!tech) {\n        log$1.error(`The \"${techName}\" tech is undefined. Skipped browser support check for that tech.`);\n        continue;\n      }\n\n      // Check if the browser supports this technology\n      if (tech.isSupported()) {\n        can = tech.canPlayType(type);\n        if (can) {\n          return can;\n        }\n      }\n    }\n    return '';\n  }\n\n  /**\n   * Select source based on tech-order or source-order\n   * Uses source-order selection if `options.sourceOrder` is truthy. Otherwise,\n   * defaults to tech-order selection\n   *\n   * @param {Array} sources\n   *        The sources for a media asset\n   *\n   * @return {Object|boolean}\n   *         Object of source and tech order or false\n   */\n  selectSource(sources) {\n    // Get only the techs specified in `techOrder` that exist and are supported by the\n    // current platform\n    const techs = this.options_.techOrder.map(techName => {\n      return [techName, Tech.getTech(techName)];\n    }).filter(([techName, tech]) => {\n      // Check if the current tech is defined before continuing\n      if (tech) {\n        // Check if the browser supports this technology\n        return tech.isSupported();\n      }\n      log$1.error(`The \"${techName}\" tech is undefined. Skipped browser support check for that tech.`);\n      return false;\n    });\n\n    // Iterate over each `innerArray` element once per `outerArray` element and execute\n    // `tester` with both. If `tester` returns a non-falsy value, exit early and return\n    // that value.\n    const findFirstPassingTechSourcePair = function (outerArray, innerArray, tester) {\n      let found;\n      outerArray.some(outerChoice => {\n        return innerArray.some(innerChoice => {\n          found = tester(outerChoice, innerChoice);\n          if (found) {\n            return true;\n          }\n        });\n      });\n      return found;\n    };\n    let foundSourceAndTech;\n    const flip = fn => (a, b) => fn(b, a);\n    const finder = ([techName, tech], source) => {\n      if (tech.canPlaySource(source, this.options_[techName.toLowerCase()])) {\n        return {\n          source,\n          tech: techName\n        };\n      }\n    };\n\n    // Depending on the truthiness of `options.sourceOrder`, we swap the order of techs and sources\n    // to select from them based on their priority.\n    if (this.options_.sourceOrder) {\n      // Source-first ordering\n      foundSourceAndTech = findFirstPassingTechSourcePair(sources, techs, flip(finder));\n    } else {\n      // Tech-first ordering\n      foundSourceAndTech = findFirstPassingTechSourcePair(techs, sources, finder);\n    }\n    return foundSourceAndTech || false;\n  }\n\n  /**\n   * Executes source setting and getting logic\n   *\n   * @param {Tech~SourceObject|Tech~SourceObject[]|string} [source]\n   *        A SourceObject, an array of SourceObjects, or a string referencing\n   *        a URL to a media source. It is _highly recommended_ that an object\n   *        or array of objects is used here, so that source selection\n   *        algorithms can take the `type` into account.\n   *\n   *        If not provided, this method acts as a getter.\n   * @param {boolean} [isRetry]\n   *        Indicates whether this is being called internally as a result of a retry\n   *\n   * @return {string|undefined}\n   *         If the `source` argument is missing, returns the current source\n   *         URL. Otherwise, returns nothing/undefined.\n   */\n  handleSrc_(source, isRetry) {\n    // getter usage\n    if (typeof source === 'undefined') {\n      return this.cache_.src || '';\n    }\n\n    // Reset retry behavior for new source\n    if (this.resetRetryOnError_) {\n      this.resetRetryOnError_();\n    }\n\n    // filter out invalid sources and turn our source into\n    // an array of source objects\n    const sources = filterSource(source);\n\n    // if a source was passed in then it is invalid because\n    // it was filtered to a zero length Array. So we have to\n    // show an error\n    if (!sources.length) {\n      this.setTimeout(function () {\n        this.error({\n          code: 4,\n          message: this.options_.notSupportedMessage\n        });\n      }, 0);\n      return;\n    }\n\n    // initial sources\n    this.changingSrc_ = true;\n\n    // Only update the cached source list if we are not retrying a new source after error,\n    // since in that case we want to include the failed source(s) in the cache\n    if (!isRetry) {\n      this.cache_.sources = sources;\n    }\n    this.updateSourceCaches_(sources[0]);\n\n    // middlewareSource is the source after it has been changed by middleware\n    setSource(this, sources[0], (middlewareSource, mws) => {\n      this.middleware_ = mws;\n\n      // since sourceSet is async we have to update the cache again after we select a source since\n      // the source that is selected could be out of order from the cache update above this callback.\n      if (!isRetry) {\n        this.cache_.sources = sources;\n      }\n      this.updateSourceCaches_(middlewareSource);\n      const err = this.src_(middlewareSource);\n      if (err) {\n        if (sources.length > 1) {\n          return this.handleSrc_(sources.slice(1));\n        }\n        this.changingSrc_ = false;\n\n        // We need to wrap this in a timeout to give folks a chance to add error event handlers\n        this.setTimeout(function () {\n          this.error({\n            code: 4,\n            message: this.options_.notSupportedMessage\n          });\n        }, 0);\n\n        // we could not find an appropriate tech, but let's still notify the delegate that this is it\n        // this needs a better comment about why this is needed\n        this.triggerReady();\n        return;\n      }\n      setTech(mws, this.tech_);\n    });\n\n    // Try another available source if this one fails before playback.\n    if (sources.length > 1) {\n      const retry = () => {\n        // Remove the error modal\n        this.error(null);\n        this.handleSrc_(sources.slice(1), true);\n      };\n      const stopListeningForErrors = () => {\n        this.off('error', retry);\n      };\n      this.one('error', retry);\n      this.one('playing', stopListeningForErrors);\n      this.resetRetryOnError_ = () => {\n        this.off('error', retry);\n        this.off('playing', stopListeningForErrors);\n      };\n    }\n  }\n\n  /**\n   * Get or set the video source.\n   *\n   * @param {Tech~SourceObject|Tech~SourceObject[]|string} [source]\n   *        A SourceObject, an array of SourceObjects, or a string referencing\n   *        a URL to a media source. It is _highly recommended_ that an object\n   *        or array of objects is used here, so that source selection\n   *        algorithms can take the `type` into account.\n   *\n   *        If not provided, this method acts as a getter.\n   *\n   * @return {string|undefined}\n   *         If the `source` argument is missing, returns the current source\n   *         URL. Otherwise, returns nothing/undefined.\n   */\n  src(source) {\n    return this.handleSrc_(source, false);\n  }\n\n  /**\n   * Set the source object on the tech, returns a boolean that indicates whether\n   * there is a tech that can play the source or not\n   *\n   * @param {Tech~SourceObject} source\n   *        The source object to set on the Tech\n   *\n   * @return {boolean}\n   *         - True if there is no Tech to playback this source\n   *         - False otherwise\n   *\n   * @private\n   */\n  src_(source) {\n    const sourceTech = this.selectSource([source]);\n    if (!sourceTech) {\n      return true;\n    }\n    if (!titleCaseEquals(sourceTech.tech, this.techName_)) {\n      this.changingSrc_ = true;\n      // load this technology with the chosen source\n      this.loadTech_(sourceTech.tech, sourceTech.source);\n      this.tech_.ready(() => {\n        this.changingSrc_ = false;\n      });\n      return false;\n    }\n\n    // wait until the tech is ready to set the source\n    // and set it synchronously if possible (#2326)\n    this.ready(function () {\n      // The setSource tech method was added with source handlers\n      // so older techs won't support it\n      // We need to check the direct prototype for the case where subclasses\n      // of the tech do not support source handlers\n      if (this.tech_.constructor.prototype.hasOwnProperty('setSource')) {\n        this.techCall_('setSource', source);\n      } else {\n        this.techCall_('src', source.src);\n      }\n      this.changingSrc_ = false;\n    }, true);\n    return false;\n  }\n\n  /**\n   * Begin loading the src data.\n   */\n  load() {\n    // Workaround to use the load method with the VHS.\n    // Does not cover the case when the load method is called directly from the mediaElement.\n    if (this.tech_ && this.tech_.vhs) {\n      this.src(this.currentSource());\n      return;\n    }\n    this.techCall_('load');\n  }\n\n  /**\n   * Reset the player. Loads the first tech in the techOrder,\n   * removes all the text tracks in the existing `tech`,\n   * and calls `reset` on the `tech`.\n   */\n  reset() {\n    if (this.paused()) {\n      this.doReset_();\n    } else {\n      const playPromise = this.play();\n      silencePromise(playPromise.then(() => this.doReset_()));\n    }\n  }\n  doReset_() {\n    if (this.tech_) {\n      this.tech_.clearTracks('text');\n    }\n    this.removeClass('vjs-playing');\n    this.addClass('vjs-paused');\n    this.resetCache_();\n    this.poster('');\n    this.loadTech_(this.options_.techOrder[0], null);\n    this.techCall_('reset');\n    this.resetControlBarUI_();\n    this.error(null);\n    if (this.titleBar) {\n      this.titleBar.update({\n        title: undefined,\n        description: undefined\n      });\n    }\n    if (isEvented(this)) {\n      this.trigger('playerreset');\n    }\n  }\n\n  /**\n   * Reset Control Bar's UI by calling sub-methods that reset\n   * all of Control Bar's components\n   */\n  resetControlBarUI_() {\n    this.resetProgressBar_();\n    this.resetPlaybackRate_();\n    this.resetVolumeBar_();\n  }\n\n  /**\n   * Reset tech's progress so progress bar is reset in the UI\n   */\n  resetProgressBar_() {\n    this.currentTime(0);\n    const {\n      currentTimeDisplay,\n      durationDisplay,\n      progressControl,\n      remainingTimeDisplay\n    } = this.controlBar || {};\n    const {\n      seekBar\n    } = progressControl || {};\n    if (currentTimeDisplay) {\n      currentTimeDisplay.updateContent();\n    }\n    if (durationDisplay) {\n      durationDisplay.updateContent();\n    }\n    if (remainingTimeDisplay) {\n      remainingTimeDisplay.updateContent();\n    }\n    if (seekBar) {\n      seekBar.update();\n      if (seekBar.loadProgressBar) {\n        seekBar.loadProgressBar.update();\n      }\n    }\n  }\n\n  /**\n   * Reset Playback ratio\n   */\n  resetPlaybackRate_() {\n    this.playbackRate(this.defaultPlaybackRate());\n    this.handleTechRateChange_();\n  }\n\n  /**\n   * Reset Volume bar\n   */\n  resetVolumeBar_() {\n    this.volume(1.0);\n    this.trigger('volumechange');\n  }\n\n  /**\n   * Returns all of the current source objects.\n   *\n   * @return {Tech~SourceObject[]}\n   *         The current source objects\n   */\n  currentSources() {\n    const source = this.currentSource();\n    const sources = [];\n\n    // assume `{}` or `{ src }`\n    if (Object.keys(source).length !== 0) {\n      sources.push(source);\n    }\n    return this.cache_.sources || sources;\n  }\n\n  /**\n   * Returns the current source object.\n   *\n   * @return {Tech~SourceObject}\n   *         The current source object\n   */\n  currentSource() {\n    return this.cache_.source || {};\n  }\n\n  /**\n   * Returns the fully qualified URL of the current source value e.g. http://mysite.com/video.mp4\n   * Can be used in conjunction with `currentType` to assist in rebuilding the current source object.\n   *\n   * @return {string}\n   *         The current source\n   */\n  currentSrc() {\n    return this.currentSource() && this.currentSource().src || '';\n  }\n\n  /**\n   * Get the current source type e.g. video/mp4\n   * This can allow you rebuild the current source object so that you could load the same\n   * source and tech later\n   *\n   * @return {string}\n   *         The source MIME type\n   */\n  currentType() {\n    return this.currentSource() && this.currentSource().type || '';\n  }\n\n  /**\n   * Get or set the preload attribute\n   *\n   * @param {'none'|'auto'|'metadata'} [value]\n   *        Preload mode to pass to tech\n   *\n   * @return {string|undefined}\n   *         - The preload attribute value when getting\n   *         - Nothing when setting\n   */\n  preload(value) {\n    if (value !== undefined) {\n      this.techCall_('setPreload', value);\n      this.options_.preload = value;\n      return;\n    }\n    return this.techGet_('preload');\n  }\n\n  /**\n   * Get or set the autoplay option. When this is a boolean it will\n   * modify the attribute on the tech. When this is a string the attribute on\n   * the tech will be removed and `Player` will handle autoplay on loadstarts.\n   *\n   * @param {boolean|'play'|'muted'|'any'} [value]\n   *        - true: autoplay using the browser behavior\n   *        - false: do not autoplay\n   *        - 'play': call play() on every loadstart\n   *        - 'muted': call muted() then play() on every loadstart\n   *        - 'any': call play() on every loadstart. if that fails call muted() then play().\n   *        - *: values other than those listed here will be set `autoplay` to true\n   *\n   * @return {boolean|string|undefined}\n   *         - The current value of autoplay when getting\n   *         - Nothing when setting\n   */\n  autoplay(value) {\n    // getter usage\n    if (value === undefined) {\n      return this.options_.autoplay || false;\n    }\n    let techAutoplay;\n\n    // if the value is a valid string set it to that, or normalize `true` to 'play', if need be\n    if (typeof value === 'string' && /(any|play|muted)/.test(value) || value === true && this.options_.normalizeAutoplay) {\n      this.options_.autoplay = value;\n      this.manualAutoplay_(typeof value === 'string' ? value : 'play');\n      techAutoplay = false;\n\n      // any falsy value sets autoplay to false in the browser,\n      // lets do the same\n    } else if (!value) {\n      this.options_.autoplay = false;\n\n      // any other value (ie truthy) sets autoplay to true\n    } else {\n      this.options_.autoplay = true;\n    }\n    techAutoplay = typeof techAutoplay === 'undefined' ? this.options_.autoplay : techAutoplay;\n\n    // if we don't have a tech then we do not queue up\n    // a setAutoplay call on tech ready. We do this because the\n    // autoplay option will be passed in the constructor and we\n    // do not need to set it twice\n    if (this.tech_) {\n      this.techCall_('setAutoplay', techAutoplay);\n    }\n  }\n\n  /**\n   * Set or unset the playsinline attribute.\n   * Playsinline tells the browser that non-fullscreen playback is preferred.\n   *\n   * @param {boolean} [value]\n   *        - true means that we should try to play inline by default\n   *        - false means that we should use the browser's default playback mode,\n   *          which in most cases is inline. iOS Safari is a notable exception\n   *          and plays fullscreen by default.\n   *\n   * @return {string|undefined}\n   *         - the current value of playsinline\n   *         - Nothing when setting\n   *\n   * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}\n   */\n  playsinline(value) {\n    if (value !== undefined) {\n      this.techCall_('setPlaysinline', value);\n      this.options_.playsinline = value;\n    }\n    return this.techGet_('playsinline');\n  }\n\n  /**\n   * Get or set the loop attribute on the video element.\n   *\n   * @param {boolean} [value]\n   *        - true means that we should loop the video\n   *        - false means that we should not loop the video\n   *\n   * @return {boolean|undefined}\n   *         - The current value of loop when getting\n   *         - Nothing when setting\n   */\n  loop(value) {\n    if (value !== undefined) {\n      this.techCall_('setLoop', value);\n      this.options_.loop = value;\n      return;\n    }\n    return this.techGet_('loop');\n  }\n\n  /**\n   * Get or set the poster image source url\n   *\n   * @fires Player#posterchange\n   *\n   * @param {string} [src]\n   *        Poster image source URL\n   *\n   * @return {string|undefined}\n   *         - The current value of poster when getting\n   *         - Nothing when setting\n   */\n  poster(src) {\n    if (src === undefined) {\n      return this.poster_;\n    }\n\n    // The correct way to remove a poster is to set as an empty string\n    // other falsey values will throw errors\n    if (!src) {\n      src = '';\n    }\n    if (src === this.poster_) {\n      return;\n    }\n\n    // update the internal poster variable\n    this.poster_ = src;\n\n    // update the tech's poster\n    this.techCall_('setPoster', src);\n    this.isPosterFromTech_ = false;\n\n    // alert components that the poster has been set\n    /**\n     * This event fires when the poster image is changed on the player.\n     *\n     * @event Player#posterchange\n     * @type {Event}\n     */\n    this.trigger('posterchange');\n  }\n\n  /**\n   * Some techs (e.g. YouTube) can provide a poster source in an\n   * asynchronous way. We want the poster component to use this\n   * poster source so that it covers up the tech's controls.\n   * (YouTube's play button). However we only want to use this\n   * source if the player user hasn't set a poster through\n   * the normal APIs.\n   *\n   * @fires Player#posterchange\n   * @listens Tech#posterchange\n   * @private\n   */\n  handleTechPosterChange_() {\n    if ((!this.poster_ || this.options_.techCanOverridePoster) && this.tech_ && this.tech_.poster) {\n      const newPoster = this.tech_.poster() || '';\n      if (newPoster !== this.poster_) {\n        this.poster_ = newPoster;\n        this.isPosterFromTech_ = true;\n\n        // Let components know the poster has changed\n        this.trigger('posterchange');\n      }\n    }\n  }\n\n  /**\n   * Get or set whether or not the controls are showing.\n   *\n   * @fires Player#controlsenabled\n   *\n   * @param {boolean} [bool]\n   *        - true to turn controls on\n   *        - false to turn controls off\n   *\n   * @return {boolean|undefined}\n   *         - The current value of controls when getting\n   *         - Nothing when setting\n   */\n  controls(bool) {\n    if (bool === undefined) {\n      return !!this.controls_;\n    }\n    bool = !!bool;\n\n    // Don't trigger a change event unless it actually changed\n    if (this.controls_ === bool) {\n      return;\n    }\n    this.controls_ = bool;\n    if (this.usingNativeControls()) {\n      this.techCall_('setControls', bool);\n    }\n    if (this.controls_) {\n      this.removeClass('vjs-controls-disabled');\n      this.addClass('vjs-controls-enabled');\n      /**\n       * @event Player#controlsenabled\n       * @type {Event}\n       */\n      this.trigger('controlsenabled');\n      if (!this.usingNativeControls()) {\n        this.addTechControlsListeners_();\n      }\n    } else {\n      this.removeClass('vjs-controls-enabled');\n      this.addClass('vjs-controls-disabled');\n      /**\n       * @event Player#controlsdisabled\n       * @type {Event}\n       */\n      this.trigger('controlsdisabled');\n      if (!this.usingNativeControls()) {\n        this.removeTechControlsListeners_();\n      }\n    }\n  }\n\n  /**\n   * Toggle native controls on/off. Native controls are the controls built into\n   * devices (e.g. default iPhone controls) or other techs\n   * (e.g. Vimeo Controls)\n   * **This should only be set by the current tech, because only the tech knows\n   * if it can support native controls**\n   *\n   * @fires Player#usingnativecontrols\n   * @fires Player#usingcustomcontrols\n   *\n   * @param {boolean} [bool]\n   *        - true to turn native controls on\n   *        - false to turn native controls off\n   *\n   * @return {boolean|undefined}\n   *         - The current value of native controls when getting\n   *         - Nothing when setting\n   */\n  usingNativeControls(bool) {\n    if (bool === undefined) {\n      return !!this.usingNativeControls_;\n    }\n    bool = !!bool;\n\n    // Don't trigger a change event unless it actually changed\n    if (this.usingNativeControls_ === bool) {\n      return;\n    }\n    this.usingNativeControls_ = bool;\n    if (this.usingNativeControls_) {\n      this.addClass('vjs-using-native-controls');\n\n      /**\n       * player is using the native device controls\n       *\n       * @event Player#usingnativecontrols\n       * @type {Event}\n       */\n      this.trigger('usingnativecontrols');\n    } else {\n      this.removeClass('vjs-using-native-controls');\n\n      /**\n       * player is using the custom HTML controls\n       *\n       * @event Player#usingcustomcontrols\n       * @type {Event}\n       */\n      this.trigger('usingcustomcontrols');\n    }\n  }\n\n  /**\n   * Set or get the current MediaError\n   *\n   * @fires Player#error\n   *\n   * @param  {MediaError|string|number} [err]\n   *         A MediaError or a string/number to be turned\n   *         into a MediaError\n   *\n   * @return {MediaError|null|undefined}\n   *         - The current MediaError when getting (or null)\n   *         - Nothing when setting\n   */\n  error(err) {\n    if (err === undefined) {\n      return this.error_ || null;\n    }\n\n    // allow hooks to modify error object\n    hooks('beforeerror').forEach(hookFunction => {\n      const newErr = hookFunction(this, err);\n      if (!(isObject(newErr) && !Array.isArray(newErr) || typeof newErr === 'string' || typeof newErr === 'number' || newErr === null)) {\n        this.log.error('please return a value that MediaError expects in beforeerror hooks');\n        return;\n      }\n      err = newErr;\n    });\n\n    // Suppress the first error message for no compatible source until\n    // user interaction\n    if (this.options_.suppressNotSupportedError && err && err.code === 4) {\n      const triggerSuppressedError = function () {\n        this.error(err);\n      };\n      this.options_.suppressNotSupportedError = false;\n      this.any(['click', 'touchstart'], triggerSuppressedError);\n      this.one('loadstart', function () {\n        this.off(['click', 'touchstart'], triggerSuppressedError);\n      });\n      return;\n    }\n\n    // restoring to default\n    if (err === null) {\n      this.error_ = null;\n      this.removeClass('vjs-error');\n      if (this.errorDisplay) {\n        this.errorDisplay.close();\n      }\n      return;\n    }\n    this.error_ = new MediaError(err);\n\n    // add the vjs-error classname to the player\n    this.addClass('vjs-error');\n\n    // log the name of the error type and any message\n    // IE11 logs \"[object object]\" and required you to expand message to see error object\n    log$1.error(`(CODE:${this.error_.code} ${MediaError.errorTypes[this.error_.code]})`, this.error_.message, this.error_);\n\n    /**\n     * @event Player#error\n     * @type {Event}\n     */\n    this.trigger('error');\n\n    // notify hooks of the per player error\n    hooks('error').forEach(hookFunction => hookFunction(this, this.error_));\n    return;\n  }\n\n  /**\n   * Report user activity\n   *\n   * @param {Object} event\n   *        Event object\n   */\n  reportUserActivity(event) {\n    this.userActivity_ = true;\n  }\n\n  /**\n   * Get/set if user is active\n   *\n   * @fires Player#useractive\n   * @fires Player#userinactive\n   *\n   * @param {boolean} [bool]\n   *        - true if the user is active\n   *        - false if the user is inactive\n   *\n   * @return {boolean|undefined}\n   *         - The current value of userActive when getting\n   *         - Nothing when setting\n   */\n  userActive(bool) {\n    if (bool === undefined) {\n      return this.userActive_;\n    }\n    bool = !!bool;\n    if (bool === this.userActive_) {\n      return;\n    }\n    this.userActive_ = bool;\n    if (this.userActive_) {\n      this.userActivity_ = true;\n      this.removeClass('vjs-user-inactive');\n      this.addClass('vjs-user-active');\n      /**\n       * @event Player#useractive\n       * @type {Event}\n       */\n      this.trigger('useractive');\n      return;\n    }\n\n    // Chrome/Safari/IE have bugs where when you change the cursor it can\n    // trigger a mousemove event. This causes an issue when you're hiding\n    // the cursor when the user is inactive, and a mousemove signals user\n    // activity. Making it impossible to go into inactive mode. Specifically\n    // this happens in fullscreen when we really need to hide the cursor.\n    //\n    // When this gets resolved in ALL browsers it can be removed\n    // https://code.google.com/p/chromium/issues/detail?id=103041\n    if (this.tech_) {\n      this.tech_.one('mousemove', function (e) {\n        e.stopPropagation();\n        e.preventDefault();\n      });\n    }\n    this.userActivity_ = false;\n    this.removeClass('vjs-user-active');\n    this.addClass('vjs-user-inactive');\n    /**\n     * @event Player#userinactive\n     * @type {Event}\n     */\n    this.trigger('userinactive');\n  }\n\n  /**\n   * Listen for user activity based on timeout value\n   *\n   * @private\n   */\n  listenForUserActivity_() {\n    let mouseInProgress;\n    let lastMoveX;\n    let lastMoveY;\n    const handleActivity = bind_(this, this.reportUserActivity);\n    const handleMouseMove = function (e) {\n      // #1068 - Prevent mousemove spamming\n      // Chrome Bug: https://code.google.com/p/chromium/issues/detail?id=366970\n      if (e.screenX !== lastMoveX || e.screenY !== lastMoveY) {\n        lastMoveX = e.screenX;\n        lastMoveY = e.screenY;\n        handleActivity();\n      }\n    };\n    const handleMouseDown = function () {\n      handleActivity();\n      // For as long as the they are touching the device or have their mouse down,\n      // we consider them active even if they're not moving their finger or mouse.\n      // So we want to continue to update that they are active\n      this.clearInterval(mouseInProgress);\n      // Setting userActivity=true now and setting the interval to the same time\n      // as the activityCheck interval (250) should ensure we never miss the\n      // next activityCheck\n      mouseInProgress = this.setInterval(handleActivity, 250);\n    };\n    const handleMouseUpAndMouseLeave = function (event) {\n      handleActivity();\n      // Stop the interval that maintains activity if the mouse/touch is down\n      this.clearInterval(mouseInProgress);\n    };\n\n    // Any mouse movement will be considered user activity\n    this.on('mousedown', handleMouseDown);\n    this.on('mousemove', handleMouseMove);\n    this.on('mouseup', handleMouseUpAndMouseLeave);\n    this.on('mouseleave', handleMouseUpAndMouseLeave);\n    const controlBar = this.getChild('controlBar');\n\n    // Fixes bug on Android & iOS where when tapping progressBar (when control bar is displayed)\n    // controlBar would no longer be hidden by default timeout.\n    if (controlBar && !IS_IOS && !IS_ANDROID) {\n      controlBar.on('mouseenter', function (event) {\n        if (this.player().options_.inactivityTimeout !== 0) {\n          this.player().cache_.inactivityTimeout = this.player().options_.inactivityTimeout;\n        }\n        this.player().options_.inactivityTimeout = 0;\n      });\n      controlBar.on('mouseleave', function (event) {\n        this.player().options_.inactivityTimeout = this.player().cache_.inactivityTimeout;\n      });\n    }\n\n    // Listen for keyboard navigation\n    // Shouldn't need to use inProgress interval because of key repeat\n    this.on('keydown', handleActivity);\n    this.on('keyup', handleActivity);\n\n    // Run an interval every 250 milliseconds instead of stuffing everything into\n    // the mousemove/touchmove function itself, to prevent performance degradation.\n    // `this.reportUserActivity` simply sets this.userActivity_ to true, which\n    // then gets picked up by this loop\n    // http://ejohn.org/blog/learning-from-twitter/\n    let inactivityTimeout;\n\n    /** @this Player */\n    const activityCheck = function () {\n      // Check to see if mouse/touch activity has happened\n      if (!this.userActivity_) {\n        return;\n      }\n\n      // Reset the activity tracker\n      this.userActivity_ = false;\n\n      // If the user state was inactive, set the state to active\n      this.userActive(true);\n\n      // Clear any existing inactivity timeout to start the timer over\n      this.clearTimeout(inactivityTimeout);\n      const timeout = this.options_.inactivityTimeout;\n      if (timeout <= 0) {\n        return;\n      }\n\n      // In <timeout> milliseconds, if no more activity has occurred the\n      // user will be considered inactive\n      inactivityTimeout = this.setTimeout(function () {\n        // Protect against the case where the inactivityTimeout can trigger just\n        // before the next user activity is picked up by the activity check loop\n        // causing a flicker\n        if (!this.userActivity_) {\n          this.userActive(false);\n        }\n      }, timeout);\n    };\n    this.setInterval(activityCheck, 250);\n  }\n\n  /**\n   * Gets or sets the current playback rate. A playback rate of\n   * 1.0 represents normal speed and 0.5 would indicate half-speed\n   * playback, for instance.\n   *\n   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-playbackrate\n   *\n   * @param {number} [rate]\n   *       New playback rate to set.\n   *\n   * @return {number|undefined}\n   *         - The current playback rate when getting or 1.0\n   *         - Nothing when setting\n   */\n  playbackRate(rate) {\n    if (rate !== undefined) {\n      // NOTE: this.cache_.lastPlaybackRate is set from the tech handler\n      // that is registered above\n      this.techCall_('setPlaybackRate', rate);\n      return;\n    }\n    if (this.tech_ && this.tech_.featuresPlaybackRate) {\n      return this.cache_.lastPlaybackRate || this.techGet_('playbackRate');\n    }\n    return 1.0;\n  }\n\n  /**\n   * Gets or sets the current default playback rate. A default playback rate of\n   * 1.0 represents normal speed and 0.5 would indicate half-speed playback, for instance.\n   * defaultPlaybackRate will only represent what the initial playbackRate of a video was, not\n   * not the current playbackRate.\n   *\n   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-defaultplaybackrate\n   *\n   * @param {number} [rate]\n   *       New default playback rate to set.\n   *\n   * @return {number|undefined}\n   *         - The default playback rate when getting or 1.0\n   *         - Nothing when setting\n   */\n  defaultPlaybackRate(rate) {\n    if (rate !== undefined) {\n      return this.techCall_('setDefaultPlaybackRate', rate);\n    }\n    if (this.tech_ && this.tech_.featuresPlaybackRate) {\n      return this.techGet_('defaultPlaybackRate');\n    }\n    return 1.0;\n  }\n\n  /**\n   * Gets or sets the audio flag\n   *\n   * @param {boolean} [bool]\n   *        - true signals that this is an audio player\n   *        - false signals that this is not an audio player\n   *\n   * @return {boolean|undefined}\n   *         - The current value of isAudio when getting\n   *         - Nothing when setting\n   */\n  isAudio(bool) {\n    if (bool !== undefined) {\n      this.isAudio_ = !!bool;\n      return;\n    }\n    return !!this.isAudio_;\n  }\n  enableAudioOnlyUI_() {\n    // Update styling immediately to show the control bar so we can get its height\n    this.addClass('vjs-audio-only-mode');\n    const playerChildren = this.children();\n    const controlBar = this.getChild('ControlBar');\n    const controlBarHeight = controlBar && controlBar.currentHeight();\n\n    // Hide all player components except the control bar. Control bar components\n    // needed only for video are hidden with CSS\n    playerChildren.forEach(child => {\n      if (child === controlBar) {\n        return;\n      }\n      if (child.el_ && !child.hasClass('vjs-hidden')) {\n        child.hide();\n        this.audioOnlyCache_.hiddenChildren.push(child);\n      }\n    });\n    this.audioOnlyCache_.playerHeight = this.currentHeight();\n\n    // Set the player height the same as the control bar\n    this.height(controlBarHeight);\n    this.trigger('audioonlymodechange');\n  }\n  disableAudioOnlyUI_() {\n    this.removeClass('vjs-audio-only-mode');\n\n    // Show player components that were previously hidden\n    this.audioOnlyCache_.hiddenChildren.forEach(child => child.show());\n\n    // Reset player height\n    this.height(this.audioOnlyCache_.playerHeight);\n    this.trigger('audioonlymodechange');\n  }\n\n  /**\n   * Get the current audioOnlyMode state or set audioOnlyMode to true or false.\n   *\n   * Setting this to `true` will hide all player components except the control bar,\n   * as well as control bar components needed only for video.\n   *\n   * @param {boolean} [value]\n   *         The value to set audioOnlyMode to.\n   *\n   * @return {Promise|boolean}\n   *        A Promise is returned when setting the state, and a boolean when getting\n   *        the present state\n   */\n  audioOnlyMode(value) {\n    if (typeof value !== 'boolean' || value === this.audioOnlyMode_) {\n      return this.audioOnlyMode_;\n    }\n    this.audioOnlyMode_ = value;\n\n    // Enable Audio Only Mode\n    if (value) {\n      const exitPromises = [];\n\n      // Fullscreen and PiP are not supported in audioOnlyMode, so exit if we need to.\n      if (this.isInPictureInPicture()) {\n        exitPromises.push(this.exitPictureInPicture());\n      }\n      if (this.isFullscreen()) {\n        exitPromises.push(this.exitFullscreen());\n      }\n      if (this.audioPosterMode()) {\n        exitPromises.push(this.audioPosterMode(false));\n      }\n      return Promise.all(exitPromises).then(() => this.enableAudioOnlyUI_());\n    }\n\n    // Disable Audio Only Mode\n    return Promise.resolve().then(() => this.disableAudioOnlyUI_());\n  }\n  enablePosterModeUI_() {\n    // Hide the video element and show the poster image to enable posterModeUI\n    const tech = this.tech_ && this.tech_;\n    tech.hide();\n    this.addClass('vjs-audio-poster-mode');\n    this.trigger('audiopostermodechange');\n  }\n  disablePosterModeUI_() {\n    // Show the video element and hide the poster image to disable posterModeUI\n    const tech = this.tech_ && this.tech_;\n    tech.show();\n    this.removeClass('vjs-audio-poster-mode');\n    this.trigger('audiopostermodechange');\n  }\n\n  /**\n   * Get the current audioPosterMode state or set audioPosterMode to true or false\n   *\n   * @param {boolean} [value]\n   *         The value to set audioPosterMode to.\n   *\n   * @return {Promise|boolean}\n   *         A Promise is returned when setting the state, and a boolean when getting\n   *        the present state\n   */\n  audioPosterMode(value) {\n    if (typeof value !== 'boolean' || value === this.audioPosterMode_) {\n      return this.audioPosterMode_;\n    }\n    this.audioPosterMode_ = value;\n    if (value) {\n      if (this.audioOnlyMode()) {\n        const audioOnlyModePromise = this.audioOnlyMode(false);\n        return audioOnlyModePromise.then(() => {\n          // enable audio poster mode after audio only mode is disabled\n          this.enablePosterModeUI_();\n        });\n      }\n      return Promise.resolve().then(() => {\n        // enable audio poster mode\n        this.enablePosterModeUI_();\n      });\n    }\n    return Promise.resolve().then(() => {\n      // disable audio poster mode\n      this.disablePosterModeUI_();\n    });\n  }\n\n  /**\n   * A helper method for adding a {@link TextTrack} to our\n   * {@link TextTrackList}.\n   *\n   * In addition to the W3C settings we allow adding additional info through options.\n   *\n   * @see http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-addtexttrack\n   *\n   * @param {string} [kind]\n   *        the kind of TextTrack you are adding\n   *\n   * @param {string} [label]\n   *        the label to give the TextTrack label\n   *\n   * @param {string} [language]\n   *        the language to set on the TextTrack\n   *\n   * @return {TextTrack|undefined}\n   *         the TextTrack that was added or undefined\n   *         if there is no tech\n   */\n  addTextTrack(kind, label, language) {\n    if (this.tech_) {\n      return this.tech_.addTextTrack(kind, label, language);\n    }\n  }\n\n  /**\n   * Create a remote {@link TextTrack} and an {@link HTMLTrackElement}.\n   *\n   * @param {Object} options\n   *        Options to pass to {@link HTMLTrackElement} during creation. See\n   *        {@link HTMLTrackElement} for object properties that you should use.\n   *\n   * @param {boolean} [manualCleanup=false] if set to true, the TextTrack will not be removed\n   *                                        from the TextTrackList and HtmlTrackElementList\n   *                                        after a source change\n   *\n   * @return { import('./tracks/html-track-element').default }\n   *         the HTMLTrackElement that was created and added\n   *         to the HtmlTrackElementList and the remote\n   *         TextTrackList\n   *\n   */\n  addRemoteTextTrack(options, manualCleanup) {\n    if (this.tech_) {\n      return this.tech_.addRemoteTextTrack(options, manualCleanup);\n    }\n  }\n\n  /**\n   * Remove a remote {@link TextTrack} from the respective\n   * {@link TextTrackList} and {@link HtmlTrackElementList}.\n   *\n   * @param {Object} track\n   *        Remote {@link TextTrack} to remove\n   *\n   * @return {undefined}\n   *         does not return anything\n   */\n  removeRemoteTextTrack(obj = {}) {\n    let {\n      track\n    } = obj;\n    if (!track) {\n      track = obj;\n    }\n\n    // destructure the input into an object with a track argument, defaulting to arguments[0]\n    // default the whole argument to an empty object if nothing was passed in\n\n    if (this.tech_) {\n      return this.tech_.removeRemoteTextTrack(track);\n    }\n  }\n\n  /**\n   * Gets available media playback quality metrics as specified by the W3C's Media\n   * Playback Quality API.\n   *\n   * @see [Spec]{@link https://wicg.github.io/media-playback-quality}\n   *\n   * @return {Object|undefined}\n   *         An object with supported media playback quality metrics or undefined if there\n   *         is no tech or the tech does not support it.\n   */\n  getVideoPlaybackQuality() {\n    return this.techGet_('getVideoPlaybackQuality');\n  }\n\n  /**\n   * Get video width\n   *\n   * @return {number}\n   *         current video width\n   */\n  videoWidth() {\n    return this.tech_ && this.tech_.videoWidth && this.tech_.videoWidth() || 0;\n  }\n\n  /**\n   * Get video height\n   *\n   * @return {number}\n   *         current video height\n   */\n  videoHeight() {\n    return this.tech_ && this.tech_.videoHeight && this.tech_.videoHeight() || 0;\n  }\n\n  /**\n   * Set or get the player's language code.\n   *\n   * Changing the language will trigger\n   * [languagechange]{@link Player#event:languagechange}\n   * which Components can use to update control text.\n   * ClickableComponent will update its control text by default on\n   * [languagechange]{@link Player#event:languagechange}.\n   *\n   * @fires Player#languagechange\n   *\n   * @param {string} [code]\n   *        the language code to set the player to\n   *\n   * @return {string|undefined}\n   *         - The current language code when getting\n   *         - Nothing when setting\n   */\n  language(code) {\n    if (code === undefined) {\n      return this.language_;\n    }\n    if (this.language_ !== String(code).toLowerCase()) {\n      this.language_ = String(code).toLowerCase();\n\n      // during first init, it's possible some things won't be evented\n      if (isEvented(this)) {\n        /**\n        * fires when the player language change\n        *\n        * @event Player#languagechange\n        * @type {Event}\n        */\n        this.trigger('languagechange');\n      }\n    }\n  }\n\n  /**\n   * Get the player's language dictionary\n   * Merge every time, because a newly added plugin might call videojs.addLanguage() at any time\n   * Languages specified directly in the player options have precedence\n   *\n   * @return {Array}\n   *         An array of of supported languages\n   */\n  languages() {\n    return merge$1(Player.prototype.options_.languages, this.languages_);\n  }\n\n  /**\n   * returns a JavaScript object representing the current track\n   * information. **DOES not return it as JSON**\n   *\n   * @return {Object}\n   *         Object representing the current of track info\n   */\n  toJSON() {\n    const options = merge$1(this.options_);\n    const tracks = options.tracks;\n    options.tracks = [];\n    for (let i = 0; i < tracks.length; i++) {\n      let track = tracks[i];\n\n      // deep merge tracks and null out player so no circular references\n      track = merge$1(track);\n      track.player = undefined;\n      options.tracks[i] = track;\n    }\n    return options;\n  }\n\n  /**\n   * Creates a simple modal dialog (an instance of the {@link ModalDialog}\n   * component) that immediately overlays the player with arbitrary\n   * content and removes itself when closed.\n   *\n   * @param {string|Function|Element|Array|null} content\n   *        Same as {@link ModalDialog#content}'s param of the same name.\n   *        The most straight-forward usage is to provide a string or DOM\n   *        element.\n   *\n   * @param {Object} [options]\n   *        Extra options which will be passed on to the {@link ModalDialog}.\n   *\n   * @return {ModalDialog}\n   *         the {@link ModalDialog} that was created\n   */\n  createModal(content, options) {\n    options = options || {};\n    options.content = content || '';\n    const modal = new ModalDialog(this, options);\n    this.addChild(modal);\n    modal.on('dispose', () => {\n      this.removeChild(modal);\n    });\n    modal.open();\n    return modal;\n  }\n\n  /**\n   * Change breakpoint classes when the player resizes.\n   *\n   * @private\n   */\n  updateCurrentBreakpoint_() {\n    if (!this.responsive()) {\n      return;\n    }\n    const currentBreakpoint = this.currentBreakpoint();\n    const currentWidth = this.currentWidth();\n    for (let i = 0; i < BREAKPOINT_ORDER.length; i++) {\n      const candidateBreakpoint = BREAKPOINT_ORDER[i];\n      const maxWidth = this.breakpoints_[candidateBreakpoint];\n      if (currentWidth <= maxWidth) {\n        // The current breakpoint did not change, nothing to do.\n        if (currentBreakpoint === candidateBreakpoint) {\n          return;\n        }\n\n        // Only remove a class if there is a current breakpoint.\n        if (currentBreakpoint) {\n          this.removeClass(BREAKPOINT_CLASSES[currentBreakpoint]);\n        }\n        this.addClass(BREAKPOINT_CLASSES[candidateBreakpoint]);\n        this.breakpoint_ = candidateBreakpoint;\n        break;\n      }\n    }\n  }\n\n  /**\n   * Removes the current breakpoint.\n   *\n   * @private\n   */\n  removeCurrentBreakpoint_() {\n    const className = this.currentBreakpointClass();\n    this.breakpoint_ = '';\n    if (className) {\n      this.removeClass(className);\n    }\n  }\n\n  /**\n   * Get or set breakpoints on the player.\n   *\n   * Calling this method with an object or `true` will remove any previous\n   * custom breakpoints and start from the defaults again.\n   *\n   * @param  {Object|boolean} [breakpoints]\n   *         If an object is given, it can be used to provide custom\n   *         breakpoints. If `true` is given, will set default breakpoints.\n   *         If this argument is not given, will simply return the current\n   *         breakpoints.\n   *\n   * @param  {number} [breakpoints.tiny]\n   *         The maximum width for the \"vjs-layout-tiny\" class.\n   *\n   * @param  {number} [breakpoints.xsmall]\n   *         The maximum width for the \"vjs-layout-x-small\" class.\n   *\n   * @param  {number} [breakpoints.small]\n   *         The maximum width for the \"vjs-layout-small\" class.\n   *\n   * @param  {number} [breakpoints.medium]\n   *         The maximum width for the \"vjs-layout-medium\" class.\n   *\n   * @param  {number} [breakpoints.large]\n   *         The maximum width for the \"vjs-layout-large\" class.\n   *\n   * @param  {number} [breakpoints.xlarge]\n   *         The maximum width for the \"vjs-layout-x-large\" class.\n   *\n   * @param  {number} [breakpoints.huge]\n   *         The maximum width for the \"vjs-layout-huge\" class.\n   *\n   * @return {Object}\n   *         An object mapping breakpoint names to maximum width values.\n   */\n  breakpoints(breakpoints) {\n    // Used as a getter.\n    if (breakpoints === undefined) {\n      return Object.assign(this.breakpoints_);\n    }\n    this.breakpoint_ = '';\n    this.breakpoints_ = Object.assign({}, DEFAULT_BREAKPOINTS, breakpoints);\n\n    // When breakpoint definitions change, we need to update the currently\n    // selected breakpoint.\n    this.updateCurrentBreakpoint_();\n\n    // Clone the breakpoints before returning.\n    return Object.assign(this.breakpoints_);\n  }\n\n  /**\n   * Get or set a flag indicating whether or not this player should adjust\n   * its UI based on its dimensions.\n   *\n   * @param  {boolean} [value]\n   *         Should be `true` if the player should adjust its UI based on its\n   *         dimensions; otherwise, should be `false`.\n   *\n   * @return {boolean|undefined}\n   *         Will be `true` if this player should adjust its UI based on its\n   *         dimensions; otherwise, will be `false`.\n   *         Nothing if setting\n   */\n  responsive(value) {\n    // Used as a getter.\n    if (value === undefined) {\n      return this.responsive_;\n    }\n    value = Boolean(value);\n    const current = this.responsive_;\n\n    // Nothing changed.\n    if (value === current) {\n      return;\n    }\n\n    // The value actually changed, set it.\n    this.responsive_ = value;\n\n    // Start listening for breakpoints and set the initial breakpoint if the\n    // player is now responsive.\n    if (value) {\n      this.on('playerresize', this.boundUpdateCurrentBreakpoint_);\n      this.updateCurrentBreakpoint_();\n\n      // Stop listening for breakpoints if the player is no longer responsive.\n    } else {\n      this.off('playerresize', this.boundUpdateCurrentBreakpoint_);\n      this.removeCurrentBreakpoint_();\n    }\n    return value;\n  }\n\n  /**\n   * Get current breakpoint name, if any.\n   *\n   * @return {string}\n   *         If there is currently a breakpoint set, returns a the key from the\n   *         breakpoints object matching it. Otherwise, returns an empty string.\n   */\n  currentBreakpoint() {\n    return this.breakpoint_;\n  }\n\n  /**\n   * Get the current breakpoint class name.\n   *\n   * @return {string}\n   *         The matching class name (e.g. `\"vjs-layout-tiny\"` or\n   *         `\"vjs-layout-large\"`) for the current breakpoint. Empty string if\n   *         there is no current breakpoint.\n   */\n  currentBreakpointClass() {\n    return BREAKPOINT_CLASSES[this.breakpoint_] || '';\n  }\n\n  /**\n   * An object that describes a single piece of media.\n   *\n   * Properties that are not part of this type description will be retained; so,\n   * this can be viewed as a generic metadata storage mechanism as well.\n   *\n   * @see      {@link https://wicg.github.io/mediasession/#the-mediametadata-interface}\n   * @typedef  {Object} Player~MediaObject\n   *\n   * @property {string} [album]\n   *           Unused, except if this object is passed to the `MediaSession`\n   *           API.\n   *\n   * @property {string} [artist]\n   *           Unused, except if this object is passed to the `MediaSession`\n   *           API.\n   *\n   * @property {Object[]} [artwork]\n   *           Unused, except if this object is passed to the `MediaSession`\n   *           API. If not specified, will be populated via the `poster`, if\n   *           available.\n   *\n   * @property {string} [poster]\n   *           URL to an image that will display before playback.\n   *\n   * @property {Tech~SourceObject|Tech~SourceObject[]|string} [src]\n   *           A single source object, an array of source objects, or a string\n   *           referencing a URL to a media source. It is _highly recommended_\n   *           that an object or array of objects is used here, so that source\n   *           selection algorithms can take the `type` into account.\n   *\n   * @property {string} [title]\n   *           Unused, except if this object is passed to the `MediaSession`\n   *           API.\n   *\n   * @property {Object[]} [textTracks]\n   *           An array of objects to be used to create text tracks, following\n   *           the {@link https://www.w3.org/TR/html50/embedded-content-0.html#the-track-element|native track element format}.\n   *           For ease of removal, these will be created as \"remote\" text\n   *           tracks and set to automatically clean up on source changes.\n   *\n   *           These objects may have properties like `src`, `kind`, `label`,\n   *           and `language`, see {@link Tech#createRemoteTextTrack}.\n   */\n\n  /**\n   * Populate the player using a {@link Player~MediaObject|MediaObject}.\n   *\n   * @param  {Player~MediaObject} media\n   *         A media object.\n   *\n   * @param  {Function} ready\n   *         A callback to be called when the player is ready.\n   */\n  loadMedia(media, ready) {\n    if (!media || typeof media !== 'object') {\n      return;\n    }\n    const crossOrigin = this.crossOrigin();\n    this.reset();\n\n    // Clone the media object so it cannot be mutated from outside.\n    this.cache_.media = merge$1(media);\n    const {\n      artist,\n      artwork,\n      description,\n      poster,\n      src,\n      textTracks,\n      title\n    } = this.cache_.media;\n\n    // If `artwork` is not given, create it using `poster`.\n    if (!artwork && poster) {\n      this.cache_.media.artwork = [{\n        src: poster,\n        type: getMimetype(poster)\n      }];\n    }\n    if (crossOrigin) {\n      this.crossOrigin(crossOrigin);\n    }\n    if (src) {\n      this.src(src);\n    }\n    if (poster) {\n      this.poster(poster);\n    }\n    if (Array.isArray(textTracks)) {\n      textTracks.forEach(tt => this.addRemoteTextTrack(tt, false));\n    }\n    if (this.titleBar) {\n      this.titleBar.update({\n        title,\n        description: description || artist || ''\n      });\n    }\n    this.ready(ready);\n  }\n\n  /**\n   * Get a clone of the current {@link Player~MediaObject} for this player.\n   *\n   * If the `loadMedia` method has not been used, will attempt to return a\n   * {@link Player~MediaObject} based on the current state of the player.\n   *\n   * @return {Player~MediaObject}\n   */\n  getMedia() {\n    if (!this.cache_.media) {\n      const poster = this.poster();\n      const src = this.currentSources();\n      const textTracks = Array.prototype.map.call(this.remoteTextTracks(), tt => ({\n        kind: tt.kind,\n        label: tt.label,\n        language: tt.language,\n        src: tt.src\n      }));\n      const media = {\n        src,\n        textTracks\n      };\n      if (poster) {\n        media.poster = poster;\n        media.artwork = [{\n          src: media.poster,\n          type: getMimetype(media.poster)\n        }];\n      }\n      return media;\n    }\n    return merge$1(this.cache_.media);\n  }\n\n  /**\n   * Gets tag settings\n   *\n   * @param {Element} tag\n   *        The player tag\n   *\n   * @return {Object}\n   *         An object containing all of the settings\n   *         for a player tag\n   */\n  static getTagSettings(tag) {\n    const baseOptions = {\n      sources: [],\n      tracks: []\n    };\n    const tagOptions = getAttributes(tag);\n    const dataSetup = tagOptions['data-setup'];\n    if (hasClass(tag, 'vjs-fill')) {\n      tagOptions.fill = true;\n    }\n    if (hasClass(tag, 'vjs-fluid')) {\n      tagOptions.fluid = true;\n    }\n\n    // Check if data-setup attr exists.\n    if (dataSetup !== null) {\n      // Parse options JSON\n      // If empty string, make it a parsable json object.\n      const [err, data] = safeParseTuple(dataSetup || '{}');\n      if (err) {\n        log$1.error(err);\n      }\n      Object.assign(tagOptions, data);\n    }\n    Object.assign(baseOptions, tagOptions);\n\n    // Get tag children settings\n    if (tag.hasChildNodes()) {\n      const children = tag.childNodes;\n      for (let i = 0, j = children.length; i < j; i++) {\n        const child = children[i];\n        // Change case needed: http://ejohn.org/blog/nodename-case-sensitivity/\n        const childName = child.nodeName.toLowerCase();\n        if (childName === 'source') {\n          baseOptions.sources.push(getAttributes(child));\n        } else if (childName === 'track') {\n          baseOptions.tracks.push(getAttributes(child));\n        }\n      }\n    }\n    return baseOptions;\n  }\n\n  /**\n   * Set debug mode to enable/disable logs at info level.\n   *\n   * @param {boolean} enabled\n   * @fires Player#debugon\n   * @fires Player#debugoff\n   * @return {boolean|undefined}\n   */\n  debug(enabled) {\n    if (enabled === undefined) {\n      return this.debugEnabled_;\n    }\n    if (enabled) {\n      this.trigger('debugon');\n      this.previousLogLevel_ = this.log.level;\n      this.log.level('debug');\n      this.debugEnabled_ = true;\n    } else {\n      this.trigger('debugoff');\n      this.log.level(this.previousLogLevel_);\n      this.previousLogLevel_ = undefined;\n      this.debugEnabled_ = false;\n    }\n  }\n\n  /**\n   * Set or get current playback rates.\n   * Takes an array and updates the playback rates menu with the new items.\n   * Pass in an empty array to hide the menu.\n   * Values other than arrays are ignored.\n   *\n   * @fires Player#playbackrateschange\n   * @param {number[]} newRates\n   *                   The new rates that the playback rates menu should update to.\n   *                   An empty array will hide the menu\n   * @return {number[]} When used as a getter will return the current playback rates\n   */\n  playbackRates(newRates) {\n    if (newRates === undefined) {\n      return this.cache_.playbackRates;\n    }\n\n    // ignore any value that isn't an array\n    if (!Array.isArray(newRates)) {\n      return;\n    }\n\n    // ignore any arrays that don't only contain numbers\n    if (!newRates.every(rate => typeof rate === 'number')) {\n      return;\n    }\n    this.cache_.playbackRates = newRates;\n\n    /**\n    * fires when the playback rates in a player are changed\n    *\n    * @event Player#playbackrateschange\n    * @type {Event}\n    */\n    this.trigger('playbackrateschange');\n  }\n}\n\n/**\n * Get the {@link VideoTrackList}\n *\n * @link https://html.spec.whatwg.org/multipage/embedded-content.html#videotracklist\n *\n * @return {VideoTrackList}\n *         the current video track list\n *\n * @method Player.prototype.videoTracks\n */\n\n/**\n * Get the {@link AudioTrackList}\n *\n * @link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotracklist\n *\n * @return {AudioTrackList}\n *         the current audio track list\n *\n * @method Player.prototype.audioTracks\n */\n\n/**\n * Get the {@link TextTrackList}\n *\n * @link http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-texttracks\n *\n * @return {TextTrackList}\n *         the current text track list\n *\n * @method Player.prototype.textTracks\n */\n\n/**\n * Get the remote {@link TextTrackList}\n *\n * @return {TextTrackList}\n *         The current remote text track list\n *\n * @method Player.prototype.remoteTextTracks\n */\n\n/**\n * Get the remote {@link HtmlTrackElementList} tracks.\n *\n * @return {HtmlTrackElementList}\n *         The current remote text track element list\n *\n * @method Player.prototype.remoteTextTrackEls\n */\n\nALL.names.forEach(function (name) {\n  const props = ALL[name];\n  Player.prototype[props.getterName] = function () {\n    if (this.tech_) {\n      return this.tech_[props.getterName]();\n    }\n\n    // if we have not yet loadTech_, we create {video,audio,text}Tracks_\n    // these will be passed to the tech during loading\n    this[props.privateName] = this[props.privateName] || new props.ListClass();\n    return this[props.privateName];\n  };\n});\n\n/**\n * Get or set the `Player`'s crossorigin option. For the HTML5 player, this\n * sets the `crossOrigin` property on the `<video>` tag to control the CORS\n * behavior.\n *\n * @see [Video Element Attributes]{@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#attr-crossorigin}\n *\n * @param {string} [value]\n *        The value to set the `Player`'s crossorigin to. If an argument is\n *        given, must be one of `anonymous` or `use-credentials`.\n *\n * @return {string|undefined}\n *         - The current crossorigin value of the `Player` when getting.\n *         - undefined when setting\n */\nPlayer.prototype.crossorigin = Player.prototype.crossOrigin;\n\n/**\n * Global enumeration of players.\n *\n * The keys are the player IDs and the values are either the {@link Player}\n * instance or `null` for disposed players.\n *\n * @type {Object}\n */\nPlayer.players = {};\nconst navigator = window$1.navigator;\n\n/*\n * Player instance options, surfaced using options\n * options = Player.prototype.options_\n * Make changes in options, not here.\n *\n * @type {Object}\n * @private\n */\nPlayer.prototype.options_ = {\n  // Default order of fallback technology\n  techOrder: Tech.defaultTechOrder_,\n  html5: {},\n  // enable sourceset by default\n  enableSourceset: true,\n  // default inactivity timeout\n  inactivityTimeout: 2000,\n  // default playback rates\n  playbackRates: [],\n  // Add playback rate selection by adding rates\n  // 'playbackRates': [0.5, 1, 1.5, 2],\n  liveui: false,\n  // Included control sets\n  children: ['mediaLoader', 'posterImage', 'titleBar', 'textTrackDisplay', 'loadingSpinner', 'bigPlayButton', 'liveTracker', 'controlBar', 'errorDisplay', 'textTrackSettings', 'resizeManager'],\n  language: navigator && (navigator.languages && navigator.languages[0] || navigator.userLanguage || navigator.language) || 'en',\n  // locales and their language translations\n  languages: {},\n  // Default message to show when a video cannot be played.\n  notSupportedMessage: 'No compatible source was found for this media.',\n  normalizeAutoplay: false,\n  fullscreen: {\n    options: {\n      navigationUI: 'hide'\n    }\n  },\n  breakpoints: {},\n  responsive: false,\n  audioOnlyMode: false,\n  audioPosterMode: false,\n  // Default smooth seeking to false\n  enableSmoothSeeking: false\n};\nTECH_EVENTS_RETRIGGER.forEach(function (event) {\n  Player.prototype[`handleTech${toTitleCase$1(event)}_`] = function () {\n    return this.trigger(event);\n  };\n});\n\n/**\n * Fired when the player has initial duration and dimension information\n *\n * @event Player#loadedmetadata\n * @type {Event}\n */\n\n/**\n * Fired when the player has downloaded data at the current playback position\n *\n * @event Player#loadeddata\n * @type {Event}\n */\n\n/**\n * Fired when the current playback position has changed *\n * During playback this is fired every 15-250 milliseconds, depending on the\n * playback technology in use.\n *\n * @event Player#timeupdate\n * @type {Event}\n */\n\n/**\n * Fired when the volume changes\n *\n * @event Player#volumechange\n * @type {Event}\n */\n\n/**\n * Reports whether or not a player has a plugin available.\n *\n * This does not report whether or not the plugin has ever been initialized\n * on this player. For that, [usingPlugin]{@link Player#usingPlugin}.\n *\n * @method Player#hasPlugin\n * @param  {string}  name\n *         The name of a plugin.\n *\n * @return {boolean}\n *         Whether or not this player has the requested plugin available.\n */\n\n/**\n * Reports whether or not a player is using a plugin by name.\n *\n * For basic plugins, this only reports whether the plugin has _ever_ been\n * initialized on this player.\n *\n * @method Player#usingPlugin\n * @param  {string} name\n *         The name of a plugin.\n *\n * @return {boolean}\n *         Whether or not this player is using the requested plugin.\n */\n\nComponent$1.registerComponent('Player', Player);\n\n/**\n * @file plugin.js\n */\n\n/**\n * The base plugin name.\n *\n * @private\n * @constant\n * @type {string}\n */\nconst BASE_PLUGIN_NAME = 'plugin';\n\n/**\n * The key on which a player's active plugins cache is stored.\n *\n * @private\n * @constant\n * @type     {string}\n */\nconst PLUGIN_CACHE_KEY = 'activePlugins_';\n\n/**\n * Stores registered plugins in a private space.\n *\n * @private\n * @type    {Object}\n */\nconst pluginStorage = {};\n\n/**\n * Reports whether or not a plugin has been registered.\n *\n * @private\n * @param   {string} name\n *          The name of a plugin.\n *\n * @return {boolean}\n *          Whether or not the plugin has been registered.\n */\nconst pluginExists = name => pluginStorage.hasOwnProperty(name);\n\n/**\n * Get a single registered plugin by name.\n *\n * @private\n * @param   {string} name\n *          The name of a plugin.\n *\n * @return {typeof Plugin|Function|undefined}\n *          The plugin (or undefined).\n */\nconst getPlugin = name => pluginExists(name) ? pluginStorage[name] : undefined;\n\n/**\n * Marks a plugin as \"active\" on a player.\n *\n * Also, ensures that the player has an object for tracking active plugins.\n *\n * @private\n * @param   {Player} player\n *          A Video.js player instance.\n *\n * @param   {string} name\n *          The name of a plugin.\n */\nconst markPluginAsActive = (player, name) => {\n  player[PLUGIN_CACHE_KEY] = player[PLUGIN_CACHE_KEY] || {};\n  player[PLUGIN_CACHE_KEY][name] = true;\n};\n\n/**\n * Triggers a pair of plugin setup events.\n *\n * @private\n * @param  {Player} player\n *         A Video.js player instance.\n *\n * @param  {PluginEventHash} hash\n *         A plugin event hash.\n *\n * @param  {boolean} [before]\n *         If true, prefixes the event name with \"before\". In other words,\n *         use this to trigger \"beforepluginsetup\" instead of \"pluginsetup\".\n */\nconst triggerSetupEvent = (player, hash, before) => {\n  const eventName = (before ? 'before' : '') + 'pluginsetup';\n  player.trigger(eventName, hash);\n  player.trigger(eventName + ':' + hash.name, hash);\n};\n\n/**\n * Takes a basic plugin function and returns a wrapper function which marks\n * on the player that the plugin has been activated.\n *\n * @private\n * @param   {string} name\n *          The name of the plugin.\n *\n * @param   {Function} plugin\n *          The basic plugin.\n *\n * @return {Function}\n *          A wrapper function for the given plugin.\n */\nconst createBasicPlugin = function (name, plugin) {\n  const basicPluginWrapper = function () {\n    // We trigger the \"beforepluginsetup\" and \"pluginsetup\" events on the player\n    // regardless, but we want the hash to be consistent with the hash provided\n    // for advanced plugins.\n    //\n    // The only potentially counter-intuitive thing here is the `instance` in\n    // the \"pluginsetup\" event is the value returned by the `plugin` function.\n    triggerSetupEvent(this, {\n      name,\n      plugin,\n      instance: null\n    }, true);\n    const instance = plugin.apply(this, arguments);\n    markPluginAsActive(this, name);\n    triggerSetupEvent(this, {\n      name,\n      plugin,\n      instance\n    });\n    return instance;\n  };\n  Object.keys(plugin).forEach(function (prop) {\n    basicPluginWrapper[prop] = plugin[prop];\n  });\n  return basicPluginWrapper;\n};\n\n/**\n * Takes a plugin sub-class and returns a factory function for generating\n * instances of it.\n *\n * This factory function will replace itself with an instance of the requested\n * sub-class of Plugin.\n *\n * @private\n * @param   {string} name\n *          The name of the plugin.\n *\n * @param   {Plugin} PluginSubClass\n *          The advanced plugin.\n *\n * @return {Function}\n */\nconst createPluginFactory = (name, PluginSubClass) => {\n  // Add a `name` property to the plugin prototype so that each plugin can\n  // refer to itself by name.\n  PluginSubClass.prototype.name = name;\n  return function (...args) {\n    triggerSetupEvent(this, {\n      name,\n      plugin: PluginSubClass,\n      instance: null\n    }, true);\n    const instance = new PluginSubClass(...[this, ...args]);\n\n    // The plugin is replaced by a function that returns the current instance.\n    this[name] = () => instance;\n    triggerSetupEvent(this, instance.getEventHash());\n    return instance;\n  };\n};\n\n/**\n * Parent class for all advanced plugins.\n *\n * @mixes   module:evented~EventedMixin\n * @mixes   module:stateful~StatefulMixin\n * @fires   Player#beforepluginsetup\n * @fires   Player#beforepluginsetup:$name\n * @fires   Player#pluginsetup\n * @fires   Player#pluginsetup:$name\n * @listens Player#dispose\n * @throws  {Error}\n *          If attempting to instantiate the base {@link Plugin} class\n *          directly instead of via a sub-class.\n */\nclass Plugin {\n  /**\n   * Creates an instance of this class.\n   *\n   * Sub-classes should call `super` to ensure plugins are properly initialized.\n   *\n   * @param {Player} player\n   *        A Video.js player instance.\n   */\n  constructor(player) {\n    if (this.constructor === Plugin) {\n      throw new Error('Plugin must be sub-classed; not directly instantiated.');\n    }\n    this.player = player;\n    if (!this.log) {\n      this.log = this.player.log.createLogger(this.name);\n    }\n\n    // Make this object evented, but remove the added `trigger` method so we\n    // use the prototype version instead.\n    evented(this);\n    delete this.trigger;\n    stateful(this, this.constructor.defaultState);\n    markPluginAsActive(player, this.name);\n\n    // Auto-bind the dispose method so we can use it as a listener and unbind\n    // it later easily.\n    this.dispose = this.dispose.bind(this);\n\n    // If the player is disposed, dispose the plugin.\n    player.on('dispose', this.dispose);\n  }\n\n  /**\n   * Get the version of the plugin that was set on <pluginName>.VERSION\n   */\n  version() {\n    return this.constructor.VERSION;\n  }\n\n  /**\n   * Each event triggered by plugins includes a hash of additional data with\n   * conventional properties.\n   *\n   * This returns that object or mutates an existing hash.\n   *\n   * @param   {Object} [hash={}]\n   *          An object to be used as event an event hash.\n   *\n   * @return {PluginEventHash}\n   *          An event hash object with provided properties mixed-in.\n   */\n  getEventHash(hash = {}) {\n    hash.name = this.name;\n    hash.plugin = this.constructor;\n    hash.instance = this;\n    return hash;\n  }\n\n  /**\n   * Triggers an event on the plugin object and overrides\n   * {@link module:evented~EventedMixin.trigger|EventedMixin.trigger}.\n   *\n   * @param   {string|Object} event\n   *          An event type or an object with a type property.\n   *\n   * @param   {Object} [hash={}]\n   *          Additional data hash to merge with a\n   *          {@link PluginEventHash|PluginEventHash}.\n   *\n   * @return {boolean}\n   *          Whether or not default was prevented.\n   */\n  trigger(event, hash = {}) {\n    return trigger(this.eventBusEl_, event, this.getEventHash(hash));\n  }\n\n  /**\n   * Handles \"statechanged\" events on the plugin. No-op by default, override by\n   * subclassing.\n   *\n   * @abstract\n   * @param    {Event} e\n   *           An event object provided by a \"statechanged\" event.\n   *\n   * @param    {Object} e.changes\n   *           An object describing changes that occurred with the \"statechanged\"\n   *           event.\n   */\n  handleStateChanged(e) {}\n\n  /**\n   * Disposes a plugin.\n   *\n   * Subclasses can override this if they want, but for the sake of safety,\n   * it's probably best to subscribe the \"dispose\" event.\n   *\n   * @fires Plugin#dispose\n   */\n  dispose() {\n    const {\n      name,\n      player\n    } = this;\n\n    /**\n     * Signals that a advanced plugin is about to be disposed.\n     *\n     * @event Plugin#dispose\n     * @type  {Event}\n     */\n    this.trigger('dispose');\n    this.off();\n    player.off('dispose', this.dispose);\n\n    // Eliminate any possible sources of leaking memory by clearing up\n    // references between the player and the plugin instance and nulling out\n    // the plugin's state and replacing methods with a function that throws.\n    player[PLUGIN_CACHE_KEY][name] = false;\n    this.player = this.state = null;\n\n    // Finally, replace the plugin name on the player with a new factory\n    // function, so that the plugin is ready to be set up again.\n    player[name] = createPluginFactory(name, pluginStorage[name]);\n  }\n\n  /**\n   * Determines if a plugin is a basic plugin (i.e. not a sub-class of `Plugin`).\n   *\n   * @param   {string|Function} plugin\n   *          If a string, matches the name of a plugin. If a function, will be\n   *          tested directly.\n   *\n   * @return {boolean}\n   *          Whether or not a plugin is a basic plugin.\n   */\n  static isBasic(plugin) {\n    const p = typeof plugin === 'string' ? getPlugin(plugin) : plugin;\n    return typeof p === 'function' && !Plugin.prototype.isPrototypeOf(p.prototype);\n  }\n\n  /**\n   * Register a Video.js plugin.\n   *\n   * @param   {string} name\n   *          The name of the plugin to be registered. Must be a string and\n   *          must not match an existing plugin or a method on the `Player`\n   *          prototype.\n   *\n   * @param   {typeof Plugin|Function} plugin\n   *          A sub-class of `Plugin` or a function for basic plugins.\n   *\n   * @return {typeof Plugin|Function}\n   *          For advanced plugins, a factory function for that plugin. For\n   *          basic plugins, a wrapper function that initializes the plugin.\n   */\n  static registerPlugin(name, plugin) {\n    if (typeof name !== 'string') {\n      throw new Error(`Illegal plugin name, \"${name}\", must be a string, was ${typeof name}.`);\n    }\n    if (pluginExists(name)) {\n      log$1.warn(`A plugin named \"${name}\" already exists. You may want to avoid re-registering plugins!`);\n    } else if (Player.prototype.hasOwnProperty(name)) {\n      throw new Error(`Illegal plugin name, \"${name}\", cannot share a name with an existing player method!`);\n    }\n    if (typeof plugin !== 'function') {\n      throw new Error(`Illegal plugin for \"${name}\", must be a function, was ${typeof plugin}.`);\n    }\n    pluginStorage[name] = plugin;\n\n    // Add a player prototype method for all sub-classed plugins (but not for\n    // the base Plugin class).\n    if (name !== BASE_PLUGIN_NAME) {\n      if (Plugin.isBasic(plugin)) {\n        Player.prototype[name] = createBasicPlugin(name, plugin);\n      } else {\n        Player.prototype[name] = createPluginFactory(name, plugin);\n      }\n    }\n    return plugin;\n  }\n\n  /**\n   * De-register a Video.js plugin.\n   *\n   * @param  {string} name\n   *         The name of the plugin to be de-registered. Must be a string that\n   *         matches an existing plugin.\n   *\n   * @throws {Error}\n   *         If an attempt is made to de-register the base plugin.\n   */\n  static deregisterPlugin(name) {\n    if (name === BASE_PLUGIN_NAME) {\n      throw new Error('Cannot de-register base plugin.');\n    }\n    if (pluginExists(name)) {\n      delete pluginStorage[name];\n      delete Player.prototype[name];\n    }\n  }\n\n  /**\n   * Gets an object containing multiple Video.js plugins.\n   *\n   * @param   {Array} [names]\n   *          If provided, should be an array of plugin names. Defaults to _all_\n   *          plugin names.\n   *\n   * @return {Object|undefined}\n   *          An object containing plugin(s) associated with their name(s) or\n   *          `undefined` if no matching plugins exist).\n   */\n  static getPlugins(names = Object.keys(pluginStorage)) {\n    let result;\n    names.forEach(name => {\n      const plugin = getPlugin(name);\n      if (plugin) {\n        result = result || {};\n        result[name] = plugin;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * Gets a plugin's version, if available\n   *\n   * @param   {string} name\n   *          The name of a plugin.\n   *\n   * @return {string}\n   *          The plugin's version or an empty string.\n   */\n  static getPluginVersion(name) {\n    const plugin = getPlugin(name);\n    return plugin && plugin.VERSION || '';\n  }\n}\n\n/**\n * Gets a plugin by name if it exists.\n *\n * @static\n * @method   getPlugin\n * @memberOf Plugin\n * @param    {string} name\n *           The name of a plugin.\n *\n * @returns  {typeof Plugin|Function|undefined}\n *           The plugin (or `undefined`).\n */\nPlugin.getPlugin = getPlugin;\n\n/**\n * The name of the base plugin class as it is registered.\n *\n * @type {string}\n */\nPlugin.BASE_PLUGIN_NAME = BASE_PLUGIN_NAME;\nPlugin.registerPlugin(BASE_PLUGIN_NAME, Plugin);\n\n/**\n * Documented in player.js\n *\n * @ignore\n */\nPlayer.prototype.usingPlugin = function (name) {\n  return !!this[PLUGIN_CACHE_KEY] && this[PLUGIN_CACHE_KEY][name] === true;\n};\n\n/**\n * Documented in player.js\n *\n * @ignore\n */\nPlayer.prototype.hasPlugin = function (name) {\n  return !!pluginExists(name);\n};\n\n/**\n * Signals that a plugin is about to be set up on a player.\n *\n * @event    Player#beforepluginsetup\n * @type     {PluginEventHash}\n */\n\n/**\n * Signals that a plugin is about to be set up on a player - by name. The name\n * is the name of the plugin.\n *\n * @event    Player#beforepluginsetup:$name\n * @type     {PluginEventHash}\n */\n\n/**\n * Signals that a plugin has just been set up on a player.\n *\n * @event    Player#pluginsetup\n * @type     {PluginEventHash}\n */\n\n/**\n * Signals that a plugin has just been set up on a player - by name. The name\n * is the name of the plugin.\n *\n * @event    Player#pluginsetup:$name\n * @type     {PluginEventHash}\n */\n\n/**\n * @typedef  {Object} PluginEventHash\n *\n * @property {string} instance\n *           For basic plugins, the return value of the plugin function. For\n *           advanced plugins, the plugin instance on which the event is fired.\n *\n * @property {string} name\n *           The name of the plugin.\n *\n * @property {string} plugin\n *           For basic plugins, the plugin function. For advanced plugins, the\n *           plugin class/constructor.\n */\n\n/**\n * @file deprecate.js\n * @module deprecate\n */\n\n/**\n * Decorate a function with a deprecation message the first time it is called.\n *\n * @param  {string}   message\n *         A deprecation message to log the first time the returned function\n *         is called.\n *\n * @param  {Function} fn\n *         The function to be deprecated.\n *\n * @return {Function}\n *         A wrapper function that will log a deprecation warning the first\n *         time it is called. The return value will be the return value of\n *         the wrapped function.\n */\nfunction deprecate(message, fn) {\n  let warned = false;\n  return function (...args) {\n    if (!warned) {\n      log$1.warn(message);\n    }\n    warned = true;\n    return fn.apply(this, args);\n  };\n}\n\n/**\n * Internal function used to mark a function as deprecated in the next major\n * version with consistent messaging.\n *\n * @param  {number}   major   The major version where it will be removed\n * @param  {string}   oldName The old function name\n * @param  {string}   newName The new function name\n * @param  {Function} fn      The function to deprecate\n * @return {Function}         The decorated function\n */\nfunction deprecateForMajor(major, oldName, newName, fn) {\n  return deprecate(`${oldName} is deprecated and will be removed in ${major}.0; please use ${newName} instead.`, fn);\n}\n\n/**\n * @file video.js\n * @module videojs\n */\n\n/**\n * Normalize an `id` value by trimming off a leading `#`\n *\n * @private\n * @param   {string} id\n *          A string, maybe with a leading `#`.\n *\n * @return {string}\n *          The string, without any leading `#`.\n */\nconst normalizeId = id => id.indexOf('#') === 0 ? id.slice(1) : id;\n\n/**\n * A callback that is called when a component is ready. Does not have any\n * parameters and any callback value will be ignored. See: {@link Component~ReadyCallback}\n *\n * @callback ReadyCallback\n */\n\n/**\n * The `videojs()` function doubles as the main function for users to create a\n * {@link Player} instance as well as the main library namespace.\n *\n * It can also be used as a getter for a pre-existing {@link Player} instance.\n * However, we _strongly_ recommend using `videojs.getPlayer()` for this\n * purpose because it avoids any potential for unintended initialization.\n *\n * Due to [limitations](https://github.com/jsdoc3/jsdoc/issues/955#issuecomment-313829149)\n * of our JSDoc template, we cannot properly document this as both a function\n * and a namespace, so its function signature is documented here.\n *\n * #### Arguments\n * ##### id\n * string|Element, **required**\n *\n * Video element or video element ID.\n *\n * ##### options\n * Object, optional\n *\n * Options object for providing settings.\n * See: [Options Guide](https://docs.videojs.com/tutorial-options.html).\n *\n * ##### ready\n * {@link Component~ReadyCallback}, optional\n *\n * A function to be called when the {@link Player} and {@link Tech} are ready.\n *\n * #### Return Value\n *\n * The `videojs()` function returns a {@link Player} instance.\n *\n * @namespace\n *\n * @borrows AudioTrack as AudioTrack\n * @borrows Component.getComponent as getComponent\n * @borrows module:events.on as on\n * @borrows module:events.one as one\n * @borrows module:events.off as off\n * @borrows module:events.trigger as trigger\n * @borrows EventTarget as EventTarget\n * @borrows module:middleware.use as use\n * @borrows Player.players as players\n * @borrows Plugin.registerPlugin as registerPlugin\n * @borrows Plugin.deregisterPlugin as deregisterPlugin\n * @borrows Plugin.getPlugins as getPlugins\n * @borrows Plugin.getPlugin as getPlugin\n * @borrows Plugin.getPluginVersion as getPluginVersion\n * @borrows Tech.getTech as getTech\n * @borrows Tech.registerTech as registerTech\n * @borrows TextTrack as TextTrack\n * @borrows VideoTrack as VideoTrack\n *\n * @param  {string|Element} id\n *         Video element or video element ID.\n *\n * @param  {Object} [options]\n *         Options object for providing settings.\n *         See: [Options Guide](https://docs.videojs.com/tutorial-options.html).\n *\n * @param  {ReadyCallback} [ready]\n *         A function to be called when the {@link Player} and {@link Tech} are\n *         ready.\n *\n * @return {Player}\n *         The `videojs()` function returns a {@link Player|Player} instance.\n */\nfunction videojs(id, options, ready) {\n  let player = videojs.getPlayer(id);\n  if (player) {\n    if (options) {\n      log$1.warn(`Player \"${id}\" is already initialised. Options will not be applied.`);\n    }\n    if (ready) {\n      player.ready(ready);\n    }\n    return player;\n  }\n  const el = typeof id === 'string' ? $('#' + normalizeId(id)) : id;\n  if (!isEl(el)) {\n    throw new TypeError('The element or ID supplied is not valid. (videojs)');\n  }\n\n  // document.body.contains(el) will only check if el is contained within that one document.\n  // This causes problems for elements in iframes.\n  // Instead, use the element's ownerDocument instead of the global document.\n  // This will make sure that the element is indeed in the dom of that document.\n  // Additionally, check that the document in question has a default view.\n  // If the document is no longer attached to the dom, the defaultView of the document will be null.\n  // If element is inside Shadow DOM (e.g. is part of a Custom element), ownerDocument.body\n  // always returns false. Instead, use the Shadow DOM root.\n  const inShadowDom = 'getRootNode' in el ? el.getRootNode() instanceof window$1.ShadowRoot : false;\n  const rootNode = inShadowDom ? el.getRootNode() : el.ownerDocument.body;\n  if (!el.ownerDocument.defaultView || !rootNode.contains(el)) {\n    log$1.warn('The element supplied is not included in the DOM');\n  }\n  options = options || {};\n\n  // Store a copy of the el before modification, if it is to be restored in destroy()\n  // If div ingest, store the parent div\n  if (options.restoreEl === true) {\n    options.restoreEl = (el.parentNode && el.parentNode.hasAttribute('data-vjs-player') ? el.parentNode : el).cloneNode(true);\n  }\n  hooks('beforesetup').forEach(hookFunction => {\n    const opts = hookFunction(el, merge$1(options));\n    if (!isObject(opts) || Array.isArray(opts)) {\n      log$1.error('please return an object in beforesetup hooks');\n      return;\n    }\n    options = merge$1(options, opts);\n  });\n\n  // We get the current \"Player\" component here in case an integration has\n  // replaced it with a custom player.\n  const PlayerComponent = Component$1.getComponent('Player');\n  player = new PlayerComponent(el, options, ready);\n  hooks('setup').forEach(hookFunction => hookFunction(player));\n  return player;\n}\nvideojs.hooks_ = hooks_;\nvideojs.hooks = hooks;\nvideojs.hook = hook;\nvideojs.hookOnce = hookOnce;\nvideojs.removeHook = removeHook;\n\n// Add default styles\nif (window$1.VIDEOJS_NO_DYNAMIC_STYLE !== true && isReal()) {\n  let style = $('.vjs-styles-defaults');\n  if (!style) {\n    style = createStyleElement('vjs-styles-defaults');\n    const head = $('head');\n    if (head) {\n      head.insertBefore(style, head.firstChild);\n    }\n    setTextContent(style, `\n      .video-js {\n        width: 300px;\n        height: 150px;\n      }\n\n      .vjs-fluid:not(.vjs-audio-only-mode) {\n        padding-top: 56.25%\n      }\n    `);\n  }\n}\n\n// Run Auto-load players\n// You have to wait at least once in case this script is loaded after your\n// video in the DOM (weird behavior only with minified version)\nautoSetupTimeout(1, videojs);\n\n/**\n * Current Video.js version. Follows [semantic versioning](https://semver.org/).\n *\n * @type {string}\n */\nvideojs.VERSION = version$6;\n\n/**\n * The global options object. These are the settings that take effect\n * if no overrides are specified when the player is created.\n *\n * @type {Object}\n */\nvideojs.options = Player.prototype.options_;\n\n/**\n * Get an object with the currently created players, keyed by player ID\n *\n * @return {Object}\n *         The created players\n */\nvideojs.getPlayers = () => Player.players;\n\n/**\n * Get a single player based on an ID or DOM element.\n *\n * This is useful if you want to check if an element or ID has an associated\n * Video.js player, but not create one if it doesn't.\n *\n * @param   {string|Element} id\n *          An HTML element - `<video>`, `<audio>`, or `<video-js>` -\n *          or a string matching the `id` of such an element.\n *\n * @return {Player|undefined}\n *          A player instance or `undefined` if there is no player instance\n *          matching the argument.\n */\nvideojs.getPlayer = id => {\n  const players = Player.players;\n  let tag;\n  if (typeof id === 'string') {\n    const nId = normalizeId(id);\n    const player = players[nId];\n    if (player) {\n      return player;\n    }\n    tag = $('#' + nId);\n  } else {\n    tag = id;\n  }\n  if (isEl(tag)) {\n    const {\n      player,\n      playerId\n    } = tag;\n\n    // Element may have a `player` property referring to an already created\n    // player instance. If so, return that.\n    if (player || players[playerId]) {\n      return player || players[playerId];\n    }\n  }\n};\n\n/**\n * Returns an array of all current players.\n *\n * @return {Array}\n *         An array of all players. The array will be in the order that\n *         `Object.keys` provides, which could potentially vary between\n *         JavaScript engines.\n *\n */\nvideojs.getAllPlayers = () =>\n// Disposed players leave a key with a `null` value, so we need to make sure\n// we filter those out.\nObject.keys(Player.players).map(k => Player.players[k]).filter(Boolean);\nvideojs.players = Player.players;\nvideojs.getComponent = Component$1.getComponent;\n\n/**\n * Register a component so it can referred to by name. Used when adding to other\n * components, either through addChild `component.addChild('myComponent')` or through\n * default children options  `{ children: ['myComponent'] }`.\n *\n * > NOTE: You could also just initialize the component before adding.\n * `component.addChild(new MyComponent());`\n *\n * @param {string} name\n *        The class name of the component\n *\n * @param {typeof Component} comp\n *        The component class\n *\n * @return {typeof Component}\n *         The newly registered component\n */\nvideojs.registerComponent = (name, comp) => {\n  if (Tech.isTech(comp)) {\n    log$1.warn(`The ${name} tech was registered as a component. It should instead be registered using videojs.registerTech(name, tech)`);\n  }\n  return Component$1.registerComponent.call(Component$1, name, comp);\n};\nvideojs.getTech = Tech.getTech;\nvideojs.registerTech = Tech.registerTech;\nvideojs.use = use;\n\n/**\n * An object that can be returned by a middleware to signify\n * that the middleware is being terminated.\n *\n * @type {object}\n * @property {object} middleware.TERMINATOR\n */\nObject.defineProperty(videojs, 'middleware', {\n  value: {},\n  writeable: false,\n  enumerable: true\n});\nObject.defineProperty(videojs.middleware, 'TERMINATOR', {\n  value: TERMINATOR,\n  writeable: false,\n  enumerable: true\n});\n\n/**\n * A reference to the {@link module:browser|browser utility module} as an object.\n *\n * @type {Object}\n * @see  {@link module:browser|browser}\n */\nvideojs.browser = browser;\n\n/**\n * A reference to the {@link module:obj|obj utility module} as an object.\n *\n * @type {Object}\n * @see  {@link module:obj|obj}\n */\nvideojs.obj = Obj;\n\n/**\n * Deprecated reference to the {@link module:obj.merge|merge function}\n *\n * @type {Function}\n * @see {@link module:obj.merge|merge}\n * @deprecated Deprecated and will be removed in 9.0. Please use videojs.obj.merge instead.\n */\nvideojs.mergeOptions = deprecateForMajor(9, 'videojs.mergeOptions', 'videojs.obj.merge', merge$1);\n\n/**\n * Deprecated reference to the {@link module:obj.defineLazyProperty|defineLazyProperty function}\n *\n * @type {Function}\n * @see {@link module:obj.defineLazyProperty|defineLazyProperty}\n * @deprecated Deprecated and will be removed in 9.0. Please use videojs.obj.defineLazyProperty instead.\n */\nvideojs.defineLazyProperty = deprecateForMajor(9, 'videojs.defineLazyProperty', 'videojs.obj.defineLazyProperty', defineLazyProperty);\n\n/**\n * Deprecated reference to the {@link module:fn.bind_|fn.bind_ function}\n *\n * @type {Function}\n * @see {@link module:fn.bind_|fn.bind_}\n * @deprecated Deprecated and will be removed in 9.0. Please use native Function.prototype.bind instead.\n */\nvideojs.bind = deprecateForMajor(9, 'videojs.bind', 'native Function.prototype.bind', bind_);\nvideojs.registerPlugin = Plugin.registerPlugin;\nvideojs.deregisterPlugin = Plugin.deregisterPlugin;\n\n/**\n * Deprecated method to register a plugin with Video.js\n *\n * @deprecated Deprecated and will be removed in 9.0. Use videojs.registerPlugin() instead.\n *\n * @param {string} name\n *        The plugin name\n*\n * @param {typeof Plugin|Function} plugin\n *         The plugin sub-class or function\n *\n * @return {typeof Plugin|Function}\n */\nvideojs.plugin = (name, plugin) => {\n  log$1.warn('videojs.plugin() is deprecated; use videojs.registerPlugin() instead');\n  return Plugin.registerPlugin(name, plugin);\n};\nvideojs.getPlugins = Plugin.getPlugins;\nvideojs.getPlugin = Plugin.getPlugin;\nvideojs.getPluginVersion = Plugin.getPluginVersion;\n\n/**\n * Adding languages so that they're available to all players.\n * Example: `videojs.addLanguage('es', { 'Hello': 'Hola' });`\n *\n * @param {string} code\n *        The language code or dictionary property\n *\n * @param {Object} data\n *        The data values to be translated\n *\n * @return {Object}\n *         The resulting language dictionary object\n */\nvideojs.addLanguage = function (code, data) {\n  code = ('' + code).toLowerCase();\n  videojs.options.languages = merge$1(videojs.options.languages, {\n    [code]: data\n  });\n  return videojs.options.languages[code];\n};\n\n/**\n * A reference to the {@link module:log|log utility module} as an object.\n *\n * @type {Function}\n * @see  {@link module:log|log}\n */\nvideojs.log = log$1;\nvideojs.createLogger = createLogger;\n\n/**\n * A reference to the {@link module:time|time utility module} as an object.\n *\n * @type {Object}\n * @see {@link module:time|time}\n */\nvideojs.time = Time;\n\n/**\n * Deprecated reference to the {@link module:time.createTimeRanges|createTimeRanges function}\n *\n * @type {Function}\n * @see {@link module:time.createTimeRanges|createTimeRanges}\n * @deprecated Deprecated and will be removed in 9.0. Please use videojs.time.createTimeRanges instead.\n */\nvideojs.createTimeRange = deprecateForMajor(9, 'videojs.createTimeRange', 'videojs.time.createTimeRanges', createTimeRanges$1);\n\n/**\n * Deprecated reference to the {@link module:time.createTimeRanges|createTimeRanges function}\n *\n * @type {Function}\n * @see {@link module:time.createTimeRanges|createTimeRanges}\n * @deprecated Deprecated and will be removed in 9.0. Please use videojs.time.createTimeRanges instead.\n */\nvideojs.createTimeRanges = deprecateForMajor(9, 'videojs.createTimeRanges', 'videojs.time.createTimeRanges', createTimeRanges$1);\n\n/**\n * Deprecated reference to the {@link module:time.formatTime|formatTime function}\n *\n * @type {Function}\n * @see {@link module:time.formatTime|formatTime}\n * @deprecated Deprecated and will be removed in 9.0. Please use videojs.time.format instead.\n */\nvideojs.formatTime = deprecateForMajor(9, 'videojs.formatTime', 'videojs.time.formatTime', formatTime);\n\n/**\n * Deprecated reference to the {@link module:time.setFormatTime|setFormatTime function}\n *\n * @type {Function}\n * @see {@link module:time.setFormatTime|setFormatTime}\n * @deprecated Deprecated and will be removed in 9.0. Please use videojs.time.setFormat instead.\n */\nvideojs.setFormatTime = deprecateForMajor(9, 'videojs.setFormatTime', 'videojs.time.setFormatTime', setFormatTime);\n\n/**\n * Deprecated reference to the {@link module:time.resetFormatTime|resetFormatTime function}\n *\n * @type {Function}\n * @see {@link module:time.resetFormatTime|resetFormatTime}\n * @deprecated Deprecated and will be removed in 9.0. Please use videojs.time.resetFormat instead.\n */\nvideojs.resetFormatTime = deprecateForMajor(9, 'videojs.resetFormatTime', 'videojs.time.resetFormatTime', resetFormatTime);\n\n/**\n * Deprecated reference to the {@link module:url.parseUrl|Url.parseUrl function}\n *\n * @type {Function}\n * @see {@link module:url.parseUrl|parseUrl}\n * @deprecated Deprecated and will be removed in 9.0. Please use videojs.url.parseUrl instead.\n */\nvideojs.parseUrl = deprecateForMajor(9, 'videojs.parseUrl', 'videojs.url.parseUrl', parseUrl);\n\n/**\n * Deprecated reference to the {@link module:url.isCrossOrigin|Url.isCrossOrigin function}\n *\n * @type {Function}\n * @see {@link module:url.isCrossOrigin|isCrossOrigin}\n * @deprecated Deprecated and will be removed in 9.0. Please use videojs.url.isCrossOrigin instead.\n */\nvideojs.isCrossOrigin = deprecateForMajor(9, 'videojs.isCrossOrigin', 'videojs.url.isCrossOrigin', isCrossOrigin);\nvideojs.EventTarget = EventTarget$2;\nvideojs.any = any;\nvideojs.on = on;\nvideojs.one = one;\nvideojs.off = off;\nvideojs.trigger = trigger;\n\n/**\n * A cross-browser XMLHttpRequest wrapper.\n *\n * @function\n * @param    {Object} options\n *           Settings for the request.\n *\n * @return   {XMLHttpRequest|XDomainRequest}\n *           The request object.\n *\n * @see      https://github.com/Raynos/xhr\n */\nvideojs.xhr = XHR;\nvideojs.TextTrack = TextTrack;\nvideojs.AudioTrack = AudioTrack;\nvideojs.VideoTrack = VideoTrack;\n['isEl', 'isTextNode', 'createEl', 'hasClass', 'addClass', 'removeClass', 'toggleClass', 'setAttributes', 'getAttributes', 'emptyEl', 'appendContent', 'insertContent'].forEach(k => {\n  videojs[k] = function () {\n    log$1.warn(`videojs.${k}() is deprecated; use videojs.dom.${k}() instead`);\n    return Dom[k].apply(null, arguments);\n  };\n});\nvideojs.computedStyle = deprecateForMajor(9, 'videojs.computedStyle', 'videojs.dom.computedStyle', computedStyle);\n\n/**\n * A reference to the {@link module:dom|DOM utility module} as an object.\n *\n * @type {Object}\n * @see {@link module:dom|dom}\n */\nvideojs.dom = Dom;\n\n/**\n * A reference to the {@link module:fn|fn utility module} as an object.\n *\n * @type {Object}\n * @see {@link module:fn|fn}\n */\nvideojs.fn = Fn;\n\n/**\n * A reference to the {@link module:num|num utility module} as an object.\n *\n * @type {Object}\n * @see {@link module:num|num}\n */\nvideojs.num = Num;\n\n/**\n * A reference to the {@link module:str|str utility module} as an object.\n *\n * @type {Object}\n * @see {@link module:str|str}\n */\nvideojs.str = Str;\n\n/**\n * A reference to the {@link module:url|URL utility module} as an object.\n *\n * @type {Object}\n * @see {@link module:url|url}\n */\nvideojs.url = Url;\n\n/*! @name videojs-contrib-quality-levels @version 4.0.0 @license Apache-2.0 */\n\n/**\n * A single QualityLevel.\n *\n * interface QualityLevel {\n *   readonly attribute DOMString id;\n *            attribute DOMString label;\n *   readonly attribute long width;\n *   readonly attribute long height;\n *   readonly attribute long bitrate;\n *            attribute boolean enabled;\n * };\n *\n * @class QualityLevel\n */\nclass QualityLevel {\n  /**\n   * Creates a QualityLevel\n   *\n   * @param {Representation|Object} representation The representation of the quality level\n   * @param {string}   representation.id        Unique id of the QualityLevel\n   * @param {number=}  representation.width     Resolution width of the QualityLevel\n   * @param {number=}  representation.height    Resolution height of the QualityLevel\n   * @param {number}   representation.bandwidth Bitrate of the QualityLevel\n   * @param {number=}  representation.frameRate Frame-rate of the QualityLevel\n   * @param {Function} representation.enabled   Callback to enable/disable QualityLevel\n   */\n  constructor(representation) {\n    let level = this; // eslint-disable-line\n\n    level.id = representation.id;\n    level.label = level.id;\n    level.width = representation.width;\n    level.height = representation.height;\n    level.bitrate = representation.bandwidth;\n    level.frameRate = representation.frameRate;\n    level.enabled_ = representation.enabled;\n    Object.defineProperty(level, 'enabled', {\n      /**\n       * Get whether the QualityLevel is enabled.\n       *\n       * @return {boolean} True if the QualityLevel is enabled.\n       */\n      get() {\n        return level.enabled_();\n      },\n      /**\n       * Enable or disable the QualityLevel.\n       *\n       * @param {boolean} enable true to enable QualityLevel, false to disable.\n       */\n      set(enable) {\n        level.enabled_(enable);\n      }\n    });\n    return level;\n  }\n}\n\n/**\n * A list of QualityLevels.\n *\n * interface QualityLevelList : EventTarget {\n *   getter QualityLevel (unsigned long index);\n *   readonly attribute unsigned long length;\n *   readonly attribute long selectedIndex;\n *\n *   void addQualityLevel(QualityLevel qualityLevel)\n *   void removeQualityLevel(QualityLevel remove)\n *   QualityLevel? getQualityLevelById(DOMString id);\n *\n *   attribute EventHandler onchange;\n *   attribute EventHandler onaddqualitylevel;\n *   attribute EventHandler onremovequalitylevel;\n * };\n *\n * @extends videojs.EventTarget\n * @class QualityLevelList\n */\n\nclass QualityLevelList extends videojs.EventTarget {\n  /**\n   * Creates a QualityLevelList.\n   */\n  constructor() {\n    super();\n    let list = this; // eslint-disable-line\n\n    list.levels_ = [];\n    list.selectedIndex_ = -1;\n    /**\n     * Get the index of the currently selected QualityLevel.\n     *\n     * @returns {number} The index of the selected QualityLevel. -1 if none selected.\n     * @readonly\n     */\n\n    Object.defineProperty(list, 'selectedIndex', {\n      get() {\n        return list.selectedIndex_;\n      }\n    });\n    /**\n     * Get the length of the list of QualityLevels.\n     *\n     * @returns {number} The length of the list.\n     * @readonly\n     */\n\n    Object.defineProperty(list, 'length', {\n      get() {\n        return list.levels_.length;\n      }\n    });\n    list[Symbol.iterator] = () => list.levels_.values();\n    return list;\n  }\n  /**\n   * Adds a quality level to the list.\n   *\n   * @param {Representation|Object} representation The representation of the quality level\n   * @param {string}   representation.id        Unique id of the QualityLevel\n   * @param {number=}  representation.width     Resolution width of the QualityLevel\n   * @param {number=}  representation.height    Resolution height of the QualityLevel\n   * @param {number}   representation.bandwidth Bitrate of the QualityLevel\n   * @param {number=}  representation.frameRate Frame-rate of the QualityLevel\n   * @param {Function} representation.enabled   Callback to enable/disable QualityLevel\n   * @return {QualityLevel} the QualityLevel added to the list\n   * @method addQualityLevel\n   */\n\n  addQualityLevel(representation) {\n    let qualityLevel = this.getQualityLevelById(representation.id); // Do not add duplicate quality levels\n\n    if (qualityLevel) {\n      return qualityLevel;\n    }\n    const index = this.levels_.length;\n    qualityLevel = new QualityLevel(representation);\n    if (!('' + index in this)) {\n      Object.defineProperty(this, index, {\n        get() {\n          return this.levels_[index];\n        }\n      });\n    }\n    this.levels_.push(qualityLevel);\n    this.trigger({\n      qualityLevel,\n      type: 'addqualitylevel'\n    });\n    return qualityLevel;\n  }\n  /**\n   * Removes a quality level from the list.\n   *\n   * @param {QualityLevel} qualityLevel The QualityLevel to remove from the list.\n   * @return {QualityLevel|null} the QualityLevel removed or null if nothing removed\n   * @method removeQualityLevel\n   */\n\n  removeQualityLevel(qualityLevel) {\n    let removed = null;\n    for (let i = 0, l = this.length; i < l; i++) {\n      if (this[i] === qualityLevel) {\n        removed = this.levels_.splice(i, 1)[0];\n        if (this.selectedIndex_ === i) {\n          this.selectedIndex_ = -1;\n        } else if (this.selectedIndex_ > i) {\n          this.selectedIndex_--;\n        }\n        break;\n      }\n    }\n    if (removed) {\n      this.trigger({\n        qualityLevel,\n        type: 'removequalitylevel'\n      });\n    }\n    return removed;\n  }\n  /**\n   * Searches for a QualityLevel with the given id.\n   *\n   * @param {string} id The id of the QualityLevel to find.\n   * @return {QualityLevel|null} The QualityLevel with id, or null if not found.\n   * @method getQualityLevelById\n   */\n\n  getQualityLevelById(id) {\n    for (let i = 0, l = this.length; i < l; i++) {\n      const level = this[i];\n      if (level.id === id) {\n        return level;\n      }\n    }\n    return null;\n  }\n  /**\n   * Resets the list of QualityLevels to empty\n   *\n   * @method dispose\n   */\n\n  dispose() {\n    this.selectedIndex_ = -1;\n    this.levels_.length = 0;\n  }\n}\n/**\n * change - The selected QualityLevel has changed.\n * addqualitylevel - A QualityLevel has been added to the QualityLevelList.\n * removequalitylevel - A QualityLevel has been removed from the QualityLevelList.\n */\n\nQualityLevelList.prototype.allowedEvents_ = {\n  change: 'change',\n  addqualitylevel: 'addqualitylevel',\n  removequalitylevel: 'removequalitylevel'\n}; // emulate attribute EventHandler support to allow for feature detection\n\nfor (const event in QualityLevelList.prototype.allowedEvents_) {\n  QualityLevelList.prototype['on' + event] = null;\n}\nvar version$5 = \"4.0.0\";\n\n/**\n * Initialization function for the qualityLevels plugin. Sets up the QualityLevelList and\n * event handlers.\n *\n * @param {Player} player Player object.\n * @param {Object} options Plugin options object.\n * @return {QualityLevelList} a list of QualityLevels\n */\n\nconst initPlugin$1 = function (player, options) {\n  const originalPluginFn = player.qualityLevels;\n  const qualityLevelList = new QualityLevelList();\n  const disposeHandler = function () {\n    qualityLevelList.dispose();\n    player.qualityLevels = originalPluginFn;\n    player.off('dispose', disposeHandler);\n  };\n  player.on('dispose', disposeHandler);\n  player.qualityLevels = () => qualityLevelList;\n  player.qualityLevels.VERSION = version$5;\n  return qualityLevelList;\n};\n/**\n * A video.js plugin.\n *\n * In the plugin function, the value of `this` is a video.js `Player`\n * instance. You cannot rely on the player being in a \"ready\" state here,\n * depending on how the plugin is invoked. This may or may not be important\n * to you; if not, remove the wait for \"ready\"!\n *\n * @param {Object} options Plugin options object\n * @return {QualityLevelList} a list of QualityLevels\n */\n\nconst qualityLevels = function (options) {\n  return initPlugin$1(this, videojs.obj.merge({}, options));\n}; // Register the plugin with video.js.\n\nvideojs.registerPlugin('qualityLevels', qualityLevels); // Include the version number.\n\nqualityLevels.VERSION = version$5;\n\n/*! @name @videojs/http-streaming @version 3.10.0 @license Apache-2.0 */\n\n/**\n * @file resolve-url.js - Handling how URLs are resolved and manipulated\n */\nconst resolveUrl = _resolveUrl;\n/**\n * If the xhr request was redirected, return the responseURL, otherwise,\n * return the original url.\n *\n * @api private\n *\n * @param  {string} url - an url being requested\n * @param  {XMLHttpRequest} req - xhr request result\n *\n * @return {string}\n */\n\nconst resolveManifestRedirect = (url, req) => {\n  // To understand how the responseURL below is set and generated:\n  // - https://fetch.spec.whatwg.org/#concept-response-url\n  // - https://fetch.spec.whatwg.org/#atomic-http-redirect-handling\n  if (req && req.responseURL && url !== req.responseURL) {\n    return req.responseURL;\n  }\n  return url;\n};\nconst logger = source => {\n  if (videojs.log.debug) {\n    return videojs.log.debug.bind(videojs, 'VHS:', `${source} >`);\n  }\n  return function () {};\n};\n\n/**\n * Provides a compatibility layer between Video.js 7 and 8 API changes for VHS.\n */\n/**\n * Delegates to videojs.obj.merge (Video.js 8) or\n * videojs.mergeOptions (Video.js 7).\n */\n\nfunction merge(...args) {\n  const context = videojs.obj || videojs;\n  const fn = context.merge || context.mergeOptions;\n  return fn.apply(context, args);\n}\n/**\n * Delegates to videojs.time.createTimeRanges (Video.js 8) or\n * videojs.createTimeRanges (Video.js 7).\n */\n\nfunction createTimeRanges(...args) {\n  const context = videojs.time || videojs;\n  const fn = context.createTimeRanges || context.createTimeRanges;\n  return fn.apply(context, args);\n}\n\n/**\n * ranges\n *\n * Utilities for working with TimeRanges.\n *\n */\n\nconst TIME_FUDGE_FACTOR = 1 / 30; // Comparisons between time values such as current time and the end of the buffered range\n// can be misleading because of precision differences or when the current media has poorly\n// aligned audio and video, which can cause values to be slightly off from what you would\n// expect. This value is what we consider to be safe to use in such comparisons to account\n// for these scenarios.\n\nconst SAFE_TIME_DELTA = TIME_FUDGE_FACTOR * 3;\nconst filterRanges = function (timeRanges, predicate) {\n  const results = [];\n  let i;\n  if (timeRanges && timeRanges.length) {\n    // Search for ranges that match the predicate\n    for (i = 0; i < timeRanges.length; i++) {\n      if (predicate(timeRanges.start(i), timeRanges.end(i))) {\n        results.push([timeRanges.start(i), timeRanges.end(i)]);\n      }\n    }\n  }\n  return createTimeRanges(results);\n};\n/**\n * Attempts to find the buffered TimeRange that contains the specified\n * time.\n *\n * @param {TimeRanges} buffered - the TimeRanges object to query\n * @param {number} time  - the time to filter on.\n * @return {TimeRanges} a new TimeRanges object\n */\n\nconst findRange = function (buffered, time) {\n  return filterRanges(buffered, function (start, end) {\n    return start - SAFE_TIME_DELTA <= time && end + SAFE_TIME_DELTA >= time;\n  });\n};\n/**\n * Returns the TimeRanges that begin later than the specified time.\n *\n * @param {TimeRanges} timeRanges - the TimeRanges object to query\n * @param {number} time - the time to filter on.\n * @return {TimeRanges} a new TimeRanges object.\n */\n\nconst findNextRange = function (timeRanges, time) {\n  return filterRanges(timeRanges, function (start) {\n    return start - TIME_FUDGE_FACTOR >= time;\n  });\n};\n/**\n * Returns gaps within a list of TimeRanges\n *\n * @param {TimeRanges} buffered - the TimeRanges object\n * @return {TimeRanges} a TimeRanges object of gaps\n */\n\nconst findGaps = function (buffered) {\n  if (buffered.length < 2) {\n    return createTimeRanges();\n  }\n  const ranges = [];\n  for (let i = 1; i < buffered.length; i++) {\n    const start = buffered.end(i - 1);\n    const end = buffered.start(i);\n    ranges.push([start, end]);\n  }\n  return createTimeRanges(ranges);\n};\n/**\n * Calculate the intersection of two TimeRanges\n *\n * @param {TimeRanges} bufferA\n * @param {TimeRanges} bufferB\n * @return {TimeRanges} The interesection of `bufferA` with `bufferB`\n */\n\nconst bufferIntersection = function (bufferA, bufferB) {\n  let start = null;\n  let end = null;\n  let arity = 0;\n  const extents = [];\n  const ranges = [];\n  if (!bufferA || !bufferA.length || !bufferB || !bufferB.length) {\n    return createTimeRanges();\n  } // Handle the case where we have both buffers and create an\n  // intersection of the two\n\n  let count = bufferA.length; // A) Gather up all start and end times\n\n  while (count--) {\n    extents.push({\n      time: bufferA.start(count),\n      type: 'start'\n    });\n    extents.push({\n      time: bufferA.end(count),\n      type: 'end'\n    });\n  }\n  count = bufferB.length;\n  while (count--) {\n    extents.push({\n      time: bufferB.start(count),\n      type: 'start'\n    });\n    extents.push({\n      time: bufferB.end(count),\n      type: 'end'\n    });\n  } // B) Sort them by time\n\n  extents.sort(function (a, b) {\n    return a.time - b.time;\n  }); // C) Go along one by one incrementing arity for start and decrementing\n  //    arity for ends\n\n  for (count = 0; count < extents.length; count++) {\n    if (extents[count].type === 'start') {\n      arity++; // D) If arity is ever incremented to 2 we are entering an\n      //    overlapping range\n\n      if (arity === 2) {\n        start = extents[count].time;\n      }\n    } else if (extents[count].type === 'end') {\n      arity--; // E) If arity is ever decremented to 1 we leaving an\n      //    overlapping range\n\n      if (arity === 1) {\n        end = extents[count].time;\n      }\n    } // F) Record overlapping ranges\n\n    if (start !== null && end !== null) {\n      ranges.push([start, end]);\n      start = null;\n      end = null;\n    }\n  }\n  return createTimeRanges(ranges);\n};\n/**\n * Gets a human readable string for a TimeRange\n *\n * @param {TimeRange} range\n * @return {string} a human readable string\n */\n\nconst printableRange = range => {\n  const strArr = [];\n  if (!range || !range.length) {\n    return '';\n  }\n  for (let i = 0; i < range.length; i++) {\n    strArr.push(range.start(i) + ' => ' + range.end(i));\n  }\n  return strArr.join(', ');\n};\n/**\n * Calculates the amount of time left in seconds until the player hits the end of the\n * buffer and causes a rebuffer\n *\n * @param {TimeRange} buffered\n *        The state of the buffer\n * @param {Numnber} currentTime\n *        The current time of the player\n * @param {number} playbackRate\n *        The current playback rate of the player. Defaults to 1.\n * @return {number}\n *         Time until the player has to start rebuffering in seconds.\n * @function timeUntilRebuffer\n */\n\nconst timeUntilRebuffer = function (buffered, currentTime, playbackRate = 1) {\n  const bufferedEnd = buffered.length ? buffered.end(buffered.length - 1) : 0;\n  return (bufferedEnd - currentTime) / playbackRate;\n};\n/**\n * Converts a TimeRanges object into an array representation\n *\n * @param {TimeRanges} timeRanges\n * @return {Array}\n */\n\nconst timeRangesToArray = timeRanges => {\n  const timeRangesList = [];\n  for (let i = 0; i < timeRanges.length; i++) {\n    timeRangesList.push({\n      start: timeRanges.start(i),\n      end: timeRanges.end(i)\n    });\n  }\n  return timeRangesList;\n};\n/**\n * Determines if two time range objects are different.\n *\n * @param {TimeRange} a\n *        the first time range object to check\n *\n * @param {TimeRange} b\n *        the second time range object to check\n *\n * @return {Boolean}\n *         Whether the time range objects differ\n */\n\nconst isRangeDifferent = function (a, b) {\n  // same object\n  if (a === b) {\n    return false;\n  } // one or the other is undefined\n\n  if (!a && b || !b && a) {\n    return true;\n  } // length is different\n\n  if (a.length !== b.length) {\n    return true;\n  } // see if any start/end pair is different\n\n  for (let i = 0; i < a.length; i++) {\n    if (a.start(i) !== b.start(i) || a.end(i) !== b.end(i)) {\n      return true;\n    }\n  } // if the length and every pair is the same\n  // this is the same time range\n\n  return false;\n};\nconst lastBufferedEnd = function (a) {\n  if (!a || !a.length || !a.end) {\n    return;\n  }\n  return a.end(a.length - 1);\n};\n/**\n * A utility function to add up the amount of time in a timeRange\n * after a specified startTime.\n * ie:[[0, 10], [20, 40], [50, 60]] with a startTime 0\n *     would return 40 as there are 40s seconds after 0 in the timeRange\n *\n * @param {TimeRange} range\n *        The range to check against\n * @param {number} startTime\n *        The time in the time range that you should start counting from\n *\n * @return {number}\n *          The number of seconds in the buffer passed the specified time.\n */\n\nconst timeAheadOf = function (range, startTime) {\n  let time = 0;\n  if (!range || !range.length) {\n    return time;\n  }\n  for (let i = 0; i < range.length; i++) {\n    const start = range.start(i);\n    const end = range.end(i); // startTime is after this range entirely\n\n    if (startTime > end) {\n      continue;\n    } // startTime is within this range\n\n    if (startTime > start && startTime <= end) {\n      time += end - startTime;\n      continue;\n    } // startTime is before this range.\n\n    time += end - start;\n  }\n  return time;\n};\n\n/**\n * @file playlist.js\n *\n * Playlist related utilities.\n */\n/**\n * Get the duration of a segment, with special cases for\n * llhls segments that do not have a duration yet.\n *\n * @param {Object} playlist\n *        the playlist that the segment belongs to.\n * @param {Object} segment\n *        the segment to get a duration for.\n *\n * @return {number}\n *          the segment duration\n */\n\nconst segmentDurationWithParts = (playlist, segment) => {\n  // if this isn't a preload segment\n  // then we will have a segment duration that is accurate.\n  if (!segment.preload) {\n    return segment.duration;\n  } // otherwise we have to add up parts and preload hints\n  // to get an up to date duration.\n\n  let result = 0;\n  (segment.parts || []).forEach(function (p) {\n    result += p.duration;\n  }); // for preload hints we have to use partTargetDuration\n  // as they won't even have a duration yet.\n\n  (segment.preloadHints || []).forEach(function (p) {\n    if (p.type === 'PART') {\n      result += playlist.partTargetDuration;\n    }\n  });\n  return result;\n};\n/**\n * A function to get a combined list of parts and segments with durations\n * and indexes.\n *\n * @param {Playlist} playlist the playlist to get the list for.\n *\n * @return {Array} The part/segment list.\n */\n\nconst getPartsAndSegments = playlist => (playlist.segments || []).reduce((acc, segment, si) => {\n  if (segment.parts) {\n    segment.parts.forEach(function (part, pi) {\n      acc.push({\n        duration: part.duration,\n        segmentIndex: si,\n        partIndex: pi,\n        part,\n        segment\n      });\n    });\n  } else {\n    acc.push({\n      duration: segment.duration,\n      segmentIndex: si,\n      partIndex: null,\n      segment,\n      part: null\n    });\n  }\n  return acc;\n}, []);\nconst getLastParts = media => {\n  const lastSegment = media.segments && media.segments.length && media.segments[media.segments.length - 1];\n  return lastSegment && lastSegment.parts || [];\n};\nconst getKnownPartCount = ({\n  preloadSegment\n}) => {\n  if (!preloadSegment) {\n    return;\n  }\n  const {\n    parts,\n    preloadHints\n  } = preloadSegment;\n  let partCount = (preloadHints || []).reduce((count, hint) => count + (hint.type === 'PART' ? 1 : 0), 0);\n  partCount += parts && parts.length ? parts.length : 0;\n  return partCount;\n};\n/**\n * Get the number of seconds to delay from the end of a\n * live playlist.\n *\n * @param {Playlist} main the main playlist\n * @param {Playlist} media the media playlist\n * @return {number} the hold back in seconds.\n */\n\nconst liveEdgeDelay = (main, media) => {\n  if (media.endList) {\n    return 0;\n  } // dash suggestedPresentationDelay trumps everything\n\n  if (main && main.suggestedPresentationDelay) {\n    return main.suggestedPresentationDelay;\n  }\n  const hasParts = getLastParts(media).length > 0; // look for \"part\" delays from ll-hls first\n\n  if (hasParts && media.serverControl && media.serverControl.partHoldBack) {\n    return media.serverControl.partHoldBack;\n  } else if (hasParts && media.partTargetDuration) {\n    return media.partTargetDuration * 3; // finally look for full segment delays\n  } else if (media.serverControl && media.serverControl.holdBack) {\n    return media.serverControl.holdBack;\n  } else if (media.targetDuration) {\n    return media.targetDuration * 3;\n  }\n  return 0;\n};\n/**\n * walk backward until we find a duration we can use\n * or return a failure\n *\n * @param {Playlist} playlist the playlist to walk through\n * @param {Number} endSequence the mediaSequence to stop walking on\n */\n\nconst backwardDuration = function (playlist, endSequence) {\n  let result = 0;\n  let i = endSequence - playlist.mediaSequence; // if a start time is available for segment immediately following\n  // the interval, use it\n\n  let segment = playlist.segments[i]; // Walk backward until we find the latest segment with timeline\n  // information that is earlier than endSequence\n\n  if (segment) {\n    if (typeof segment.start !== 'undefined') {\n      return {\n        result: segment.start,\n        precise: true\n      };\n    }\n    if (typeof segment.end !== 'undefined') {\n      return {\n        result: segment.end - segment.duration,\n        precise: true\n      };\n    }\n  }\n  while (i--) {\n    segment = playlist.segments[i];\n    if (typeof segment.end !== 'undefined') {\n      return {\n        result: result + segment.end,\n        precise: true\n      };\n    }\n    result += segmentDurationWithParts(playlist, segment);\n    if (typeof segment.start !== 'undefined') {\n      return {\n        result: result + segment.start,\n        precise: true\n      };\n    }\n  }\n  return {\n    result,\n    precise: false\n  };\n};\n/**\n * walk forward until we find a duration we can use\n * or return a failure\n *\n * @param {Playlist} playlist the playlist to walk through\n * @param {number} endSequence the mediaSequence to stop walking on\n */\n\nconst forwardDuration = function (playlist, endSequence) {\n  let result = 0;\n  let segment;\n  let i = endSequence - playlist.mediaSequence; // Walk forward until we find the earliest segment with timeline\n  // information\n\n  for (; i < playlist.segments.length; i++) {\n    segment = playlist.segments[i];\n    if (typeof segment.start !== 'undefined') {\n      return {\n        result: segment.start - result,\n        precise: true\n      };\n    }\n    result += segmentDurationWithParts(playlist, segment);\n    if (typeof segment.end !== 'undefined') {\n      return {\n        result: segment.end - result,\n        precise: true\n      };\n    }\n  } // indicate we didn't find a useful duration estimate\n\n  return {\n    result: -1,\n    precise: false\n  };\n};\n/**\n  * Calculate the media duration from the segments associated with a\n  * playlist. The duration of a subinterval of the available segments\n  * may be calculated by specifying an end index.\n  *\n  * @param {Object} playlist a media playlist object\n  * @param {number=} endSequence an exclusive upper boundary\n  * for the playlist.  Defaults to playlist length.\n  * @param {number} expired the amount of time that has dropped\n  * off the front of the playlist in a live scenario\n  * @return {number} the duration between the first available segment\n  * and end index.\n  */\n\nconst intervalDuration = function (playlist, endSequence, expired) {\n  if (typeof endSequence === 'undefined') {\n    endSequence = playlist.mediaSequence + playlist.segments.length;\n  }\n  if (endSequence < playlist.mediaSequence) {\n    return 0;\n  } // do a backward walk to estimate the duration\n\n  const backward = backwardDuration(playlist, endSequence);\n  if (backward.precise) {\n    // if we were able to base our duration estimate on timing\n    // information provided directly from the Media Source, return\n    // it\n    return backward.result;\n  } // walk forward to see if a precise duration estimate can be made\n  // that way\n\n  const forward = forwardDuration(playlist, endSequence);\n  if (forward.precise) {\n    // we found a segment that has been buffered and so it's\n    // position is known precisely\n    return forward.result;\n  } // return the less-precise, playlist-based duration estimate\n\n  return backward.result + expired;\n};\n/**\n  * Calculates the duration of a playlist. If a start and end index\n  * are specified, the duration will be for the subset of the media\n  * timeline between those two indices. The total duration for live\n  * playlists is always Infinity.\n  *\n  * @param {Object} playlist a media playlist object\n  * @param {number=} endSequence an exclusive upper\n  * boundary for the playlist. Defaults to the playlist media\n  * sequence number plus its length.\n  * @param {number=} expired the amount of time that has\n  * dropped off the front of the playlist in a live scenario\n  * @return {number} the duration between the start index and end\n  * index.\n  */\n\nconst duration = function (playlist, endSequence, expired) {\n  if (!playlist) {\n    return 0;\n  }\n  if (typeof expired !== 'number') {\n    expired = 0;\n  } // if a slice of the total duration is not requested, use\n  // playlist-level duration indicators when they're present\n\n  if (typeof endSequence === 'undefined') {\n    // if present, use the duration specified in the playlist\n    if (playlist.totalDuration) {\n      return playlist.totalDuration;\n    } // duration should be Infinity for live playlists\n\n    if (!playlist.endList) {\n      return window$1.Infinity;\n    }\n  } // calculate the total duration based on the segment durations\n\n  return intervalDuration(playlist, endSequence, expired);\n};\n/**\n  * Calculate the time between two indexes in the current playlist\n  * neight the start- nor the end-index need to be within the current\n  * playlist in which case, the targetDuration of the playlist is used\n  * to approximate the durations of the segments\n  *\n  * @param {Array} options.durationList list to iterate over for durations.\n  * @param {number} options.defaultDuration duration to use for elements before or after the durationList\n  * @param {number} options.startIndex partsAndSegments index to start\n  * @param {number} options.endIndex partsAndSegments index to end.\n  * @return {number} the number of seconds between startIndex and endIndex\n  */\n\nconst sumDurations = function ({\n  defaultDuration,\n  durationList,\n  startIndex,\n  endIndex\n}) {\n  let durations = 0;\n  if (startIndex > endIndex) {\n    [startIndex, endIndex] = [endIndex, startIndex];\n  }\n  if (startIndex < 0) {\n    for (let i = startIndex; i < Math.min(0, endIndex); i++) {\n      durations += defaultDuration;\n    }\n    startIndex = 0;\n  }\n  for (let i = startIndex; i < endIndex; i++) {\n    durations += durationList[i].duration;\n  }\n  return durations;\n};\n/**\n * Calculates the playlist end time\n *\n * @param {Object} playlist a media playlist object\n * @param {number=} expired the amount of time that has\n *                  dropped off the front of the playlist in a live scenario\n * @param {boolean|false} useSafeLiveEnd a boolean value indicating whether or not the\n *                        playlist end calculation should consider the safe live end\n *                        (truncate the playlist end by three segments). This is normally\n *                        used for calculating the end of the playlist's seekable range.\n *                        This takes into account the value of liveEdgePadding.\n *                        Setting liveEdgePadding to 0 is equivalent to setting this to false.\n * @param {number} liveEdgePadding a number indicating how far from the end of the playlist we should be in seconds.\n *                 If this is provided, it is used in the safe live end calculation.\n *                 Setting useSafeLiveEnd=false or liveEdgePadding=0 are equivalent.\n *                 Corresponds to suggestedPresentationDelay in DASH manifests.\n * @return {number} the end time of playlist\n * @function playlistEnd\n */\n\nconst playlistEnd = function (playlist, expired, useSafeLiveEnd, liveEdgePadding) {\n  if (!playlist || !playlist.segments) {\n    return null;\n  }\n  if (playlist.endList) {\n    return duration(playlist);\n  }\n  if (expired === null) {\n    return null;\n  }\n  expired = expired || 0;\n  let lastSegmentEndTime = intervalDuration(playlist, playlist.mediaSequence + playlist.segments.length, expired);\n  if (useSafeLiveEnd) {\n    liveEdgePadding = typeof liveEdgePadding === 'number' ? liveEdgePadding : liveEdgeDelay(null, playlist);\n    lastSegmentEndTime -= liveEdgePadding;\n  } // don't return a time less than zero\n\n  return Math.max(0, lastSegmentEndTime);\n};\n/**\n  * Calculates the interval of time that is currently seekable in a\n  * playlist. The returned time ranges are relative to the earliest\n  * moment in the specified playlist that is still available. A full\n  * seekable implementation for live streams would need to offset\n  * these values by the duration of content that has expired from the\n  * stream.\n  *\n  * @param {Object} playlist a media playlist object\n  * dropped off the front of the playlist in a live scenario\n  * @param {number=} expired the amount of time that has\n  * dropped off the front of the playlist in a live scenario\n  * @param {number} liveEdgePadding how far from the end of the playlist we should be in seconds.\n  *        Corresponds to suggestedPresentationDelay in DASH manifests.\n  * @return {TimeRanges} the periods of time that are valid targets\n  * for seeking\n  */\n\nconst seekable = function (playlist, expired, liveEdgePadding) {\n  const useSafeLiveEnd = true;\n  const seekableStart = expired || 0;\n  let seekableEnd = playlistEnd(playlist, expired, useSafeLiveEnd, liveEdgePadding);\n  if (seekableEnd === null) {\n    return createTimeRanges();\n  } // Clamp seekable end since it can not be less than the seekable start\n\n  if (seekableEnd < seekableStart) {\n    seekableEnd = seekableStart;\n  }\n  return createTimeRanges(seekableStart, seekableEnd);\n};\n/**\n * Determine the index and estimated starting time of the segment that\n * contains a specified playback position in a media playlist.\n *\n * @param {Object} options.playlist the media playlist to query\n * @param {number} options.currentTime The number of seconds since the earliest\n * possible position to determine the containing segment for\n * @param {number} options.startTime the time when the segment/part starts\n * @param {number} options.startingSegmentIndex the segment index to start looking at.\n * @param {number?} [options.startingPartIndex] the part index to look at within the segment.\n *\n * @return {Object} an object with partIndex, segmentIndex, and startTime.\n */\n\nconst getMediaInfoForTime = function ({\n  playlist,\n  currentTime,\n  startingSegmentIndex,\n  startingPartIndex,\n  startTime,\n  exactManifestTimings\n}) {\n  let time = currentTime - startTime;\n  const partsAndSegments = getPartsAndSegments(playlist);\n  let startIndex = 0;\n  for (let i = 0; i < partsAndSegments.length; i++) {\n    const partAndSegment = partsAndSegments[i];\n    if (startingSegmentIndex !== partAndSegment.segmentIndex) {\n      continue;\n    } // skip this if part index does not match.\n\n    if (typeof startingPartIndex === 'number' && typeof partAndSegment.partIndex === 'number' && startingPartIndex !== partAndSegment.partIndex) {\n      continue;\n    }\n    startIndex = i;\n    break;\n  }\n  if (time < 0) {\n    // Walk backward from startIndex in the playlist, adding durations\n    // until we find a segment that contains `time` and return it\n    if (startIndex > 0) {\n      for (let i = startIndex - 1; i >= 0; i--) {\n        const partAndSegment = partsAndSegments[i];\n        time += partAndSegment.duration;\n        if (exactManifestTimings) {\n          if (time < 0) {\n            continue;\n          }\n        } else if (time + TIME_FUDGE_FACTOR <= 0) {\n          continue;\n        }\n        return {\n          partIndex: partAndSegment.partIndex,\n          segmentIndex: partAndSegment.segmentIndex,\n          startTime: startTime - sumDurations({\n            defaultDuration: playlist.targetDuration,\n            durationList: partsAndSegments,\n            startIndex,\n            endIndex: i\n          })\n        };\n      }\n    } // We were unable to find a good segment within the playlist\n    // so select the first segment\n\n    return {\n      partIndex: partsAndSegments[0] && partsAndSegments[0].partIndex || null,\n      segmentIndex: partsAndSegments[0] && partsAndSegments[0].segmentIndex || 0,\n      startTime: currentTime\n    };\n  } // When startIndex is negative, we first walk forward to first segment\n  // adding target durations. If we \"run out of time\" before getting to\n  // the first segment, return the first segment\n\n  if (startIndex < 0) {\n    for (let i = startIndex; i < 0; i++) {\n      time -= playlist.targetDuration;\n      if (time < 0) {\n        return {\n          partIndex: partsAndSegments[0] && partsAndSegments[0].partIndex || null,\n          segmentIndex: partsAndSegments[0] && partsAndSegments[0].segmentIndex || 0,\n          startTime: currentTime\n        };\n      }\n    }\n    startIndex = 0;\n  } // Walk forward from startIndex in the playlist, subtracting durations\n  // until we find a segment that contains `time` and return it\n\n  for (let i = startIndex; i < partsAndSegments.length; i++) {\n    const partAndSegment = partsAndSegments[i];\n    time -= partAndSegment.duration;\n    const canUseFudgeFactor = partAndSegment.duration > TIME_FUDGE_FACTOR;\n    const isExactlyAtTheEnd = time === 0;\n    const isExtremelyCloseToTheEnd = canUseFudgeFactor && time + TIME_FUDGE_FACTOR >= 0;\n    if (isExactlyAtTheEnd || isExtremelyCloseToTheEnd) {\n      // 1) We are exactly at the end of the current segment.\n      // 2) We are extremely close to the end of the current segment (The difference is less than  1 / 30).\n      //    We may encounter this situation when\n      //    we don't have exact match between segment duration info in the manifest and the actual duration of the segment\n      //    For example:\n      //    We appended 3 segments 10 seconds each, meaning we should have 30 sec buffered,\n      //    but we the actual buffered is 29.99999\n      //\n      // In both cases:\n      // if we passed current time -> it means that we already played current segment\n      // if we passed buffered.end -> it means that this segment is already loaded and buffered\n      // we should select the next segment if we have one:\n      if (i !== partsAndSegments.length - 1) {\n        continue;\n      }\n    }\n    if (exactManifestTimings) {\n      if (time > 0) {\n        continue;\n      }\n    } else if (time - TIME_FUDGE_FACTOR >= 0) {\n      continue;\n    }\n    return {\n      partIndex: partAndSegment.partIndex,\n      segmentIndex: partAndSegment.segmentIndex,\n      startTime: startTime + sumDurations({\n        defaultDuration: playlist.targetDuration,\n        durationList: partsAndSegments,\n        startIndex,\n        endIndex: i\n      })\n    };\n  } // We are out of possible candidates so load the last one...\n\n  return {\n    segmentIndex: partsAndSegments[partsAndSegments.length - 1].segmentIndex,\n    partIndex: partsAndSegments[partsAndSegments.length - 1].partIndex,\n    startTime: currentTime\n  };\n};\n/**\n * Check whether the playlist is excluded or not.\n *\n * @param {Object} playlist the media playlist object\n * @return {boolean} whether the playlist is excluded or not\n * @function isExcluded\n */\n\nconst isExcluded = function (playlist) {\n  return playlist.excludeUntil && playlist.excludeUntil > Date.now();\n};\n/**\n * Check whether the playlist is compatible with current playback configuration or has\n * been excluded permanently for being incompatible.\n *\n * @param {Object} playlist the media playlist object\n * @return {boolean} whether the playlist is incompatible or not\n * @function isIncompatible\n */\n\nconst isIncompatible = function (playlist) {\n  return playlist.excludeUntil && playlist.excludeUntil === Infinity;\n};\n/**\n * Check whether the playlist is enabled or not.\n *\n * @param {Object} playlist the media playlist object\n * @return {boolean} whether the playlist is enabled or not\n * @function isEnabled\n */\n\nconst isEnabled = function (playlist) {\n  const excluded = isExcluded(playlist);\n  return !playlist.disabled && !excluded;\n};\n/**\n * Check whether the playlist has been manually disabled through the representations api.\n *\n * @param {Object} playlist the media playlist object\n * @return {boolean} whether the playlist is disabled manually or not\n * @function isDisabled\n */\n\nconst isDisabled = function (playlist) {\n  return playlist.disabled;\n};\n/**\n * Returns whether the current playlist is an AES encrypted HLS stream\n *\n * @return {boolean} true if it's an AES encrypted HLS stream\n */\n\nconst isAes = function (media) {\n  for (let i = 0; i < media.segments.length; i++) {\n    if (media.segments[i].key) {\n      return true;\n    }\n  }\n  return false;\n};\n/**\n * Checks if the playlist has a value for the specified attribute\n *\n * @param {string} attr\n *        Attribute to check for\n * @param {Object} playlist\n *        The media playlist object\n * @return {boolean}\n *         Whether the playlist contains a value for the attribute or not\n * @function hasAttribute\n */\n\nconst hasAttribute = function (attr, playlist) {\n  return playlist.attributes && playlist.attributes[attr];\n};\n/**\n * Estimates the time required to complete a segment download from the specified playlist\n *\n * @param {number} segmentDuration\n *        Duration of requested segment\n * @param {number} bandwidth\n *        Current measured bandwidth of the player\n * @param {Object} playlist\n *        The media playlist object\n * @param {number=} bytesReceived\n *        Number of bytes already received for the request. Defaults to 0\n * @return {number|NaN}\n *         The estimated time to request the segment. NaN if bandwidth information for\n *         the given playlist is unavailable\n * @function estimateSegmentRequestTime\n */\n\nconst estimateSegmentRequestTime = function (segmentDuration, bandwidth, playlist, bytesReceived = 0) {\n  if (!hasAttribute('BANDWIDTH', playlist)) {\n    return NaN;\n  }\n  const size = segmentDuration * playlist.attributes.BANDWIDTH;\n  return (size - bytesReceived * 8) / bandwidth;\n};\n/*\n * Returns whether the current playlist is the lowest rendition\n *\n * @return {Boolean} true if on lowest rendition\n */\n\nconst isLowestEnabledRendition = (main, media) => {\n  if (main.playlists.length === 1) {\n    return true;\n  }\n  const currentBandwidth = media.attributes.BANDWIDTH || Number.MAX_VALUE;\n  return main.playlists.filter(playlist => {\n    if (!isEnabled(playlist)) {\n      return false;\n    }\n    return (playlist.attributes.BANDWIDTH || 0) < currentBandwidth;\n  }).length === 0;\n};\nconst playlistMatch = (a, b) => {\n  // both playlits are null\n  // or only one playlist is non-null\n  // no match\n  if (!a && !b || !a && b || a && !b) {\n    return false;\n  } // playlist objects are the same, match\n\n  if (a === b) {\n    return true;\n  } // first try to use id as it should be the most\n  // accurate\n\n  if (a.id && b.id && a.id === b.id) {\n    return true;\n  } // next try to use reslovedUri as it should be the\n  // second most accurate.\n\n  if (a.resolvedUri && b.resolvedUri && a.resolvedUri === b.resolvedUri) {\n    return true;\n  } // finally try to use uri as it should be accurate\n  // but might miss a few cases for relative uris\n\n  if (a.uri && b.uri && a.uri === b.uri) {\n    return true;\n  }\n  return false;\n};\nconst someAudioVariant = function (main, callback) {\n  const AUDIO = main && main.mediaGroups && main.mediaGroups.AUDIO || {};\n  let found = false;\n  for (const groupName in AUDIO) {\n    for (const label in AUDIO[groupName]) {\n      found = callback(AUDIO[groupName][label]);\n      if (found) {\n        break;\n      }\n    }\n    if (found) {\n      break;\n    }\n  }\n  return !!found;\n};\nconst isAudioOnly = main => {\n  // we are audio only if we have no main playlists but do\n  // have media group playlists.\n  if (!main || !main.playlists || !main.playlists.length) {\n    // without audio variants or playlists this\n    // is not an audio only main.\n    const found = someAudioVariant(main, variant => variant.playlists && variant.playlists.length || variant.uri);\n    return found;\n  } // if every playlist has only an audio codec it is audio only\n\n  for (let i = 0; i < main.playlists.length; i++) {\n    const playlist = main.playlists[i];\n    const CODECS = playlist.attributes && playlist.attributes.CODECS; // all codecs are audio, this is an audio playlist.\n\n    if (CODECS && CODECS.split(',').every(c => isAudioCodec(c))) {\n      continue;\n    } // playlist is in an audio group it is audio only\n\n    const found = someAudioVariant(main, variant => playlistMatch(playlist, variant));\n    if (found) {\n      continue;\n    } // if we make it here this playlist isn't audio and we\n    // are not audio only\n\n    return false;\n  } // if we make it past every playlist without returning, then\n  // this is an audio only playlist.\n\n  return true;\n}; // exports\n\nvar Playlist = {\n  liveEdgeDelay,\n  duration,\n  seekable,\n  getMediaInfoForTime,\n  isEnabled,\n  isDisabled,\n  isExcluded,\n  isIncompatible,\n  playlistEnd,\n  isAes,\n  hasAttribute,\n  estimateSegmentRequestTime,\n  isLowestEnabledRendition,\n  isAudioOnly,\n  playlistMatch,\n  segmentDurationWithParts\n};\nconst {\n  log\n} = videojs;\nconst createPlaylistID = (index, uri) => {\n  return `${index}-${uri}`;\n}; // default function for creating a group id\n\nconst groupID = (type, group, label) => {\n  return `placeholder-uri-${type}-${group}-${label}`;\n};\n/**\n * Parses a given m3u8 playlist\n *\n * @param {Function} [onwarn]\n *        a function to call when the parser triggers a warning event.\n * @param {Function} [oninfo]\n *        a function to call when the parser triggers an info event.\n * @param {string} manifestString\n *        The downloaded manifest string\n * @param {Object[]} [customTagParsers]\n *        An array of custom tag parsers for the m3u8-parser instance\n * @param {Object[]} [customTagMappers]\n *        An array of custom tag mappers for the m3u8-parser instance\n * @param {boolean} [llhls]\n *        Whether to keep ll-hls features in the manifest after parsing.\n * @return {Object}\n *         The manifest object\n */\n\nconst parseManifest = ({\n  onwarn,\n  oninfo,\n  manifestString,\n  customTagParsers = [],\n  customTagMappers = [],\n  llhls\n}) => {\n  const parser = new Parser();\n  if (onwarn) {\n    parser.on('warn', onwarn);\n  }\n  if (oninfo) {\n    parser.on('info', oninfo);\n  }\n  customTagParsers.forEach(customParser => parser.addParser(customParser));\n  customTagMappers.forEach(mapper => parser.addTagMapper(mapper));\n  parser.push(manifestString);\n  parser.end();\n  const manifest = parser.manifest; // remove llhls features from the parsed manifest\n  // if we don't want llhls support.\n\n  if (!llhls) {\n    ['preloadSegment', 'skip', 'serverControl', 'renditionReports', 'partInf', 'partTargetDuration'].forEach(function (k) {\n      if (manifest.hasOwnProperty(k)) {\n        delete manifest[k];\n      }\n    });\n    if (manifest.segments) {\n      manifest.segments.forEach(function (segment) {\n        ['parts', 'preloadHints'].forEach(function (k) {\n          if (segment.hasOwnProperty(k)) {\n            delete segment[k];\n          }\n        });\n      });\n    }\n  }\n  if (!manifest.targetDuration) {\n    let targetDuration = 10;\n    if (manifest.segments && manifest.segments.length) {\n      targetDuration = manifest.segments.reduce((acc, s) => Math.max(acc, s.duration), 0);\n    }\n    if (onwarn) {\n      onwarn({\n        message: `manifest has no targetDuration defaulting to ${targetDuration}`\n      });\n    }\n    manifest.targetDuration = targetDuration;\n  }\n  const parts = getLastParts(manifest);\n  if (parts.length && !manifest.partTargetDuration) {\n    const partTargetDuration = parts.reduce((acc, p) => Math.max(acc, p.duration), 0);\n    if (onwarn) {\n      onwarn({\n        message: `manifest has no partTargetDuration defaulting to ${partTargetDuration}`\n      });\n      log.error('LL-HLS manifest has parts but lacks required #EXT-X-PART-INF:PART-TARGET value. See https://datatracker.ietf.org/doc/html/draft-pantos-hls-rfc8216bis-09#section-4.4.3.7. Playback is not guaranteed.');\n    }\n    manifest.partTargetDuration = partTargetDuration;\n  }\n  return manifest;\n};\n/**\n * Loops through all supported media groups in main and calls the provided\n * callback for each group\n *\n * @param {Object} main\n *        The parsed main manifest object\n * @param {Function} callback\n *        Callback to call for each media group\n */\n\nconst forEachMediaGroup = (main, callback) => {\n  if (!main.mediaGroups) {\n    return;\n  }\n  ['AUDIO', 'SUBTITLES'].forEach(mediaType => {\n    if (!main.mediaGroups[mediaType]) {\n      return;\n    }\n    for (const groupKey in main.mediaGroups[mediaType]) {\n      for (const labelKey in main.mediaGroups[mediaType][groupKey]) {\n        const mediaProperties = main.mediaGroups[mediaType][groupKey][labelKey];\n        callback(mediaProperties, mediaType, groupKey, labelKey);\n      }\n    }\n  });\n};\n/**\n * Adds properties and attributes to the playlist to keep consistent functionality for\n * playlists throughout VHS.\n *\n * @param {Object} config\n *        Arguments object\n * @param {Object} config.playlist\n *        The media playlist\n * @param {string} [config.uri]\n *        The uri to the media playlist (if media playlist is not from within a main\n *        playlist)\n * @param {string} id\n *        ID to use for the playlist\n */\n\nconst setupMediaPlaylist = ({\n  playlist,\n  uri,\n  id\n}) => {\n  playlist.id = id;\n  playlist.playlistErrors_ = 0;\n  if (uri) {\n    // For media playlists, m3u8-parser does not have access to a URI, as HLS media\n    // playlists do not contain their own source URI, but one is needed for consistency in\n    // VHS.\n    playlist.uri = uri;\n  } // For HLS main playlists, even though certain attributes MUST be defined, the\n  // stream may still be played without them.\n  // For HLS media playlists, m3u8-parser does not attach an attributes object to the\n  // manifest.\n  //\n  // To avoid undefined reference errors through the project, and make the code easier\n  // to write/read, add an empty attributes object for these cases.\n\n  playlist.attributes = playlist.attributes || {};\n};\n/**\n * Adds ID, resolvedUri, and attributes properties to each playlist of the main, where\n * necessary. In addition, creates playlist IDs for each playlist and adds playlist ID to\n * playlist references to the playlists array.\n *\n * @param {Object} main\n *        The main playlist\n */\n\nconst setupMediaPlaylists = main => {\n  let i = main.playlists.length;\n  while (i--) {\n    const playlist = main.playlists[i];\n    setupMediaPlaylist({\n      playlist,\n      id: createPlaylistID(i, playlist.uri)\n    });\n    playlist.resolvedUri = resolveUrl(main.uri, playlist.uri);\n    main.playlists[playlist.id] = playlist; // URI reference added for backwards compatibility\n\n    main.playlists[playlist.uri] = playlist; // Although the spec states an #EXT-X-STREAM-INF tag MUST have a BANDWIDTH attribute,\n    // the stream can be played without it. Although an attributes property may have been\n    // added to the playlist to prevent undefined references, issue a warning to fix the\n    // manifest.\n\n    if (!playlist.attributes.BANDWIDTH) {\n      log.warn('Invalid playlist STREAM-INF detected. Missing BANDWIDTH attribute.');\n    }\n  }\n};\n/**\n * Adds resolvedUri properties to each media group.\n *\n * @param {Object} main\n *        The main playlist\n */\n\nconst resolveMediaGroupUris = main => {\n  forEachMediaGroup(main, properties => {\n    if (properties.uri) {\n      properties.resolvedUri = resolveUrl(main.uri, properties.uri);\n    }\n  });\n};\n/**\n * Creates a main playlist wrapper to insert a sole media playlist into.\n *\n * @param {Object} media\n *        Media playlist\n * @param {string} uri\n *        The media URI\n *\n * @return {Object}\n *         main playlist\n */\n\nconst mainForMedia = (media, uri) => {\n  const id = createPlaylistID(0, uri);\n  const main = {\n    mediaGroups: {\n      'AUDIO': {},\n      'VIDEO': {},\n      'CLOSED-CAPTIONS': {},\n      'SUBTITLES': {}\n    },\n    uri: window$1.location.href,\n    resolvedUri: window$1.location.href,\n    playlists: [{\n      uri,\n      id,\n      resolvedUri: uri,\n      // m3u8-parser does not attach an attributes property to media playlists so make\n      // sure that the property is attached to avoid undefined reference errors\n      attributes: {}\n    }]\n  }; // set up ID reference\n\n  main.playlists[id] = main.playlists[0]; // URI reference added for backwards compatibility\n\n  main.playlists[uri] = main.playlists[0];\n  return main;\n};\n/**\n * Does an in-place update of the main manifest to add updated playlist URI references\n * as well as other properties needed by VHS that aren't included by the parser.\n *\n * @param {Object} main\n *        main manifest object\n * @param {string} uri\n *        The source URI\n * @param {function} createGroupID\n *        A function to determine how to create the groupID for mediaGroups\n */\n\nconst addPropertiesToMain = (main, uri, createGroupID = groupID) => {\n  main.uri = uri;\n  for (let i = 0; i < main.playlists.length; i++) {\n    if (!main.playlists[i].uri) {\n      // Set up phony URIs for the playlists since playlists are referenced by their URIs\n      // throughout VHS, but some formats (e.g., DASH) don't have external URIs\n      // TODO: consider adding dummy URIs in mpd-parser\n      const phonyUri = `placeholder-uri-${i}`;\n      main.playlists[i].uri = phonyUri;\n    }\n  }\n  const audioOnlyMain = isAudioOnly(main);\n  forEachMediaGroup(main, (properties, mediaType, groupKey, labelKey) => {\n    // add a playlist array under properties\n    if (!properties.playlists || !properties.playlists.length) {\n      // If the manifest is audio only and this media group does not have a uri, check\n      // if the media group is located in the main list of playlists. If it is, don't add\n      // placeholder properties as it shouldn't be considered an alternate audio track.\n      if (audioOnlyMain && mediaType === 'AUDIO' && !properties.uri) {\n        for (let i = 0; i < main.playlists.length; i++) {\n          const p = main.playlists[i];\n          if (p.attributes && p.attributes.AUDIO && p.attributes.AUDIO === groupKey) {\n            return;\n          }\n        }\n      }\n      properties.playlists = [_extends({}, properties)];\n    }\n    properties.playlists.forEach(function (p, i) {\n      const groupId = createGroupID(mediaType, groupKey, labelKey, p);\n      const id = createPlaylistID(i, groupId);\n      if (p.uri) {\n        p.resolvedUri = p.resolvedUri || resolveUrl(main.uri, p.uri);\n      } else {\n        // DEPRECATED, this has been added to prevent a breaking change.\n        // previously we only ever had a single media group playlist, so\n        // we mark the first playlist uri without prepending the index as we used to\n        // ideally we would do all of the playlists the same way.\n        p.uri = i === 0 ? groupId : id; // don't resolve a placeholder uri to an absolute url, just use\n        // the placeholder again\n\n        p.resolvedUri = p.uri;\n      }\n      p.id = p.id || id; // add an empty attributes object, all playlists are\n      // expected to have this.\n\n      p.attributes = p.attributes || {}; // setup ID and URI references (URI for backwards compatibility)\n\n      main.playlists[p.id] = p;\n      main.playlists[p.uri] = p;\n    });\n  });\n  setupMediaPlaylists(main);\n  resolveMediaGroupUris(main);\n};\nclass DateRangesStorage {\n  constructor() {\n    this.offset_ = null;\n    this.pendingDateRanges_ = new Map();\n    this.processedDateRanges_ = new Map();\n  }\n  setOffset(segments = []) {\n    // already set\n    if (this.offset_ !== null) {\n      return;\n    } // no segment to process\n\n    if (!segments.length) {\n      return;\n    }\n    const [firstSegment] = segments; // no program date time\n\n    if (firstSegment.programDateTime === undefined) {\n      return;\n    } // Set offset as ProgramDateTime for the very first segment of the very first playlist load:\n\n    this.offset_ = firstSegment.programDateTime / 1000;\n  }\n  setPendingDateRanges(dateRanges = []) {\n    if (!dateRanges.length) {\n      return;\n    }\n    const [dateRange] = dateRanges;\n    const startTime = dateRange.startDate.getTime();\n    this.trimProcessedDateRanges_(startTime);\n    this.pendingDateRanges_ = dateRanges.reduce((map, pendingDateRange) => {\n      map.set(pendingDateRange.id, pendingDateRange);\n      return map;\n    }, new Map());\n  }\n  processDateRange(dateRange) {\n    this.pendingDateRanges_.delete(dateRange.id);\n    this.processedDateRanges_.set(dateRange.id, dateRange);\n  }\n  getDateRangesToProcess() {\n    if (this.offset_ === null) {\n      return [];\n    }\n    const dateRangeClasses = {};\n    const dateRangesToProcess = [];\n    this.pendingDateRanges_.forEach((dateRange, id) => {\n      if (this.processedDateRanges_.has(id)) {\n        return;\n      }\n      dateRange.startTime = dateRange.startDate.getTime() / 1000 - this.offset_;\n      dateRange.processDateRange = () => this.processDateRange(dateRange);\n      dateRangesToProcess.push(dateRange);\n      if (!dateRange.class) {\n        return;\n      }\n      if (dateRangeClasses[dateRange.class]) {\n        const length = dateRangeClasses[dateRange.class].push(dateRange);\n        dateRange.classListIndex = length - 1;\n      } else {\n        dateRangeClasses[dateRange.class] = [dateRange];\n        dateRange.classListIndex = 0;\n      }\n    });\n    for (const dateRange of dateRangesToProcess) {\n      const classList = dateRangeClasses[dateRange.class] || [];\n      if (dateRange.endDate) {\n        dateRange.endTime = dateRange.endDate.getTime() / 1000 - this.offset_;\n      } else if (dateRange.endOnNext && classList[dateRange.classListIndex + 1]) {\n        dateRange.endTime = classList[dateRange.classListIndex + 1].startTime;\n      } else if (dateRange.duration) {\n        dateRange.endTime = dateRange.startTime + dateRange.duration;\n      } else if (dateRange.plannedDuration) {\n        dateRange.endTime = dateRange.startTime + dateRange.plannedDuration;\n      } else {\n        dateRange.endTime = dateRange.startTime;\n      }\n    }\n    return dateRangesToProcess;\n  }\n  trimProcessedDateRanges_(startTime) {\n    const copy = new Map(this.processedDateRanges_);\n    copy.forEach((dateRange, id) => {\n      if (dateRange.startDate.getTime() < startTime) {\n        this.processedDateRanges_.delete(id);\n      }\n    });\n  }\n}\nconst {\n  EventTarget: EventTarget$1\n} = videojs;\nconst addLLHLSQueryDirectives = (uri, media) => {\n  if (media.endList || !media.serverControl) {\n    return uri;\n  }\n  const parameters = {};\n  if (media.serverControl.canBlockReload) {\n    const {\n      preloadSegment\n    } = media; // next msn is a zero based value, length is not.\n\n    let nextMSN = media.mediaSequence + media.segments.length; // If preload segment has parts then it is likely\n    // that we are going to request a part of that preload segment.\n    // the logic below is used to determine that.\n\n    if (preloadSegment) {\n      const parts = preloadSegment.parts || []; // _HLS_part is a zero based index\n\n      const nextPart = getKnownPartCount(media) - 1; // if nextPart is > -1 and not equal to just the\n      // length of parts, then we know we had part preload hints\n      // and we need to add the _HLS_part= query\n\n      if (nextPart > -1 && nextPart !== parts.length - 1) {\n        // add existing parts to our preload hints\n        // eslint-disable-next-line\n        parameters._HLS_part = nextPart;\n      } // this if statement makes sure that we request the msn\n      // of the preload segment if:\n      // 1. the preload segment had parts (and was not yet a full segment)\n      //    but was added to our segments array\n      // 2. the preload segment had preload hints for parts that are not in\n      //    the manifest yet.\n      // in all other cases we want the segment after the preload segment\n      // which will be given by using media.segments.length because it is 1 based\n      // rather than 0 based.\n\n      if (nextPart > -1 || parts.length) {\n        nextMSN--;\n      }\n    } // add _HLS_msn= in front of any _HLS_part query\n    // eslint-disable-next-line\n\n    parameters._HLS_msn = nextMSN;\n  }\n  if (media.serverControl && media.serverControl.canSkipUntil) {\n    // add _HLS_skip= infront of all other queries.\n    // eslint-disable-next-line\n    parameters._HLS_skip = media.serverControl.canSkipDateranges ? 'v2' : 'YES';\n  }\n  if (Object.keys(parameters).length) {\n    const parsedUri = new window$1.URL(uri);\n    ['_HLS_skip', '_HLS_msn', '_HLS_part'].forEach(function (name) {\n      if (!parameters.hasOwnProperty(name)) {\n        return;\n      }\n      parsedUri.searchParams.set(name, parameters[name]);\n    });\n    uri = parsedUri.toString();\n  }\n  return uri;\n};\n/**\n * Returns a new segment object with properties and\n * the parts array merged.\n *\n * @param {Object} a the old segment\n * @param {Object} b the new segment\n *\n * @return {Object} the merged segment\n */\n\nconst updateSegment = (a, b) => {\n  if (!a) {\n    return b;\n  }\n  const result = merge(a, b); // if only the old segment has preload hints\n  // and the new one does not, remove preload hints.\n\n  if (a.preloadHints && !b.preloadHints) {\n    delete result.preloadHints;\n  } // if only the old segment has parts\n  // then the parts are no longer valid\n\n  if (a.parts && !b.parts) {\n    delete result.parts; // if both segments have parts\n    // copy part propeties from the old segment\n    // to the new one.\n  } else if (a.parts && b.parts) {\n    for (let i = 0; i < b.parts.length; i++) {\n      if (a.parts && a.parts[i]) {\n        result.parts[i] = merge(a.parts[i], b.parts[i]);\n      }\n    }\n  } // set skipped to false for segments that have\n  // have had information merged from the old segment.\n\n  if (!a.skipped && b.skipped) {\n    result.skipped = false;\n  } // set preload to false for segments that have\n  // had information added in the new segment.\n\n  if (a.preload && !b.preload) {\n    result.preload = false;\n  }\n  return result;\n};\n/**\n * Returns a new array of segments that is the result of merging\n * properties from an older list of segments onto an updated\n * list. No properties on the updated playlist will be ovewritten.\n *\n * @param {Array} original the outdated list of segments\n * @param {Array} update the updated list of segments\n * @param {number=} offset the index of the first update\n * segment in the original segment list. For non-live playlists,\n * this should always be zero and does not need to be\n * specified. For live playlists, it should be the difference\n * between the media sequence numbers in the original and updated\n * playlists.\n * @return {Array} a list of merged segment objects\n */\n\nconst updateSegments = (original, update, offset) => {\n  const oldSegments = original.slice();\n  const newSegments = update.slice();\n  offset = offset || 0;\n  const result = [];\n  let currentMap;\n  for (let newIndex = 0; newIndex < newSegments.length; newIndex++) {\n    const oldSegment = oldSegments[newIndex + offset];\n    const newSegment = newSegments[newIndex];\n    if (oldSegment) {\n      currentMap = oldSegment.map || currentMap;\n      result.push(updateSegment(oldSegment, newSegment));\n    } else {\n      // carry over map to new segment if it is missing\n      if (currentMap && !newSegment.map) {\n        newSegment.map = currentMap;\n      }\n      result.push(newSegment);\n    }\n  }\n  return result;\n};\nconst resolveSegmentUris = (segment, baseUri) => {\n  // preloadSegment will not have a uri at all\n  // as the segment isn't actually in the manifest yet, only parts\n  if (!segment.resolvedUri && segment.uri) {\n    segment.resolvedUri = resolveUrl(baseUri, segment.uri);\n  }\n  if (segment.key && !segment.key.resolvedUri) {\n    segment.key.resolvedUri = resolveUrl(baseUri, segment.key.uri);\n  }\n  if (segment.map && !segment.map.resolvedUri) {\n    segment.map.resolvedUri = resolveUrl(baseUri, segment.map.uri);\n  }\n  if (segment.map && segment.map.key && !segment.map.key.resolvedUri) {\n    segment.map.key.resolvedUri = resolveUrl(baseUri, segment.map.key.uri);\n  }\n  if (segment.parts && segment.parts.length) {\n    segment.parts.forEach(p => {\n      if (p.resolvedUri) {\n        return;\n      }\n      p.resolvedUri = resolveUrl(baseUri, p.uri);\n    });\n  }\n  if (segment.preloadHints && segment.preloadHints.length) {\n    segment.preloadHints.forEach(p => {\n      if (p.resolvedUri) {\n        return;\n      }\n      p.resolvedUri = resolveUrl(baseUri, p.uri);\n    });\n  }\n};\nconst getAllSegments = function (media) {\n  const segments = media.segments || [];\n  const preloadSegment = media.preloadSegment; // a preloadSegment with only preloadHints is not currently\n  // a usable segment, only include a preloadSegment that has\n  // parts.\n\n  if (preloadSegment && preloadSegment.parts && preloadSegment.parts.length) {\n    // if preloadHints has a MAP that means that the\n    // init segment is going to change. We cannot use any of the parts\n    // from this preload segment.\n    if (preloadSegment.preloadHints) {\n      for (let i = 0; i < preloadSegment.preloadHints.length; i++) {\n        if (preloadSegment.preloadHints[i].type === 'MAP') {\n          return segments;\n        }\n      }\n    } // set the duration for our preload segment to target duration.\n\n    preloadSegment.duration = media.targetDuration;\n    preloadSegment.preload = true;\n    segments.push(preloadSegment);\n  }\n  return segments;\n}; // consider the playlist unchanged if the playlist object is the same or\n// the number of segments is equal, the media sequence number is unchanged,\n// and this playlist hasn't become the end of the playlist\n\nconst isPlaylistUnchanged = (a, b) => a === b || a.segments && b.segments && a.segments.length === b.segments.length && a.endList === b.endList && a.mediaSequence === b.mediaSequence && a.preloadSegment === b.preloadSegment;\n/**\n  * Returns a new main playlist that is the result of merging an\n  * updated media playlist into the original version. If the\n  * updated media playlist does not match any of the playlist\n  * entries in the original main playlist, null is returned.\n  *\n  * @param {Object} main a parsed main M3U8 object\n  * @param {Object} media a parsed media M3U8 object\n  * @return {Object} a new object that represents the original\n  * main playlist with the updated media playlist merged in, or\n  * null if the merge produced no change.\n  */\n\nconst updateMain$1 = (main, newMedia, unchangedCheck = isPlaylistUnchanged) => {\n  const result = merge(main, {});\n  const oldMedia = result.playlists[newMedia.id];\n  if (!oldMedia) {\n    return null;\n  }\n  if (unchangedCheck(oldMedia, newMedia)) {\n    return null;\n  }\n  newMedia.segments = getAllSegments(newMedia);\n  const mergedPlaylist = merge(oldMedia, newMedia); // always use the new media's preload segment\n\n  if (mergedPlaylist.preloadSegment && !newMedia.preloadSegment) {\n    delete mergedPlaylist.preloadSegment;\n  } // if the update could overlap existing segment information, merge the two segment lists\n\n  if (oldMedia.segments) {\n    if (newMedia.skip) {\n      newMedia.segments = newMedia.segments || []; // add back in objects for skipped segments, so that we merge\n      // old properties into the new segments\n\n      for (let i = 0; i < newMedia.skip.skippedSegments; i++) {\n        newMedia.segments.unshift({\n          skipped: true\n        });\n      }\n    }\n    mergedPlaylist.segments = updateSegments(oldMedia.segments, newMedia.segments, newMedia.mediaSequence - oldMedia.mediaSequence);\n  } // resolve any segment URIs to prevent us from having to do it later\n\n  mergedPlaylist.segments.forEach(segment => {\n    resolveSegmentUris(segment, mergedPlaylist.resolvedUri);\n  }); // TODO Right now in the playlists array there are two references to each playlist, one\n  // that is referenced by index, and one by URI. The index reference may no longer be\n  // necessary.\n\n  for (let i = 0; i < result.playlists.length; i++) {\n    if (result.playlists[i].id === newMedia.id) {\n      result.playlists[i] = mergedPlaylist;\n    }\n  }\n  result.playlists[newMedia.id] = mergedPlaylist; // URI reference added for backwards compatibility\n\n  result.playlists[newMedia.uri] = mergedPlaylist; // update media group playlist references.\n\n  forEachMediaGroup(main, (properties, mediaType, groupKey, labelKey) => {\n    if (!properties.playlists) {\n      return;\n    }\n    for (let i = 0; i < properties.playlists.length; i++) {\n      if (newMedia.id === properties.playlists[i].id) {\n        properties.playlists[i] = mergedPlaylist;\n      }\n    }\n  });\n  return result;\n};\n/**\n * Calculates the time to wait before refreshing a live playlist\n *\n * @param {Object} media\n *        The current media\n * @param {boolean} update\n *        True if there were any updates from the last refresh, false otherwise\n * @return {number}\n *         The time in ms to wait before refreshing the live playlist\n */\n\nconst refreshDelay = (media, update) => {\n  const segments = media.segments || [];\n  const lastSegment = segments[segments.length - 1];\n  const lastPart = lastSegment && lastSegment.parts && lastSegment.parts[lastSegment.parts.length - 1];\n  const lastDuration = lastPart && lastPart.duration || lastSegment && lastSegment.duration;\n  if (update && lastDuration) {\n    return lastDuration * 1000;\n  } // if the playlist is unchanged since the last reload or last segment duration\n  // cannot be determined, try again after half the target duration\n\n  return (media.partTargetDuration || media.targetDuration || 10) * 500;\n};\n/**\n * Load a playlist from a remote location\n *\n * @class PlaylistLoader\n * @extends Stream\n * @param {string|Object} src url or object of manifest\n * @param {boolean} withCredentials the withCredentials xhr option\n * @class\n */\n\nclass PlaylistLoader extends EventTarget$1 {\n  constructor(src, vhs, options = {}) {\n    super();\n    if (!src) {\n      throw new Error('A non-empty playlist URL or object is required');\n    }\n    this.logger_ = logger('PlaylistLoader');\n    const {\n      withCredentials = false\n    } = options;\n    this.src = src;\n    this.vhs_ = vhs;\n    this.withCredentials = withCredentials;\n    this.addDateRangesToTextTrack_ = options.addDateRangesToTextTrack;\n    const vhsOptions = vhs.options_;\n    this.customTagParsers = vhsOptions && vhsOptions.customTagParsers || [];\n    this.customTagMappers = vhsOptions && vhsOptions.customTagMappers || [];\n    this.llhls = vhsOptions && vhsOptions.llhls;\n    this.dateRangesStorage_ = new DateRangesStorage(); // initialize the loader state\n\n    this.state = 'HAVE_NOTHING'; // live playlist staleness timeout\n\n    this.handleMediaupdatetimeout_ = this.handleMediaupdatetimeout_.bind(this);\n    this.on('mediaupdatetimeout', this.handleMediaupdatetimeout_);\n    this.on('loadedplaylist', this.handleLoadedPlaylist_.bind(this));\n  }\n  handleLoadedPlaylist_() {\n    const mediaPlaylist = this.media();\n    if (!mediaPlaylist) {\n      return;\n    }\n    this.dateRangesStorage_.setOffset(mediaPlaylist.segments);\n    this.dateRangesStorage_.setPendingDateRanges(mediaPlaylist.dateRanges);\n    const availableDateRanges = this.dateRangesStorage_.getDateRangesToProcess();\n    if (!availableDateRanges.length || !this.addDateRangesToTextTrack_) {\n      return;\n    }\n    this.addDateRangesToTextTrack_(availableDateRanges);\n  }\n  handleMediaupdatetimeout_() {\n    if (this.state !== 'HAVE_METADATA') {\n      // only refresh the media playlist if no other activity is going on\n      return;\n    }\n    const media = this.media();\n    let uri = resolveUrl(this.main.uri, media.uri);\n    if (this.llhls) {\n      uri = addLLHLSQueryDirectives(uri, media);\n    }\n    this.state = 'HAVE_CURRENT_METADATA';\n    this.request = this.vhs_.xhr({\n      uri,\n      withCredentials: this.withCredentials\n    }, (error, req) => {\n      // disposed\n      if (!this.request) {\n        return;\n      }\n      if (error) {\n        return this.playlistRequestError(this.request, this.media(), 'HAVE_METADATA');\n      }\n      this.haveMetadata({\n        playlistString: this.request.responseText,\n        url: this.media().uri,\n        id: this.media().id\n      });\n    });\n  }\n  playlistRequestError(xhr, playlist, startingState) {\n    const {\n      uri,\n      id\n    } = playlist; // any in-flight request is now finished\n\n    this.request = null;\n    if (startingState) {\n      this.state = startingState;\n    }\n    this.error = {\n      playlist: this.main.playlists[id],\n      status: xhr.status,\n      message: `HLS playlist request error at URL: ${uri}.`,\n      responseText: xhr.responseText,\n      code: xhr.status >= 500 ? 4 : 2\n    };\n    this.trigger('error');\n  }\n  parseManifest_({\n    url,\n    manifestString\n  }) {\n    return parseManifest({\n      onwarn: ({\n        message\n      }) => this.logger_(`m3u8-parser warn for ${url}: ${message}`),\n      oninfo: ({\n        message\n      }) => this.logger_(`m3u8-parser info for ${url}: ${message}`),\n      manifestString,\n      customTagParsers: this.customTagParsers,\n      customTagMappers: this.customTagMappers,\n      llhls: this.llhls\n    });\n  }\n  /**\n   * Update the playlist loader's state in response to a new or updated playlist.\n   *\n   * @param {string} [playlistString]\n   *        Playlist string (if playlistObject is not provided)\n   * @param {Object} [playlistObject]\n   *        Playlist object (if playlistString is not provided)\n   * @param {string} url\n   *        URL of playlist\n   * @param {string} id\n   *        ID to use for playlist\n   */\n\n  haveMetadata({\n    playlistString,\n    playlistObject,\n    url,\n    id\n  }) {\n    // any in-flight request is now finished\n    this.request = null;\n    this.state = 'HAVE_METADATA';\n    const playlist = playlistObject || this.parseManifest_({\n      url,\n      manifestString: playlistString\n    });\n    playlist.lastRequest = Date.now();\n    setupMediaPlaylist({\n      playlist,\n      uri: url,\n      id\n    }); // merge this playlist into the main manifest\n\n    const update = updateMain$1(this.main, playlist);\n    this.targetDuration = playlist.partTargetDuration || playlist.targetDuration;\n    this.pendingMedia_ = null;\n    if (update) {\n      this.main = update;\n      this.media_ = this.main.playlists[id];\n    } else {\n      this.trigger('playlistunchanged');\n    }\n    this.updateMediaUpdateTimeout_(refreshDelay(this.media(), !!update));\n    this.trigger('loadedplaylist');\n  }\n  /**\n    * Abort any outstanding work and clean up.\n    */\n\n  dispose() {\n    this.trigger('dispose');\n    this.stopRequest();\n    window$1.clearTimeout(this.mediaUpdateTimeout);\n    window$1.clearTimeout(this.finalRenditionTimeout);\n    this.dateRangesStorage_ = new DateRangesStorage();\n    this.off();\n  }\n  stopRequest() {\n    if (this.request) {\n      const oldRequest = this.request;\n      this.request = null;\n      oldRequest.onreadystatechange = null;\n      oldRequest.abort();\n    }\n  }\n  /**\n    * When called without any arguments, returns the currently\n    * active media playlist. When called with a single argument,\n    * triggers the playlist loader to asynchronously switch to the\n    * specified media playlist. Calling this method while the\n    * loader is in the HAVE_NOTHING causes an error to be emitted\n    * but otherwise has no effect.\n    *\n    * @param {Object=} playlist the parsed media playlist\n    * object to switch to\n    * @param {boolean=} shouldDelay whether we should delay the request by half target duration\n    *\n    * @return {Playlist} the current loaded media\n    */\n\n  media(playlist, shouldDelay) {\n    // getter\n    if (!playlist) {\n      return this.media_;\n    } // setter\n\n    if (this.state === 'HAVE_NOTHING') {\n      throw new Error('Cannot switch media playlist from ' + this.state);\n    } // find the playlist object if the target playlist has been\n    // specified by URI\n\n    if (typeof playlist === 'string') {\n      if (!this.main.playlists[playlist]) {\n        throw new Error('Unknown playlist URI: ' + playlist);\n      }\n      playlist = this.main.playlists[playlist];\n    }\n    window$1.clearTimeout(this.finalRenditionTimeout);\n    if (shouldDelay) {\n      const delay = (playlist.partTargetDuration || playlist.targetDuration) / 2 * 1000 || 5 * 1000;\n      this.finalRenditionTimeout = window$1.setTimeout(this.media.bind(this, playlist, false), delay);\n      return;\n    }\n    const startingState = this.state;\n    const mediaChange = !this.media_ || playlist.id !== this.media_.id;\n    const mainPlaylistRef = this.main.playlists[playlist.id]; // switch to fully loaded playlists immediately\n\n    if (mainPlaylistRef && mainPlaylistRef.endList ||\n    // handle the case of a playlist object (e.g., if using vhs-json with a resolved\n    // media playlist or, for the case of demuxed audio, a resolved audio media group)\n    playlist.endList && playlist.segments.length) {\n      // abort outstanding playlist requests\n      if (this.request) {\n        this.request.onreadystatechange = null;\n        this.request.abort();\n        this.request = null;\n      }\n      this.state = 'HAVE_METADATA';\n      this.media_ = playlist; // trigger media change if the active media has been updated\n\n      if (mediaChange) {\n        this.trigger('mediachanging');\n        if (startingState === 'HAVE_MAIN_MANIFEST') {\n          // The initial playlist was a main manifest, and the first media selected was\n          // also provided (in the form of a resolved playlist object) as part of the\n          // source object (rather than just a URL). Therefore, since the media playlist\n          // doesn't need to be requested, loadedmetadata won't trigger as part of the\n          // normal flow, and needs an explicit trigger here.\n          this.trigger('loadedmetadata');\n        } else {\n          this.trigger('mediachange');\n        }\n      }\n      return;\n    } // We update/set the timeout here so that live playlists\n    // that are not a media change will \"start\" the loader as expected.\n    // We expect that this function will start the media update timeout\n    // cycle again. This also prevents a playlist switch failure from\n    // causing us to stall during live.\n\n    this.updateMediaUpdateTimeout_(refreshDelay(playlist, true)); // switching to the active playlist is a no-op\n\n    if (!mediaChange) {\n      return;\n    }\n    this.state = 'SWITCHING_MEDIA'; // there is already an outstanding playlist request\n\n    if (this.request) {\n      if (playlist.resolvedUri === this.request.url) {\n        // requesting to switch to the same playlist multiple times\n        // has no effect after the first\n        return;\n      }\n      this.request.onreadystatechange = null;\n      this.request.abort();\n      this.request = null;\n    } // request the new playlist\n\n    if (this.media_) {\n      this.trigger('mediachanging');\n    }\n    this.pendingMedia_ = playlist;\n    this.request = this.vhs_.xhr({\n      uri: playlist.resolvedUri,\n      withCredentials: this.withCredentials\n    }, (error, req) => {\n      // disposed\n      if (!this.request) {\n        return;\n      }\n      playlist.lastRequest = Date.now();\n      playlist.resolvedUri = resolveManifestRedirect(playlist.resolvedUri, req);\n      if (error) {\n        return this.playlistRequestError(this.request, playlist, startingState);\n      }\n      this.haveMetadata({\n        playlistString: req.responseText,\n        url: playlist.uri,\n        id: playlist.id\n      }); // fire loadedmetadata the first time a media playlist is loaded\n\n      if (startingState === 'HAVE_MAIN_MANIFEST') {\n        this.trigger('loadedmetadata');\n      } else {\n        this.trigger('mediachange');\n      }\n    });\n  }\n  /**\n   * pause loading of the playlist\n   */\n\n  pause() {\n    if (this.mediaUpdateTimeout) {\n      window$1.clearTimeout(this.mediaUpdateTimeout);\n      this.mediaUpdateTimeout = null;\n    }\n    this.stopRequest();\n    if (this.state === 'HAVE_NOTHING') {\n      // If we pause the loader before any data has been retrieved, its as if we never\n      // started, so reset to an unstarted state.\n      this.started = false;\n    } // Need to restore state now that no activity is happening\n\n    if (this.state === 'SWITCHING_MEDIA') {\n      // if the loader was in the process of switching media, it should either return to\n      // HAVE_MAIN_MANIFEST or HAVE_METADATA depending on if the loader has loaded a media\n      // playlist yet. This is determined by the existence of loader.media_\n      if (this.media_) {\n        this.state = 'HAVE_METADATA';\n      } else {\n        this.state = 'HAVE_MAIN_MANIFEST';\n      }\n    } else if (this.state === 'HAVE_CURRENT_METADATA') {\n      this.state = 'HAVE_METADATA';\n    }\n  }\n  /**\n   * start loading of the playlist\n   */\n\n  load(shouldDelay) {\n    if (this.mediaUpdateTimeout) {\n      window$1.clearTimeout(this.mediaUpdateTimeout);\n      this.mediaUpdateTimeout = null;\n    }\n    const media = this.media();\n    if (shouldDelay) {\n      const delay = media ? (media.partTargetDuration || media.targetDuration) / 2 * 1000 : 5 * 1000;\n      this.mediaUpdateTimeout = window$1.setTimeout(() => {\n        this.mediaUpdateTimeout = null;\n        this.load();\n      }, delay);\n      return;\n    }\n    if (!this.started) {\n      this.start();\n      return;\n    }\n    if (media && !media.endList) {\n      this.trigger('mediaupdatetimeout');\n    } else {\n      this.trigger('loadedplaylist');\n    }\n  }\n  updateMediaUpdateTimeout_(delay) {\n    if (this.mediaUpdateTimeout) {\n      window$1.clearTimeout(this.mediaUpdateTimeout);\n      this.mediaUpdateTimeout = null;\n    } // we only have use mediaupdatetimeout for live playlists.\n\n    if (!this.media() || this.media().endList) {\n      return;\n    }\n    this.mediaUpdateTimeout = window$1.setTimeout(() => {\n      this.mediaUpdateTimeout = null;\n      this.trigger('mediaupdatetimeout');\n      this.updateMediaUpdateTimeout_(delay);\n    }, delay);\n  }\n  /**\n   * start loading of the playlist\n   */\n\n  start() {\n    this.started = true;\n    if (typeof this.src === 'object') {\n      // in the case of an entirely constructed manifest object (meaning there's no actual\n      // manifest on a server), default the uri to the page's href\n      if (!this.src.uri) {\n        this.src.uri = window$1.location.href;\n      } // resolvedUri is added on internally after the initial request. Since there's no\n      // request for pre-resolved manifests, add on resolvedUri here.\n\n      this.src.resolvedUri = this.src.uri; // Since a manifest object was passed in as the source (instead of a URL), the first\n      // request can be skipped (since the top level of the manifest, at a minimum, is\n      // already available as a parsed manifest object). However, if the manifest object\n      // represents a main playlist, some media playlists may need to be resolved before\n      // the starting segment list is available. Therefore, go directly to setup of the\n      // initial playlist, and let the normal flow continue from there.\n      //\n      // Note that the call to setup is asynchronous, as other sections of VHS may assume\n      // that the first request is asynchronous.\n\n      setTimeout(() => {\n        this.setupInitialPlaylist(this.src);\n      }, 0);\n      return;\n    } // request the specified URL\n\n    this.request = this.vhs_.xhr({\n      uri: this.src,\n      withCredentials: this.withCredentials\n    }, (error, req) => {\n      // disposed\n      if (!this.request) {\n        return;\n      } // clear the loader's request reference\n\n      this.request = null;\n      if (error) {\n        this.error = {\n          status: req.status,\n          message: `HLS playlist request error at URL: ${this.src}.`,\n          responseText: req.responseText,\n          // MEDIA_ERR_NETWORK\n          code: 2\n        };\n        if (this.state === 'HAVE_NOTHING') {\n          this.started = false;\n        }\n        return this.trigger('error');\n      }\n      this.src = resolveManifestRedirect(this.src, req);\n      const manifest = this.parseManifest_({\n        manifestString: req.responseText,\n        url: this.src\n      });\n      this.setupInitialPlaylist(manifest);\n    });\n  }\n  srcUri() {\n    return typeof this.src === 'string' ? this.src : this.src.uri;\n  }\n  /**\n   * Given a manifest object that's either a main or media playlist, trigger the proper\n   * events and set the state of the playlist loader.\n   *\n   * If the manifest object represents a main playlist, `loadedplaylist` will be\n   * triggered to allow listeners to select a playlist. If none is selected, the loader\n   * will default to the first one in the playlists array.\n   *\n   * If the manifest object represents a media playlist, `loadedplaylist` will be\n   * triggered followed by `loadedmetadata`, as the only available playlist is loaded.\n   *\n   * In the case of a media playlist, a main playlist object wrapper with one playlist\n   * will be created so that all logic can handle playlists in the same fashion (as an\n   * assumed manifest object schema).\n   *\n   * @param {Object} manifest\n   *        The parsed manifest object\n   */\n\n  setupInitialPlaylist(manifest) {\n    this.state = 'HAVE_MAIN_MANIFEST';\n    if (manifest.playlists) {\n      this.main = manifest;\n      addPropertiesToMain(this.main, this.srcUri()); // If the initial main playlist has playlists wtih segments already resolved,\n      // then resolve URIs in advance, as they are usually done after a playlist request,\n      // which may not happen if the playlist is resolved.\n\n      manifest.playlists.forEach(playlist => {\n        playlist.segments = getAllSegments(playlist);\n        playlist.segments.forEach(segment => {\n          resolveSegmentUris(segment, playlist.resolvedUri);\n        });\n      });\n      this.trigger('loadedplaylist');\n      if (!this.request) {\n        // no media playlist was specifically selected so start\n        // from the first listed one\n        this.media(this.main.playlists[0]);\n      }\n      return;\n    } // In order to support media playlists passed in as vhs-json, the case where the uri\n    // is not provided as part of the manifest should be considered, and an appropriate\n    // default used.\n\n    const uri = this.srcUri() || window$1.location.href;\n    this.main = mainForMedia(manifest, uri);\n    this.haveMetadata({\n      playlistObject: manifest,\n      url: uri,\n      id: this.main.playlists[0].id\n    });\n    this.trigger('loadedmetadata');\n  }\n  /**\n   * Updates or deletes a preexisting pathway clone.\n   * Ensures that all playlists related to the old pathway clone are\n   * either updated or deleted.\n   *\n   * @param {Object} clone On update, the pathway clone object for the newly updated pathway clone.\n   *        On delete, the old pathway clone object to be deleted.\n   * @param {boolean} isUpdate True if the pathway is to be updated,\n   *        false if it is meant to be deleted.\n   */\n\n  updateOrDeleteClone(clone, isUpdate) {\n    const main = this.main;\n    const pathway = clone.ID;\n    let i = main.playlists.length; // Iterate backwards through the playlist so we can remove playlists if necessary.\n\n    while (i--) {\n      const p = main.playlists[i];\n      if (p.attributes['PATHWAY-ID'] === pathway) {\n        const oldPlaylistUri = p.resolvedUri;\n        const oldPlaylistId = p.id; // update the indexed playlist and add new playlists by ID and URI\n\n        if (isUpdate) {\n          const newPlaylistUri = this.createCloneURI_(p.resolvedUri, clone);\n          const newPlaylistId = createPlaylistID(pathway, newPlaylistUri);\n          const attributes = this.createCloneAttributes_(pathway, p.attributes);\n          const updatedPlaylist = this.createClonePlaylist_(p, newPlaylistId, clone, attributes);\n          main.playlists[i] = updatedPlaylist;\n          main.playlists[newPlaylistId] = updatedPlaylist;\n          main.playlists[newPlaylistUri] = updatedPlaylist;\n        } else {\n          // Remove the indexed playlist.\n          main.playlists.splice(i, 1);\n        } // Remove playlists by the old ID and URI.\n\n        delete main.playlists[oldPlaylistId];\n        delete main.playlists[oldPlaylistUri];\n      }\n    }\n    this.updateOrDeleteCloneMedia(clone, isUpdate);\n  }\n  /**\n   * Updates or deletes media data based on the pathway clone object.\n   * Due to the complexity of the media groups and playlists, in all cases\n   * we remove all of the old media groups and playlists.\n   * On updates, we then create new media groups and playlists based on the\n   * new pathway clone object.\n   *\n   * @param {Object} clone The pathway clone object for the newly updated pathway clone.\n   * @param {boolean} isUpdate True if the pathway is to be updated,\n   *        false if it is meant to be deleted.\n   */\n\n  updateOrDeleteCloneMedia(clone, isUpdate) {\n    const main = this.main;\n    const id = clone.ID;\n    ['AUDIO', 'SUBTITLES', 'CLOSED-CAPTIONS'].forEach(mediaType => {\n      if (!main.mediaGroups[mediaType] || !main.mediaGroups[mediaType][id]) {\n        return;\n      }\n      for (const groupKey in main.mediaGroups[mediaType]) {\n        // Remove all media playlists for the media group for this pathway clone.\n        if (groupKey === id) {\n          for (const labelKey in main.mediaGroups[mediaType][groupKey]) {\n            const oldMedia = main.mediaGroups[mediaType][groupKey][labelKey];\n            oldMedia.playlists.forEach((p, i) => {\n              const oldMediaPlaylist = main.playlists[p.id];\n              const oldPlaylistId = oldMediaPlaylist.id;\n              const oldPlaylistUri = oldMediaPlaylist.resolvedUri;\n              delete main.playlists[oldPlaylistId];\n              delete main.playlists[oldPlaylistUri];\n            });\n          } // Delete the old media group.\n\n          delete main.mediaGroups[mediaType][groupKey];\n        }\n      }\n    }); // Create the new media groups and playlists if there is an update.\n\n    if (isUpdate) {\n      this.createClonedMediaGroups_(clone);\n    }\n  }\n  /**\n   * Given a pathway clone object, clones all necessary playlists.\n   *\n   * @param {Object} clone The pathway clone object.\n   * @param {Object} basePlaylist The original playlist to clone from.\n   */\n\n  addClonePathway(clone, basePlaylist = {}) {\n    const main = this.main;\n    const index = main.playlists.length;\n    const uri = this.createCloneURI_(basePlaylist.resolvedUri, clone);\n    const playlistId = createPlaylistID(clone.ID, uri);\n    const attributes = this.createCloneAttributes_(clone.ID, basePlaylist.attributes);\n    const playlist = this.createClonePlaylist_(basePlaylist, playlistId, clone, attributes);\n    main.playlists[index] = playlist; // add playlist by ID and URI\n\n    main.playlists[playlistId] = playlist;\n    main.playlists[uri] = playlist;\n    this.createClonedMediaGroups_(clone);\n  }\n  /**\n   * Given a pathway clone object we create clones of all media.\n   * In this function, all necessary information and updated playlists\n   * are added to the `mediaGroup` object.\n   * Playlists are also added to the `playlists` array so the media groups\n   * will be properly linked.\n   *\n   * @param {Object} clone The pathway clone object.\n   */\n\n  createClonedMediaGroups_(clone) {\n    const id = clone.ID;\n    const baseID = clone['BASE-ID'];\n    const main = this.main;\n    ['AUDIO', 'SUBTITLES', 'CLOSED-CAPTIONS'].forEach(mediaType => {\n      // If the media type doesn't exist, or there is already a clone, skip\n      // to the next media type.\n      if (!main.mediaGroups[mediaType] || main.mediaGroups[mediaType][id]) {\n        return;\n      }\n      for (const groupKey in main.mediaGroups[mediaType]) {\n        if (groupKey === baseID) {\n          // Create the group.\n          main.mediaGroups[mediaType][id] = {};\n        } else {\n          // There is no need to iterate over label keys in this case.\n          continue;\n        }\n        for (const labelKey in main.mediaGroups[mediaType][groupKey]) {\n          const oldMedia = main.mediaGroups[mediaType][groupKey][labelKey];\n          main.mediaGroups[mediaType][id][labelKey] = _extends({}, oldMedia);\n          const newMedia = main.mediaGroups[mediaType][id][labelKey]; // update URIs on the media\n\n          const newUri = this.createCloneURI_(oldMedia.resolvedUri, clone);\n          newMedia.resolvedUri = newUri;\n          newMedia.uri = newUri; // Reset playlists in the new media group.\n\n          newMedia.playlists = []; // Create new playlists in the newly cloned media group.\n\n          oldMedia.playlists.forEach((p, i) => {\n            const oldMediaPlaylist = main.playlists[p.id];\n            const group = groupID(mediaType, id, labelKey);\n            const newPlaylistID = createPlaylistID(id, group); // Check to see if it already exists\n\n            if (oldMediaPlaylist && !main.playlists[newPlaylistID]) {\n              const newMediaPlaylist = this.createClonePlaylist_(oldMediaPlaylist, newPlaylistID, clone);\n              const newPlaylistUri = newMediaPlaylist.resolvedUri;\n              main.playlists[newPlaylistID] = newMediaPlaylist;\n              main.playlists[newPlaylistUri] = newMediaPlaylist;\n            }\n            newMedia.playlists[i] = this.createClonePlaylist_(p, newPlaylistID, clone);\n          });\n        }\n      }\n    });\n  }\n  /**\n   * Using the original playlist to be cloned, and the pathway clone object\n   * information, we create a new playlist.\n   *\n   * @param {Object} basePlaylist  The original playlist to be cloned from.\n   * @param {string} id The desired id of the newly cloned playlist.\n   * @param {Object} clone The pathway clone object.\n   * @param {Object} attributes An optional object to populate the `attributes` property in the playlist.\n   *\n   * @return {Object} The combined cloned playlist.\n   */\n\n  createClonePlaylist_(basePlaylist, id, clone, attributes) {\n    const uri = this.createCloneURI_(basePlaylist.resolvedUri, clone);\n    const newProps = {\n      resolvedUri: uri,\n      uri,\n      id\n    }; // Remove all segments from previous playlist in the clone.\n\n    if (basePlaylist.segments) {\n      newProps.segments = [];\n    }\n    if (attributes) {\n      newProps.attributes = attributes;\n    }\n    return merge(basePlaylist, newProps);\n  }\n  /**\n   * Generates an updated URI for a cloned pathway based on the original\n   * pathway's URI and the paramaters from the pathway clone object in the\n   * content steering server response.\n   *\n   * @param {string} baseUri URI to be updated in the cloned pathway.\n   * @param {Object} clone The pathway clone object.\n   *\n   * @return {string} The updated URI for the cloned pathway.\n   */\n\n  createCloneURI_(baseURI, clone) {\n    const uri = new URL(baseURI);\n    uri.hostname = clone['URI-REPLACEMENT'].HOST;\n    const params = clone['URI-REPLACEMENT'].PARAMS; // Add params to the cloned URL.\n\n    for (const key of Object.keys(params)) {\n      uri.searchParams.set(key, params[key]);\n    }\n    return uri.href;\n  }\n  /**\n   * Helper function to create the attributes needed for the new clone.\n   * This mainly adds the necessary media attributes.\n   *\n   * @param {string} id The pathway clone object ID.\n   * @param {Object} oldAttributes The old attributes to compare to.\n   * @return {Object} The new attributes to add to the playlist.\n   */\n\n  createCloneAttributes_(id, oldAttributes) {\n    const attributes = {\n      ['PATHWAY-ID']: id\n    };\n    ['AUDIO', 'SUBTITLES', 'CLOSED-CAPTIONS'].forEach(mediaType => {\n      if (oldAttributes[mediaType]) {\n        attributes[mediaType] = id;\n      }\n    });\n    return attributes;\n  }\n  /**\n   * Returns the key ID set from a playlist\n   *\n   * @param {playlist} playlist to fetch the key ID set from.\n   * @return a Set of 32 digit hex strings that represent the unique keyIds for that playlist.\n   */\n\n  getKeyIdSet(playlist) {\n    if (playlist.contentProtection) {\n      const keyIds = new Set();\n      for (const keysystem in playlist.contentProtection) {\n        const keyId = playlist.contentProtection[keysystem].attributes.keyId;\n        if (keyId) {\n          keyIds.add(keyId.toLowerCase());\n        }\n      }\n      return keyIds;\n    }\n  }\n}\n\n/**\n * @file xhr.js\n */\nconst {\n  xhr: videojsXHR\n} = videojs;\nconst callbackWrapper = function (request, error, response, callback) {\n  const reqResponse = request.responseType === 'arraybuffer' ? request.response : request.responseText;\n  if (!error && reqResponse) {\n    request.responseTime = Date.now();\n    request.roundTripTime = request.responseTime - request.requestTime;\n    request.bytesReceived = reqResponse.byteLength || reqResponse.length;\n    if (!request.bandwidth) {\n      request.bandwidth = Math.floor(request.bytesReceived / request.roundTripTime * 8 * 1000);\n    }\n  }\n  if (response.headers) {\n    request.responseHeaders = response.headers;\n  } // videojs.xhr now uses a specific code on the error\n  // object to signal that a request has timed out instead\n  // of setting a boolean on the request object\n\n  if (error && error.code === 'ETIMEDOUT') {\n    request.timedout = true;\n  } // videojs.xhr no longer considers status codes outside of 200 and 0\n  // (for file uris) to be errors, but the old XHR did, so emulate that\n  // behavior. Status 206 may be used in response to byterange requests.\n\n  if (!error && !request.aborted && response.statusCode !== 200 && response.statusCode !== 206 && response.statusCode !== 0) {\n    error = new Error('XHR Failed with a response of: ' + (request && (reqResponse || request.responseText)));\n  }\n  callback(error, request);\n};\n/**\n * Iterates over the request hooks Set and calls them in order\n *\n * @param {Set} hooks the hook Set to iterate over\n * @param {Object} options the request options to pass to the xhr wrapper\n * @return the callback hook function return value, the modified or new options Object.\n */\n\nconst callAllRequestHooks = (requestSet, options) => {\n  if (!requestSet || !requestSet.size) {\n    return;\n  }\n  let newOptions = options;\n  requestSet.forEach(requestCallback => {\n    newOptions = requestCallback(newOptions);\n  });\n  return newOptions;\n};\n/**\n * Iterates over the response hooks Set and calls them in order.\n *\n * @param {Set} hooks the hook Set to iterate over\n * @param {Object} request the xhr request object\n * @param {Object} error the xhr error object\n * @param {Object} response the xhr response object\n */\n\nconst callAllResponseHooks = (responseSet, request, error, response) => {\n  if (!responseSet || !responseSet.size) {\n    return;\n  }\n  responseSet.forEach(responseCallback => {\n    responseCallback(request, error, response);\n  });\n};\nconst xhrFactory = function () {\n  const xhr = function XhrFunction(options, callback) {\n    // Add a default timeout\n    options = merge({\n      timeout: 45e3\n    }, options); // Allow an optional user-specified function to modify the option\n    // object before we construct the xhr request\n    // TODO: Remove beforeRequest in the next major release.\n\n    const beforeRequest = XhrFunction.beforeRequest || videojs.Vhs.xhr.beforeRequest; // onRequest and onResponse hooks as a Set, at either the player or global level.\n    // TODO: new Set added here for beforeRequest alias. Remove this when beforeRequest is removed.\n\n    const _requestCallbackSet = XhrFunction._requestCallbackSet || videojs.Vhs.xhr._requestCallbackSet || new Set();\n    const _responseCallbackSet = XhrFunction._responseCallbackSet || videojs.Vhs.xhr._responseCallbackSet;\n    if (beforeRequest && typeof beforeRequest === 'function') {\n      videojs.log.warn('beforeRequest is deprecated, use onRequest instead.');\n      _requestCallbackSet.add(beforeRequest);\n    } // Use the standard videojs.xhr() method unless `videojs.Vhs.xhr` has been overriden\n    // TODO: switch back to videojs.Vhs.xhr.name === 'XhrFunction' when we drop IE11\n\n    const xhrMethod = videojs.Vhs.xhr.original === true ? videojsXHR : videojs.Vhs.xhr; // call all registered onRequest hooks, assign new options.\n\n    const beforeRequestOptions = callAllRequestHooks(_requestCallbackSet, options); // Remove the beforeRequest function from the hooks set so stale beforeRequest functions are not called.\n\n    _requestCallbackSet.delete(beforeRequest); // xhrMethod will call XMLHttpRequest.open and XMLHttpRequest.send\n\n    const request = xhrMethod(beforeRequestOptions || options, function (error, response) {\n      // call all registered onResponse hooks\n      callAllResponseHooks(_responseCallbackSet, request, error, response);\n      return callbackWrapper(request, error, response, callback);\n    });\n    const originalAbort = request.abort;\n    request.abort = function () {\n      request.aborted = true;\n      return originalAbort.apply(request, arguments);\n    };\n    request.uri = options.uri;\n    request.requestTime = Date.now();\n    return request;\n  };\n  xhr.original = true;\n  return xhr;\n};\n/**\n * Turns segment byterange into a string suitable for use in\n * HTTP Range requests\n *\n * @param {Object} byterange - an object with two values defining the start and end\n *                             of a byte-range\n */\n\nconst byterangeStr = function (byterange) {\n  // `byterangeEnd` is one less than `offset + length` because the HTTP range\n  // header uses inclusive ranges\n  let byterangeEnd;\n  const byterangeStart = byterange.offset;\n  if (typeof byterange.offset === 'bigint' || typeof byterange.length === 'bigint') {\n    byterangeEnd = window$1.BigInt(byterange.offset) + window$1.BigInt(byterange.length) - window$1.BigInt(1);\n  } else {\n    byterangeEnd = byterange.offset + byterange.length - 1;\n  }\n  return 'bytes=' + byterangeStart + '-' + byterangeEnd;\n};\n/**\n * Defines headers for use in the xhr request for a particular segment.\n *\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n */\n\nconst segmentXhrHeaders = function (segment) {\n  const headers = {};\n  if (segment.byterange) {\n    headers.Range = byterangeStr(segment.byterange);\n  }\n  return headers;\n};\n\n/**\n * @file bin-utils.js\n */\n\n/**\n * convert a TimeRange to text\n *\n * @param {TimeRange} range the timerange to use for conversion\n * @param {number} i the iterator on the range to convert\n * @return {string} the range in string format\n */\n\nconst textRange = function (range, i) {\n  return range.start(i) + '-' + range.end(i);\n};\n/**\n * format a number as hex string\n *\n * @param {number} e The number\n * @param {number} i the iterator\n * @return {string} the hex formatted number as a string\n */\n\nconst formatHexString = function (e, i) {\n  const value = e.toString(16);\n  return '00'.substring(0, 2 - value.length) + value + (i % 2 ? ' ' : '');\n};\nconst formatAsciiString = function (e) {\n  if (e >= 0x20 && e < 0x7e) {\n    return String.fromCharCode(e);\n  }\n  return '.';\n};\n/**\n * Creates an object for sending to a web worker modifying properties that are TypedArrays\n * into a new object with seperated properties for the buffer, byteOffset, and byteLength.\n *\n * @param {Object} message\n *        Object of properties and values to send to the web worker\n * @return {Object}\n *         Modified message with TypedArray values expanded\n * @function createTransferableMessage\n */\n\nconst createTransferableMessage = function (message) {\n  const transferable = {};\n  Object.keys(message).forEach(key => {\n    const value = message[key];\n    if (isArrayBufferView(value)) {\n      transferable[key] = {\n        bytes: value.buffer,\n        byteOffset: value.byteOffset,\n        byteLength: value.byteLength\n      };\n    } else {\n      transferable[key] = value;\n    }\n  });\n  return transferable;\n};\n/**\n * Returns a unique string identifier for a media initialization\n * segment.\n *\n * @param {Object} initSegment\n *        the init segment object.\n *\n * @return {string} the generated init segment id\n */\n\nconst initSegmentId = function (initSegment) {\n  const byterange = initSegment.byterange || {\n    length: Infinity,\n    offset: 0\n  };\n  return [byterange.length, byterange.offset, initSegment.resolvedUri].join(',');\n};\n/**\n * Returns a unique string identifier for a media segment key.\n *\n * @param {Object} key the encryption key\n * @return {string} the unique id for the media segment key.\n */\n\nconst segmentKeyId = function (key) {\n  return key.resolvedUri;\n};\n/**\n * utils to help dump binary data to the console\n *\n * @param {Array|TypedArray} data\n *        data to dump to a string\n *\n * @return {string} the data as a hex string.\n */\n\nconst hexDump = data => {\n  const bytes = Array.prototype.slice.call(data);\n  const step = 16;\n  let result = '';\n  let hex;\n  let ascii;\n  for (let j = 0; j < bytes.length / step; j++) {\n    hex = bytes.slice(j * step, j * step + step).map(formatHexString).join('');\n    ascii = bytes.slice(j * step, j * step + step).map(formatAsciiString).join('');\n    result += hex + ' ' + ascii + '\\n';\n  }\n  return result;\n};\nconst tagDump = ({\n  bytes\n}) => hexDump(bytes);\nconst textRanges = ranges => {\n  let result = '';\n  let i;\n  for (i = 0; i < ranges.length; i++) {\n    result += textRange(ranges, i) + ' ';\n  }\n  return result;\n};\nvar utils = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  createTransferableMessage: createTransferableMessage,\n  initSegmentId: initSegmentId,\n  segmentKeyId: segmentKeyId,\n  hexDump: hexDump,\n  tagDump: tagDump,\n  textRanges: textRanges\n});\n\n// TODO handle fmp4 case where the timing info is accurate and doesn't involve transmux\n// 25% was arbitrarily chosen, and may need to be refined over time.\n\nconst SEGMENT_END_FUDGE_PERCENT = 0.25;\n/**\n * Converts a player time (any time that can be gotten/set from player.currentTime(),\n * e.g., any time within player.seekable().start(0) to player.seekable().end(0)) to a\n * program time (any time referencing the real world (e.g., EXT-X-PROGRAM-DATE-TIME)).\n *\n * The containing segment is required as the EXT-X-PROGRAM-DATE-TIME serves as an \"anchor\n * point\" (a point where we have a mapping from program time to player time, with player\n * time being the post transmux start of the segment).\n *\n * For more details, see [this doc](../../docs/program-time-from-player-time.md).\n *\n * @param {number} playerTime the player time\n * @param {Object} segment the segment which contains the player time\n * @return {Date} program time\n */\n\nconst playerTimeToProgramTime = (playerTime, segment) => {\n  if (!segment.dateTimeObject) {\n    // Can't convert without an \"anchor point\" for the program time (i.e., a time that can\n    // be used to map the start of a segment with a real world time).\n    return null;\n  }\n  const transmuxerPrependedSeconds = segment.videoTimingInfo.transmuxerPrependedSeconds;\n  const transmuxedStart = segment.videoTimingInfo.transmuxedPresentationStart; // get the start of the content from before old content is prepended\n\n  const startOfSegment = transmuxedStart + transmuxerPrependedSeconds;\n  const offsetFromSegmentStart = playerTime - startOfSegment;\n  return new Date(segment.dateTimeObject.getTime() + offsetFromSegmentStart * 1000);\n};\nconst originalSegmentVideoDuration = videoTimingInfo => {\n  return videoTimingInfo.transmuxedPresentationEnd - videoTimingInfo.transmuxedPresentationStart - videoTimingInfo.transmuxerPrependedSeconds;\n};\n/**\n * Finds a segment that contains the time requested given as an ISO-8601 string. The\n * returned segment might be an estimate or an accurate match.\n *\n * @param {string} programTime The ISO-8601 programTime to find a match for\n * @param {Object} playlist A playlist object to search within\n */\n\nconst findSegmentForProgramTime = (programTime, playlist) => {\n  // Assumptions:\n  //  - verifyProgramDateTimeTags has already been run\n  //  - live streams have been started\n  let dateTimeObject;\n  try {\n    dateTimeObject = new Date(programTime);\n  } catch (e) {\n    return null;\n  }\n  if (!playlist || !playlist.segments || playlist.segments.length === 0) {\n    return null;\n  }\n  let segment = playlist.segments[0];\n  if (dateTimeObject < new Date(segment.dateTimeObject)) {\n    // Requested time is before stream start.\n    return null;\n  }\n  for (let i = 0; i < playlist.segments.length - 1; i++) {\n    segment = playlist.segments[i];\n    const nextSegmentStart = new Date(playlist.segments[i + 1].dateTimeObject);\n    if (dateTimeObject < nextSegmentStart) {\n      break;\n    }\n  }\n  const lastSegment = playlist.segments[playlist.segments.length - 1];\n  const lastSegmentStart = lastSegment.dateTimeObject;\n  const lastSegmentDuration = lastSegment.videoTimingInfo ? originalSegmentVideoDuration(lastSegment.videoTimingInfo) : lastSegment.duration + lastSegment.duration * SEGMENT_END_FUDGE_PERCENT;\n  const lastSegmentEnd = new Date(lastSegmentStart.getTime() + lastSegmentDuration * 1000);\n  if (dateTimeObject > lastSegmentEnd) {\n    // Beyond the end of the stream, or our best guess of the end of the stream.\n    return null;\n  }\n  if (dateTimeObject > new Date(lastSegmentStart)) {\n    segment = lastSegment;\n  }\n  return {\n    segment,\n    estimatedStart: segment.videoTimingInfo ? segment.videoTimingInfo.transmuxedPresentationStart : Playlist.duration(playlist, playlist.mediaSequence + playlist.segments.indexOf(segment)),\n    // Although, given that all segments have accurate date time objects, the segment\n    // selected should be accurate, unless the video has been transmuxed at some point\n    // (determined by the presence of the videoTimingInfo object), the segment's \"player\n    // time\" (the start time in the player) can't be considered accurate.\n    type: segment.videoTimingInfo ? 'accurate' : 'estimate'\n  };\n};\n/**\n * Finds a segment that contains the given player time(in seconds).\n *\n * @param {number} time The player time to find a match for\n * @param {Object} playlist A playlist object to search within\n */\n\nconst findSegmentForPlayerTime = (time, playlist) => {\n  // Assumptions:\n  // - there will always be a segment.duration\n  // - we can start from zero\n  // - segments are in time order\n  if (!playlist || !playlist.segments || playlist.segments.length === 0) {\n    return null;\n  }\n  let segmentEnd = 0;\n  let segment;\n  for (let i = 0; i < playlist.segments.length; i++) {\n    segment = playlist.segments[i]; // videoTimingInfo is set after the segment is downloaded and transmuxed, and\n    // should contain the most accurate values we have for the segment's player times.\n    //\n    // Use the accurate transmuxedPresentationEnd value if it is available, otherwise fall\n    // back to an estimate based on the manifest derived (inaccurate) segment.duration, to\n    // calculate an end value.\n\n    segmentEnd = segment.videoTimingInfo ? segment.videoTimingInfo.transmuxedPresentationEnd : segmentEnd + segment.duration;\n    if (time <= segmentEnd) {\n      break;\n    }\n  }\n  const lastSegment = playlist.segments[playlist.segments.length - 1];\n  if (lastSegment.videoTimingInfo && lastSegment.videoTimingInfo.transmuxedPresentationEnd < time) {\n    // The time requested is beyond the stream end.\n    return null;\n  }\n  if (time > segmentEnd) {\n    // The time is within or beyond the last segment.\n    //\n    // Check to see if the time is beyond a reasonable guess of the end of the stream.\n    if (time > segmentEnd + lastSegment.duration * SEGMENT_END_FUDGE_PERCENT) {\n      // Technically, because the duration value is only an estimate, the time may still\n      // exist in the last segment, however, there isn't enough information to make even\n      // a reasonable estimate.\n      return null;\n    }\n    segment = lastSegment;\n  }\n  return {\n    segment,\n    estimatedStart: segment.videoTimingInfo ? segment.videoTimingInfo.transmuxedPresentationStart : segmentEnd - segment.duration,\n    // Because videoTimingInfo is only set after transmux, it is the only way to get\n    // accurate timing values.\n    type: segment.videoTimingInfo ? 'accurate' : 'estimate'\n  };\n};\n/**\n * Gives the offset of the comparisonTimestamp from the programTime timestamp in seconds.\n * If the offset returned is positive, the programTime occurs after the\n * comparisonTimestamp.\n * If the offset is negative, the programTime occurs before the comparisonTimestamp.\n *\n * @param {string} comparisonTimeStamp An ISO-8601 timestamp to compare against\n * @param {string} programTime The programTime as an ISO-8601 string\n * @return {number} offset\n */\n\nconst getOffsetFromTimestamp = (comparisonTimeStamp, programTime) => {\n  let segmentDateTime;\n  let programDateTime;\n  try {\n    segmentDateTime = new Date(comparisonTimeStamp);\n    programDateTime = new Date(programTime);\n  } catch (e) {// TODO handle error\n  }\n  const segmentTimeEpoch = segmentDateTime.getTime();\n  const programTimeEpoch = programDateTime.getTime();\n  return (programTimeEpoch - segmentTimeEpoch) / 1000;\n};\n/**\n * Checks that all segments in this playlist have programDateTime tags.\n *\n * @param {Object} playlist A playlist object\n */\n\nconst verifyProgramDateTimeTags = playlist => {\n  if (!playlist.segments || playlist.segments.length === 0) {\n    return false;\n  }\n  for (let i = 0; i < playlist.segments.length; i++) {\n    const segment = playlist.segments[i];\n    if (!segment.dateTimeObject) {\n      return false;\n    }\n  }\n  return true;\n};\n/**\n * Returns the programTime of the media given a playlist and a playerTime.\n * The playlist must have programDateTime tags for a programDateTime tag to be returned.\n * If the segments containing the time requested have not been buffered yet, an estimate\n * may be returned to the callback.\n *\n * @param {Object} args\n * @param {Object} args.playlist A playlist object to search within\n * @param {number} time A playerTime in seconds\n * @param {Function} callback(err, programTime)\n * @return {string} err.message A detailed error message\n * @return {Object} programTime\n * @return {number} programTime.mediaSeconds The streamTime in seconds\n * @return {string} programTime.programDateTime The programTime as an ISO-8601 String\n */\n\nconst getProgramTime = ({\n  playlist,\n  time = undefined,\n  callback\n}) => {\n  if (!callback) {\n    throw new Error('getProgramTime: callback must be provided');\n  }\n  if (!playlist || time === undefined) {\n    return callback({\n      message: 'getProgramTime: playlist and time must be provided'\n    });\n  }\n  const matchedSegment = findSegmentForPlayerTime(time, playlist);\n  if (!matchedSegment) {\n    return callback({\n      message: 'valid programTime was not found'\n    });\n  }\n  if (matchedSegment.type === 'estimate') {\n    return callback({\n      message: 'Accurate programTime could not be determined.' + ' Please seek to e.seekTime and try again',\n      seekTime: matchedSegment.estimatedStart\n    });\n  }\n  const programTimeObject = {\n    mediaSeconds: time\n  };\n  const programTime = playerTimeToProgramTime(time, matchedSegment.segment);\n  if (programTime) {\n    programTimeObject.programDateTime = programTime.toISOString();\n  }\n  return callback(null, programTimeObject);\n};\n/**\n * Seeks in the player to a time that matches the given programTime ISO-8601 string.\n *\n * @param {Object} args\n * @param {string} args.programTime A programTime to seek to as an ISO-8601 String\n * @param {Object} args.playlist A playlist to look within\n * @param {number} args.retryCount The number of times to try for an accurate seek. Default is 2.\n * @param {Function} args.seekTo A method to perform a seek\n * @param {boolean} args.pauseAfterSeek Whether to end in a paused state after seeking. Default is true.\n * @param {Object} args.tech The tech to seek on\n * @param {Function} args.callback(err, newTime) A callback to return the new time to\n * @return {string} err.message A detailed error message\n * @return {number} newTime The exact time that was seeked to in seconds\n */\n\nconst seekToProgramTime = ({\n  programTime,\n  playlist,\n  retryCount = 2,\n  seekTo,\n  pauseAfterSeek = true,\n  tech,\n  callback\n}) => {\n  if (!callback) {\n    throw new Error('seekToProgramTime: callback must be provided');\n  }\n  if (typeof programTime === 'undefined' || !playlist || !seekTo) {\n    return callback({\n      message: 'seekToProgramTime: programTime, seekTo and playlist must be provided'\n    });\n  }\n  if (!playlist.endList && !tech.hasStarted_) {\n    return callback({\n      message: 'player must be playing a live stream to start buffering'\n    });\n  }\n  if (!verifyProgramDateTimeTags(playlist)) {\n    return callback({\n      message: 'programDateTime tags must be provided in the manifest ' + playlist.resolvedUri\n    });\n  }\n  const matchedSegment = findSegmentForProgramTime(programTime, playlist); // no match\n\n  if (!matchedSegment) {\n    return callback({\n      message: `${programTime} was not found in the stream`\n    });\n  }\n  const segment = matchedSegment.segment;\n  const mediaOffset = getOffsetFromTimestamp(segment.dateTimeObject, programTime);\n  if (matchedSegment.type === 'estimate') {\n    // we've run out of retries\n    if (retryCount === 0) {\n      return callback({\n        message: `${programTime} is not buffered yet. Try again`\n      });\n    }\n    seekTo(matchedSegment.estimatedStart + mediaOffset);\n    tech.one('seeked', () => {\n      seekToProgramTime({\n        programTime,\n        playlist,\n        retryCount: retryCount - 1,\n        seekTo,\n        pauseAfterSeek,\n        tech,\n        callback\n      });\n    });\n    return;\n  } // Since the segment.start value is determined from the buffered end or ending time\n  // of the prior segment, the seekToTime doesn't need to account for any transmuxer\n  // modifications.\n\n  const seekToTime = segment.start + mediaOffset;\n  const seekedCallback = () => {\n    return callback(null, tech.currentTime());\n  }; // listen for seeked event\n\n  tech.one('seeked', seekedCallback); // pause before seeking as video.js will restore this state\n\n  if (pauseAfterSeek) {\n    tech.pause();\n  }\n  seekTo(seekToTime);\n};\n\n// which will only happen if the request is complete.\n\nconst callbackOnCompleted = (request, cb) => {\n  if (request.readyState === 4) {\n    return cb();\n  }\n  return;\n};\nconst containerRequest = (uri, xhr, cb) => {\n  let bytes = [];\n  let id3Offset;\n  let finished = false;\n  const endRequestAndCallback = function (err, req, type, _bytes) {\n    req.abort();\n    finished = true;\n    return cb(err, req, type, _bytes);\n  };\n  const progressListener = function (error, request) {\n    if (finished) {\n      return;\n    }\n    if (error) {\n      return endRequestAndCallback(error, request, '', bytes);\n    } // grap the new part of content that was just downloaded\n\n    const newPart = request.responseText.substring(bytes && bytes.byteLength || 0, request.responseText.length); // add that onto bytes\n\n    bytes = concatTypedArrays(bytes, stringToBytes(newPart, true));\n    id3Offset = id3Offset || getId3Offset(bytes); // we need at least 10 bytes to determine a type\n    // or we need at least two bytes after an id3Offset\n\n    if (bytes.length < 10 || id3Offset && bytes.length < id3Offset + 2) {\n      return callbackOnCompleted(request, () => endRequestAndCallback(error, request, '', bytes));\n    }\n    const type = detectContainerForBytes(bytes); // if this looks like a ts segment but we don't have enough data\n    // to see the second sync byte, wait until we have enough data\n    // before declaring it ts\n\n    if (type === 'ts' && bytes.length < 188) {\n      return callbackOnCompleted(request, () => endRequestAndCallback(error, request, '', bytes));\n    } // this may be an unsynced ts segment\n    // wait for 376 bytes before detecting no container\n\n    if (!type && bytes.length < 376) {\n      return callbackOnCompleted(request, () => endRequestAndCallback(error, request, '', bytes));\n    }\n    return endRequestAndCallback(null, request, type, bytes);\n  };\n  const options = {\n    uri,\n    beforeSend(request) {\n      // this forces the browser to pass the bytes to us unprocessed\n      request.overrideMimeType('text/plain; charset=x-user-defined');\n      request.addEventListener('progress', function ({\n        total,\n        loaded\n      }) {\n        return callbackWrapper(request, null, {\n          statusCode: request.status\n        }, progressListener);\n      });\n    }\n  };\n  const request = xhr(options, function (error, response) {\n    return callbackWrapper(request, error, response, progressListener);\n  });\n  return request;\n};\nconst {\n  EventTarget\n} = videojs;\nconst dashPlaylistUnchanged = function (a, b) {\n  if (!isPlaylistUnchanged(a, b)) {\n    return false;\n  } // for dash the above check will often return true in scenarios where\n  // the playlist actually has changed because mediaSequence isn't a\n  // dash thing, and we often set it to 1. So if the playlists have the same amount\n  // of segments we return true.\n  // So for dash we need to make sure that the underlying segments are different.\n  // if sidx changed then the playlists are different.\n\n  if (a.sidx && b.sidx && (a.sidx.offset !== b.sidx.offset || a.sidx.length !== b.sidx.length)) {\n    return false;\n  } else if (!a.sidx && b.sidx || a.sidx && !b.sidx) {\n    return false;\n  } // one or the other does not have segments\n  // there was a change.\n\n  if (a.segments && !b.segments || !a.segments && b.segments) {\n    return false;\n  } // neither has segments nothing changed\n\n  if (!a.segments && !b.segments) {\n    return true;\n  } // check segments themselves\n\n  for (let i = 0; i < a.segments.length; i++) {\n    const aSegment = a.segments[i];\n    const bSegment = b.segments[i]; // if uris are different between segments there was a change\n\n    if (aSegment.uri !== bSegment.uri) {\n      return false;\n    } // neither segment has a byterange, there will be no byterange change.\n\n    if (!aSegment.byterange && !bSegment.byterange) {\n      continue;\n    }\n    const aByterange = aSegment.byterange;\n    const bByterange = bSegment.byterange; // if byterange only exists on one of the segments, there was a change.\n\n    if (aByterange && !bByterange || !aByterange && bByterange) {\n      return false;\n    } // if both segments have byterange with different offsets, there was a change.\n\n    if (aByterange.offset !== bByterange.offset || aByterange.length !== bByterange.length) {\n      return false;\n    }\n  } // if everything was the same with segments, this is the same playlist.\n\n  return true;\n};\n/**\n * Use the representation IDs from the mpd object to create groupIDs, the NAME is set to mandatory representation\n * ID in the parser. This allows for continuous playout across periods with the same representation IDs\n * (continuous periods as defined in DASH-IF 3.2.12). This is assumed in the mpd-parser as well. If we want to support\n * periods without continuous playback this function may need modification as well as the parser.\n */\n\nconst dashGroupId = (type, group, label, playlist) => {\n  // If the manifest somehow does not have an ID (non-dash compliant), use the label.\n  const playlistId = playlist.attributes.NAME || label;\n  return `placeholder-uri-${type}-${group}-${playlistId}`;\n};\n/**\n * Parses the main XML string and updates playlist URI references.\n *\n * @param {Object} config\n *        Object of arguments\n * @param {string} config.mainXml\n *        The mpd XML\n * @param {string} config.srcUrl\n *        The mpd URL\n * @param {Date} config.clientOffset\n *         A time difference between server and client\n * @param {Object} config.sidxMapping\n *        SIDX mappings for moof/mdat URIs and byte ranges\n * @return {Object}\n *         The parsed mpd manifest object\n */\n\nconst parseMainXml = ({\n  mainXml,\n  srcUrl,\n  clientOffset,\n  sidxMapping,\n  previousManifest\n}) => {\n  const manifest = parse(mainXml, {\n    manifestUri: srcUrl,\n    clientOffset,\n    sidxMapping,\n    previousManifest\n  });\n  addPropertiesToMain(manifest, srcUrl, dashGroupId);\n  return manifest;\n};\n/**\n * Removes any mediaGroup labels that no longer exist in the newMain\n *\n * @param {Object} update\n *         The previous mpd object being updated\n * @param {Object} newMain\n *         The new mpd object\n */\n\nconst removeOldMediaGroupLabels = (update, newMain) => {\n  forEachMediaGroup(update, (properties, type, group, label) => {\n    if (!(label in newMain.mediaGroups[type][group])) {\n      delete update.mediaGroups[type][group][label];\n    }\n  });\n};\n/**\n * Returns a new main manifest that is the result of merging an updated main manifest\n * into the original version.\n *\n * @param {Object} oldMain\n *        The old parsed mpd object\n * @param {Object} newMain\n *        The updated parsed mpd object\n * @return {Object}\n *         A new object representing the original main manifest with the updated media\n *         playlists merged in\n */\n\nconst updateMain = (oldMain, newMain, sidxMapping) => {\n  let noChanges = true;\n  let update = merge(oldMain, {\n    // These are top level properties that can be updated\n    duration: newMain.duration,\n    minimumUpdatePeriod: newMain.minimumUpdatePeriod,\n    timelineStarts: newMain.timelineStarts\n  }); // First update the playlists in playlist list\n\n  for (let i = 0; i < newMain.playlists.length; i++) {\n    const playlist = newMain.playlists[i];\n    if (playlist.sidx) {\n      const sidxKey = generateSidxKey(playlist.sidx); // add sidx segments to the playlist if we have all the sidx info already\n\n      if (sidxMapping && sidxMapping[sidxKey] && sidxMapping[sidxKey].sidx) {\n        addSidxSegmentsToPlaylist(playlist, sidxMapping[sidxKey].sidx, playlist.sidx.resolvedUri);\n      }\n    }\n    const playlistUpdate = updateMain$1(update, playlist, dashPlaylistUnchanged);\n    if (playlistUpdate) {\n      update = playlistUpdate;\n      noChanges = false;\n    }\n  } // Then update media group playlists\n\n  forEachMediaGroup(newMain, (properties, type, group, label) => {\n    if (properties.playlists && properties.playlists.length) {\n      const id = properties.playlists[0].id;\n      const playlistUpdate = updateMain$1(update, properties.playlists[0], dashPlaylistUnchanged);\n      if (playlistUpdate) {\n        update = playlistUpdate; // add new mediaGroup label if it doesn't exist and assign the new mediaGroup.\n\n        if (!(label in update.mediaGroups[type][group])) {\n          update.mediaGroups[type][group][label] = properties;\n        } // update the playlist reference within media groups\n\n        update.mediaGroups[type][group][label].playlists[0] = update.playlists[id];\n        noChanges = false;\n      }\n    }\n  }); // remove mediaGroup labels and references that no longer exist in the newMain\n\n  removeOldMediaGroupLabels(update, newMain);\n  if (newMain.minimumUpdatePeriod !== oldMain.minimumUpdatePeriod) {\n    noChanges = false;\n  }\n  if (noChanges) {\n    return null;\n  }\n  return update;\n}; // SIDX should be equivalent if the URI and byteranges of the SIDX match.\n// If the SIDXs have maps, the two maps should match,\n// both `a` and `b` missing SIDXs is considered matching.\n// If `a` or `b` but not both have a map, they aren't matching.\n\nconst equivalentSidx = (a, b) => {\n  const neitherMap = Boolean(!a.map && !b.map);\n  const equivalentMap = neitherMap || Boolean(a.map && b.map && a.map.byterange.offset === b.map.byterange.offset && a.map.byterange.length === b.map.byterange.length);\n  return equivalentMap && a.uri === b.uri && a.byterange.offset === b.byterange.offset && a.byterange.length === b.byterange.length;\n}; // exported for testing\n\nconst compareSidxEntry = (playlists, oldSidxMapping) => {\n  const newSidxMapping = {};\n  for (const id in playlists) {\n    const playlist = playlists[id];\n    const currentSidxInfo = playlist.sidx;\n    if (currentSidxInfo) {\n      const key = generateSidxKey(currentSidxInfo);\n      if (!oldSidxMapping[key]) {\n        break;\n      }\n      const savedSidxInfo = oldSidxMapping[key].sidxInfo;\n      if (equivalentSidx(savedSidxInfo, currentSidxInfo)) {\n        newSidxMapping[key] = oldSidxMapping[key];\n      }\n    }\n  }\n  return newSidxMapping;\n};\n/**\n *  A function that filters out changed items as they need to be requested separately.\n *\n *  The method is exported for testing\n *\n *  @param {Object} main the parsed mpd XML returned via mpd-parser\n *  @param {Object} oldSidxMapping the SIDX to compare against\n */\n\nconst filterChangedSidxMappings = (main, oldSidxMapping) => {\n  const videoSidx = compareSidxEntry(main.playlists, oldSidxMapping);\n  let mediaGroupSidx = videoSidx;\n  forEachMediaGroup(main, (properties, mediaType, groupKey, labelKey) => {\n    if (properties.playlists && properties.playlists.length) {\n      const playlists = properties.playlists;\n      mediaGroupSidx = merge(mediaGroupSidx, compareSidxEntry(playlists, oldSidxMapping));\n    }\n  });\n  return mediaGroupSidx;\n};\nclass DashPlaylistLoader extends EventTarget {\n  // DashPlaylistLoader must accept either a src url or a playlist because subsequent\n  // playlist loader setups from media groups will expect to be able to pass a playlist\n  // (since there aren't external URLs to media playlists with DASH)\n  constructor(srcUrlOrPlaylist, vhs, options = {}, mainPlaylistLoader) {\n    super();\n    this.mainPlaylistLoader_ = mainPlaylistLoader || this;\n    if (!mainPlaylistLoader) {\n      this.isMain_ = true;\n    }\n    const {\n      withCredentials = false\n    } = options;\n    this.vhs_ = vhs;\n    this.withCredentials = withCredentials;\n    this.addMetadataToTextTrack = options.addMetadataToTextTrack;\n    if (!srcUrlOrPlaylist) {\n      throw new Error('A non-empty playlist URL or object is required');\n    } // event naming?\n\n    this.on('minimumUpdatePeriod', () => {\n      this.refreshXml_();\n    }); // live playlist staleness timeout\n\n    this.on('mediaupdatetimeout', () => {\n      this.refreshMedia_(this.media().id);\n    });\n    this.state = 'HAVE_NOTHING';\n    this.loadedPlaylists_ = {};\n    this.logger_ = logger('DashPlaylistLoader'); // initialize the loader state\n    // The mainPlaylistLoader will be created with a string\n\n    if (this.isMain_) {\n      this.mainPlaylistLoader_.srcUrl = srcUrlOrPlaylist; // TODO: reset sidxMapping between period changes\n      // once multi-period is refactored\n\n      this.mainPlaylistLoader_.sidxMapping_ = {};\n    } else {\n      this.childPlaylist_ = srcUrlOrPlaylist;\n    }\n  }\n  requestErrored_(err, request, startingState) {\n    // disposed\n    if (!this.request) {\n      return true;\n    } // pending request is cleared\n\n    this.request = null;\n    if (err) {\n      // use the provided error object or create one\n      // based on the request/response\n      this.error = typeof err === 'object' && !(err instanceof Error) ? err : {\n        status: request.status,\n        message: 'DASH request error at URL: ' + request.uri,\n        response: request.response,\n        // MEDIA_ERR_NETWORK\n        code: 2\n      };\n      if (startingState) {\n        this.state = startingState;\n      }\n      this.trigger('error');\n      return true;\n    }\n  }\n  /**\n   * Verify that the container of the sidx segment can be parsed\n   * and if it can, get and parse that segment.\n   */\n\n  addSidxSegments_(playlist, startingState, cb) {\n    const sidxKey = playlist.sidx && generateSidxKey(playlist.sidx); // playlist lacks sidx or sidx segments were added to this playlist already.\n\n    if (!playlist.sidx || !sidxKey || this.mainPlaylistLoader_.sidxMapping_[sidxKey]) {\n      // keep this function async\n      this.mediaRequest_ = window$1.setTimeout(() => cb(false), 0);\n      return;\n    } // resolve the segment URL relative to the playlist\n\n    const uri = resolveManifestRedirect(playlist.sidx.resolvedUri);\n    const fin = (err, request) => {\n      if (this.requestErrored_(err, request, startingState)) {\n        return;\n      }\n      const sidxMapping = this.mainPlaylistLoader_.sidxMapping_;\n      let sidx;\n      try {\n        sidx = parseSidx(toUint8(request.response).subarray(8));\n      } catch (e) {\n        // sidx parsing failed.\n        this.requestErrored_(e, request, startingState);\n        return;\n      }\n      sidxMapping[sidxKey] = {\n        sidxInfo: playlist.sidx,\n        sidx\n      };\n      addSidxSegmentsToPlaylist(playlist, sidx, playlist.sidx.resolvedUri);\n      return cb(true);\n    };\n    this.request = containerRequest(uri, this.vhs_.xhr, (err, request, container, bytes) => {\n      if (err) {\n        return fin(err, request);\n      }\n      if (!container || container !== 'mp4') {\n        return fin({\n          status: request.status,\n          message: `Unsupported ${container || 'unknown'} container type for sidx segment at URL: ${uri}`,\n          // response is just bytes in this case\n          // but we really don't want to return that.\n          response: '',\n          playlist,\n          internal: true,\n          playlistExclusionDuration: Infinity,\n          // MEDIA_ERR_NETWORK\n          code: 2\n        }, request);\n      } // if we already downloaded the sidx bytes in the container request, use them\n\n      const {\n        offset,\n        length\n      } = playlist.sidx.byterange;\n      if (bytes.length >= length + offset) {\n        return fin(err, {\n          response: bytes.subarray(offset, offset + length),\n          status: request.status,\n          uri: request.uri\n        });\n      } // otherwise request sidx bytes\n\n      this.request = this.vhs_.xhr({\n        uri,\n        responseType: 'arraybuffer',\n        headers: segmentXhrHeaders({\n          byterange: playlist.sidx.byterange\n        })\n      }, fin);\n    });\n  }\n  dispose() {\n    this.trigger('dispose');\n    this.stopRequest();\n    this.loadedPlaylists_ = {};\n    window$1.clearTimeout(this.minimumUpdatePeriodTimeout_);\n    window$1.clearTimeout(this.mediaRequest_);\n    window$1.clearTimeout(this.mediaUpdateTimeout);\n    this.mediaUpdateTimeout = null;\n    this.mediaRequest_ = null;\n    this.minimumUpdatePeriodTimeout_ = null;\n    if (this.mainPlaylistLoader_.createMupOnMedia_) {\n      this.off('loadedmetadata', this.mainPlaylistLoader_.createMupOnMedia_);\n      this.mainPlaylistLoader_.createMupOnMedia_ = null;\n    }\n    this.off();\n  }\n  hasPendingRequest() {\n    return this.request || this.mediaRequest_;\n  }\n  stopRequest() {\n    if (this.request) {\n      const oldRequest = this.request;\n      this.request = null;\n      oldRequest.onreadystatechange = null;\n      oldRequest.abort();\n    }\n  }\n  media(playlist) {\n    // getter\n    if (!playlist) {\n      return this.media_;\n    } // setter\n\n    if (this.state === 'HAVE_NOTHING') {\n      throw new Error('Cannot switch media playlist from ' + this.state);\n    }\n    const startingState = this.state; // find the playlist object if the target playlist has been specified by URI\n\n    if (typeof playlist === 'string') {\n      if (!this.mainPlaylistLoader_.main.playlists[playlist]) {\n        throw new Error('Unknown playlist URI: ' + playlist);\n      }\n      playlist = this.mainPlaylistLoader_.main.playlists[playlist];\n    }\n    const mediaChange = !this.media_ || playlist.id !== this.media_.id; // switch to previously loaded playlists immediately\n\n    if (mediaChange && this.loadedPlaylists_[playlist.id] && this.loadedPlaylists_[playlist.id].endList) {\n      this.state = 'HAVE_METADATA';\n      this.media_ = playlist; // trigger media change if the active media has been updated\n\n      if (mediaChange) {\n        this.trigger('mediachanging');\n        this.trigger('mediachange');\n      }\n      return;\n    } // switching to the active playlist is a no-op\n\n    if (!mediaChange) {\n      return;\n    } // switching from an already loaded playlist\n\n    if (this.media_) {\n      this.trigger('mediachanging');\n    }\n    this.addSidxSegments_(playlist, startingState, sidxChanged => {\n      // everything is ready just continue to haveMetadata\n      this.haveMetadata({\n        startingState,\n        playlist\n      });\n    });\n  }\n  haveMetadata({\n    startingState,\n    playlist\n  }) {\n    this.state = 'HAVE_METADATA';\n    this.loadedPlaylists_[playlist.id] = playlist;\n    this.mediaRequest_ = null; // This will trigger loadedplaylist\n\n    this.refreshMedia_(playlist.id); // fire loadedmetadata the first time a media playlist is loaded\n    // to resolve setup of media groups\n\n    if (startingState === 'HAVE_MAIN_MANIFEST') {\n      this.trigger('loadedmetadata');\n    } else {\n      // trigger media change if the active media has been updated\n      this.trigger('mediachange');\n    }\n  }\n  pause() {\n    if (this.mainPlaylistLoader_.createMupOnMedia_) {\n      this.off('loadedmetadata', this.mainPlaylistLoader_.createMupOnMedia_);\n      this.mainPlaylistLoader_.createMupOnMedia_ = null;\n    }\n    this.stopRequest();\n    window$1.clearTimeout(this.mediaUpdateTimeout);\n    this.mediaUpdateTimeout = null;\n    if (this.isMain_) {\n      window$1.clearTimeout(this.mainPlaylistLoader_.minimumUpdatePeriodTimeout_);\n      this.mainPlaylistLoader_.minimumUpdatePeriodTimeout_ = null;\n    }\n    if (this.state === 'HAVE_NOTHING') {\n      // If we pause the loader before any data has been retrieved, its as if we never\n      // started, so reset to an unstarted state.\n      this.started = false;\n    }\n  }\n  load(isFinalRendition) {\n    window$1.clearTimeout(this.mediaUpdateTimeout);\n    this.mediaUpdateTimeout = null;\n    const media = this.media();\n    if (isFinalRendition) {\n      const delay = media ? media.targetDuration / 2 * 1000 : 5 * 1000;\n      this.mediaUpdateTimeout = window$1.setTimeout(() => this.load(), delay);\n      return;\n    } // because the playlists are internal to the manifest, load should either load the\n    // main manifest, or do nothing but trigger an event\n\n    if (!this.started) {\n      this.start();\n      return;\n    }\n    if (media && !media.endList) {\n      // Check to see if this is the main loader and the MUP was cleared (this happens\n      // when the loader was paused). `media` should be set at this point since one is always\n      // set during `start()`.\n      if (this.isMain_ && !this.minimumUpdatePeriodTimeout_) {\n        // Trigger minimumUpdatePeriod to refresh the main manifest\n        this.trigger('minimumUpdatePeriod'); // Since there was no prior minimumUpdatePeriodTimeout it should be recreated\n\n        this.updateMinimumUpdatePeriodTimeout_();\n      }\n      this.trigger('mediaupdatetimeout');\n    } else {\n      this.trigger('loadedplaylist');\n    }\n  }\n  start() {\n    this.started = true; // We don't need to request the main manifest again\n    // Call this asynchronously to match the xhr request behavior below\n\n    if (!this.isMain_) {\n      this.mediaRequest_ = window$1.setTimeout(() => this.haveMain_(), 0);\n      return;\n    }\n    this.requestMain_((req, mainChanged) => {\n      this.haveMain_();\n      if (!this.hasPendingRequest() && !this.media_) {\n        this.media(this.mainPlaylistLoader_.main.playlists[0]);\n      }\n    });\n  }\n  requestMain_(cb) {\n    this.request = this.vhs_.xhr({\n      uri: this.mainPlaylistLoader_.srcUrl,\n      withCredentials: this.withCredentials\n    }, (error, req) => {\n      if (this.requestErrored_(error, req)) {\n        if (this.state === 'HAVE_NOTHING') {\n          this.started = false;\n        }\n        return;\n      }\n      const mainChanged = req.responseText !== this.mainPlaylistLoader_.mainXml_;\n      this.mainPlaylistLoader_.mainXml_ = req.responseText;\n      if (req.responseHeaders && req.responseHeaders.date) {\n        this.mainLoaded_ = Date.parse(req.responseHeaders.date);\n      } else {\n        this.mainLoaded_ = Date.now();\n      }\n      this.mainPlaylistLoader_.srcUrl = resolveManifestRedirect(this.mainPlaylistLoader_.srcUrl, req);\n      if (mainChanged) {\n        this.handleMain_();\n        this.syncClientServerClock_(() => {\n          return cb(req, mainChanged);\n        });\n        return;\n      }\n      return cb(req, mainChanged);\n    });\n  }\n  /**\n   * Parses the main xml for UTCTiming node to sync the client clock to the server\n   * clock. If the UTCTiming node requires a HEAD or GET request, that request is made.\n   *\n   * @param {Function} done\n   *        Function to call when clock sync has completed\n   */\n\n  syncClientServerClock_(done) {\n    const utcTiming = parseUTCTiming(this.mainPlaylistLoader_.mainXml_); // No UTCTiming element found in the mpd. Use Date header from mpd request as the\n    // server clock\n\n    if (utcTiming === null) {\n      this.mainPlaylistLoader_.clientOffset_ = this.mainLoaded_ - Date.now();\n      return done();\n    }\n    if (utcTiming.method === 'DIRECT') {\n      this.mainPlaylistLoader_.clientOffset_ = utcTiming.value - Date.now();\n      return done();\n    }\n    this.request = this.vhs_.xhr({\n      uri: resolveUrl(this.mainPlaylistLoader_.srcUrl, utcTiming.value),\n      method: utcTiming.method,\n      withCredentials: this.withCredentials\n    }, (error, req) => {\n      // disposed\n      if (!this.request) {\n        return;\n      }\n      if (error) {\n        // sync request failed, fall back to using date header from mpd\n        // TODO: log warning\n        this.mainPlaylistLoader_.clientOffset_ = this.mainLoaded_ - Date.now();\n        return done();\n      }\n      let serverTime;\n      if (utcTiming.method === 'HEAD') {\n        if (!req.responseHeaders || !req.responseHeaders.date) {\n          // expected date header not preset, fall back to using date header from mpd\n          // TODO: log warning\n          serverTime = this.mainLoaded_;\n        } else {\n          serverTime = Date.parse(req.responseHeaders.date);\n        }\n      } else {\n        serverTime = Date.parse(req.responseText);\n      }\n      this.mainPlaylistLoader_.clientOffset_ = serverTime - Date.now();\n      done();\n    });\n  }\n  haveMain_() {\n    this.state = 'HAVE_MAIN_MANIFEST';\n    if (this.isMain_) {\n      // We have the main playlist at this point, so\n      // trigger this to allow PlaylistController\n      // to make an initial playlist selection\n      this.trigger('loadedplaylist');\n    } else if (!this.media_) {\n      // no media playlist was specifically selected so select\n      // the one the child playlist loader was created with\n      this.media(this.childPlaylist_);\n    }\n  }\n  handleMain_() {\n    // clear media request\n    this.mediaRequest_ = null;\n    const oldMain = this.mainPlaylistLoader_.main;\n    let newMain = parseMainXml({\n      mainXml: this.mainPlaylistLoader_.mainXml_,\n      srcUrl: this.mainPlaylistLoader_.srcUrl,\n      clientOffset: this.mainPlaylistLoader_.clientOffset_,\n      sidxMapping: this.mainPlaylistLoader_.sidxMapping_,\n      previousManifest: oldMain\n    }); // if we have an old main to compare the new main against\n\n    if (oldMain) {\n      newMain = updateMain(oldMain, newMain, this.mainPlaylistLoader_.sidxMapping_);\n    } // only update main if we have a new main\n\n    this.mainPlaylistLoader_.main = newMain ? newMain : oldMain;\n    const location = this.mainPlaylistLoader_.main.locations && this.mainPlaylistLoader_.main.locations[0];\n    if (location && location !== this.mainPlaylistLoader_.srcUrl) {\n      this.mainPlaylistLoader_.srcUrl = location;\n    }\n    if (!oldMain || newMain && newMain.minimumUpdatePeriod !== oldMain.minimumUpdatePeriod) {\n      this.updateMinimumUpdatePeriodTimeout_();\n    }\n    this.addEventStreamToMetadataTrack_(newMain);\n    return Boolean(newMain);\n  }\n  updateMinimumUpdatePeriodTimeout_() {\n    const mpl = this.mainPlaylistLoader_; // cancel any pending creation of mup on media\n    // a new one will be added if needed.\n\n    if (mpl.createMupOnMedia_) {\n      mpl.off('loadedmetadata', mpl.createMupOnMedia_);\n      mpl.createMupOnMedia_ = null;\n    } // clear any pending timeouts\n\n    if (mpl.minimumUpdatePeriodTimeout_) {\n      window$1.clearTimeout(mpl.minimumUpdatePeriodTimeout_);\n      mpl.minimumUpdatePeriodTimeout_ = null;\n    }\n    let mup = mpl.main && mpl.main.minimumUpdatePeriod; // If the minimumUpdatePeriod has a value of 0, that indicates that the current\n    // MPD has no future validity, so a new one will need to be acquired when new\n    // media segments are to be made available. Thus, we use the target duration\n    // in this case\n\n    if (mup === 0) {\n      if (mpl.media()) {\n        mup = mpl.media().targetDuration * 1000;\n      } else {\n        mpl.createMupOnMedia_ = mpl.updateMinimumUpdatePeriodTimeout_;\n        mpl.one('loadedmetadata', mpl.createMupOnMedia_);\n      }\n    } // if minimumUpdatePeriod is invalid or <= zero, which\n    // can happen when a live video becomes VOD. skip timeout\n    // creation.\n\n    if (typeof mup !== 'number' || mup <= 0) {\n      if (mup < 0) {\n        this.logger_(`found invalid minimumUpdatePeriod of ${mup}, not setting a timeout`);\n      }\n      return;\n    }\n    this.createMUPTimeout_(mup);\n  }\n  createMUPTimeout_(mup) {\n    const mpl = this.mainPlaylistLoader_;\n    mpl.minimumUpdatePeriodTimeout_ = window$1.setTimeout(() => {\n      mpl.minimumUpdatePeriodTimeout_ = null;\n      mpl.trigger('minimumUpdatePeriod');\n      mpl.createMUPTimeout_(mup);\n    }, mup);\n  }\n  /**\n   * Sends request to refresh the main xml and updates the parsed main manifest\n   */\n\n  refreshXml_() {\n    this.requestMain_((req, mainChanged) => {\n      if (!mainChanged) {\n        return;\n      }\n      if (this.media_) {\n        this.media_ = this.mainPlaylistLoader_.main.playlists[this.media_.id];\n      } // This will filter out updated sidx info from the mapping\n\n      this.mainPlaylistLoader_.sidxMapping_ = filterChangedSidxMappings(this.mainPlaylistLoader_.main, this.mainPlaylistLoader_.sidxMapping_);\n      this.addSidxSegments_(this.media(), this.state, sidxChanged => {\n        // TODO: do we need to reload the current playlist?\n        this.refreshMedia_(this.media().id);\n      });\n    });\n  }\n  /**\n   * Refreshes the media playlist by re-parsing the main xml and updating playlist\n   * references. If this is an alternate loader, the updated parsed manifest is retrieved\n   * from the main loader.\n   */\n\n  refreshMedia_(mediaID) {\n    if (!mediaID) {\n      throw new Error('refreshMedia_ must take a media id');\n    } // for main we have to reparse the main xml\n    // to re-create segments based on current timing values\n    // which may change media. We only skip updating the main manifest\n    // if this is the first time this.media_ is being set.\n    // as main was just parsed in that case.\n\n    if (this.media_ && this.isMain_) {\n      this.handleMain_();\n    }\n    const playlists = this.mainPlaylistLoader_.main.playlists;\n    const mediaChanged = !this.media_ || this.media_ !== playlists[mediaID];\n    if (mediaChanged) {\n      this.media_ = playlists[mediaID];\n    } else {\n      this.trigger('playlistunchanged');\n    }\n    if (!this.mediaUpdateTimeout) {\n      const createMediaUpdateTimeout = () => {\n        if (this.media().endList) {\n          return;\n        }\n        this.mediaUpdateTimeout = window$1.setTimeout(() => {\n          this.trigger('mediaupdatetimeout');\n          createMediaUpdateTimeout();\n        }, refreshDelay(this.media(), Boolean(mediaChanged)));\n      };\n      createMediaUpdateTimeout();\n    }\n    this.trigger('loadedplaylist');\n  }\n  /**\n   * Takes eventstream data from a parsed DASH manifest and adds it to the metadata text track.\n   *\n   * @param {manifest} newMain the newly parsed manifest\n   */\n\n  addEventStreamToMetadataTrack_(newMain) {\n    // Only add new event stream metadata if we have a new manifest.\n    if (newMain && this.mainPlaylistLoader_.main.eventStream) {\n      // convert EventStream to ID3-like data.\n      const metadataArray = this.mainPlaylistLoader_.main.eventStream.map(eventStreamNode => {\n        return {\n          cueTime: eventStreamNode.start,\n          frames: [{\n            data: eventStreamNode.messageData\n          }]\n        };\n      });\n      this.addMetadataToTextTrack('EventStream', metadataArray, this.mainPlaylistLoader_.main.duration);\n    }\n  }\n  /**\n   * Returns the key ID set from a playlist\n   *\n   * @param {playlist} playlist to fetch the key ID set from.\n   * @return a Set of 32 digit hex strings that represent the unique keyIds for that playlist.\n   */\n\n  getKeyIdSet(playlist) {\n    if (playlist.contentProtection) {\n      const keyIds = new Set();\n      for (const keysystem in playlist.contentProtection) {\n        const defaultKID = playlist.contentProtection[keysystem].attributes['cenc:default_KID'];\n        if (defaultKID) {\n          // DASH keyIds are separated by dashes.\n          keyIds.add(defaultKID.replace(/-/g, '').toLowerCase());\n        }\n      }\n      return keyIds;\n    }\n  }\n}\nvar Config = {\n  GOAL_BUFFER_LENGTH: 30,\n  MAX_GOAL_BUFFER_LENGTH: 60,\n  BACK_BUFFER_LENGTH: 30,\n  GOAL_BUFFER_LENGTH_RATE: 1,\n  // 0.5 MB/s\n  INITIAL_BANDWIDTH: 4194304,\n  // A fudge factor to apply to advertised playlist bitrates to account for\n  // temporary flucations in client bandwidth\n  BANDWIDTH_VARIANCE: 1.2,\n  // How much of the buffer must be filled before we consider upswitching\n  BUFFER_LOW_WATER_LINE: 0,\n  MAX_BUFFER_LOW_WATER_LINE: 30,\n  // TODO: Remove this when experimentalBufferBasedABR is removed\n  EXPERIMENTAL_MAX_BUFFER_LOW_WATER_LINE: 16,\n  BUFFER_LOW_WATER_LINE_RATE: 1,\n  // If the buffer is greater than the high water line, we won't switch down\n  BUFFER_HIGH_WATER_LINE: 30\n};\nconst stringToArrayBuffer = string => {\n  const view = new Uint8Array(new ArrayBuffer(string.length));\n  for (let i = 0; i < string.length; i++) {\n    view[i] = string.charCodeAt(i);\n  }\n  return view.buffer;\n};\n\n/* global Blob, BlobBuilder, Worker */\n// unify worker interface\nconst browserWorkerPolyFill = function (workerObj) {\n  // node only supports on/off\n  workerObj.on = workerObj.addEventListener;\n  workerObj.off = workerObj.removeEventListener;\n  return workerObj;\n};\nconst createObjectURL = function (str) {\n  try {\n    return URL.createObjectURL(new Blob([str], {\n      type: 'application/javascript'\n    }));\n  } catch (e) {\n    const blob = new BlobBuilder();\n    blob.append(str);\n    return URL.createObjectURL(blob.getBlob());\n  }\n};\nconst factory = function (code) {\n  return function () {\n    const objectUrl = createObjectURL(code);\n    const worker = browserWorkerPolyFill(new Worker(objectUrl));\n    worker.objURL = objectUrl;\n    const terminate = worker.terminate;\n    worker.on = worker.addEventListener;\n    worker.off = worker.removeEventListener;\n    worker.terminate = function () {\n      URL.revokeObjectURL(objectUrl);\n      return terminate.call(this);\n    };\n    return worker;\n  };\n};\nconst transform = function (code) {\n  return `var browserWorkerPolyFill = ${browserWorkerPolyFill.toString()};\\n` + 'browserWorkerPolyFill(self);\\n' + code;\n};\nconst getWorkerString = function (fn) {\n  return fn.toString().replace(/^function.+?{/, '').slice(0, -1);\n};\n\n/* rollup-plugin-worker-factory start for worker!/home/runner/work/http-streaming/http-streaming/src/transmuxer-worker.js */\nconst workerCode$1 = transform(getWorkerString(function () {\n  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   *\n   * A lightweight readable stream implemention that handles event dispatching.\n   * Objects that inherit from streams should call init in their constructors.\n   */\n\n  var Stream$8 = function () {\n    this.init = function () {\n      var listeners = {};\n      /**\n       * Add a listener for a specified event type.\n       * @param type {string} the event name\n       * @param listener {function} the callback to be invoked when an event of\n       * the specified type occurs\n       */\n\n      this.on = function (type, listener) {\n        if (!listeners[type]) {\n          listeners[type] = [];\n        }\n        listeners[type] = listeners[type].concat(listener);\n      };\n      /**\n       * Remove a listener for a specified event type.\n       * @param type {string} the event name\n       * @param listener {function} a function previously registered for this\n       * type of event through `on`\n       */\n\n      this.off = function (type, listener) {\n        var index;\n        if (!listeners[type]) {\n          return false;\n        }\n        index = listeners[type].indexOf(listener);\n        listeners[type] = listeners[type].slice();\n        listeners[type].splice(index, 1);\n        return index > -1;\n      };\n      /**\n       * Trigger an event of the specified type on this stream. Any additional\n       * arguments to this function are passed as parameters to event listeners.\n       * @param type {string} the event name\n       */\n\n      this.trigger = function (type) {\n        var callbacks, i, length, args;\n        callbacks = listeners[type];\n        if (!callbacks) {\n          return;\n        } // Slicing the arguments on every invocation of this method\n        // can add a significant amount of overhead. Avoid the\n        // intermediate object creation for the common case of a\n        // single callback argument\n\n        if (arguments.length === 2) {\n          length = callbacks.length;\n          for (i = 0; i < length; ++i) {\n            callbacks[i].call(this, arguments[1]);\n          }\n        } else {\n          args = [];\n          i = arguments.length;\n          for (i = 1; i < arguments.length; ++i) {\n            args.push(arguments[i]);\n          }\n          length = callbacks.length;\n          for (i = 0; i < length; ++i) {\n            callbacks[i].apply(this, args);\n          }\n        }\n      };\n      /**\n       * Destroys the stream and cleans up.\n       */\n\n      this.dispose = function () {\n        listeners = {};\n      };\n    };\n  };\n  /**\n   * Forwards all `data` events on this stream to the destination stream. The\n   * destination stream should provide a method `push` to receive the data\n   * events as they arrive.\n   * @param destination {stream} the stream that will receive all `data` events\n   * @param autoFlush {boolean} if false, we will not call `flush` on the destination\n   *                            when the current stream emits a 'done' event\n   * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options\n   */\n\n  Stream$8.prototype.pipe = function (destination) {\n    this.on('data', function (data) {\n      destination.push(data);\n    });\n    this.on('done', function (flushSource) {\n      destination.flush(flushSource);\n    });\n    this.on('partialdone', function (flushSource) {\n      destination.partialFlush(flushSource);\n    });\n    this.on('endedtimeline', function (flushSource) {\n      destination.endTimeline(flushSource);\n    });\n    this.on('reset', function (flushSource) {\n      destination.reset(flushSource);\n    });\n    return destination;\n  }; // Default stream functions that are expected to be overridden to perform\n  // actual work. These are provided by the prototype as a sort of no-op\n  // implementation so that we don't have to check for their existence in the\n  // `pipe` function above.\n\n  Stream$8.prototype.push = function (data) {\n    this.trigger('data', data);\n  };\n  Stream$8.prototype.flush = function (flushSource) {\n    this.trigger('done', flushSource);\n  };\n  Stream$8.prototype.partialFlush = function (flushSource) {\n    this.trigger('partialdone', flushSource);\n  };\n  Stream$8.prototype.endTimeline = function (flushSource) {\n    this.trigger('endedtimeline', flushSource);\n  };\n  Stream$8.prototype.reset = function (flushSource) {\n    this.trigger('reset', flushSource);\n  };\n  var stream = Stream$8;\n  var MAX_UINT32$1 = Math.pow(2, 32);\n  var getUint64$3 = function (uint8) {\n    var dv = new DataView(uint8.buffer, uint8.byteOffset, uint8.byteLength);\n    var value;\n    if (dv.getBigUint64) {\n      value = dv.getBigUint64(0);\n      if (value < Number.MAX_SAFE_INTEGER) {\n        return Number(value);\n      }\n      return value;\n    }\n    return dv.getUint32(0) * MAX_UINT32$1 + dv.getUint32(4);\n  };\n  var numbers = {\n    getUint64: getUint64$3,\n    MAX_UINT32: MAX_UINT32$1\n  };\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   *\n   * Functions that generate fragmented MP4s suitable for use with Media\n   * Source Extensions.\n   */\n\n  var MAX_UINT32 = numbers.MAX_UINT32;\n  var box, dinf, esds, ftyp, mdat, mfhd, minf, moof, moov, mvex, mvhd, trak, tkhd, mdia, mdhd, hdlr, sdtp, stbl, stsd, traf, trex, trun$1, types, MAJOR_BRAND, MINOR_VERSION, AVC1_BRAND, VIDEO_HDLR, AUDIO_HDLR, HDLR_TYPES, VMHD, SMHD, DREF, STCO, STSC, STSZ, STTS; // pre-calculate constants\n\n  (function () {\n    var i;\n    types = {\n      avc1: [],\n      // codingname\n      avcC: [],\n      btrt: [],\n      dinf: [],\n      dref: [],\n      esds: [],\n      ftyp: [],\n      hdlr: [],\n      mdat: [],\n      mdhd: [],\n      mdia: [],\n      mfhd: [],\n      minf: [],\n      moof: [],\n      moov: [],\n      mp4a: [],\n      // codingname\n      mvex: [],\n      mvhd: [],\n      pasp: [],\n      sdtp: [],\n      smhd: [],\n      stbl: [],\n      stco: [],\n      stsc: [],\n      stsd: [],\n      stsz: [],\n      stts: [],\n      styp: [],\n      tfdt: [],\n      tfhd: [],\n      traf: [],\n      trak: [],\n      trun: [],\n      trex: [],\n      tkhd: [],\n      vmhd: []\n    }; // In environments where Uint8Array is undefined (e.g., IE8), skip set up so that we\n    // don't throw an error\n\n    if (typeof Uint8Array === 'undefined') {\n      return;\n    }\n    for (i in types) {\n      if (types.hasOwnProperty(i)) {\n        types[i] = [i.charCodeAt(0), i.charCodeAt(1), i.charCodeAt(2), i.charCodeAt(3)];\n      }\n    }\n    MAJOR_BRAND = new Uint8Array(['i'.charCodeAt(0), 's'.charCodeAt(0), 'o'.charCodeAt(0), 'm'.charCodeAt(0)]);\n    AVC1_BRAND = new Uint8Array(['a'.charCodeAt(0), 'v'.charCodeAt(0), 'c'.charCodeAt(0), '1'.charCodeAt(0)]);\n    MINOR_VERSION = new Uint8Array([0, 0, 0, 1]);\n    VIDEO_HDLR = new Uint8Array([0x00,\n    // version 0\n    0x00, 0x00, 0x00,\n    // flags\n    0x00, 0x00, 0x00, 0x00,\n    // pre_defined\n    0x76, 0x69, 0x64, 0x65,\n    // handler_type: 'vide'\n    0x00, 0x00, 0x00, 0x00,\n    // reserved\n    0x00, 0x00, 0x00, 0x00,\n    // reserved\n    0x00, 0x00, 0x00, 0x00,\n    // reserved\n    0x56, 0x69, 0x64, 0x65, 0x6f, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'VideoHandler'\n    ]);\n\n    AUDIO_HDLR = new Uint8Array([0x00,\n    // version 0\n    0x00, 0x00, 0x00,\n    // flags\n    0x00, 0x00, 0x00, 0x00,\n    // pre_defined\n    0x73, 0x6f, 0x75, 0x6e,\n    // handler_type: 'soun'\n    0x00, 0x00, 0x00, 0x00,\n    // reserved\n    0x00, 0x00, 0x00, 0x00,\n    // reserved\n    0x00, 0x00, 0x00, 0x00,\n    // reserved\n    0x53, 0x6f, 0x75, 0x6e, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'SoundHandler'\n    ]);\n\n    HDLR_TYPES = {\n      video: VIDEO_HDLR,\n      audio: AUDIO_HDLR\n    };\n    DREF = new Uint8Array([0x00,\n    // version 0\n    0x00, 0x00, 0x00,\n    // flags\n    0x00, 0x00, 0x00, 0x01,\n    // entry_count\n    0x00, 0x00, 0x00, 0x0c,\n    // entry_size\n    0x75, 0x72, 0x6c, 0x20,\n    // 'url' type\n    0x00,\n    // version 0\n    0x00, 0x00, 0x01 // entry_flags\n    ]);\n\n    SMHD = new Uint8Array([0x00,\n    // version\n    0x00, 0x00, 0x00,\n    // flags\n    0x00, 0x00,\n    // balance, 0 means centered\n    0x00, 0x00 // reserved\n    ]);\n\n    STCO = new Uint8Array([0x00,\n    // version\n    0x00, 0x00, 0x00,\n    // flags\n    0x00, 0x00, 0x00, 0x00 // entry_count\n    ]);\n\n    STSC = STCO;\n    STSZ = new Uint8Array([0x00,\n    // version\n    0x00, 0x00, 0x00,\n    // flags\n    0x00, 0x00, 0x00, 0x00,\n    // sample_size\n    0x00, 0x00, 0x00, 0x00 // sample_count\n    ]);\n\n    STTS = STCO;\n    VMHD = new Uint8Array([0x00,\n    // version\n    0x00, 0x00, 0x01,\n    // flags\n    0x00, 0x00,\n    // graphicsmode\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // opcolor\n    ]);\n  })();\n\n  box = function (type) {\n    var payload = [],\n      size = 0,\n      i,\n      result,\n      view;\n    for (i = 1; i < arguments.length; i++) {\n      payload.push(arguments[i]);\n    }\n    i = payload.length; // calculate the total size we need to allocate\n\n    while (i--) {\n      size += payload[i].byteLength;\n    }\n    result = new Uint8Array(size + 8);\n    view = new DataView(result.buffer, result.byteOffset, result.byteLength);\n    view.setUint32(0, result.byteLength);\n    result.set(type, 4); // copy the payload into the result\n\n    for (i = 0, size = 8; i < payload.length; i++) {\n      result.set(payload[i], size);\n      size += payload[i].byteLength;\n    }\n    return result;\n  };\n  dinf = function () {\n    return box(types.dinf, box(types.dref, DREF));\n  };\n  esds = function (track) {\n    return box(types.esds, new Uint8Array([0x00,\n    // version\n    0x00, 0x00, 0x00,\n    // flags\n    // ES_Descriptor\n    0x03,\n    // tag, ES_DescrTag\n    0x19,\n    // length\n    0x00, 0x00,\n    // ES_ID\n    0x00,\n    // streamDependenceFlag, URL_flag, reserved, streamPriority\n    // DecoderConfigDescriptor\n    0x04,\n    // tag, DecoderConfigDescrTag\n    0x11,\n    // length\n    0x40,\n    // object type\n    0x15,\n    // streamType\n    0x00, 0x06, 0x00,\n    // bufferSizeDB\n    0x00, 0x00, 0xda, 0xc0,\n    // maxBitrate\n    0x00, 0x00, 0xda, 0xc0,\n    // avgBitrate\n    // DecoderSpecificInfo\n    0x05,\n    // tag, DecoderSpecificInfoTag\n    0x02,\n    // length\n    // ISO/IEC 14496-3, AudioSpecificConfig\n    // for samplingFrequencyIndex see ISO/IEC 13818-7:2006, 8.1.3.2.2, Table 35\n    track.audioobjecttype << 3 | track.samplingfrequencyindex >>> 1, track.samplingfrequencyindex << 7 | track.channelcount << 3, 0x06, 0x01, 0x02 // GASpecificConfig\n    ]));\n  };\n\n  ftyp = function () {\n    return box(types.ftyp, MAJOR_BRAND, MINOR_VERSION, MAJOR_BRAND, AVC1_BRAND);\n  };\n  hdlr = function (type) {\n    return box(types.hdlr, HDLR_TYPES[type]);\n  };\n  mdat = function (data) {\n    return box(types.mdat, data);\n  };\n  mdhd = function (track) {\n    var result = new Uint8Array([0x00,\n    // version 0\n    0x00, 0x00, 0x00,\n    // flags\n    0x00, 0x00, 0x00, 0x02,\n    // creation_time\n    0x00, 0x00, 0x00, 0x03,\n    // modification_time\n    0x00, 0x01, 0x5f, 0x90,\n    // timescale, 90,000 \"ticks\" per second\n    track.duration >>> 24 & 0xFF, track.duration >>> 16 & 0xFF, track.duration >>> 8 & 0xFF, track.duration & 0xFF,\n    // duration\n    0x55, 0xc4,\n    // 'und' language (undetermined)\n    0x00, 0x00]); // Use the sample rate from the track metadata, when it is\n    // defined. The sample rate can be parsed out of an ADTS header, for\n    // instance.\n\n    if (track.samplerate) {\n      result[12] = track.samplerate >>> 24 & 0xFF;\n      result[13] = track.samplerate >>> 16 & 0xFF;\n      result[14] = track.samplerate >>> 8 & 0xFF;\n      result[15] = track.samplerate & 0xFF;\n    }\n    return box(types.mdhd, result);\n  };\n  mdia = function (track) {\n    return box(types.mdia, mdhd(track), hdlr(track.type), minf(track));\n  };\n  mfhd = function (sequenceNumber) {\n    return box(types.mfhd, new Uint8Array([0x00, 0x00, 0x00, 0x00,\n    // flags\n    (sequenceNumber & 0xFF000000) >> 24, (sequenceNumber & 0xFF0000) >> 16, (sequenceNumber & 0xFF00) >> 8, sequenceNumber & 0xFF // sequence_number\n    ]));\n  };\n\n  minf = function (track) {\n    return box(types.minf, track.type === 'video' ? box(types.vmhd, VMHD) : box(types.smhd, SMHD), dinf(), stbl(track));\n  };\n  moof = function (sequenceNumber, tracks) {\n    var trackFragments = [],\n      i = tracks.length; // build traf boxes for each track fragment\n\n    while (i--) {\n      trackFragments[i] = traf(tracks[i]);\n    }\n    return box.apply(null, [types.moof, mfhd(sequenceNumber)].concat(trackFragments));\n  };\n  /**\n   * Returns a movie box.\n   * @param tracks {array} the tracks associated with this movie\n   * @see ISO/IEC 14496-12:2012(E), section 8.2.1\n   */\n\n  moov = function (tracks) {\n    var i = tracks.length,\n      boxes = [];\n    while (i--) {\n      boxes[i] = trak(tracks[i]);\n    }\n    return box.apply(null, [types.moov, mvhd(0xffffffff)].concat(boxes).concat(mvex(tracks)));\n  };\n  mvex = function (tracks) {\n    var i = tracks.length,\n      boxes = [];\n    while (i--) {\n      boxes[i] = trex(tracks[i]);\n    }\n    return box.apply(null, [types.mvex].concat(boxes));\n  };\n  mvhd = function (duration) {\n    var bytes = new Uint8Array([0x00,\n    // version 0\n    0x00, 0x00, 0x00,\n    // flags\n    0x00, 0x00, 0x00, 0x01,\n    // creation_time\n    0x00, 0x00, 0x00, 0x02,\n    // modification_time\n    0x00, 0x01, 0x5f, 0x90,\n    // timescale, 90,000 \"ticks\" per second\n    (duration & 0xFF000000) >> 24, (duration & 0xFF0000) >> 16, (duration & 0xFF00) >> 8, duration & 0xFF,\n    // duration\n    0x00, 0x01, 0x00, 0x00,\n    // 1.0 rate\n    0x01, 0x00,\n    // 1.0 volume\n    0x00, 0x00,\n    // reserved\n    0x00, 0x00, 0x00, 0x00,\n    // reserved\n    0x00, 0x00, 0x00, 0x00,\n    // reserved\n    0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,\n    // transformation: unity matrix\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    // pre_defined\n    0xff, 0xff, 0xff, 0xff // next_track_ID\n    ]);\n\n    return box(types.mvhd, bytes);\n  };\n  sdtp = function (track) {\n    var samples = track.samples || [],\n      bytes = new Uint8Array(4 + samples.length),\n      flags,\n      i; // leave the full box header (4 bytes) all zero\n    // write the sample table\n\n    for (i = 0; i < samples.length; i++) {\n      flags = samples[i].flags;\n      bytes[i + 4] = flags.dependsOn << 4 | flags.isDependedOn << 2 | flags.hasRedundancy;\n    }\n    return box(types.sdtp, bytes);\n  };\n  stbl = function (track) {\n    return box(types.stbl, stsd(track), box(types.stts, STTS), box(types.stsc, STSC), box(types.stsz, STSZ), box(types.stco, STCO));\n  };\n  (function () {\n    var videoSample, audioSample;\n    stsd = function (track) {\n      return box(types.stsd, new Uint8Array([0x00,\n      // version 0\n      0x00, 0x00, 0x00,\n      // flags\n      0x00, 0x00, 0x00, 0x01]), track.type === 'video' ? videoSample(track) : audioSample(track));\n    };\n    videoSample = function (track) {\n      var sps = track.sps || [],\n        pps = track.pps || [],\n        sequenceParameterSets = [],\n        pictureParameterSets = [],\n        i,\n        avc1Box; // assemble the SPSs\n\n      for (i = 0; i < sps.length; i++) {\n        sequenceParameterSets.push((sps[i].byteLength & 0xFF00) >>> 8);\n        sequenceParameterSets.push(sps[i].byteLength & 0xFF); // sequenceParameterSetLength\n\n        sequenceParameterSets = sequenceParameterSets.concat(Array.prototype.slice.call(sps[i])); // SPS\n      } // assemble the PPSs\n\n      for (i = 0; i < pps.length; i++) {\n        pictureParameterSets.push((pps[i].byteLength & 0xFF00) >>> 8);\n        pictureParameterSets.push(pps[i].byteLength & 0xFF);\n        pictureParameterSets = pictureParameterSets.concat(Array.prototype.slice.call(pps[i]));\n      }\n      avc1Box = [types.avc1, new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n      // reserved\n      0x00, 0x01,\n      // data_reference_index\n      0x00, 0x00,\n      // pre_defined\n      0x00, 0x00,\n      // reserved\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n      // pre_defined\n      (track.width & 0xff00) >> 8, track.width & 0xff,\n      // width\n      (track.height & 0xff00) >> 8, track.height & 0xff,\n      // height\n      0x00, 0x48, 0x00, 0x00,\n      // horizresolution\n      0x00, 0x48, 0x00, 0x00,\n      // vertresolution\n      0x00, 0x00, 0x00, 0x00,\n      // reserved\n      0x00, 0x01,\n      // frame_count\n      0x13, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x6a, 0x73, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x2d, 0x68, 0x6c, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n      // compressorname\n      0x00, 0x18,\n      // depth = 24\n      0x11, 0x11 // pre_defined = -1\n      ]), box(types.avcC, new Uint8Array([0x01,\n      // configurationVersion\n      track.profileIdc,\n      // AVCProfileIndication\n      track.profileCompatibility,\n      // profile_compatibility\n      track.levelIdc,\n      // AVCLevelIndication\n      0xff // lengthSizeMinusOne, hard-coded to 4 bytes\n      ].concat([sps.length],\n      // numOfSequenceParameterSets\n      sequenceParameterSets,\n      // \"SPS\"\n      [pps.length],\n      // numOfPictureParameterSets\n      pictureParameterSets // \"PPS\"\n      ))), box(types.btrt, new Uint8Array([0x00, 0x1c, 0x9c, 0x80,\n      // bufferSizeDB\n      0x00, 0x2d, 0xc6, 0xc0,\n      // maxBitrate\n      0x00, 0x2d, 0xc6, 0xc0 // avgBitrate\n      ]))];\n\n      if (track.sarRatio) {\n        var hSpacing = track.sarRatio[0],\n          vSpacing = track.sarRatio[1];\n        avc1Box.push(box(types.pasp, new Uint8Array([(hSpacing & 0xFF000000) >> 24, (hSpacing & 0xFF0000) >> 16, (hSpacing & 0xFF00) >> 8, hSpacing & 0xFF, (vSpacing & 0xFF000000) >> 24, (vSpacing & 0xFF0000) >> 16, (vSpacing & 0xFF00) >> 8, vSpacing & 0xFF])));\n      }\n      return box.apply(null, avc1Box);\n    };\n    audioSample = function (track) {\n      return box(types.mp4a, new Uint8Array([\n      // SampleEntry, ISO/IEC 14496-12\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n      // reserved\n      0x00, 0x01,\n      // data_reference_index\n      // AudioSampleEntry, ISO/IEC 14496-12\n      0x00, 0x00, 0x00, 0x00,\n      // reserved\n      0x00, 0x00, 0x00, 0x00,\n      // reserved\n      (track.channelcount & 0xff00) >> 8, track.channelcount & 0xff,\n      // channelcount\n      (track.samplesize & 0xff00) >> 8, track.samplesize & 0xff,\n      // samplesize\n      0x00, 0x00,\n      // pre_defined\n      0x00, 0x00,\n      // reserved\n      (track.samplerate & 0xff00) >> 8, track.samplerate & 0xff, 0x00, 0x00 // samplerate, 16.16\n      // MP4AudioSampleEntry, ISO/IEC 14496-14\n      ]), esds(track));\n    };\n  })();\n  tkhd = function (track) {\n    var result = new Uint8Array([0x00,\n    // version 0\n    0x00, 0x00, 0x07,\n    // flags\n    0x00, 0x00, 0x00, 0x00,\n    // creation_time\n    0x00, 0x00, 0x00, 0x00,\n    // modification_time\n    (track.id & 0xFF000000) >> 24, (track.id & 0xFF0000) >> 16, (track.id & 0xFF00) >> 8, track.id & 0xFF,\n    // track_ID\n    0x00, 0x00, 0x00, 0x00,\n    // reserved\n    (track.duration & 0xFF000000) >> 24, (track.duration & 0xFF0000) >> 16, (track.duration & 0xFF00) >> 8, track.duration & 0xFF,\n    // duration\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    // reserved\n    0x00, 0x00,\n    // layer\n    0x00, 0x00,\n    // alternate_group\n    0x01, 0x00,\n    // non-audio track volume\n    0x00, 0x00,\n    // reserved\n    0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,\n    // transformation: unity matrix\n    (track.width & 0xFF00) >> 8, track.width & 0xFF, 0x00, 0x00,\n    // width\n    (track.height & 0xFF00) >> 8, track.height & 0xFF, 0x00, 0x00 // height\n    ]);\n\n    return box(types.tkhd, result);\n  };\n  /**\n   * Generate a track fragment (traf) box. A traf box collects metadata\n   * about tracks in a movie fragment (moof) box.\n   */\n\n  traf = function (track) {\n    var trackFragmentHeader, trackFragmentDecodeTime, trackFragmentRun, sampleDependencyTable, dataOffset, upperWordBaseMediaDecodeTime, lowerWordBaseMediaDecodeTime;\n    trackFragmentHeader = box(types.tfhd, new Uint8Array([0x00,\n    // version 0\n    0x00, 0x00, 0x3a,\n    // flags\n    (track.id & 0xFF000000) >> 24, (track.id & 0xFF0000) >> 16, (track.id & 0xFF00) >> 8, track.id & 0xFF,\n    // track_ID\n    0x00, 0x00, 0x00, 0x01,\n    // sample_description_index\n    0x00, 0x00, 0x00, 0x00,\n    // default_sample_duration\n    0x00, 0x00, 0x00, 0x00,\n    // default_sample_size\n    0x00, 0x00, 0x00, 0x00 // default_sample_flags\n    ]));\n\n    upperWordBaseMediaDecodeTime = Math.floor(track.baseMediaDecodeTime / MAX_UINT32);\n    lowerWordBaseMediaDecodeTime = Math.floor(track.baseMediaDecodeTime % MAX_UINT32);\n    trackFragmentDecodeTime = box(types.tfdt, new Uint8Array([0x01,\n    // version 1\n    0x00, 0x00, 0x00,\n    // flags\n    // baseMediaDecodeTime\n    upperWordBaseMediaDecodeTime >>> 24 & 0xFF, upperWordBaseMediaDecodeTime >>> 16 & 0xFF, upperWordBaseMediaDecodeTime >>> 8 & 0xFF, upperWordBaseMediaDecodeTime & 0xFF, lowerWordBaseMediaDecodeTime >>> 24 & 0xFF, lowerWordBaseMediaDecodeTime >>> 16 & 0xFF, lowerWordBaseMediaDecodeTime >>> 8 & 0xFF, lowerWordBaseMediaDecodeTime & 0xFF])); // the data offset specifies the number of bytes from the start of\n    // the containing moof to the first payload byte of the associated\n    // mdat\n\n    dataOffset = 32 +\n    // tfhd\n    20 +\n    // tfdt\n    8 +\n    // traf header\n    16 +\n    // mfhd\n    8 +\n    // moof header\n    8; // mdat header\n    // audio tracks require less metadata\n\n    if (track.type === 'audio') {\n      trackFragmentRun = trun$1(track, dataOffset);\n      return box(types.traf, trackFragmentHeader, trackFragmentDecodeTime, trackFragmentRun);\n    } // video tracks should contain an independent and disposable samples\n    // box (sdtp)\n    // generate one and adjust offsets to match\n\n    sampleDependencyTable = sdtp(track);\n    trackFragmentRun = trun$1(track, sampleDependencyTable.length + dataOffset);\n    return box(types.traf, trackFragmentHeader, trackFragmentDecodeTime, trackFragmentRun, sampleDependencyTable);\n  };\n  /**\n   * Generate a track box.\n   * @param track {object} a track definition\n   * @return {Uint8Array} the track box\n   */\n\n  trak = function (track) {\n    track.duration = track.duration || 0xffffffff;\n    return box(types.trak, tkhd(track), mdia(track));\n  };\n  trex = function (track) {\n    var result = new Uint8Array([0x00,\n    // version 0\n    0x00, 0x00, 0x00,\n    // flags\n    (track.id & 0xFF000000) >> 24, (track.id & 0xFF0000) >> 16, (track.id & 0xFF00) >> 8, track.id & 0xFF,\n    // track_ID\n    0x00, 0x00, 0x00, 0x01,\n    // default_sample_description_index\n    0x00, 0x00, 0x00, 0x00,\n    // default_sample_duration\n    0x00, 0x00, 0x00, 0x00,\n    // default_sample_size\n    0x00, 0x01, 0x00, 0x01 // default_sample_flags\n    ]); // the last two bytes of default_sample_flags is the sample\n    // degradation priority, a hint about the importance of this sample\n    // relative to others. Lower the degradation priority for all sample\n    // types other than video.\n\n    if (track.type !== 'video') {\n      result[result.length - 1] = 0x00;\n    }\n    return box(types.trex, result);\n  };\n  (function () {\n    var audioTrun, videoTrun, trunHeader; // This method assumes all samples are uniform. That is, if a\n    // duration is present for the first sample, it will be present for\n    // all subsequent samples.\n    // see ISO/IEC 14496-12:2012, Section 8.8.8.1\n\n    trunHeader = function (samples, offset) {\n      var durationPresent = 0,\n        sizePresent = 0,\n        flagsPresent = 0,\n        compositionTimeOffset = 0; // trun flag constants\n\n      if (samples.length) {\n        if (samples[0].duration !== undefined) {\n          durationPresent = 0x1;\n        }\n        if (samples[0].size !== undefined) {\n          sizePresent = 0x2;\n        }\n        if (samples[0].flags !== undefined) {\n          flagsPresent = 0x4;\n        }\n        if (samples[0].compositionTimeOffset !== undefined) {\n          compositionTimeOffset = 0x8;\n        }\n      }\n      return [0x00,\n      // version 0\n      0x00, durationPresent | sizePresent | flagsPresent | compositionTimeOffset, 0x01,\n      // flags\n      (samples.length & 0xFF000000) >>> 24, (samples.length & 0xFF0000) >>> 16, (samples.length & 0xFF00) >>> 8, samples.length & 0xFF,\n      // sample_count\n      (offset & 0xFF000000) >>> 24, (offset & 0xFF0000) >>> 16, (offset & 0xFF00) >>> 8, offset & 0xFF // data_offset\n      ];\n    };\n\n    videoTrun = function (track, offset) {\n      var bytesOffest, bytes, header, samples, sample, i;\n      samples = track.samples || [];\n      offset += 8 + 12 + 16 * samples.length;\n      header = trunHeader(samples, offset);\n      bytes = new Uint8Array(header.length + samples.length * 16);\n      bytes.set(header);\n      bytesOffest = header.length;\n      for (i = 0; i < samples.length; i++) {\n        sample = samples[i];\n        bytes[bytesOffest++] = (sample.duration & 0xFF000000) >>> 24;\n        bytes[bytesOffest++] = (sample.duration & 0xFF0000) >>> 16;\n        bytes[bytesOffest++] = (sample.duration & 0xFF00) >>> 8;\n        bytes[bytesOffest++] = sample.duration & 0xFF; // sample_duration\n\n        bytes[bytesOffest++] = (sample.size & 0xFF000000) >>> 24;\n        bytes[bytesOffest++] = (sample.size & 0xFF0000) >>> 16;\n        bytes[bytesOffest++] = (sample.size & 0xFF00) >>> 8;\n        bytes[bytesOffest++] = sample.size & 0xFF; // sample_size\n\n        bytes[bytesOffest++] = sample.flags.isLeading << 2 | sample.flags.dependsOn;\n        bytes[bytesOffest++] = sample.flags.isDependedOn << 6 | sample.flags.hasRedundancy << 4 | sample.flags.paddingValue << 1 | sample.flags.isNonSyncSample;\n        bytes[bytesOffest++] = sample.flags.degradationPriority & 0xF0 << 8;\n        bytes[bytesOffest++] = sample.flags.degradationPriority & 0x0F; // sample_flags\n\n        bytes[bytesOffest++] = (sample.compositionTimeOffset & 0xFF000000) >>> 24;\n        bytes[bytesOffest++] = (sample.compositionTimeOffset & 0xFF0000) >>> 16;\n        bytes[bytesOffest++] = (sample.compositionTimeOffset & 0xFF00) >>> 8;\n        bytes[bytesOffest++] = sample.compositionTimeOffset & 0xFF; // sample_composition_time_offset\n      }\n\n      return box(types.trun, bytes);\n    };\n    audioTrun = function (track, offset) {\n      var bytes, bytesOffest, header, samples, sample, i;\n      samples = track.samples || [];\n      offset += 8 + 12 + 8 * samples.length;\n      header = trunHeader(samples, offset);\n      bytes = new Uint8Array(header.length + samples.length * 8);\n      bytes.set(header);\n      bytesOffest = header.length;\n      for (i = 0; i < samples.length; i++) {\n        sample = samples[i];\n        bytes[bytesOffest++] = (sample.duration & 0xFF000000) >>> 24;\n        bytes[bytesOffest++] = (sample.duration & 0xFF0000) >>> 16;\n        bytes[bytesOffest++] = (sample.duration & 0xFF00) >>> 8;\n        bytes[bytesOffest++] = sample.duration & 0xFF; // sample_duration\n\n        bytes[bytesOffest++] = (sample.size & 0xFF000000) >>> 24;\n        bytes[bytesOffest++] = (sample.size & 0xFF0000) >>> 16;\n        bytes[bytesOffest++] = (sample.size & 0xFF00) >>> 8;\n        bytes[bytesOffest++] = sample.size & 0xFF; // sample_size\n      }\n\n      return box(types.trun, bytes);\n    };\n    trun$1 = function (track, offset) {\n      if (track.type === 'audio') {\n        return audioTrun(track, offset);\n      }\n      return videoTrun(track, offset);\n    };\n  })();\n  var mp4Generator = {\n    ftyp: ftyp,\n    mdat: mdat,\n    moof: moof,\n    moov: moov,\n    initSegment: function (tracks) {\n      var fileType = ftyp(),\n        movie = moov(tracks),\n        result;\n      result = new Uint8Array(fileType.byteLength + movie.byteLength);\n      result.set(fileType);\n      result.set(movie, fileType.byteLength);\n      return result;\n    }\n  };\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   */\n  // composed of the nal units that make up that frame\n  // Also keep track of cummulative data about the frame from the nal units such\n  // as the frame duration, starting pts, etc.\n\n  var groupNalsIntoFrames = function (nalUnits) {\n    var i,\n      currentNal,\n      currentFrame = [],\n      frames = []; // TODO added for LHLS, make sure this is OK\n\n    frames.byteLength = 0;\n    frames.nalCount = 0;\n    frames.duration = 0;\n    currentFrame.byteLength = 0;\n    for (i = 0; i < nalUnits.length; i++) {\n      currentNal = nalUnits[i]; // Split on 'aud'-type nal units\n\n      if (currentNal.nalUnitType === 'access_unit_delimiter_rbsp') {\n        // Since the very first nal unit is expected to be an AUD\n        // only push to the frames array when currentFrame is not empty\n        if (currentFrame.length) {\n          currentFrame.duration = currentNal.dts - currentFrame.dts; // TODO added for LHLS, make sure this is OK\n\n          frames.byteLength += currentFrame.byteLength;\n          frames.nalCount += currentFrame.length;\n          frames.duration += currentFrame.duration;\n          frames.push(currentFrame);\n        }\n        currentFrame = [currentNal];\n        currentFrame.byteLength = currentNal.data.byteLength;\n        currentFrame.pts = currentNal.pts;\n        currentFrame.dts = currentNal.dts;\n      } else {\n        // Specifically flag key frames for ease of use later\n        if (currentNal.nalUnitType === 'slice_layer_without_partitioning_rbsp_idr') {\n          currentFrame.keyFrame = true;\n        }\n        currentFrame.duration = currentNal.dts - currentFrame.dts;\n        currentFrame.byteLength += currentNal.data.byteLength;\n        currentFrame.push(currentNal);\n      }\n    } // For the last frame, use the duration of the previous frame if we\n    // have nothing better to go on\n\n    if (frames.length && (!currentFrame.duration || currentFrame.duration <= 0)) {\n      currentFrame.duration = frames[frames.length - 1].duration;\n    } // Push the final frame\n    // TODO added for LHLS, make sure this is OK\n\n    frames.byteLength += currentFrame.byteLength;\n    frames.nalCount += currentFrame.length;\n    frames.duration += currentFrame.duration;\n    frames.push(currentFrame);\n    return frames;\n  }; // Convert an array of frames into an array of Gop with each Gop being composed\n  // of the frames that make up that Gop\n  // Also keep track of cummulative data about the Gop from the frames such as the\n  // Gop duration, starting pts, etc.\n\n  var groupFramesIntoGops = function (frames) {\n    var i,\n      currentFrame,\n      currentGop = [],\n      gops = []; // We must pre-set some of the values on the Gop since we\n    // keep running totals of these values\n\n    currentGop.byteLength = 0;\n    currentGop.nalCount = 0;\n    currentGop.duration = 0;\n    currentGop.pts = frames[0].pts;\n    currentGop.dts = frames[0].dts; // store some metadata about all the Gops\n\n    gops.byteLength = 0;\n    gops.nalCount = 0;\n    gops.duration = 0;\n    gops.pts = frames[0].pts;\n    gops.dts = frames[0].dts;\n    for (i = 0; i < frames.length; i++) {\n      currentFrame = frames[i];\n      if (currentFrame.keyFrame) {\n        // Since the very first frame is expected to be an keyframe\n        // only push to the gops array when currentGop is not empty\n        if (currentGop.length) {\n          gops.push(currentGop);\n          gops.byteLength += currentGop.byteLength;\n          gops.nalCount += currentGop.nalCount;\n          gops.duration += currentGop.duration;\n        }\n        currentGop = [currentFrame];\n        currentGop.nalCount = currentFrame.length;\n        currentGop.byteLength = currentFrame.byteLength;\n        currentGop.pts = currentFrame.pts;\n        currentGop.dts = currentFrame.dts;\n        currentGop.duration = currentFrame.duration;\n      } else {\n        currentGop.duration += currentFrame.duration;\n        currentGop.nalCount += currentFrame.length;\n        currentGop.byteLength += currentFrame.byteLength;\n        currentGop.push(currentFrame);\n      }\n    }\n    if (gops.length && currentGop.duration <= 0) {\n      currentGop.duration = gops[gops.length - 1].duration;\n    }\n    gops.byteLength += currentGop.byteLength;\n    gops.nalCount += currentGop.nalCount;\n    gops.duration += currentGop.duration; // push the final Gop\n\n    gops.push(currentGop);\n    return gops;\n  };\n  /*\n   * Search for the first keyframe in the GOPs and throw away all frames\n   * until that keyframe. Then extend the duration of the pulled keyframe\n   * and pull the PTS and DTS of the keyframe so that it covers the time\n   * range of the frames that were disposed.\n   *\n   * @param {Array} gops video GOPs\n   * @returns {Array} modified video GOPs\n   */\n\n  var extendFirstKeyFrame = function (gops) {\n    var currentGop;\n    if (!gops[0][0].keyFrame && gops.length > 1) {\n      // Remove the first GOP\n      currentGop = gops.shift();\n      gops.byteLength -= currentGop.byteLength;\n      gops.nalCount -= currentGop.nalCount; // Extend the first frame of what is now the\n      // first gop to cover the time period of the\n      // frames we just removed\n\n      gops[0][0].dts = currentGop.dts;\n      gops[0][0].pts = currentGop.pts;\n      gops[0][0].duration += currentGop.duration;\n    }\n    return gops;\n  };\n  /**\n   * Default sample object\n   * see ISO/IEC 14496-12:2012, section 8.6.4.3\n   */\n\n  var createDefaultSample = function () {\n    return {\n      size: 0,\n      flags: {\n        isLeading: 0,\n        dependsOn: 1,\n        isDependedOn: 0,\n        hasRedundancy: 0,\n        degradationPriority: 0,\n        isNonSyncSample: 1\n      }\n    };\n  };\n  /*\n   * Collates information from a video frame into an object for eventual\n   * entry into an MP4 sample table.\n   *\n   * @param {Object} frame the video frame\n   * @param {Number} dataOffset the byte offset to position the sample\n   * @return {Object} object containing sample table info for a frame\n   */\n\n  var sampleForFrame = function (frame, dataOffset) {\n    var sample = createDefaultSample();\n    sample.dataOffset = dataOffset;\n    sample.compositionTimeOffset = frame.pts - frame.dts;\n    sample.duration = frame.duration;\n    sample.size = 4 * frame.length; // Space for nal unit size\n\n    sample.size += frame.byteLength;\n    if (frame.keyFrame) {\n      sample.flags.dependsOn = 2;\n      sample.flags.isNonSyncSample = 0;\n    }\n    return sample;\n  }; // generate the track's sample table from an array of gops\n\n  var generateSampleTable$1 = function (gops, baseDataOffset) {\n    var h,\n      i,\n      sample,\n      currentGop,\n      currentFrame,\n      dataOffset = baseDataOffset || 0,\n      samples = [];\n    for (h = 0; h < gops.length; h++) {\n      currentGop = gops[h];\n      for (i = 0; i < currentGop.length; i++) {\n        currentFrame = currentGop[i];\n        sample = sampleForFrame(currentFrame, dataOffset);\n        dataOffset += sample.size;\n        samples.push(sample);\n      }\n    }\n    return samples;\n  }; // generate the track's raw mdat data from an array of gops\n\n  var concatenateNalData = function (gops) {\n    var h,\n      i,\n      j,\n      currentGop,\n      currentFrame,\n      currentNal,\n      dataOffset = 0,\n      nalsByteLength = gops.byteLength,\n      numberOfNals = gops.nalCount,\n      totalByteLength = nalsByteLength + 4 * numberOfNals,\n      data = new Uint8Array(totalByteLength),\n      view = new DataView(data.buffer); // For each Gop..\n\n    for (h = 0; h < gops.length; h++) {\n      currentGop = gops[h]; // For each Frame..\n\n      for (i = 0; i < currentGop.length; i++) {\n        currentFrame = currentGop[i]; // For each NAL..\n\n        for (j = 0; j < currentFrame.length; j++) {\n          currentNal = currentFrame[j];\n          view.setUint32(dataOffset, currentNal.data.byteLength);\n          dataOffset += 4;\n          data.set(currentNal.data, dataOffset);\n          dataOffset += currentNal.data.byteLength;\n        }\n      }\n    }\n    return data;\n  }; // generate the track's sample table from a frame\n\n  var generateSampleTableForFrame = function (frame, baseDataOffset) {\n    var sample,\n      dataOffset = baseDataOffset || 0,\n      samples = [];\n    sample = sampleForFrame(frame, dataOffset);\n    samples.push(sample);\n    return samples;\n  }; // generate the track's raw mdat data from a frame\n\n  var concatenateNalDataForFrame = function (frame) {\n    var i,\n      currentNal,\n      dataOffset = 0,\n      nalsByteLength = frame.byteLength,\n      numberOfNals = frame.length,\n      totalByteLength = nalsByteLength + 4 * numberOfNals,\n      data = new Uint8Array(totalByteLength),\n      view = new DataView(data.buffer); // For each NAL..\n\n    for (i = 0; i < frame.length; i++) {\n      currentNal = frame[i];\n      view.setUint32(dataOffset, currentNal.data.byteLength);\n      dataOffset += 4;\n      data.set(currentNal.data, dataOffset);\n      dataOffset += currentNal.data.byteLength;\n    }\n    return data;\n  };\n  var frameUtils$1 = {\n    groupNalsIntoFrames: groupNalsIntoFrames,\n    groupFramesIntoGops: groupFramesIntoGops,\n    extendFirstKeyFrame: extendFirstKeyFrame,\n    generateSampleTable: generateSampleTable$1,\n    concatenateNalData: concatenateNalData,\n    generateSampleTableForFrame: generateSampleTableForFrame,\n    concatenateNalDataForFrame: concatenateNalDataForFrame\n  };\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   */\n\n  var highPrefix = [33, 16, 5, 32, 164, 27];\n  var lowPrefix = [33, 65, 108, 84, 1, 2, 4, 8, 168, 2, 4, 8, 17, 191, 252];\n  var zeroFill = function (count) {\n    var a = [];\n    while (count--) {\n      a.push(0);\n    }\n    return a;\n  };\n  var makeTable = function (metaTable) {\n    return Object.keys(metaTable).reduce(function (obj, key) {\n      obj[key] = new Uint8Array(metaTable[key].reduce(function (arr, part) {\n        return arr.concat(part);\n      }, []));\n      return obj;\n    }, {});\n  };\n  var silence;\n  var silence_1 = function () {\n    if (!silence) {\n      // Frames-of-silence to use for filling in missing AAC frames\n      var coneOfSilence = {\n        96000: [highPrefix, [227, 64], zeroFill(154), [56]],\n        88200: [highPrefix, [231], zeroFill(170), [56]],\n        64000: [highPrefix, [248, 192], zeroFill(240), [56]],\n        48000: [highPrefix, [255, 192], zeroFill(268), [55, 148, 128], zeroFill(54), [112]],\n        44100: [highPrefix, [255, 192], zeroFill(268), [55, 163, 128], zeroFill(84), [112]],\n        32000: [highPrefix, [255, 192], zeroFill(268), [55, 234], zeroFill(226), [112]],\n        24000: [highPrefix, [255, 192], zeroFill(268), [55, 255, 128], zeroFill(268), [111, 112], zeroFill(126), [224]],\n        16000: [highPrefix, [255, 192], zeroFill(268), [55, 255, 128], zeroFill(268), [111, 255], zeroFill(269), [223, 108], zeroFill(195), [1, 192]],\n        12000: [lowPrefix, zeroFill(268), [3, 127, 248], zeroFill(268), [6, 255, 240], zeroFill(268), [13, 255, 224], zeroFill(268), [27, 253, 128], zeroFill(259), [56]],\n        11025: [lowPrefix, zeroFill(268), [3, 127, 248], zeroFill(268), [6, 255, 240], zeroFill(268), [13, 255, 224], zeroFill(268), [27, 255, 192], zeroFill(268), [55, 175, 128], zeroFill(108), [112]],\n        8000: [lowPrefix, zeroFill(268), [3, 121, 16], zeroFill(47), [7]]\n      };\n      silence = makeTable(coneOfSilence);\n    }\n    return silence;\n  };\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   */\n\n  var ONE_SECOND_IN_TS$4 = 90000,\n    // 90kHz clock\n    secondsToVideoTs,\n    secondsToAudioTs,\n    videoTsToSeconds,\n    audioTsToSeconds,\n    audioTsToVideoTs,\n    videoTsToAudioTs,\n    metadataTsToSeconds;\n  secondsToVideoTs = function (seconds) {\n    return seconds * ONE_SECOND_IN_TS$4;\n  };\n  secondsToAudioTs = function (seconds, sampleRate) {\n    return seconds * sampleRate;\n  };\n  videoTsToSeconds = function (timestamp) {\n    return timestamp / ONE_SECOND_IN_TS$4;\n  };\n  audioTsToSeconds = function (timestamp, sampleRate) {\n    return timestamp / sampleRate;\n  };\n  audioTsToVideoTs = function (timestamp, sampleRate) {\n    return secondsToVideoTs(audioTsToSeconds(timestamp, sampleRate));\n  };\n  videoTsToAudioTs = function (timestamp, sampleRate) {\n    return secondsToAudioTs(videoTsToSeconds(timestamp), sampleRate);\n  };\n  /**\n   * Adjust ID3 tag or caption timing information by the timeline pts values\n   * (if keepOriginalTimestamps is false) and convert to seconds\n   */\n\n  metadataTsToSeconds = function (timestamp, timelineStartPts, keepOriginalTimestamps) {\n    return videoTsToSeconds(keepOriginalTimestamps ? timestamp : timestamp - timelineStartPts);\n  };\n  var clock$2 = {\n    ONE_SECOND_IN_TS: ONE_SECOND_IN_TS$4,\n    secondsToVideoTs: secondsToVideoTs,\n    secondsToAudioTs: secondsToAudioTs,\n    videoTsToSeconds: videoTsToSeconds,\n    audioTsToSeconds: audioTsToSeconds,\n    audioTsToVideoTs: audioTsToVideoTs,\n    videoTsToAudioTs: videoTsToAudioTs,\n    metadataTsToSeconds: metadataTsToSeconds\n  };\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   */\n\n  var coneOfSilence = silence_1;\n  var clock$1 = clock$2;\n  /**\n   * Sum the `byteLength` properties of the data in each AAC frame\n   */\n\n  var sumFrameByteLengths = function (array) {\n    var i,\n      currentObj,\n      sum = 0; // sum the byteLength's all each nal unit in the frame\n\n    for (i = 0; i < array.length; i++) {\n      currentObj = array[i];\n      sum += currentObj.data.byteLength;\n    }\n    return sum;\n  }; // Possibly pad (prefix) the audio track with silence if appending this track\n  // would lead to the introduction of a gap in the audio buffer\n\n  var prefixWithSilence = function (track, frames, audioAppendStartTs, videoBaseMediaDecodeTime) {\n    var baseMediaDecodeTimeTs,\n      frameDuration = 0,\n      audioGapDuration = 0,\n      audioFillFrameCount = 0,\n      audioFillDuration = 0,\n      silentFrame,\n      i,\n      firstFrame;\n    if (!frames.length) {\n      return;\n    }\n    baseMediaDecodeTimeTs = clock$1.audioTsToVideoTs(track.baseMediaDecodeTime, track.samplerate); // determine frame clock duration based on sample rate, round up to avoid overfills\n\n    frameDuration = Math.ceil(clock$1.ONE_SECOND_IN_TS / (track.samplerate / 1024));\n    if (audioAppendStartTs && videoBaseMediaDecodeTime) {\n      // insert the shortest possible amount (audio gap or audio to video gap)\n      audioGapDuration = baseMediaDecodeTimeTs - Math.max(audioAppendStartTs, videoBaseMediaDecodeTime); // number of full frames in the audio gap\n\n      audioFillFrameCount = Math.floor(audioGapDuration / frameDuration);\n      audioFillDuration = audioFillFrameCount * frameDuration;\n    } // don't attempt to fill gaps smaller than a single frame or larger\n    // than a half second\n\n    if (audioFillFrameCount < 1 || audioFillDuration > clock$1.ONE_SECOND_IN_TS / 2) {\n      return;\n    }\n    silentFrame = coneOfSilence()[track.samplerate];\n    if (!silentFrame) {\n      // we don't have a silent frame pregenerated for the sample rate, so use a frame\n      // from the content instead\n      silentFrame = frames[0].data;\n    }\n    for (i = 0; i < audioFillFrameCount; i++) {\n      firstFrame = frames[0];\n      frames.splice(0, 0, {\n        data: silentFrame,\n        dts: firstFrame.dts - frameDuration,\n        pts: firstFrame.pts - frameDuration\n      });\n    }\n    track.baseMediaDecodeTime -= Math.floor(clock$1.videoTsToAudioTs(audioFillDuration, track.samplerate));\n    return audioFillDuration;\n  }; // If the audio segment extends before the earliest allowed dts\n  // value, remove AAC frames until starts at or after the earliest\n  // allowed DTS so that we don't end up with a negative baseMedia-\n  // DecodeTime for the audio track\n\n  var trimAdtsFramesByEarliestDts = function (adtsFrames, track, earliestAllowedDts) {\n    if (track.minSegmentDts >= earliestAllowedDts) {\n      return adtsFrames;\n    } // We will need to recalculate the earliest segment Dts\n\n    track.minSegmentDts = Infinity;\n    return adtsFrames.filter(function (currentFrame) {\n      // If this is an allowed frame, keep it and record it's Dts\n      if (currentFrame.dts >= earliestAllowedDts) {\n        track.minSegmentDts = Math.min(track.minSegmentDts, currentFrame.dts);\n        track.minSegmentPts = track.minSegmentDts;\n        return true;\n      } // Otherwise, discard it\n\n      return false;\n    });\n  }; // generate the track's raw mdat data from an array of frames\n\n  var generateSampleTable = function (frames) {\n    var i,\n      currentFrame,\n      samples = [];\n    for (i = 0; i < frames.length; i++) {\n      currentFrame = frames[i];\n      samples.push({\n        size: currentFrame.data.byteLength,\n        duration: 1024 // For AAC audio, all samples contain 1024 samples\n      });\n    }\n\n    return samples;\n  }; // generate the track's sample table from an array of frames\n\n  var concatenateFrameData = function (frames) {\n    var i,\n      currentFrame,\n      dataOffset = 0,\n      data = new Uint8Array(sumFrameByteLengths(frames));\n    for (i = 0; i < frames.length; i++) {\n      currentFrame = frames[i];\n      data.set(currentFrame.data, dataOffset);\n      dataOffset += currentFrame.data.byteLength;\n    }\n    return data;\n  };\n  var audioFrameUtils$1 = {\n    prefixWithSilence: prefixWithSilence,\n    trimAdtsFramesByEarliestDts: trimAdtsFramesByEarliestDts,\n    generateSampleTable: generateSampleTable,\n    concatenateFrameData: concatenateFrameData\n  };\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   */\n\n  var ONE_SECOND_IN_TS$3 = clock$2.ONE_SECOND_IN_TS;\n  /**\n   * Store information about the start and end of the track and the\n   * duration for each frame/sample we process in order to calculate\n   * the baseMediaDecodeTime\n   */\n\n  var collectDtsInfo = function (track, data) {\n    if (typeof data.pts === 'number') {\n      if (track.timelineStartInfo.pts === undefined) {\n        track.timelineStartInfo.pts = data.pts;\n      }\n      if (track.minSegmentPts === undefined) {\n        track.minSegmentPts = data.pts;\n      } else {\n        track.minSegmentPts = Math.min(track.minSegmentPts, data.pts);\n      }\n      if (track.maxSegmentPts === undefined) {\n        track.maxSegmentPts = data.pts;\n      } else {\n        track.maxSegmentPts = Math.max(track.maxSegmentPts, data.pts);\n      }\n    }\n    if (typeof data.dts === 'number') {\n      if (track.timelineStartInfo.dts === undefined) {\n        track.timelineStartInfo.dts = data.dts;\n      }\n      if (track.minSegmentDts === undefined) {\n        track.minSegmentDts = data.dts;\n      } else {\n        track.minSegmentDts = Math.min(track.minSegmentDts, data.dts);\n      }\n      if (track.maxSegmentDts === undefined) {\n        track.maxSegmentDts = data.dts;\n      } else {\n        track.maxSegmentDts = Math.max(track.maxSegmentDts, data.dts);\n      }\n    }\n  };\n  /**\n   * Clear values used to calculate the baseMediaDecodeTime between\n   * tracks\n   */\n\n  var clearDtsInfo = function (track) {\n    delete track.minSegmentDts;\n    delete track.maxSegmentDts;\n    delete track.minSegmentPts;\n    delete track.maxSegmentPts;\n  };\n  /**\n   * Calculate the track's baseMediaDecodeTime based on the earliest\n   * DTS the transmuxer has ever seen and the minimum DTS for the\n   * current track\n   * @param track {object} track metadata configuration\n   * @param keepOriginalTimestamps {boolean} If true, keep the timestamps\n   *        in the source; false to adjust the first segment to start at 0.\n   */\n\n  var calculateTrackBaseMediaDecodeTime = function (track, keepOriginalTimestamps) {\n    var baseMediaDecodeTime,\n      scale,\n      minSegmentDts = track.minSegmentDts; // Optionally adjust the time so the first segment starts at zero.\n\n    if (!keepOriginalTimestamps) {\n      minSegmentDts -= track.timelineStartInfo.dts;\n    } // track.timelineStartInfo.baseMediaDecodeTime is the location, in time, where\n    // we want the start of the first segment to be placed\n\n    baseMediaDecodeTime = track.timelineStartInfo.baseMediaDecodeTime; // Add to that the distance this segment is from the very first\n\n    baseMediaDecodeTime += minSegmentDts; // baseMediaDecodeTime must not become negative\n\n    baseMediaDecodeTime = Math.max(0, baseMediaDecodeTime);\n    if (track.type === 'audio') {\n      // Audio has a different clock equal to the sampling_rate so we need to\n      // scale the PTS values into the clock rate of the track\n      scale = track.samplerate / ONE_SECOND_IN_TS$3;\n      baseMediaDecodeTime *= scale;\n      baseMediaDecodeTime = Math.floor(baseMediaDecodeTime);\n    }\n    return baseMediaDecodeTime;\n  };\n  var trackDecodeInfo$1 = {\n    clearDtsInfo: clearDtsInfo,\n    calculateTrackBaseMediaDecodeTime: calculateTrackBaseMediaDecodeTime,\n    collectDtsInfo: collectDtsInfo\n  };\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   *\n   * Reads in-band caption information from a video elementary\n   * stream. Captions must follow the CEA-708 standard for injection\n   * into an MPEG-2 transport streams.\n   * @see https://en.wikipedia.org/wiki/CEA-708\n   * @see https://www.gpo.gov/fdsys/pkg/CFR-2007-title47-vol1/pdf/CFR-2007-title47-vol1-sec15-119.pdf\n   */\n  // payload type field to indicate how they are to be\n  // interpreted. CEAS-708 caption content is always transmitted with\n  // payload type 0x04.\n\n  var USER_DATA_REGISTERED_ITU_T_T35 = 4,\n    RBSP_TRAILING_BITS = 128;\n  /**\n    * Parse a supplemental enhancement information (SEI) NAL unit.\n    * Stops parsing once a message of type ITU T T35 has been found.\n    *\n    * @param bytes {Uint8Array} the bytes of a SEI NAL unit\n    * @return {object} the parsed SEI payload\n    * @see Rec. ITU-T H.264, 7.3.2.3.1\n    */\n\n  var parseSei = function (bytes) {\n    var i = 0,\n      result = {\n        payloadType: -1,\n        payloadSize: 0\n      },\n      payloadType = 0,\n      payloadSize = 0; // go through the sei_rbsp parsing each each individual sei_message\n\n    while (i < bytes.byteLength) {\n      // stop once we have hit the end of the sei_rbsp\n      if (bytes[i] === RBSP_TRAILING_BITS) {\n        break;\n      } // Parse payload type\n\n      while (bytes[i] === 0xFF) {\n        payloadType += 255;\n        i++;\n      }\n      payloadType += bytes[i++]; // Parse payload size\n\n      while (bytes[i] === 0xFF) {\n        payloadSize += 255;\n        i++;\n      }\n      payloadSize += bytes[i++]; // this sei_message is a 608/708 caption so save it and break\n      // there can only ever be one caption message in a frame's sei\n\n      if (!result.payload && payloadType === USER_DATA_REGISTERED_ITU_T_T35) {\n        var userIdentifier = String.fromCharCode(bytes[i + 3], bytes[i + 4], bytes[i + 5], bytes[i + 6]);\n        if (userIdentifier === 'GA94') {\n          result.payloadType = payloadType;\n          result.payloadSize = payloadSize;\n          result.payload = bytes.subarray(i, i + payloadSize);\n          break;\n        } else {\n          result.payload = void 0;\n        }\n      } // skip the payload and parse the next message\n\n      i += payloadSize;\n      payloadType = 0;\n      payloadSize = 0;\n    }\n    return result;\n  }; // see ANSI/SCTE 128-1 (2013), section 8.1\n\n  var parseUserData = function (sei) {\n    // itu_t_t35_contry_code must be 181 (United States) for\n    // captions\n    if (sei.payload[0] !== 181) {\n      return null;\n    } // itu_t_t35_provider_code should be 49 (ATSC) for captions\n\n    if ((sei.payload[1] << 8 | sei.payload[2]) !== 49) {\n      return null;\n    } // the user_identifier should be \"GA94\" to indicate ATSC1 data\n\n    if (String.fromCharCode(sei.payload[3], sei.payload[4], sei.payload[5], sei.payload[6]) !== 'GA94') {\n      return null;\n    } // finally, user_data_type_code should be 0x03 for caption data\n\n    if (sei.payload[7] !== 0x03) {\n      return null;\n    } // return the user_data_type_structure and strip the trailing\n    // marker bits\n\n    return sei.payload.subarray(8, sei.payload.length - 1);\n  }; // see CEA-708-D, section 4.4\n\n  var parseCaptionPackets = function (pts, userData) {\n    var results = [],\n      i,\n      count,\n      offset,\n      data; // if this is just filler, return immediately\n\n    if (!(userData[0] & 0x40)) {\n      return results;\n    } // parse out the cc_data_1 and cc_data_2 fields\n\n    count = userData[0] & 0x1f;\n    for (i = 0; i < count; i++) {\n      offset = i * 3;\n      data = {\n        type: userData[offset + 2] & 0x03,\n        pts: pts\n      }; // capture cc data when cc_valid is 1\n\n      if (userData[offset + 2] & 0x04) {\n        data.ccData = userData[offset + 3] << 8 | userData[offset + 4];\n        results.push(data);\n      }\n    }\n    return results;\n  };\n  var discardEmulationPreventionBytes$1 = function (data) {\n    var length = data.byteLength,\n      emulationPreventionBytesPositions = [],\n      i = 1,\n      newLength,\n      newData; // Find all `Emulation Prevention Bytes`\n\n    while (i < length - 2) {\n      if (data[i] === 0 && data[i + 1] === 0 && data[i + 2] === 0x03) {\n        emulationPreventionBytesPositions.push(i + 2);\n        i += 2;\n      } else {\n        i++;\n      }\n    } // If no Emulation Prevention Bytes were found just return the original\n    // array\n\n    if (emulationPreventionBytesPositions.length === 0) {\n      return data;\n    } // Create a new array to hold the NAL unit data\n\n    newLength = length - emulationPreventionBytesPositions.length;\n    newData = new Uint8Array(newLength);\n    var sourceIndex = 0;\n    for (i = 0; i < newLength; sourceIndex++, i++) {\n      if (sourceIndex === emulationPreventionBytesPositions[0]) {\n        // Skip this byte\n        sourceIndex++; // Remove this position index\n\n        emulationPreventionBytesPositions.shift();\n      }\n      newData[i] = data[sourceIndex];\n    }\n    return newData;\n  }; // exports\n\n  var captionPacketParser = {\n    parseSei: parseSei,\n    parseUserData: parseUserData,\n    parseCaptionPackets: parseCaptionPackets,\n    discardEmulationPreventionBytes: discardEmulationPreventionBytes$1,\n    USER_DATA_REGISTERED_ITU_T_T35: USER_DATA_REGISTERED_ITU_T_T35\n  };\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   *\n   * Reads in-band caption information from a video elementary\n   * stream. Captions must follow the CEA-708 standard for injection\n   * into an MPEG-2 transport streams.\n   * @see https://en.wikipedia.org/wiki/CEA-708\n   * @see https://www.gpo.gov/fdsys/pkg/CFR-2007-title47-vol1/pdf/CFR-2007-title47-vol1-sec15-119.pdf\n   */\n  // Link To Transport\n  // -----------------\n\n  var Stream$7 = stream;\n  var cea708Parser = captionPacketParser;\n  var CaptionStream$2 = function (options) {\n    options = options || {};\n    CaptionStream$2.prototype.init.call(this); // parse708captions flag, default to true\n\n    this.parse708captions_ = typeof options.parse708captions === 'boolean' ? options.parse708captions : true;\n    this.captionPackets_ = [];\n    this.ccStreams_ = [new Cea608Stream(0, 0),\n    // eslint-disable-line no-use-before-define\n    new Cea608Stream(0, 1),\n    // eslint-disable-line no-use-before-define\n    new Cea608Stream(1, 0),\n    // eslint-disable-line no-use-before-define\n    new Cea608Stream(1, 1) // eslint-disable-line no-use-before-define\n    ];\n\n    if (this.parse708captions_) {\n      this.cc708Stream_ = new Cea708Stream({\n        captionServices: options.captionServices\n      }); // eslint-disable-line no-use-before-define\n    }\n\n    this.reset(); // forward data and done events from CCs to this CaptionStream\n\n    this.ccStreams_.forEach(function (cc) {\n      cc.on('data', this.trigger.bind(this, 'data'));\n      cc.on('partialdone', this.trigger.bind(this, 'partialdone'));\n      cc.on('done', this.trigger.bind(this, 'done'));\n    }, this);\n    if (this.parse708captions_) {\n      this.cc708Stream_.on('data', this.trigger.bind(this, 'data'));\n      this.cc708Stream_.on('partialdone', this.trigger.bind(this, 'partialdone'));\n      this.cc708Stream_.on('done', this.trigger.bind(this, 'done'));\n    }\n  };\n  CaptionStream$2.prototype = new Stream$7();\n  CaptionStream$2.prototype.push = function (event) {\n    var sei, userData, newCaptionPackets; // only examine SEI NALs\n\n    if (event.nalUnitType !== 'sei_rbsp') {\n      return;\n    } // parse the sei\n\n    sei = cea708Parser.parseSei(event.escapedRBSP); // no payload data, skip\n\n    if (!sei.payload) {\n      return;\n    } // ignore everything but user_data_registered_itu_t_t35\n\n    if (sei.payloadType !== cea708Parser.USER_DATA_REGISTERED_ITU_T_T35) {\n      return;\n    } // parse out the user data payload\n\n    userData = cea708Parser.parseUserData(sei); // ignore unrecognized userData\n\n    if (!userData) {\n      return;\n    } // Sometimes, the same segment # will be downloaded twice. To stop the\n    // caption data from being processed twice, we track the latest dts we've\n    // received and ignore everything with a dts before that. However, since\n    // data for a specific dts can be split across packets on either side of\n    // a segment boundary, we need to make sure we *don't* ignore the packets\n    // from the *next* segment that have dts === this.latestDts_. By constantly\n    // tracking the number of packets received with dts === this.latestDts_, we\n    // know how many should be ignored once we start receiving duplicates.\n\n    if (event.dts < this.latestDts_) {\n      // We've started getting older data, so set the flag.\n      this.ignoreNextEqualDts_ = true;\n      return;\n    } else if (event.dts === this.latestDts_ && this.ignoreNextEqualDts_) {\n      this.numSameDts_--;\n      if (!this.numSameDts_) {\n        // We've received the last duplicate packet, time to start processing again\n        this.ignoreNextEqualDts_ = false;\n      }\n      return;\n    } // parse out CC data packets and save them for later\n\n    newCaptionPackets = cea708Parser.parseCaptionPackets(event.pts, userData);\n    this.captionPackets_ = this.captionPackets_.concat(newCaptionPackets);\n    if (this.latestDts_ !== event.dts) {\n      this.numSameDts_ = 0;\n    }\n    this.numSameDts_++;\n    this.latestDts_ = event.dts;\n  };\n  CaptionStream$2.prototype.flushCCStreams = function (flushType) {\n    this.ccStreams_.forEach(function (cc) {\n      return flushType === 'flush' ? cc.flush() : cc.partialFlush();\n    }, this);\n  };\n  CaptionStream$2.prototype.flushStream = function (flushType) {\n    // make sure we actually parsed captions before proceeding\n    if (!this.captionPackets_.length) {\n      this.flushCCStreams(flushType);\n      return;\n    } // In Chrome, the Array#sort function is not stable so add a\n    // presortIndex that we can use to ensure we get a stable-sort\n\n    this.captionPackets_.forEach(function (elem, idx) {\n      elem.presortIndex = idx;\n    }); // sort caption byte-pairs based on their PTS values\n\n    this.captionPackets_.sort(function (a, b) {\n      if (a.pts === b.pts) {\n        return a.presortIndex - b.presortIndex;\n      }\n      return a.pts - b.pts;\n    });\n    this.captionPackets_.forEach(function (packet) {\n      if (packet.type < 2) {\n        // Dispatch packet to the right Cea608Stream\n        this.dispatchCea608Packet(packet);\n      } else {\n        // Dispatch packet to the Cea708Stream\n        this.dispatchCea708Packet(packet);\n      }\n    }, this);\n    this.captionPackets_.length = 0;\n    this.flushCCStreams(flushType);\n  };\n  CaptionStream$2.prototype.flush = function () {\n    return this.flushStream('flush');\n  }; // Only called if handling partial data\n\n  CaptionStream$2.prototype.partialFlush = function () {\n    return this.flushStream('partialFlush');\n  };\n  CaptionStream$2.prototype.reset = function () {\n    this.latestDts_ = null;\n    this.ignoreNextEqualDts_ = false;\n    this.numSameDts_ = 0;\n    this.activeCea608Channel_ = [null, null];\n    this.ccStreams_.forEach(function (ccStream) {\n      ccStream.reset();\n    });\n  }; // From the CEA-608 spec:\n\n  /*\n   * When XDS sub-packets are interleaved with other services, the end of each sub-packet shall be followed\n   * by a control pair to change to a different service. When any of the control codes from 0x10 to 0x1F is\n   * used to begin a control code pair, it indicates the return to captioning or Text data. The control code pair\n   * and subsequent data should then be processed according to the FCC rules. It may be necessary for the\n   * line 21 data encoder to automatically insert a control code pair (i.e. RCL, RU2, RU3, RU4, RDC, or RTD)\n   * to switch to captioning or Text.\n  */\n  // With that in mind, we ignore any data between an XDS control code and a\n  // subsequent closed-captioning control code.\n\n  CaptionStream$2.prototype.dispatchCea608Packet = function (packet) {\n    // NOTE: packet.type is the CEA608 field\n    if (this.setsTextOrXDSActive(packet)) {\n      this.activeCea608Channel_[packet.type] = null;\n    } else if (this.setsChannel1Active(packet)) {\n      this.activeCea608Channel_[packet.type] = 0;\n    } else if (this.setsChannel2Active(packet)) {\n      this.activeCea608Channel_[packet.type] = 1;\n    }\n    if (this.activeCea608Channel_[packet.type] === null) {\n      // If we haven't received anything to set the active channel, or the\n      // packets are Text/XDS data, discard the data; we don't want jumbled\n      // captions\n      return;\n    }\n    this.ccStreams_[(packet.type << 1) + this.activeCea608Channel_[packet.type]].push(packet);\n  };\n  CaptionStream$2.prototype.setsChannel1Active = function (packet) {\n    return (packet.ccData & 0x7800) === 0x1000;\n  };\n  CaptionStream$2.prototype.setsChannel2Active = function (packet) {\n    return (packet.ccData & 0x7800) === 0x1800;\n  };\n  CaptionStream$2.prototype.setsTextOrXDSActive = function (packet) {\n    return (packet.ccData & 0x7100) === 0x0100 || (packet.ccData & 0x78fe) === 0x102a || (packet.ccData & 0x78fe) === 0x182a;\n  };\n  CaptionStream$2.prototype.dispatchCea708Packet = function (packet) {\n    if (this.parse708captions_) {\n      this.cc708Stream_.push(packet);\n    }\n  }; // ----------------------\n  // Session to Application\n  // ----------------------\n  // This hash maps special and extended character codes to their\n  // proper Unicode equivalent. The first one-byte key is just a\n  // non-standard character code. The two-byte keys that follow are\n  // the extended CEA708 character codes, along with the preceding\n  // 0x10 extended character byte to distinguish these codes from\n  // non-extended character codes. Every CEA708 character code that\n  // is not in this object maps directly to a standard unicode\n  // character code.\n  // The transparent space and non-breaking transparent space are\n  // technically not fully supported since there is no code to\n  // make them transparent, so they have normal non-transparent\n  // stand-ins.\n  // The special closed caption (CC) character isn't a standard\n  // unicode character, so a fairly similar unicode character was\n  // chosen in it's place.\n\n  var CHARACTER_TRANSLATION_708 = {\n    0x7f: 0x266a,\n    // ♪\n    0x1020: 0x20,\n    // Transparent Space\n    0x1021: 0xa0,\n    // Nob-breaking Transparent Space\n    0x1025: 0x2026,\n    // …\n    0x102a: 0x0160,\n    // Š\n    0x102c: 0x0152,\n    // Œ\n    0x1030: 0x2588,\n    // █\n    0x1031: 0x2018,\n    // ‘\n    0x1032: 0x2019,\n    // ’\n    0x1033: 0x201c,\n    // “\n    0x1034: 0x201d,\n    // ”\n    0x1035: 0x2022,\n    // •\n    0x1039: 0x2122,\n    // ™\n    0x103a: 0x0161,\n    // š\n    0x103c: 0x0153,\n    // œ\n    0x103d: 0x2120,\n    // ℠\n    0x103f: 0x0178,\n    // Ÿ\n    0x1076: 0x215b,\n    // ⅛\n    0x1077: 0x215c,\n    // ⅜\n    0x1078: 0x215d,\n    // ⅝\n    0x1079: 0x215e,\n    // ⅞\n    0x107a: 0x23d0,\n    // ⏐\n    0x107b: 0x23a4,\n    // ⎤\n    0x107c: 0x23a3,\n    // ⎣\n    0x107d: 0x23af,\n    // ⎯\n    0x107e: 0x23a6,\n    // ⎦\n    0x107f: 0x23a1,\n    // ⎡\n    0x10a0: 0x3138 // ㄸ (CC char)\n  };\n\n  var get708CharFromCode = function (code) {\n    var newCode = CHARACTER_TRANSLATION_708[code] || code;\n    if (code & 0x1000 && code === newCode) {\n      // Invalid extended code\n      return '';\n    }\n    return String.fromCharCode(newCode);\n  };\n  var within708TextBlock = function (b) {\n    return 0x20 <= b && b <= 0x7f || 0xa0 <= b && b <= 0xff;\n  };\n  var Cea708Window = function (windowNum) {\n    this.windowNum = windowNum;\n    this.reset();\n  };\n  Cea708Window.prototype.reset = function () {\n    this.clearText();\n    this.pendingNewLine = false;\n    this.winAttr = {};\n    this.penAttr = {};\n    this.penLoc = {};\n    this.penColor = {}; // These default values are arbitrary,\n    // defineWindow will usually override them\n\n    this.visible = 0;\n    this.rowLock = 0;\n    this.columnLock = 0;\n    this.priority = 0;\n    this.relativePositioning = 0;\n    this.anchorVertical = 0;\n    this.anchorHorizontal = 0;\n    this.anchorPoint = 0;\n    this.rowCount = 1;\n    this.virtualRowCount = this.rowCount + 1;\n    this.columnCount = 41;\n    this.windowStyle = 0;\n    this.penStyle = 0;\n  };\n  Cea708Window.prototype.getText = function () {\n    return this.rows.join('\\n');\n  };\n  Cea708Window.prototype.clearText = function () {\n    this.rows = [''];\n    this.rowIdx = 0;\n  };\n  Cea708Window.prototype.newLine = function (pts) {\n    if (this.rows.length >= this.virtualRowCount && typeof this.beforeRowOverflow === 'function') {\n      this.beforeRowOverflow(pts);\n    }\n    if (this.rows.length > 0) {\n      this.rows.push('');\n      this.rowIdx++;\n    } // Show all virtual rows since there's no visible scrolling\n\n    while (this.rows.length > this.virtualRowCount) {\n      this.rows.shift();\n      this.rowIdx--;\n    }\n  };\n  Cea708Window.prototype.isEmpty = function () {\n    if (this.rows.length === 0) {\n      return true;\n    } else if (this.rows.length === 1) {\n      return this.rows[0] === '';\n    }\n    return false;\n  };\n  Cea708Window.prototype.addText = function (text) {\n    this.rows[this.rowIdx] += text;\n  };\n  Cea708Window.prototype.backspace = function () {\n    if (!this.isEmpty()) {\n      var row = this.rows[this.rowIdx];\n      this.rows[this.rowIdx] = row.substr(0, row.length - 1);\n    }\n  };\n  var Cea708Service = function (serviceNum, encoding, stream) {\n    this.serviceNum = serviceNum;\n    this.text = '';\n    this.currentWindow = new Cea708Window(-1);\n    this.windows = [];\n    this.stream = stream; // Try to setup a TextDecoder if an `encoding` value was provided\n\n    if (typeof encoding === 'string') {\n      this.createTextDecoder(encoding);\n    }\n  };\n  /**\n   * Initialize service windows\n   * Must be run before service use\n   *\n   * @param  {Integer}  pts               PTS value\n   * @param  {Function} beforeRowOverflow Function to execute before row overflow of a window\n   */\n\n  Cea708Service.prototype.init = function (pts, beforeRowOverflow) {\n    this.startPts = pts;\n    for (var win = 0; win < 8; win++) {\n      this.windows[win] = new Cea708Window(win);\n      if (typeof beforeRowOverflow === 'function') {\n        this.windows[win].beforeRowOverflow = beforeRowOverflow;\n      }\n    }\n  };\n  /**\n   * Set current window of service to be affected by commands\n   *\n   * @param  {Integer} windowNum Window number\n   */\n\n  Cea708Service.prototype.setCurrentWindow = function (windowNum) {\n    this.currentWindow = this.windows[windowNum];\n  };\n  /**\n   * Try to create a TextDecoder if it is natively supported\n   */\n\n  Cea708Service.prototype.createTextDecoder = function (encoding) {\n    if (typeof TextDecoder === 'undefined') {\n      this.stream.trigger('log', {\n        level: 'warn',\n        message: 'The `encoding` option is unsupported without TextDecoder support'\n      });\n    } else {\n      try {\n        this.textDecoder_ = new TextDecoder(encoding);\n      } catch (error) {\n        this.stream.trigger('log', {\n          level: 'warn',\n          message: 'TextDecoder could not be created with ' + encoding + ' encoding. ' + error\n        });\n      }\n    }\n  };\n  var Cea708Stream = function (options) {\n    options = options || {};\n    Cea708Stream.prototype.init.call(this);\n    var self = this;\n    var captionServices = options.captionServices || {};\n    var captionServiceEncodings = {};\n    var serviceProps; // Get service encodings from captionServices option block\n\n    Object.keys(captionServices).forEach(serviceName => {\n      serviceProps = captionServices[serviceName];\n      if (/^SERVICE/.test(serviceName)) {\n        captionServiceEncodings[serviceName] = serviceProps.encoding;\n      }\n    });\n    this.serviceEncodings = captionServiceEncodings;\n    this.current708Packet = null;\n    this.services = {};\n    this.push = function (packet) {\n      if (packet.type === 3) {\n        // 708 packet start\n        self.new708Packet();\n        self.add708Bytes(packet);\n      } else {\n        if (self.current708Packet === null) {\n          // This should only happen at the start of a file if there's no packet start.\n          self.new708Packet();\n        }\n        self.add708Bytes(packet);\n      }\n    };\n  };\n  Cea708Stream.prototype = new Stream$7();\n  /**\n   * Push current 708 packet, create new 708 packet.\n   */\n\n  Cea708Stream.prototype.new708Packet = function () {\n    if (this.current708Packet !== null) {\n      this.push708Packet();\n    }\n    this.current708Packet = {\n      data: [],\n      ptsVals: []\n    };\n  };\n  /**\n   * Add pts and both bytes from packet into current 708 packet.\n   */\n\n  Cea708Stream.prototype.add708Bytes = function (packet) {\n    var data = packet.ccData;\n    var byte0 = data >>> 8;\n    var byte1 = data & 0xff; // I would just keep a list of packets instead of bytes, but it isn't clear in the spec\n    // that service blocks will always line up with byte pairs.\n\n    this.current708Packet.ptsVals.push(packet.pts);\n    this.current708Packet.data.push(byte0);\n    this.current708Packet.data.push(byte1);\n  };\n  /**\n   * Parse completed 708 packet into service blocks and push each service block.\n   */\n\n  Cea708Stream.prototype.push708Packet = function () {\n    var packet708 = this.current708Packet;\n    var packetData = packet708.data;\n    var serviceNum = null;\n    var blockSize = null;\n    var i = 0;\n    var b = packetData[i++];\n    packet708.seq = b >> 6;\n    packet708.sizeCode = b & 0x3f; // 0b00111111;\n\n    for (; i < packetData.length; i++) {\n      b = packetData[i++];\n      serviceNum = b >> 5;\n      blockSize = b & 0x1f; // 0b00011111\n\n      if (serviceNum === 7 && blockSize > 0) {\n        // Extended service num\n        b = packetData[i++];\n        serviceNum = b;\n      }\n      this.pushServiceBlock(serviceNum, i, blockSize);\n      if (blockSize > 0) {\n        i += blockSize - 1;\n      }\n    }\n  };\n  /**\n   * Parse service block, execute commands, read text.\n   *\n   * Note: While many of these commands serve important purposes,\n   * many others just parse out the parameters or attributes, but\n   * nothing is done with them because this is not a full and complete\n   * implementation of the entire 708 spec.\n   *\n   * @param  {Integer} serviceNum Service number\n   * @param  {Integer} start      Start index of the 708 packet data\n   * @param  {Integer} size       Block size\n   */\n\n  Cea708Stream.prototype.pushServiceBlock = function (serviceNum, start, size) {\n    var b;\n    var i = start;\n    var packetData = this.current708Packet.data;\n    var service = this.services[serviceNum];\n    if (!service) {\n      service = this.initService(serviceNum, i);\n    }\n    for (; i < start + size && i < packetData.length; i++) {\n      b = packetData[i];\n      if (within708TextBlock(b)) {\n        i = this.handleText(i, service);\n      } else if (b === 0x18) {\n        i = this.multiByteCharacter(i, service);\n      } else if (b === 0x10) {\n        i = this.extendedCommands(i, service);\n      } else if (0x80 <= b && b <= 0x87) {\n        i = this.setCurrentWindow(i, service);\n      } else if (0x98 <= b && b <= 0x9f) {\n        i = this.defineWindow(i, service);\n      } else if (b === 0x88) {\n        i = this.clearWindows(i, service);\n      } else if (b === 0x8c) {\n        i = this.deleteWindows(i, service);\n      } else if (b === 0x89) {\n        i = this.displayWindows(i, service);\n      } else if (b === 0x8a) {\n        i = this.hideWindows(i, service);\n      } else if (b === 0x8b) {\n        i = this.toggleWindows(i, service);\n      } else if (b === 0x97) {\n        i = this.setWindowAttributes(i, service);\n      } else if (b === 0x90) {\n        i = this.setPenAttributes(i, service);\n      } else if (b === 0x91) {\n        i = this.setPenColor(i, service);\n      } else if (b === 0x92) {\n        i = this.setPenLocation(i, service);\n      } else if (b === 0x8f) {\n        service = this.reset(i, service);\n      } else if (b === 0x08) {\n        // BS: Backspace\n        service.currentWindow.backspace();\n      } else if (b === 0x0c) {\n        // FF: Form feed\n        service.currentWindow.clearText();\n      } else if (b === 0x0d) {\n        // CR: Carriage return\n        service.currentWindow.pendingNewLine = true;\n      } else if (b === 0x0e) {\n        // HCR: Horizontal carriage return\n        service.currentWindow.clearText();\n      } else if (b === 0x8d) {\n        // DLY: Delay, nothing to do\n        i++;\n      } else ;\n    }\n  };\n  /**\n   * Execute an extended command\n   *\n   * @param  {Integer} i        Current index in the 708 packet\n   * @param  {Service} service  The service object to be affected\n   * @return {Integer}          New index after parsing\n   */\n\n  Cea708Stream.prototype.extendedCommands = function (i, service) {\n    var packetData = this.current708Packet.data;\n    var b = packetData[++i];\n    if (within708TextBlock(b)) {\n      i = this.handleText(i, service, {\n        isExtended: true\n      });\n    }\n    return i;\n  };\n  /**\n   * Get PTS value of a given byte index\n   *\n   * @param  {Integer} byteIndex  Index of the byte\n   * @return {Integer}            PTS\n   */\n\n  Cea708Stream.prototype.getPts = function (byteIndex) {\n    // There's 1 pts value per 2 bytes\n    return this.current708Packet.ptsVals[Math.floor(byteIndex / 2)];\n  };\n  /**\n   * Initializes a service\n   *\n   * @param  {Integer} serviceNum Service number\n   * @return {Service}            Initialized service object\n   */\n\n  Cea708Stream.prototype.initService = function (serviceNum, i) {\n    var serviceName = 'SERVICE' + serviceNum;\n    var self = this;\n    var serviceName;\n    var encoding;\n    if (serviceName in this.serviceEncodings) {\n      encoding = this.serviceEncodings[serviceName];\n    }\n    this.services[serviceNum] = new Cea708Service(serviceNum, encoding, self);\n    this.services[serviceNum].init(this.getPts(i), function (pts) {\n      self.flushDisplayed(pts, self.services[serviceNum]);\n    });\n    return this.services[serviceNum];\n  };\n  /**\n   * Execute text writing to current window\n   *\n   * @param  {Integer} i        Current index in the 708 packet\n   * @param  {Service} service  The service object to be affected\n   * @return {Integer}          New index after parsing\n   */\n\n  Cea708Stream.prototype.handleText = function (i, service, options) {\n    var isExtended = options && options.isExtended;\n    var isMultiByte = options && options.isMultiByte;\n    var packetData = this.current708Packet.data;\n    var extended = isExtended ? 0x1000 : 0x0000;\n    var currentByte = packetData[i];\n    var nextByte = packetData[i + 1];\n    var win = service.currentWindow;\n    var char;\n    var charCodeArray; // Converts an array of bytes to a unicode hex string.\n\n    function toHexString(byteArray) {\n      return byteArray.map(byte => {\n        return ('0' + (byte & 0xFF).toString(16)).slice(-2);\n      }).join('');\n    }\n    if (isMultiByte) {\n      charCodeArray = [currentByte, nextByte];\n      i++;\n    } else {\n      charCodeArray = [currentByte];\n    } // Use the TextDecoder if one was created for this service\n\n    if (service.textDecoder_ && !isExtended) {\n      char = service.textDecoder_.decode(new Uint8Array(charCodeArray));\n    } else {\n      // We assume any multi-byte char without a decoder is unicode.\n      if (isMultiByte) {\n        const unicode = toHexString(charCodeArray); // Takes a unicode hex string and creates a single character.\n\n        char = String.fromCharCode(parseInt(unicode, 16));\n      } else {\n        char = get708CharFromCode(extended | currentByte);\n      }\n    }\n    if (win.pendingNewLine && !win.isEmpty()) {\n      win.newLine(this.getPts(i));\n    }\n    win.pendingNewLine = false;\n    win.addText(char);\n    return i;\n  };\n  /**\n   * Handle decoding of multibyte character\n   *\n   * @param  {Integer} i        Current index in the 708 packet\n   * @param  {Service} service  The service object to be affected\n   * @return {Integer}          New index after parsing\n   */\n\n  Cea708Stream.prototype.multiByteCharacter = function (i, service) {\n    var packetData = this.current708Packet.data;\n    var firstByte = packetData[i + 1];\n    var secondByte = packetData[i + 2];\n    if (within708TextBlock(firstByte) && within708TextBlock(secondByte)) {\n      i = this.handleText(++i, service, {\n        isMultiByte: true\n      });\n    }\n    return i;\n  };\n  /**\n   * Parse and execute the CW# command.\n   *\n   * Set the current window.\n   *\n   * @param  {Integer} i        Current index in the 708 packet\n   * @param  {Service} service  The service object to be affected\n   * @return {Integer}          New index after parsing\n   */\n\n  Cea708Stream.prototype.setCurrentWindow = function (i, service) {\n    var packetData = this.current708Packet.data;\n    var b = packetData[i];\n    var windowNum = b & 0x07;\n    service.setCurrentWindow(windowNum);\n    return i;\n  };\n  /**\n   * Parse and execute the DF# command.\n   *\n   * Define a window and set it as the current window.\n   *\n   * @param  {Integer} i        Current index in the 708 packet\n   * @param  {Service} service  The service object to be affected\n   * @return {Integer}          New index after parsing\n   */\n\n  Cea708Stream.prototype.defineWindow = function (i, service) {\n    var packetData = this.current708Packet.data;\n    var b = packetData[i];\n    var windowNum = b & 0x07;\n    service.setCurrentWindow(windowNum);\n    var win = service.currentWindow;\n    b = packetData[++i];\n    win.visible = (b & 0x20) >> 5; // v\n\n    win.rowLock = (b & 0x10) >> 4; // rl\n\n    win.columnLock = (b & 0x08) >> 3; // cl\n\n    win.priority = b & 0x07; // p\n\n    b = packetData[++i];\n    win.relativePositioning = (b & 0x80) >> 7; // rp\n\n    win.anchorVertical = b & 0x7f; // av\n\n    b = packetData[++i];\n    win.anchorHorizontal = b; // ah\n\n    b = packetData[++i];\n    win.anchorPoint = (b & 0xf0) >> 4; // ap\n\n    win.rowCount = b & 0x0f; // rc\n\n    b = packetData[++i];\n    win.columnCount = b & 0x3f; // cc\n\n    b = packetData[++i];\n    win.windowStyle = (b & 0x38) >> 3; // ws\n\n    win.penStyle = b & 0x07; // ps\n    // The spec says there are (rowCount+1) \"virtual rows\"\n\n    win.virtualRowCount = win.rowCount + 1;\n    return i;\n  };\n  /**\n   * Parse and execute the SWA command.\n   *\n   * Set attributes of the current window.\n   *\n   * @param  {Integer} i        Current index in the 708 packet\n   * @param  {Service} service  The service object to be affected\n   * @return {Integer}          New index after parsing\n   */\n\n  Cea708Stream.prototype.setWindowAttributes = function (i, service) {\n    var packetData = this.current708Packet.data;\n    var b = packetData[i];\n    var winAttr = service.currentWindow.winAttr;\n    b = packetData[++i];\n    winAttr.fillOpacity = (b & 0xc0) >> 6; // fo\n\n    winAttr.fillRed = (b & 0x30) >> 4; // fr\n\n    winAttr.fillGreen = (b & 0x0c) >> 2; // fg\n\n    winAttr.fillBlue = b & 0x03; // fb\n\n    b = packetData[++i];\n    winAttr.borderType = (b & 0xc0) >> 6; // bt\n\n    winAttr.borderRed = (b & 0x30) >> 4; // br\n\n    winAttr.borderGreen = (b & 0x0c) >> 2; // bg\n\n    winAttr.borderBlue = b & 0x03; // bb\n\n    b = packetData[++i];\n    winAttr.borderType += (b & 0x80) >> 5; // bt\n\n    winAttr.wordWrap = (b & 0x40) >> 6; // ww\n\n    winAttr.printDirection = (b & 0x30) >> 4; // pd\n\n    winAttr.scrollDirection = (b & 0x0c) >> 2; // sd\n\n    winAttr.justify = b & 0x03; // j\n\n    b = packetData[++i];\n    winAttr.effectSpeed = (b & 0xf0) >> 4; // es\n\n    winAttr.effectDirection = (b & 0x0c) >> 2; // ed\n\n    winAttr.displayEffect = b & 0x03; // de\n\n    return i;\n  };\n  /**\n   * Gather text from all displayed windows and push a caption to output.\n   *\n   * @param  {Integer} i        Current index in the 708 packet\n   * @param  {Service} service  The service object to be affected\n   */\n\n  Cea708Stream.prototype.flushDisplayed = function (pts, service) {\n    var displayedText = []; // TODO: Positioning not supported, displaying multiple windows will not necessarily\n    // display text in the correct order, but sample files so far have not shown any issue.\n\n    for (var winId = 0; winId < 8; winId++) {\n      if (service.windows[winId].visible && !service.windows[winId].isEmpty()) {\n        displayedText.push(service.windows[winId].getText());\n      }\n    }\n    service.endPts = pts;\n    service.text = displayedText.join('\\n\\n');\n    this.pushCaption(service);\n    service.startPts = pts;\n  };\n  /**\n   * Push a caption to output if the caption contains text.\n   *\n   * @param  {Service} service  The service object to be affected\n   */\n\n  Cea708Stream.prototype.pushCaption = function (service) {\n    if (service.text !== '') {\n      this.trigger('data', {\n        startPts: service.startPts,\n        endPts: service.endPts,\n        text: service.text,\n        stream: 'cc708_' + service.serviceNum\n      });\n      service.text = '';\n      service.startPts = service.endPts;\n    }\n  };\n  /**\n   * Parse and execute the DSW command.\n   *\n   * Set visible property of windows based on the parsed bitmask.\n   *\n   * @param  {Integer} i        Current index in the 708 packet\n   * @param  {Service} service  The service object to be affected\n   * @return {Integer}          New index after parsing\n   */\n\n  Cea708Stream.prototype.displayWindows = function (i, service) {\n    var packetData = this.current708Packet.data;\n    var b = packetData[++i];\n    var pts = this.getPts(i);\n    this.flushDisplayed(pts, service);\n    for (var winId = 0; winId < 8; winId++) {\n      if (b & 0x01 << winId) {\n        service.windows[winId].visible = 1;\n      }\n    }\n    return i;\n  };\n  /**\n   * Parse and execute the HDW command.\n   *\n   * Set visible property of windows based on the parsed bitmask.\n   *\n   * @param  {Integer} i        Current index in the 708 packet\n   * @param  {Service} service  The service object to be affected\n   * @return {Integer}          New index after parsing\n   */\n\n  Cea708Stream.prototype.hideWindows = function (i, service) {\n    var packetData = this.current708Packet.data;\n    var b = packetData[++i];\n    var pts = this.getPts(i);\n    this.flushDisplayed(pts, service);\n    for (var winId = 0; winId < 8; winId++) {\n      if (b & 0x01 << winId) {\n        service.windows[winId].visible = 0;\n      }\n    }\n    return i;\n  };\n  /**\n   * Parse and execute the TGW command.\n   *\n   * Set visible property of windows based on the parsed bitmask.\n   *\n   * @param  {Integer} i        Current index in the 708 packet\n   * @param  {Service} service  The service object to be affected\n   * @return {Integer}          New index after parsing\n   */\n\n  Cea708Stream.prototype.toggleWindows = function (i, service) {\n    var packetData = this.current708Packet.data;\n    var b = packetData[++i];\n    var pts = this.getPts(i);\n    this.flushDisplayed(pts, service);\n    for (var winId = 0; winId < 8; winId++) {\n      if (b & 0x01 << winId) {\n        service.windows[winId].visible ^= 1;\n      }\n    }\n    return i;\n  };\n  /**\n   * Parse and execute the CLW command.\n   *\n   * Clear text of windows based on the parsed bitmask.\n   *\n   * @param  {Integer} i        Current index in the 708 packet\n   * @param  {Service} service  The service object to be affected\n   * @return {Integer}          New index after parsing\n   */\n\n  Cea708Stream.prototype.clearWindows = function (i, service) {\n    var packetData = this.current708Packet.data;\n    var b = packetData[++i];\n    var pts = this.getPts(i);\n    this.flushDisplayed(pts, service);\n    for (var winId = 0; winId < 8; winId++) {\n      if (b & 0x01 << winId) {\n        service.windows[winId].clearText();\n      }\n    }\n    return i;\n  };\n  /**\n   * Parse and execute the DLW command.\n   *\n   * Re-initialize windows based on the parsed bitmask.\n   *\n   * @param  {Integer} i        Current index in the 708 packet\n   * @param  {Service} service  The service object to be affected\n   * @return {Integer}          New index after parsing\n   */\n\n  Cea708Stream.prototype.deleteWindows = function (i, service) {\n    var packetData = this.current708Packet.data;\n    var b = packetData[++i];\n    var pts = this.getPts(i);\n    this.flushDisplayed(pts, service);\n    for (var winId = 0; winId < 8; winId++) {\n      if (b & 0x01 << winId) {\n        service.windows[winId].reset();\n      }\n    }\n    return i;\n  };\n  /**\n   * Parse and execute the SPA command.\n   *\n   * Set pen attributes of the current window.\n   *\n   * @param  {Integer} i        Current index in the 708 packet\n   * @param  {Service} service  The service object to be affected\n   * @return {Integer}          New index after parsing\n   */\n\n  Cea708Stream.prototype.setPenAttributes = function (i, service) {\n    var packetData = this.current708Packet.data;\n    var b = packetData[i];\n    var penAttr = service.currentWindow.penAttr;\n    b = packetData[++i];\n    penAttr.textTag = (b & 0xf0) >> 4; // tt\n\n    penAttr.offset = (b & 0x0c) >> 2; // o\n\n    penAttr.penSize = b & 0x03; // s\n\n    b = packetData[++i];\n    penAttr.italics = (b & 0x80) >> 7; // i\n\n    penAttr.underline = (b & 0x40) >> 6; // u\n\n    penAttr.edgeType = (b & 0x38) >> 3; // et\n\n    penAttr.fontStyle = b & 0x07; // fs\n\n    return i;\n  };\n  /**\n   * Parse and execute the SPC command.\n   *\n   * Set pen color of the current window.\n   *\n   * @param  {Integer} i        Current index in the 708 packet\n   * @param  {Service} service  The service object to be affected\n   * @return {Integer}          New index after parsing\n   */\n\n  Cea708Stream.prototype.setPenColor = function (i, service) {\n    var packetData = this.current708Packet.data;\n    var b = packetData[i];\n    var penColor = service.currentWindow.penColor;\n    b = packetData[++i];\n    penColor.fgOpacity = (b & 0xc0) >> 6; // fo\n\n    penColor.fgRed = (b & 0x30) >> 4; // fr\n\n    penColor.fgGreen = (b & 0x0c) >> 2; // fg\n\n    penColor.fgBlue = b & 0x03; // fb\n\n    b = packetData[++i];\n    penColor.bgOpacity = (b & 0xc0) >> 6; // bo\n\n    penColor.bgRed = (b & 0x30) >> 4; // br\n\n    penColor.bgGreen = (b & 0x0c) >> 2; // bg\n\n    penColor.bgBlue = b & 0x03; // bb\n\n    b = packetData[++i];\n    penColor.edgeRed = (b & 0x30) >> 4; // er\n\n    penColor.edgeGreen = (b & 0x0c) >> 2; // eg\n\n    penColor.edgeBlue = b & 0x03; // eb\n\n    return i;\n  };\n  /**\n   * Parse and execute the SPL command.\n   *\n   * Set pen location of the current window.\n   *\n   * @param  {Integer} i        Current index in the 708 packet\n   * @param  {Service} service  The service object to be affected\n   * @return {Integer}          New index after parsing\n   */\n\n  Cea708Stream.prototype.setPenLocation = function (i, service) {\n    var packetData = this.current708Packet.data;\n    var b = packetData[i];\n    var penLoc = service.currentWindow.penLoc; // Positioning isn't really supported at the moment, so this essentially just inserts a linebreak\n\n    service.currentWindow.pendingNewLine = true;\n    b = packetData[++i];\n    penLoc.row = b & 0x0f; // r\n\n    b = packetData[++i];\n    penLoc.column = b & 0x3f; // c\n\n    return i;\n  };\n  /**\n   * Execute the RST command.\n   *\n   * Reset service to a clean slate. Re-initialize.\n   *\n   * @param  {Integer} i        Current index in the 708 packet\n   * @param  {Service} service  The service object to be affected\n   * @return {Service}          Re-initialized service\n   */\n\n  Cea708Stream.prototype.reset = function (i, service) {\n    var pts = this.getPts(i);\n    this.flushDisplayed(pts, service);\n    return this.initService(service.serviceNum, i);\n  }; // This hash maps non-ASCII, special, and extended character codes to their\n  // proper Unicode equivalent. The first keys that are only a single byte\n  // are the non-standard ASCII characters, which simply map the CEA608 byte\n  // to the standard ASCII/Unicode. The two-byte keys that follow are the CEA608\n  // character codes, but have their MSB bitmasked with 0x03 so that a lookup\n  // can be performed regardless of the field and data channel on which the\n  // character code was received.\n\n  var CHARACTER_TRANSLATION = {\n    0x2a: 0xe1,\n    // á\n    0x5c: 0xe9,\n    // é\n    0x5e: 0xed,\n    // í\n    0x5f: 0xf3,\n    // ó\n    0x60: 0xfa,\n    // ú\n    0x7b: 0xe7,\n    // ç\n    0x7c: 0xf7,\n    // ÷\n    0x7d: 0xd1,\n    // Ñ\n    0x7e: 0xf1,\n    // ñ\n    0x7f: 0x2588,\n    // █\n    0x0130: 0xae,\n    // ®\n    0x0131: 0xb0,\n    // °\n    0x0132: 0xbd,\n    // ½\n    0x0133: 0xbf,\n    // ¿\n    0x0134: 0x2122,\n    // ™\n    0x0135: 0xa2,\n    // ¢\n    0x0136: 0xa3,\n    // £\n    0x0137: 0x266a,\n    // ♪\n    0x0138: 0xe0,\n    // à\n    0x0139: 0xa0,\n    //\n    0x013a: 0xe8,\n    // è\n    0x013b: 0xe2,\n    // â\n    0x013c: 0xea,\n    // ê\n    0x013d: 0xee,\n    // î\n    0x013e: 0xf4,\n    // ô\n    0x013f: 0xfb,\n    // û\n    0x0220: 0xc1,\n    // Á\n    0x0221: 0xc9,\n    // É\n    0x0222: 0xd3,\n    // Ó\n    0x0223: 0xda,\n    // Ú\n    0x0224: 0xdc,\n    // Ü\n    0x0225: 0xfc,\n    // ü\n    0x0226: 0x2018,\n    // ‘\n    0x0227: 0xa1,\n    // ¡\n    0x0228: 0x2a,\n    // *\n    0x0229: 0x27,\n    // '\n    0x022a: 0x2014,\n    // —\n    0x022b: 0xa9,\n    // ©\n    0x022c: 0x2120,\n    // ℠\n    0x022d: 0x2022,\n    // •\n    0x022e: 0x201c,\n    // “\n    0x022f: 0x201d,\n    // ”\n    0x0230: 0xc0,\n    // À\n    0x0231: 0xc2,\n    // Â\n    0x0232: 0xc7,\n    // Ç\n    0x0233: 0xc8,\n    // È\n    0x0234: 0xca,\n    // Ê\n    0x0235: 0xcb,\n    // Ë\n    0x0236: 0xeb,\n    // ë\n    0x0237: 0xce,\n    // Î\n    0x0238: 0xcf,\n    // Ï\n    0x0239: 0xef,\n    // ï\n    0x023a: 0xd4,\n    // Ô\n    0x023b: 0xd9,\n    // Ù\n    0x023c: 0xf9,\n    // ù\n    0x023d: 0xdb,\n    // Û\n    0x023e: 0xab,\n    // «\n    0x023f: 0xbb,\n    // »\n    0x0320: 0xc3,\n    // Ã\n    0x0321: 0xe3,\n    // ã\n    0x0322: 0xcd,\n    // Í\n    0x0323: 0xcc,\n    // Ì\n    0x0324: 0xec,\n    // ì\n    0x0325: 0xd2,\n    // Ò\n    0x0326: 0xf2,\n    // ò\n    0x0327: 0xd5,\n    // Õ\n    0x0328: 0xf5,\n    // õ\n    0x0329: 0x7b,\n    // {\n    0x032a: 0x7d,\n    // }\n    0x032b: 0x5c,\n    // \\\n    0x032c: 0x5e,\n    // ^\n    0x032d: 0x5f,\n    // _\n    0x032e: 0x7c,\n    // |\n    0x032f: 0x7e,\n    // ~\n    0x0330: 0xc4,\n    // Ä\n    0x0331: 0xe4,\n    // ä\n    0x0332: 0xd6,\n    // Ö\n    0x0333: 0xf6,\n    // ö\n    0x0334: 0xdf,\n    // ß\n    0x0335: 0xa5,\n    // ¥\n    0x0336: 0xa4,\n    // ¤\n    0x0337: 0x2502,\n    // │\n    0x0338: 0xc5,\n    // Å\n    0x0339: 0xe5,\n    // å\n    0x033a: 0xd8,\n    // Ø\n    0x033b: 0xf8,\n    // ø\n    0x033c: 0x250c,\n    // ┌\n    0x033d: 0x2510,\n    // ┐\n    0x033e: 0x2514,\n    // └\n    0x033f: 0x2518 // ┘\n  };\n\n  var getCharFromCode = function (code) {\n    if (code === null) {\n      return '';\n    }\n    code = CHARACTER_TRANSLATION[code] || code;\n    return String.fromCharCode(code);\n  }; // the index of the last row in a CEA-608 display buffer\n\n  var BOTTOM_ROW = 14; // This array is used for mapping PACs -> row #, since there's no way of\n  // getting it through bit logic.\n\n  var ROWS = [0x1100, 0x1120, 0x1200, 0x1220, 0x1500, 0x1520, 0x1600, 0x1620, 0x1700, 0x1720, 0x1000, 0x1300, 0x1320, 0x1400, 0x1420]; // CEA-608 captions are rendered onto a 34x15 matrix of character\n  // cells. The \"bottom\" row is the last element in the outer array.\n  // We keep track of positioning information as we go by storing the\n  // number of indentations and the tab offset in this buffer.\n\n  var createDisplayBuffer = function () {\n    var result = [],\n      i = BOTTOM_ROW + 1;\n    while (i--) {\n      result.push({\n        text: '',\n        indent: 0,\n        offset: 0\n      });\n    }\n    return result;\n  };\n  var Cea608Stream = function (field, dataChannel) {\n    Cea608Stream.prototype.init.call(this);\n    this.field_ = field || 0;\n    this.dataChannel_ = dataChannel || 0;\n    this.name_ = 'CC' + ((this.field_ << 1 | this.dataChannel_) + 1);\n    this.setConstants();\n    this.reset();\n    this.push = function (packet) {\n      var data, swap, char0, char1, text; // remove the parity bits\n\n      data = packet.ccData & 0x7f7f; // ignore duplicate control codes; the spec demands they're sent twice\n\n      if (data === this.lastControlCode_) {\n        this.lastControlCode_ = null;\n        return;\n      } // Store control codes\n\n      if ((data & 0xf000) === 0x1000) {\n        this.lastControlCode_ = data;\n      } else if (data !== this.PADDING_) {\n        this.lastControlCode_ = null;\n      }\n      char0 = data >>> 8;\n      char1 = data & 0xff;\n      if (data === this.PADDING_) {\n        return;\n      } else if (data === this.RESUME_CAPTION_LOADING_) {\n        this.mode_ = 'popOn';\n      } else if (data === this.END_OF_CAPTION_) {\n        // If an EOC is received while in paint-on mode, the displayed caption\n        // text should be swapped to non-displayed memory as if it was a pop-on\n        // caption. Because of that, we should explicitly switch back to pop-on\n        // mode\n        this.mode_ = 'popOn';\n        this.clearFormatting(packet.pts); // if a caption was being displayed, it's gone now\n\n        this.flushDisplayed(packet.pts); // flip memory\n\n        swap = this.displayed_;\n        this.displayed_ = this.nonDisplayed_;\n        this.nonDisplayed_ = swap; // start measuring the time to display the caption\n\n        this.startPts_ = packet.pts;\n      } else if (data === this.ROLL_UP_2_ROWS_) {\n        this.rollUpRows_ = 2;\n        this.setRollUp(packet.pts);\n      } else if (data === this.ROLL_UP_3_ROWS_) {\n        this.rollUpRows_ = 3;\n        this.setRollUp(packet.pts);\n      } else if (data === this.ROLL_UP_4_ROWS_) {\n        this.rollUpRows_ = 4;\n        this.setRollUp(packet.pts);\n      } else if (data === this.CARRIAGE_RETURN_) {\n        this.clearFormatting(packet.pts);\n        this.flushDisplayed(packet.pts);\n        this.shiftRowsUp_();\n        this.startPts_ = packet.pts;\n      } else if (data === this.BACKSPACE_) {\n        if (this.mode_ === 'popOn') {\n          this.nonDisplayed_[this.row_].text = this.nonDisplayed_[this.row_].text.slice(0, -1);\n        } else {\n          this.displayed_[this.row_].text = this.displayed_[this.row_].text.slice(0, -1);\n        }\n      } else if (data === this.ERASE_DISPLAYED_MEMORY_) {\n        this.flushDisplayed(packet.pts);\n        this.displayed_ = createDisplayBuffer();\n      } else if (data === this.ERASE_NON_DISPLAYED_MEMORY_) {\n        this.nonDisplayed_ = createDisplayBuffer();\n      } else if (data === this.RESUME_DIRECT_CAPTIONING_) {\n        if (this.mode_ !== 'paintOn') {\n          // NOTE: This should be removed when proper caption positioning is\n          // implemented\n          this.flushDisplayed(packet.pts);\n          this.displayed_ = createDisplayBuffer();\n        }\n        this.mode_ = 'paintOn';\n        this.startPts_ = packet.pts; // Append special characters to caption text\n      } else if (this.isSpecialCharacter(char0, char1)) {\n        // Bitmask char0 so that we can apply character transformations\n        // regardless of field and data channel.\n        // Then byte-shift to the left and OR with char1 so we can pass the\n        // entire character code to `getCharFromCode`.\n        char0 = (char0 & 0x03) << 8;\n        text = getCharFromCode(char0 | char1);\n        this[this.mode_](packet.pts, text);\n        this.column_++; // Append extended characters to caption text\n      } else if (this.isExtCharacter(char0, char1)) {\n        // Extended characters always follow their \"non-extended\" equivalents.\n        // IE if a \"è\" is desired, you'll always receive \"eè\"; non-compliant\n        // decoders are supposed to drop the \"è\", while compliant decoders\n        // backspace the \"e\" and insert \"è\".\n        // Delete the previous character\n        if (this.mode_ === 'popOn') {\n          this.nonDisplayed_[this.row_].text = this.nonDisplayed_[this.row_].text.slice(0, -1);\n        } else {\n          this.displayed_[this.row_].text = this.displayed_[this.row_].text.slice(0, -1);\n        } // Bitmask char0 so that we can apply character transformations\n        // regardless of field and data channel.\n        // Then byte-shift to the left and OR with char1 so we can pass the\n        // entire character code to `getCharFromCode`.\n\n        char0 = (char0 & 0x03) << 8;\n        text = getCharFromCode(char0 | char1);\n        this[this.mode_](packet.pts, text);\n        this.column_++; // Process mid-row codes\n      } else if (this.isMidRowCode(char0, char1)) {\n        // Attributes are not additive, so clear all formatting\n        this.clearFormatting(packet.pts); // According to the standard, mid-row codes\n        // should be replaced with spaces, so add one now\n\n        this[this.mode_](packet.pts, ' ');\n        this.column_++;\n        if ((char1 & 0xe) === 0xe) {\n          this.addFormatting(packet.pts, ['i']);\n        }\n        if ((char1 & 0x1) === 0x1) {\n          this.addFormatting(packet.pts, ['u']);\n        } // Detect offset control codes and adjust cursor\n      } else if (this.isOffsetControlCode(char0, char1)) {\n        // Cursor position is set by indent PAC (see below) in 4-column\n        // increments, with an additional offset code of 1-3 to reach any\n        // of the 32 columns specified by CEA-608. So all we need to do\n        // here is increment the column cursor by the given offset.\n        const offset = char1 & 0x03; // For an offest value 1-3, set the offset for that caption\n        // in the non-displayed array.\n\n        this.nonDisplayed_[this.row_].offset = offset;\n        this.column_ += offset; // Detect PACs (Preamble Address Codes)\n      } else if (this.isPAC(char0, char1)) {\n        // There's no logic for PAC -> row mapping, so we have to just\n        // find the row code in an array and use its index :(\n        var row = ROWS.indexOf(data & 0x1f20); // Configure the caption window if we're in roll-up mode\n\n        if (this.mode_ === 'rollUp') {\n          // This implies that the base row is incorrectly set.\n          // As per the recommendation in CEA-608(Base Row Implementation), defer to the number\n          // of roll-up rows set.\n          if (row - this.rollUpRows_ + 1 < 0) {\n            row = this.rollUpRows_ - 1;\n          }\n          this.setRollUp(packet.pts, row);\n        }\n        if (row !== this.row_) {\n          // formatting is only persistent for current row\n          this.clearFormatting(packet.pts);\n          this.row_ = row;\n        } // All PACs can apply underline, so detect and apply\n        // (All odd-numbered second bytes set underline)\n\n        if (char1 & 0x1 && this.formatting_.indexOf('u') === -1) {\n          this.addFormatting(packet.pts, ['u']);\n        }\n        if ((data & 0x10) === 0x10) {\n          // We've got an indent level code. Each successive even number\n          // increments the column cursor by 4, so we can get the desired\n          // column position by bit-shifting to the right (to get n/2)\n          // and multiplying by 4.\n          const indentations = (data & 0xe) >> 1;\n          this.column_ = indentations * 4; // add to the number of indentations for positioning\n\n          this.nonDisplayed_[this.row_].indent += indentations;\n        }\n        if (this.isColorPAC(char1)) {\n          // it's a color code, though we only support white, which\n          // can be either normal or italicized. white italics can be\n          // either 0x4e or 0x6e depending on the row, so we just\n          // bitwise-and with 0xe to see if italics should be turned on\n          if ((char1 & 0xe) === 0xe) {\n            this.addFormatting(packet.pts, ['i']);\n          }\n        } // We have a normal character in char0, and possibly one in char1\n      } else if (this.isNormalChar(char0)) {\n        if (char1 === 0x00) {\n          char1 = null;\n        }\n        text = getCharFromCode(char0);\n        text += getCharFromCode(char1);\n        this[this.mode_](packet.pts, text);\n        this.column_ += text.length;\n      } // finish data processing\n    };\n  };\n\n  Cea608Stream.prototype = new Stream$7(); // Trigger a cue point that captures the current state of the\n  // display buffer\n\n  Cea608Stream.prototype.flushDisplayed = function (pts) {\n    const logWarning = index => {\n      this.trigger('log', {\n        level: 'warn',\n        message: 'Skipping a malformed 608 caption at index ' + index + '.'\n      });\n    };\n    const content = [];\n    this.displayed_.forEach((row, i) => {\n      if (row && row.text && row.text.length) {\n        try {\n          // remove spaces from the start and end of the string\n          row.text = row.text.trim();\n        } catch (e) {\n          // Ordinarily, this shouldn't happen. However, caption\n          // parsing errors should not throw exceptions and\n          // break playback.\n          logWarning(i);\n        } // See the below link for more details on the following fields:\n        // https://dvcs.w3.org/hg/text-tracks/raw-file/default/608toVTT/608toVTT.html#positioning-in-cea-608\n\n        if (row.text.length) {\n          content.push({\n            // The text to be displayed in the caption from this specific row, with whitespace removed.\n            text: row.text,\n            // Value between 1 and 15 representing the PAC row used to calculate line height.\n            line: i + 1,\n            // A number representing the indent position by percentage (CEA-608 PAC indent code).\n            // The value will be a number between 10 and 80. Offset is used to add an aditional\n            // value to the position if necessary.\n            position: 10 + Math.min(70, row.indent * 10) + row.offset * 2.5\n          });\n        }\n      } else if (row === undefined || row === null) {\n        logWarning(i);\n      }\n    });\n    if (content.length) {\n      this.trigger('data', {\n        startPts: this.startPts_,\n        endPts: pts,\n        content,\n        stream: this.name_\n      });\n    }\n  };\n  /**\n   * Zero out the data, used for startup and on seek\n   */\n\n  Cea608Stream.prototype.reset = function () {\n    this.mode_ = 'popOn'; // When in roll-up mode, the index of the last row that will\n    // actually display captions. If a caption is shifted to a row\n    // with a lower index than this, it is cleared from the display\n    // buffer\n\n    this.topRow_ = 0;\n    this.startPts_ = 0;\n    this.displayed_ = createDisplayBuffer();\n    this.nonDisplayed_ = createDisplayBuffer();\n    this.lastControlCode_ = null; // Track row and column for proper line-breaking and spacing\n\n    this.column_ = 0;\n    this.row_ = BOTTOM_ROW;\n    this.rollUpRows_ = 2; // This variable holds currently-applied formatting\n\n    this.formatting_ = [];\n  };\n  /**\n   * Sets up control code and related constants for this instance\n   */\n\n  Cea608Stream.prototype.setConstants = function () {\n    // The following attributes have these uses:\n    // ext_ :    char0 for mid-row codes, and the base for extended\n    //           chars (ext_+0, ext_+1, and ext_+2 are char0s for\n    //           extended codes)\n    // control_: char0 for control codes, except byte-shifted to the\n    //           left so that we can do this.control_ | CONTROL_CODE\n    // offset_:  char0 for tab offset codes\n    //\n    // It's also worth noting that control codes, and _only_ control codes,\n    // differ between field 1 and field2. Field 2 control codes are always\n    // their field 1 value plus 1. That's why there's the \"| field\" on the\n    // control value.\n    if (this.dataChannel_ === 0) {\n      this.BASE_ = 0x10;\n      this.EXT_ = 0x11;\n      this.CONTROL_ = (0x14 | this.field_) << 8;\n      this.OFFSET_ = 0x17;\n    } else if (this.dataChannel_ === 1) {\n      this.BASE_ = 0x18;\n      this.EXT_ = 0x19;\n      this.CONTROL_ = (0x1c | this.field_) << 8;\n      this.OFFSET_ = 0x1f;\n    } // Constants for the LSByte command codes recognized by Cea608Stream. This\n    // list is not exhaustive. For a more comprehensive listing and semantics see\n    // http://www.gpo.gov/fdsys/pkg/CFR-2010-title47-vol1/pdf/CFR-2010-title47-vol1-sec15-119.pdf\n    // Padding\n\n    this.PADDING_ = 0x0000; // Pop-on Mode\n\n    this.RESUME_CAPTION_LOADING_ = this.CONTROL_ | 0x20;\n    this.END_OF_CAPTION_ = this.CONTROL_ | 0x2f; // Roll-up Mode\n\n    this.ROLL_UP_2_ROWS_ = this.CONTROL_ | 0x25;\n    this.ROLL_UP_3_ROWS_ = this.CONTROL_ | 0x26;\n    this.ROLL_UP_4_ROWS_ = this.CONTROL_ | 0x27;\n    this.CARRIAGE_RETURN_ = this.CONTROL_ | 0x2d; // paint-on mode\n\n    this.RESUME_DIRECT_CAPTIONING_ = this.CONTROL_ | 0x29; // Erasure\n\n    this.BACKSPACE_ = this.CONTROL_ | 0x21;\n    this.ERASE_DISPLAYED_MEMORY_ = this.CONTROL_ | 0x2c;\n    this.ERASE_NON_DISPLAYED_MEMORY_ = this.CONTROL_ | 0x2e;\n  };\n  /**\n   * Detects if the 2-byte packet data is a special character\n   *\n   * Special characters have a second byte in the range 0x30 to 0x3f,\n   * with the first byte being 0x11 (for data channel 1) or 0x19 (for\n   * data channel 2).\n   *\n   * @param  {Integer} char0 The first byte\n   * @param  {Integer} char1 The second byte\n   * @return {Boolean}       Whether the 2 bytes are an special character\n   */\n\n  Cea608Stream.prototype.isSpecialCharacter = function (char0, char1) {\n    return char0 === this.EXT_ && char1 >= 0x30 && char1 <= 0x3f;\n  };\n  /**\n   * Detects if the 2-byte packet data is an extended character\n   *\n   * Extended characters have a second byte in the range 0x20 to 0x3f,\n   * with the first byte being 0x12 or 0x13 (for data channel 1) or\n   * 0x1a or 0x1b (for data channel 2).\n   *\n   * @param  {Integer} char0 The first byte\n   * @param  {Integer} char1 The second byte\n   * @return {Boolean}       Whether the 2 bytes are an extended character\n   */\n\n  Cea608Stream.prototype.isExtCharacter = function (char0, char1) {\n    return (char0 === this.EXT_ + 1 || char0 === this.EXT_ + 2) && char1 >= 0x20 && char1 <= 0x3f;\n  };\n  /**\n   * Detects if the 2-byte packet is a mid-row code\n   *\n   * Mid-row codes have a second byte in the range 0x20 to 0x2f, with\n   * the first byte being 0x11 (for data channel 1) or 0x19 (for data\n   * channel 2).\n   *\n   * @param  {Integer} char0 The first byte\n   * @param  {Integer} char1 The second byte\n   * @return {Boolean}       Whether the 2 bytes are a mid-row code\n   */\n\n  Cea608Stream.prototype.isMidRowCode = function (char0, char1) {\n    return char0 === this.EXT_ && char1 >= 0x20 && char1 <= 0x2f;\n  };\n  /**\n   * Detects if the 2-byte packet is an offset control code\n   *\n   * Offset control codes have a second byte in the range 0x21 to 0x23,\n   * with the first byte being 0x17 (for data channel 1) or 0x1f (for\n   * data channel 2).\n   *\n   * @param  {Integer} char0 The first byte\n   * @param  {Integer} char1 The second byte\n   * @return {Boolean}       Whether the 2 bytes are an offset control code\n   */\n\n  Cea608Stream.prototype.isOffsetControlCode = function (char0, char1) {\n    return char0 === this.OFFSET_ && char1 >= 0x21 && char1 <= 0x23;\n  };\n  /**\n   * Detects if the 2-byte packet is a Preamble Address Code\n   *\n   * PACs have a first byte in the range 0x10 to 0x17 (for data channel 1)\n   * or 0x18 to 0x1f (for data channel 2), with the second byte in the\n   * range 0x40 to 0x7f.\n   *\n   * @param  {Integer} char0 The first byte\n   * @param  {Integer} char1 The second byte\n   * @return {Boolean}       Whether the 2 bytes are a PAC\n   */\n\n  Cea608Stream.prototype.isPAC = function (char0, char1) {\n    return char0 >= this.BASE_ && char0 < this.BASE_ + 8 && char1 >= 0x40 && char1 <= 0x7f;\n  };\n  /**\n   * Detects if a packet's second byte is in the range of a PAC color code\n   *\n   * PAC color codes have the second byte be in the range 0x40 to 0x4f, or\n   * 0x60 to 0x6f.\n   *\n   * @param  {Integer} char1 The second byte\n   * @return {Boolean}       Whether the byte is a color PAC\n   */\n\n  Cea608Stream.prototype.isColorPAC = function (char1) {\n    return char1 >= 0x40 && char1 <= 0x4f || char1 >= 0x60 && char1 <= 0x7f;\n  };\n  /**\n   * Detects if a single byte is in the range of a normal character\n   *\n   * Normal text bytes are in the range 0x20 to 0x7f.\n   *\n   * @param  {Integer} char  The byte\n   * @return {Boolean}       Whether the byte is a normal character\n   */\n\n  Cea608Stream.prototype.isNormalChar = function (char) {\n    return char >= 0x20 && char <= 0x7f;\n  };\n  /**\n   * Configures roll-up\n   *\n   * @param  {Integer} pts         Current PTS\n   * @param  {Integer} newBaseRow  Used by PACs to slide the current window to\n   *                               a new position\n   */\n\n  Cea608Stream.prototype.setRollUp = function (pts, newBaseRow) {\n    // Reset the base row to the bottom row when switching modes\n    if (this.mode_ !== 'rollUp') {\n      this.row_ = BOTTOM_ROW;\n      this.mode_ = 'rollUp'; // Spec says to wipe memories when switching to roll-up\n\n      this.flushDisplayed(pts);\n      this.nonDisplayed_ = createDisplayBuffer();\n      this.displayed_ = createDisplayBuffer();\n    }\n    if (newBaseRow !== undefined && newBaseRow !== this.row_) {\n      // move currently displayed captions (up or down) to the new base row\n      for (var i = 0; i < this.rollUpRows_; i++) {\n        this.displayed_[newBaseRow - i] = this.displayed_[this.row_ - i];\n        this.displayed_[this.row_ - i] = {\n          text: '',\n          indent: 0,\n          offset: 0\n        };\n      }\n    }\n    if (newBaseRow === undefined) {\n      newBaseRow = this.row_;\n    }\n    this.topRow_ = newBaseRow - this.rollUpRows_ + 1;\n  }; // Adds the opening HTML tag for the passed character to the caption text,\n  // and keeps track of it for later closing\n\n  Cea608Stream.prototype.addFormatting = function (pts, format) {\n    this.formatting_ = this.formatting_.concat(format);\n    var text = format.reduce(function (text, format) {\n      return text + '<' + format + '>';\n    }, '');\n    this[this.mode_](pts, text);\n  }; // Adds HTML closing tags for current formatting to caption text and\n  // clears remembered formatting\n\n  Cea608Stream.prototype.clearFormatting = function (pts) {\n    if (!this.formatting_.length) {\n      return;\n    }\n    var text = this.formatting_.reverse().reduce(function (text, format) {\n      return text + '</' + format + '>';\n    }, '');\n    this.formatting_ = [];\n    this[this.mode_](pts, text);\n  }; // Mode Implementations\n\n  Cea608Stream.prototype.popOn = function (pts, text) {\n    var baseRow = this.nonDisplayed_[this.row_].text; // buffer characters\n\n    baseRow += text;\n    this.nonDisplayed_[this.row_].text = baseRow;\n  };\n  Cea608Stream.prototype.rollUp = function (pts, text) {\n    var baseRow = this.displayed_[this.row_].text;\n    baseRow += text;\n    this.displayed_[this.row_].text = baseRow;\n  };\n  Cea608Stream.prototype.shiftRowsUp_ = function () {\n    var i; // clear out inactive rows\n\n    for (i = 0; i < this.topRow_; i++) {\n      this.displayed_[i] = {\n        text: '',\n        indent: 0,\n        offset: 0\n      };\n    }\n    for (i = this.row_ + 1; i < BOTTOM_ROW + 1; i++) {\n      this.displayed_[i] = {\n        text: '',\n        indent: 0,\n        offset: 0\n      };\n    } // shift displayed rows up\n\n    for (i = this.topRow_; i < this.row_; i++) {\n      this.displayed_[i] = this.displayed_[i + 1];\n    } // clear out the bottom row\n\n    this.displayed_[this.row_] = {\n      text: '',\n      indent: 0,\n      offset: 0\n    };\n  };\n  Cea608Stream.prototype.paintOn = function (pts, text) {\n    var baseRow = this.displayed_[this.row_].text;\n    baseRow += text;\n    this.displayed_[this.row_].text = baseRow;\n  }; // exports\n\n  var captionStream = {\n    CaptionStream: CaptionStream$2,\n    Cea608Stream: Cea608Stream,\n    Cea708Stream: Cea708Stream\n  };\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   */\n\n  var streamTypes = {\n    H264_STREAM_TYPE: 0x1B,\n    ADTS_STREAM_TYPE: 0x0F,\n    METADATA_STREAM_TYPE: 0x15\n  };\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   *\n   * Accepts program elementary stream (PES) data events and corrects\n   * decode and presentation time stamps to account for a rollover\n   * of the 33 bit value.\n   */\n\n  var Stream$6 = stream;\n  var MAX_TS = 8589934592;\n  var RO_THRESH = 4294967296;\n  var TYPE_SHARED = 'shared';\n  var handleRollover$1 = function (value, reference) {\n    var direction = 1;\n    if (value > reference) {\n      // If the current timestamp value is greater than our reference timestamp and we detect a\n      // timestamp rollover, this means the roll over is happening in the opposite direction.\n      // Example scenario: Enter a long stream/video just after a rollover occurred. The reference\n      // point will be set to a small number, e.g. 1. The user then seeks backwards over the\n      // rollover point. In loading this segment, the timestamp values will be very large,\n      // e.g. 2^33 - 1. Since this comes before the data we loaded previously, we want to adjust\n      // the time stamp to be `value - 2^33`.\n      direction = -1;\n    } // Note: A seek forwards or back that is greater than the RO_THRESH (2^32, ~13 hours) will\n    // cause an incorrect adjustment.\n\n    while (Math.abs(reference - value) > RO_THRESH) {\n      value += direction * MAX_TS;\n    }\n    return value;\n  };\n  var TimestampRolloverStream$1 = function (type) {\n    var lastDTS, referenceDTS;\n    TimestampRolloverStream$1.prototype.init.call(this); // The \"shared\" type is used in cases where a stream will contain muxed\n    // video and audio. We could use `undefined` here, but having a string\n    // makes debugging a little clearer.\n\n    this.type_ = type || TYPE_SHARED;\n    this.push = function (data) {\n      /**\n       * Rollover stream expects data from elementary stream.\n       * Elementary stream can push forward 2 types of data\n       * - Parsed Video/Audio/Timed-metadata PES (packetized elementary stream) packets\n       * - Tracks metadata from PMT (Program Map Table)\n       * Rollover stream expects pts/dts info to be available, since it stores lastDTS\n       * We should ignore non-PES packets since they may override lastDTS to undefined.\n       * lastDTS is important to signal the next segments\n       * about rollover from the previous segments.\n       */\n      if (data.type === 'metadata') {\n        this.trigger('data', data);\n        return;\n      } // Any \"shared\" rollover streams will accept _all_ data. Otherwise,\n      // streams will only accept data that matches their type.\n\n      if (this.type_ !== TYPE_SHARED && data.type !== this.type_) {\n        return;\n      }\n      if (referenceDTS === undefined) {\n        referenceDTS = data.dts;\n      }\n      data.dts = handleRollover$1(data.dts, referenceDTS);\n      data.pts = handleRollover$1(data.pts, referenceDTS);\n      lastDTS = data.dts;\n      this.trigger('data', data);\n    };\n    this.flush = function () {\n      referenceDTS = lastDTS;\n      this.trigger('done');\n    };\n    this.endTimeline = function () {\n      this.flush();\n      this.trigger('endedtimeline');\n    };\n    this.discontinuity = function () {\n      referenceDTS = void 0;\n      lastDTS = void 0;\n    };\n    this.reset = function () {\n      this.discontinuity();\n      this.trigger('reset');\n    };\n  };\n  TimestampRolloverStream$1.prototype = new Stream$6();\n  var timestampRolloverStream = {\n    TimestampRolloverStream: TimestampRolloverStream$1,\n    handleRollover: handleRollover$1\n  }; // Once IE11 support is dropped, this function should be removed.\n\n  var typedArrayIndexOf$1 = (typedArray, element, fromIndex) => {\n    if (!typedArray) {\n      return -1;\n    }\n    var currentIndex = fromIndex;\n    for (; currentIndex < typedArray.length; currentIndex++) {\n      if (typedArray[currentIndex] === element) {\n        return currentIndex;\n      }\n    }\n    return -1;\n  };\n  var typedArray = {\n    typedArrayIndexOf: typedArrayIndexOf$1\n  };\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   *\n   * Tools for parsing ID3 frame data\n   * @see http://id3.org/id3v2.3.0\n   */\n\n  var typedArrayIndexOf = typedArray.typedArrayIndexOf,\n    // Frames that allow different types of text encoding contain a text\n    // encoding description byte [ID3v2.4.0 section 4.]\n    textEncodingDescriptionByte = {\n      Iso88591: 0x00,\n      // ISO-8859-1, terminated with \\0.\n      Utf16: 0x01,\n      // UTF-16 encoded Unicode BOM, terminated with \\0\\0\n      Utf16be: 0x02,\n      // UTF-16BE encoded Unicode, without BOM, terminated with \\0\\0\n      Utf8: 0x03 // UTF-8 encoded Unicode, terminated with \\0\n    },\n    // return a percent-encoded representation of the specified byte range\n    // @see http://en.wikipedia.org/wiki/Percent-encoding \n    percentEncode$1 = function (bytes, start, end) {\n      var i,\n        result = '';\n      for (i = start; i < end; i++) {\n        result += '%' + ('00' + bytes[i].toString(16)).slice(-2);\n      }\n      return result;\n    },\n    // return the string representation of the specified byte range,\n    // interpreted as UTf-8.\n    parseUtf8 = function (bytes, start, end) {\n      return decodeURIComponent(percentEncode$1(bytes, start, end));\n    },\n    // return the string representation of the specified byte range,\n    // interpreted as ISO-8859-1.\n    parseIso88591$1 = function (bytes, start, end) {\n      return unescape(percentEncode$1(bytes, start, end)); // jshint ignore:line\n    },\n    parseSyncSafeInteger$1 = function (data) {\n      return data[0] << 21 | data[1] << 14 | data[2] << 7 | data[3];\n    },\n    frameParsers = {\n      'APIC': function (frame) {\n        var i = 1,\n          mimeTypeEndIndex,\n          descriptionEndIndex,\n          LINK_MIME_TYPE = '-->';\n        if (frame.data[0] !== textEncodingDescriptionByte.Utf8) {\n          // ignore frames with unrecognized character encodings\n          return;\n        } // parsing fields [ID3v2.4.0 section 4.14.]\n\n        mimeTypeEndIndex = typedArrayIndexOf(frame.data, 0, i);\n        if (mimeTypeEndIndex < 0) {\n          // malformed frame\n          return;\n        } // parsing Mime type field (terminated with \\0)\n\n        frame.mimeType = parseIso88591$1(frame.data, i, mimeTypeEndIndex);\n        i = mimeTypeEndIndex + 1; // parsing 1-byte Picture Type field\n\n        frame.pictureType = frame.data[i];\n        i++;\n        descriptionEndIndex = typedArrayIndexOf(frame.data, 0, i);\n        if (descriptionEndIndex < 0) {\n          // malformed frame\n          return;\n        } // parsing Description field (terminated with \\0)\n\n        frame.description = parseUtf8(frame.data, i, descriptionEndIndex);\n        i = descriptionEndIndex + 1;\n        if (frame.mimeType === LINK_MIME_TYPE) {\n          // parsing Picture Data field as URL (always represented as ISO-8859-1 [ID3v2.4.0 section 4.])\n          frame.url = parseIso88591$1(frame.data, i, frame.data.length);\n        } else {\n          // parsing Picture Data field as binary data\n          frame.pictureData = frame.data.subarray(i, frame.data.length);\n        }\n      },\n      'T*': function (frame) {\n        if (frame.data[0] !== textEncodingDescriptionByte.Utf8) {\n          // ignore frames with unrecognized character encodings\n          return;\n        } // parse text field, do not include null terminator in the frame value\n        // frames that allow different types of encoding contain terminated text [ID3v2.4.0 section 4.]\n\n        frame.value = parseUtf8(frame.data, 1, frame.data.length).replace(/\\0*$/, ''); // text information frames supports multiple strings, stored as a terminator separated list [ID3v2.4.0 section 4.2.]\n\n        frame.values = frame.value.split('\\0');\n      },\n      'TXXX': function (frame) {\n        var descriptionEndIndex;\n        if (frame.data[0] !== textEncodingDescriptionByte.Utf8) {\n          // ignore frames with unrecognized character encodings\n          return;\n        }\n        descriptionEndIndex = typedArrayIndexOf(frame.data, 0, 1);\n        if (descriptionEndIndex === -1) {\n          return;\n        } // parse the text fields\n\n        frame.description = parseUtf8(frame.data, 1, descriptionEndIndex); // do not include the null terminator in the tag value\n        // frames that allow different types of encoding contain terminated text\n        // [ID3v2.4.0 section 4.]\n\n        frame.value = parseUtf8(frame.data, descriptionEndIndex + 1, frame.data.length).replace(/\\0*$/, '');\n        frame.data = frame.value;\n      },\n      'W*': function (frame) {\n        // parse URL field; URL fields are always represented as ISO-8859-1 [ID3v2.4.0 section 4.]\n        // if the value is followed by a string termination all the following information should be ignored [ID3v2.4.0 section 4.3]\n        frame.url = parseIso88591$1(frame.data, 0, frame.data.length).replace(/\\0.*$/, '');\n      },\n      'WXXX': function (frame) {\n        var descriptionEndIndex;\n        if (frame.data[0] !== textEncodingDescriptionByte.Utf8) {\n          // ignore frames with unrecognized character encodings\n          return;\n        }\n        descriptionEndIndex = typedArrayIndexOf(frame.data, 0, 1);\n        if (descriptionEndIndex === -1) {\n          return;\n        } // parse the description and URL fields\n\n        frame.description = parseUtf8(frame.data, 1, descriptionEndIndex); // URL fields are always represented as ISO-8859-1 [ID3v2.4.0 section 4.]\n        // if the value is followed by a string termination all the following information\n        // should be ignored [ID3v2.4.0 section 4.3]\n\n        frame.url = parseIso88591$1(frame.data, descriptionEndIndex + 1, frame.data.length).replace(/\\0.*$/, '');\n      },\n      'PRIV': function (frame) {\n        var i;\n        for (i = 0; i < frame.data.length; i++) {\n          if (frame.data[i] === 0) {\n            // parse the description and URL fields\n            frame.owner = parseIso88591$1(frame.data, 0, i);\n            break;\n          }\n        }\n        frame.privateData = frame.data.subarray(i + 1);\n        frame.data = frame.privateData;\n      }\n    };\n  var parseId3Frames$1 = function (data) {\n    var frameSize,\n      frameHeader,\n      frameStart = 10,\n      tagSize = 0,\n      frames = []; // If we don't have enough data for a header, 10 bytes, \n    // or 'ID3' in the first 3 bytes this is not a valid ID3 tag.\n\n    if (data.length < 10 || data[0] !== 'I'.charCodeAt(0) || data[1] !== 'D'.charCodeAt(0) || data[2] !== '3'.charCodeAt(0)) {\n      return;\n    } // the frame size is transmitted as a 28-bit integer in the\n    // last four bytes of the ID3 header.\n    // The most significant bit of each byte is dropped and the\n    // results concatenated to recover the actual value.\n\n    tagSize = parseSyncSafeInteger$1(data.subarray(6, 10)); // ID3 reports the tag size excluding the header but it's more\n    // convenient for our comparisons to include it\n\n    tagSize += 10; // check bit 6 of byte 5 for the extended header flag.\n\n    var hasExtendedHeader = data[5] & 0x40;\n    if (hasExtendedHeader) {\n      // advance the frame start past the extended header\n      frameStart += 4; // header size field\n\n      frameStart += parseSyncSafeInteger$1(data.subarray(10, 14));\n      tagSize -= parseSyncSafeInteger$1(data.subarray(16, 20)); // clip any padding off the end\n    } // parse one or more ID3 frames\n    // http://id3.org/id3v2.3.0#ID3v2_frame_overview\n\n    do {\n      // determine the number of bytes in this frame\n      frameSize = parseSyncSafeInteger$1(data.subarray(frameStart + 4, frameStart + 8));\n      if (frameSize < 1) {\n        break;\n      }\n      frameHeader = String.fromCharCode(data[frameStart], data[frameStart + 1], data[frameStart + 2], data[frameStart + 3]);\n      var frame = {\n        id: frameHeader,\n        data: data.subarray(frameStart + 10, frameStart + frameSize + 10)\n      };\n      frame.key = frame.id; // parse frame values\n\n      if (frameParsers[frame.id]) {\n        // use frame specific parser\n        frameParsers[frame.id](frame);\n      } else if (frame.id[0] === 'T') {\n        // use text frame generic parser\n        frameParsers['T*'](frame);\n      } else if (frame.id[0] === 'W') {\n        // use URL link frame generic parser\n        frameParsers['W*'](frame);\n      }\n      frames.push(frame);\n      frameStart += 10; // advance past the frame header\n\n      frameStart += frameSize; // advance past the frame body\n    } while (frameStart < tagSize);\n    return frames;\n  };\n  var parseId3 = {\n    parseId3Frames: parseId3Frames$1,\n    parseSyncSafeInteger: parseSyncSafeInteger$1,\n    frameParsers: frameParsers\n  };\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   *\n   * Accepts program elementary stream (PES) data events and parses out\n   * ID3 metadata from them, if present.\n   * @see http://id3.org/id3v2.3.0\n   */\n\n  var Stream$5 = stream,\n    StreamTypes$3 = streamTypes,\n    id3 = parseId3,\n    MetadataStream;\n  MetadataStream = function (options) {\n    var settings = {\n        // the bytes of the program-level descriptor field in MP2T\n        // see ISO/IEC 13818-1:2013 (E), section 2.6 \"Program and\n        // program element descriptors\"\n        descriptor: options && options.descriptor\n      },\n      // the total size in bytes of the ID3 tag being parsed\n      tagSize = 0,\n      // tag data that is not complete enough to be parsed\n      buffer = [],\n      // the total number of bytes currently in the buffer\n      bufferSize = 0,\n      i;\n    MetadataStream.prototype.init.call(this); // calculate the text track in-band metadata track dispatch type\n    // https://html.spec.whatwg.org/multipage/embedded-content.html#steps-to-expose-a-media-resource-specific-text-track\n\n    this.dispatchType = StreamTypes$3.METADATA_STREAM_TYPE.toString(16);\n    if (settings.descriptor) {\n      for (i = 0; i < settings.descriptor.length; i++) {\n        this.dispatchType += ('00' + settings.descriptor[i].toString(16)).slice(-2);\n      }\n    }\n    this.push = function (chunk) {\n      var tag, frameStart, frameSize, frame, i, frameHeader;\n      if (chunk.type !== 'timed-metadata') {\n        return;\n      } // if data_alignment_indicator is set in the PES header,\n      // we must have the start of a new ID3 tag. Assume anything\n      // remaining in the buffer was malformed and throw it out\n\n      if (chunk.dataAlignmentIndicator) {\n        bufferSize = 0;\n        buffer.length = 0;\n      } // ignore events that don't look like ID3 data\n\n      if (buffer.length === 0 && (chunk.data.length < 10 || chunk.data[0] !== 'I'.charCodeAt(0) || chunk.data[1] !== 'D'.charCodeAt(0) || chunk.data[2] !== '3'.charCodeAt(0))) {\n        this.trigger('log', {\n          level: 'warn',\n          message: 'Skipping unrecognized metadata packet'\n        });\n        return;\n      } // add this chunk to the data we've collected so far\n\n      buffer.push(chunk);\n      bufferSize += chunk.data.byteLength; // grab the size of the entire frame from the ID3 header\n\n      if (buffer.length === 1) {\n        // the frame size is transmitted as a 28-bit integer in the\n        // last four bytes of the ID3 header.\n        // The most significant bit of each byte is dropped and the\n        // results concatenated to recover the actual value.\n        tagSize = id3.parseSyncSafeInteger(chunk.data.subarray(6, 10)); // ID3 reports the tag size excluding the header but it's more\n        // convenient for our comparisons to include it\n\n        tagSize += 10;\n      } // if the entire frame has not arrived, wait for more data\n\n      if (bufferSize < tagSize) {\n        return;\n      } // collect the entire frame so it can be parsed\n\n      tag = {\n        data: new Uint8Array(tagSize),\n        frames: [],\n        pts: buffer[0].pts,\n        dts: buffer[0].dts\n      };\n      for (i = 0; i < tagSize;) {\n        tag.data.set(buffer[0].data.subarray(0, tagSize - i), i);\n        i += buffer[0].data.byteLength;\n        bufferSize -= buffer[0].data.byteLength;\n        buffer.shift();\n      } // find the start of the first frame and the end of the tag\n\n      frameStart = 10;\n      if (tag.data[5] & 0x40) {\n        // advance the frame start past the extended header\n        frameStart += 4; // header size field\n\n        frameStart += id3.parseSyncSafeInteger(tag.data.subarray(10, 14)); // clip any padding off the end\n\n        tagSize -= id3.parseSyncSafeInteger(tag.data.subarray(16, 20));\n      } // parse one or more ID3 frames\n      // http://id3.org/id3v2.3.0#ID3v2_frame_overview\n\n      do {\n        // determine the number of bytes in this frame\n        frameSize = id3.parseSyncSafeInteger(tag.data.subarray(frameStart + 4, frameStart + 8));\n        if (frameSize < 1) {\n          this.trigger('log', {\n            level: 'warn',\n            message: 'Malformed ID3 frame encountered. Skipping remaining metadata parsing.'\n          }); // If the frame is malformed, don't parse any further frames but allow previous valid parsed frames\n          // to be sent along.\n\n          break;\n        }\n        frameHeader = String.fromCharCode(tag.data[frameStart], tag.data[frameStart + 1], tag.data[frameStart + 2], tag.data[frameStart + 3]);\n        frame = {\n          id: frameHeader,\n          data: tag.data.subarray(frameStart + 10, frameStart + frameSize + 10)\n        };\n        frame.key = frame.id; // parse frame values\n\n        if (id3.frameParsers[frame.id]) {\n          // use frame specific parser\n          id3.frameParsers[frame.id](frame);\n        } else if (frame.id[0] === 'T') {\n          // use text frame generic parser\n          id3.frameParsers['T*'](frame);\n        } else if (frame.id[0] === 'W') {\n          // use URL link frame generic parser\n          id3.frameParsers['W*'](frame);\n        } // handle the special PRIV frame used to indicate the start\n        // time for raw AAC data\n\n        if (frame.owner === 'com.apple.streaming.transportStreamTimestamp') {\n          var d = frame.data,\n            size = (d[3] & 0x01) << 30 | d[4] << 22 | d[5] << 14 | d[6] << 6 | d[7] >>> 2;\n          size *= 4;\n          size += d[7] & 0x03;\n          frame.timeStamp = size; // in raw AAC, all subsequent data will be timestamped based\n          // on the value of this frame\n          // we couldn't have known the appropriate pts and dts before\n          // parsing this ID3 tag so set those values now\n\n          if (tag.pts === undefined && tag.dts === undefined) {\n            tag.pts = frame.timeStamp;\n            tag.dts = frame.timeStamp;\n          }\n          this.trigger('timestamp', frame);\n        }\n        tag.frames.push(frame);\n        frameStart += 10; // advance past the frame header\n\n        frameStart += frameSize; // advance past the frame body\n      } while (frameStart < tagSize);\n      this.trigger('data', tag);\n    };\n  };\n  MetadataStream.prototype = new Stream$5();\n  var metadataStream = MetadataStream;\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   *\n   * A stream-based mp2t to mp4 converter. This utility can be used to\n   * deliver mp4s to a SourceBuffer on platforms that support native\n   * Media Source Extensions.\n   */\n\n  var Stream$4 = stream,\n    CaptionStream$1 = captionStream,\n    StreamTypes$2 = streamTypes,\n    TimestampRolloverStream = timestampRolloverStream.TimestampRolloverStream; // object types\n\n  var TransportPacketStream, TransportParseStream, ElementaryStream; // constants\n\n  var MP2T_PACKET_LENGTH$1 = 188,\n    // bytes\n    SYNC_BYTE$1 = 0x47;\n  /**\n   * Splits an incoming stream of binary data into MPEG-2 Transport\n   * Stream packets.\n   */\n\n  TransportPacketStream = function () {\n    var buffer = new Uint8Array(MP2T_PACKET_LENGTH$1),\n      bytesInBuffer = 0;\n    TransportPacketStream.prototype.init.call(this); // Deliver new bytes to the stream.\n\n    /**\n     * Split a stream of data into M2TS packets\n    **/\n\n    this.push = function (bytes) {\n      var startIndex = 0,\n        endIndex = MP2T_PACKET_LENGTH$1,\n        everything; // If there are bytes remaining from the last segment, prepend them to the\n      // bytes that were pushed in\n\n      if (bytesInBuffer) {\n        everything = new Uint8Array(bytes.byteLength + bytesInBuffer);\n        everything.set(buffer.subarray(0, bytesInBuffer));\n        everything.set(bytes, bytesInBuffer);\n        bytesInBuffer = 0;\n      } else {\n        everything = bytes;\n      } // While we have enough data for a packet\n\n      while (endIndex < everything.byteLength) {\n        // Look for a pair of start and end sync bytes in the data..\n        if (everything[startIndex] === SYNC_BYTE$1 && everything[endIndex] === SYNC_BYTE$1) {\n          // We found a packet so emit it and jump one whole packet forward in\n          // the stream\n          this.trigger('data', everything.subarray(startIndex, endIndex));\n          startIndex += MP2T_PACKET_LENGTH$1;\n          endIndex += MP2T_PACKET_LENGTH$1;\n          continue;\n        } // If we get here, we have somehow become de-synchronized and we need to step\n        // forward one byte at a time until we find a pair of sync bytes that denote\n        // a packet\n\n        startIndex++;\n        endIndex++;\n      } // If there was some data left over at the end of the segment that couldn't\n      // possibly be a whole packet, keep it because it might be the start of a packet\n      // that continues in the next segment\n\n      if (startIndex < everything.byteLength) {\n        buffer.set(everything.subarray(startIndex), 0);\n        bytesInBuffer = everything.byteLength - startIndex;\n      }\n    };\n    /**\n     * Passes identified M2TS packets to the TransportParseStream to be parsed\n    **/\n\n    this.flush = function () {\n      // If the buffer contains a whole packet when we are being flushed, emit it\n      // and empty the buffer. Otherwise hold onto the data because it may be\n      // important for decoding the next segment\n      if (bytesInBuffer === MP2T_PACKET_LENGTH$1 && buffer[0] === SYNC_BYTE$1) {\n        this.trigger('data', buffer);\n        bytesInBuffer = 0;\n      }\n      this.trigger('done');\n    };\n    this.endTimeline = function () {\n      this.flush();\n      this.trigger('endedtimeline');\n    };\n    this.reset = function () {\n      bytesInBuffer = 0;\n      this.trigger('reset');\n    };\n  };\n  TransportPacketStream.prototype = new Stream$4();\n  /**\n   * Accepts an MP2T TransportPacketStream and emits data events with parsed\n   * forms of the individual transport stream packets.\n   */\n\n  TransportParseStream = function () {\n    var parsePsi, parsePat, parsePmt, self;\n    TransportParseStream.prototype.init.call(this);\n    self = this;\n    this.packetsWaitingForPmt = [];\n    this.programMapTable = undefined;\n    parsePsi = function (payload, psi) {\n      var offset = 0; // PSI packets may be split into multiple sections and those\n      // sections may be split into multiple packets. If a PSI\n      // section starts in this packet, the payload_unit_start_indicator\n      // will be true and the first byte of the payload will indicate\n      // the offset from the current position to the start of the\n      // section.\n\n      if (psi.payloadUnitStartIndicator) {\n        offset += payload[offset] + 1;\n      }\n      if (psi.type === 'pat') {\n        parsePat(payload.subarray(offset), psi);\n      } else {\n        parsePmt(payload.subarray(offset), psi);\n      }\n    };\n    parsePat = function (payload, pat) {\n      pat.section_number = payload[7]; // eslint-disable-line camelcase\n\n      pat.last_section_number = payload[8]; // eslint-disable-line camelcase\n      // skip the PSI header and parse the first PMT entry\n\n      self.pmtPid = (payload[10] & 0x1F) << 8 | payload[11];\n      pat.pmtPid = self.pmtPid;\n    };\n    /**\n     * Parse out the relevant fields of a Program Map Table (PMT).\n     * @param payload {Uint8Array} the PMT-specific portion of an MP2T\n     * packet. The first byte in this array should be the table_id\n     * field.\n     * @param pmt {object} the object that should be decorated with\n     * fields parsed from the PMT.\n     */\n\n    parsePmt = function (payload, pmt) {\n      var sectionLength, tableEnd, programInfoLength, offset; // PMTs can be sent ahead of the time when they should actually\n      // take effect. We don't believe this should ever be the case\n      // for HLS but we'll ignore \"forward\" PMT declarations if we see\n      // them. Future PMT declarations have the current_next_indicator\n      // set to zero.\n\n      if (!(payload[5] & 0x01)) {\n        return;\n      } // overwrite any existing program map table\n\n      self.programMapTable = {\n        video: null,\n        audio: null,\n        'timed-metadata': {}\n      }; // the mapping table ends at the end of the current section\n\n      sectionLength = (payload[1] & 0x0f) << 8 | payload[2];\n      tableEnd = 3 + sectionLength - 4; // to determine where the table is, we have to figure out how\n      // long the program info descriptors are\n\n      programInfoLength = (payload[10] & 0x0f) << 8 | payload[11]; // advance the offset to the first entry in the mapping table\n\n      offset = 12 + programInfoLength;\n      while (offset < tableEnd) {\n        var streamType = payload[offset];\n        var pid = (payload[offset + 1] & 0x1F) << 8 | payload[offset + 2]; // only map a single elementary_pid for audio and video stream types\n        // TODO: should this be done for metadata too? for now maintain behavior of\n        //       multiple metadata streams\n\n        if (streamType === StreamTypes$2.H264_STREAM_TYPE && self.programMapTable.video === null) {\n          self.programMapTable.video = pid;\n        } else if (streamType === StreamTypes$2.ADTS_STREAM_TYPE && self.programMapTable.audio === null) {\n          self.programMapTable.audio = pid;\n        } else if (streamType === StreamTypes$2.METADATA_STREAM_TYPE) {\n          // map pid to stream type for metadata streams\n          self.programMapTable['timed-metadata'][pid] = streamType;\n        } // move to the next table entry\n        // skip past the elementary stream descriptors, if present\n\n        offset += ((payload[offset + 3] & 0x0F) << 8 | payload[offset + 4]) + 5;\n      } // record the map on the packet as well\n\n      pmt.programMapTable = self.programMapTable;\n    };\n    /**\n     * Deliver a new MP2T packet to the next stream in the pipeline.\n     */\n\n    this.push = function (packet) {\n      var result = {},\n        offset = 4;\n      result.payloadUnitStartIndicator = !!(packet[1] & 0x40); // pid is a 13-bit field starting at the last bit of packet[1]\n\n      result.pid = packet[1] & 0x1f;\n      result.pid <<= 8;\n      result.pid |= packet[2]; // if an adaption field is present, its length is specified by the\n      // fifth byte of the TS packet header. The adaptation field is\n      // used to add stuffing to PES packets that don't fill a complete\n      // TS packet, and to specify some forms of timing and control data\n      // that we do not currently use.\n\n      if ((packet[3] & 0x30) >>> 4 > 0x01) {\n        offset += packet[offset] + 1;\n      } // parse the rest of the packet based on the type\n\n      if (result.pid === 0) {\n        result.type = 'pat';\n        parsePsi(packet.subarray(offset), result);\n        this.trigger('data', result);\n      } else if (result.pid === this.pmtPid) {\n        result.type = 'pmt';\n        parsePsi(packet.subarray(offset), result);\n        this.trigger('data', result); // if there are any packets waiting for a PMT to be found, process them now\n\n        while (this.packetsWaitingForPmt.length) {\n          this.processPes_.apply(this, this.packetsWaitingForPmt.shift());\n        }\n      } else if (this.programMapTable === undefined) {\n        // When we have not seen a PMT yet, defer further processing of\n        // PES packets until one has been parsed\n        this.packetsWaitingForPmt.push([packet, offset, result]);\n      } else {\n        this.processPes_(packet, offset, result);\n      }\n    };\n    this.processPes_ = function (packet, offset, result) {\n      // set the appropriate stream type\n      if (result.pid === this.programMapTable.video) {\n        result.streamType = StreamTypes$2.H264_STREAM_TYPE;\n      } else if (result.pid === this.programMapTable.audio) {\n        result.streamType = StreamTypes$2.ADTS_STREAM_TYPE;\n      } else {\n        // if not video or audio, it is timed-metadata or unknown\n        // if unknown, streamType will be undefined\n        result.streamType = this.programMapTable['timed-metadata'][result.pid];\n      }\n      result.type = 'pes';\n      result.data = packet.subarray(offset);\n      this.trigger('data', result);\n    };\n  };\n  TransportParseStream.prototype = new Stream$4();\n  TransportParseStream.STREAM_TYPES = {\n    h264: 0x1b,\n    adts: 0x0f\n  };\n  /**\n   * Reconsistutes program elementary stream (PES) packets from parsed\n   * transport stream packets. That is, if you pipe an\n   * mp2t.TransportParseStream into a mp2t.ElementaryStream, the output\n   * events will be events which capture the bytes for individual PES\n   * packets plus relevant metadata that has been extracted from the\n   * container.\n   */\n\n  ElementaryStream = function () {\n    var self = this,\n      segmentHadPmt = false,\n      // PES packet fragments\n      video = {\n        data: [],\n        size: 0\n      },\n      audio = {\n        data: [],\n        size: 0\n      },\n      timedMetadata = {\n        data: [],\n        size: 0\n      },\n      programMapTable,\n      parsePes = function (payload, pes) {\n        var ptsDtsFlags;\n        const startPrefix = payload[0] << 16 | payload[1] << 8 | payload[2]; // default to an empty array\n\n        pes.data = new Uint8Array(); // In certain live streams, the start of a TS fragment has ts packets\n        // that are frame data that is continuing from the previous fragment. This\n        // is to check that the pes data is the start of a new pes payload\n\n        if (startPrefix !== 1) {\n          return;\n        } // get the packet length, this will be 0 for video\n\n        pes.packetLength = 6 + (payload[4] << 8 | payload[5]); // find out if this packets starts a new keyframe\n\n        pes.dataAlignmentIndicator = (payload[6] & 0x04) !== 0; // PES packets may be annotated with a PTS value, or a PTS value\n        // and a DTS value. Determine what combination of values is\n        // available to work with.\n\n        ptsDtsFlags = payload[7]; // PTS and DTS are normally stored as a 33-bit number.  Javascript\n        // performs all bitwise operations on 32-bit integers but javascript\n        // supports a much greater range (52-bits) of integer using standard\n        // mathematical operations.\n        // We construct a 31-bit value using bitwise operators over the 31\n        // most significant bits and then multiply by 4 (equal to a left-shift\n        // of 2) before we add the final 2 least significant bits of the\n        // timestamp (equal to an OR.)\n\n        if (ptsDtsFlags & 0xC0) {\n          // the PTS and DTS are not written out directly. For information\n          // on how they are encoded, see\n          // http://dvd.sourceforge.net/dvdinfo/pes-hdr.html\n          pes.pts = (payload[9] & 0x0E) << 27 | (payload[10] & 0xFF) << 20 | (payload[11] & 0xFE) << 12 | (payload[12] & 0xFF) << 5 | (payload[13] & 0xFE) >>> 3;\n          pes.pts *= 4; // Left shift by 2\n\n          pes.pts += (payload[13] & 0x06) >>> 1; // OR by the two LSBs\n\n          pes.dts = pes.pts;\n          if (ptsDtsFlags & 0x40) {\n            pes.dts = (payload[14] & 0x0E) << 27 | (payload[15] & 0xFF) << 20 | (payload[16] & 0xFE) << 12 | (payload[17] & 0xFF) << 5 | (payload[18] & 0xFE) >>> 3;\n            pes.dts *= 4; // Left shift by 2\n\n            pes.dts += (payload[18] & 0x06) >>> 1; // OR by the two LSBs\n          }\n        } // the data section starts immediately after the PES header.\n        // pes_header_data_length specifies the number of header bytes\n        // that follow the last byte of the field.\n\n        pes.data = payload.subarray(9 + payload[8]);\n      },\n      /**\n        * Pass completely parsed PES packets to the next stream in the pipeline\n       **/\n      flushStream = function (stream, type, forceFlush) {\n        var packetData = new Uint8Array(stream.size),\n          event = {\n            type: type\n          },\n          i = 0,\n          offset = 0,\n          packetFlushable = false,\n          fragment; // do nothing if there is not enough buffered data for a complete\n        // PES header\n\n        if (!stream.data.length || stream.size < 9) {\n          return;\n        }\n        event.trackId = stream.data[0].pid; // reassemble the packet\n\n        for (i = 0; i < stream.data.length; i++) {\n          fragment = stream.data[i];\n          packetData.set(fragment.data, offset);\n          offset += fragment.data.byteLength;\n        } // parse assembled packet's PES header\n\n        parsePes(packetData, event); // non-video PES packets MUST have a non-zero PES_packet_length\n        // check that there is enough stream data to fill the packet\n\n        packetFlushable = type === 'video' || event.packetLength <= stream.size; // flush pending packets if the conditions are right\n\n        if (forceFlush || packetFlushable) {\n          stream.size = 0;\n          stream.data.length = 0;\n        } // only emit packets that are complete. this is to avoid assembling\n        // incomplete PES packets due to poor segmentation\n\n        if (packetFlushable) {\n          self.trigger('data', event);\n        }\n      };\n    ElementaryStream.prototype.init.call(this);\n    /**\n     * Identifies M2TS packet types and parses PES packets using metadata\n     * parsed from the PMT\n     **/\n\n    this.push = function (data) {\n      ({\n        pat: function () {// we have to wait for the PMT to arrive as well before we\n          // have any meaningful metadata\n        },\n        pes: function () {\n          var stream, streamType;\n          switch (data.streamType) {\n            case StreamTypes$2.H264_STREAM_TYPE:\n              stream = video;\n              streamType = 'video';\n              break;\n            case StreamTypes$2.ADTS_STREAM_TYPE:\n              stream = audio;\n              streamType = 'audio';\n              break;\n            case StreamTypes$2.METADATA_STREAM_TYPE:\n              stream = timedMetadata;\n              streamType = 'timed-metadata';\n              break;\n            default:\n              // ignore unknown stream types\n              return;\n          } // if a new packet is starting, we can flush the completed\n          // packet\n\n          if (data.payloadUnitStartIndicator) {\n            flushStream(stream, streamType, true);\n          } // buffer this fragment until we are sure we've received the\n          // complete payload\n\n          stream.data.push(data);\n          stream.size += data.data.byteLength;\n        },\n        pmt: function () {\n          var event = {\n            type: 'metadata',\n            tracks: []\n          };\n          programMapTable = data.programMapTable; // translate audio and video streams to tracks\n\n          if (programMapTable.video !== null) {\n            event.tracks.push({\n              timelineStartInfo: {\n                baseMediaDecodeTime: 0\n              },\n              id: +programMapTable.video,\n              codec: 'avc',\n              type: 'video'\n            });\n          }\n          if (programMapTable.audio !== null) {\n            event.tracks.push({\n              timelineStartInfo: {\n                baseMediaDecodeTime: 0\n              },\n              id: +programMapTable.audio,\n              codec: 'adts',\n              type: 'audio'\n            });\n          }\n          segmentHadPmt = true;\n          self.trigger('data', event);\n        }\n      })[data.type]();\n    };\n    this.reset = function () {\n      video.size = 0;\n      video.data.length = 0;\n      audio.size = 0;\n      audio.data.length = 0;\n      this.trigger('reset');\n    };\n    /**\n     * Flush any remaining input. Video PES packets may be of variable\n     * length. Normally, the start of a new video packet can trigger the\n     * finalization of the previous packet. That is not possible if no\n     * more video is forthcoming, however. In that case, some other\n     * mechanism (like the end of the file) has to be employed. When it is\n     * clear that no additional data is forthcoming, calling this method\n     * will flush the buffered packets.\n     */\n\n    this.flushStreams_ = function () {\n      // !!THIS ORDER IS IMPORTANT!!\n      // video first then audio\n      flushStream(video, 'video');\n      flushStream(audio, 'audio');\n      flushStream(timedMetadata, 'timed-metadata');\n    };\n    this.flush = function () {\n      // if on flush we haven't had a pmt emitted\n      // and we have a pmt to emit. emit the pmt\n      // so that we trigger a trackinfo downstream.\n      if (!segmentHadPmt && programMapTable) {\n        var pmt = {\n          type: 'metadata',\n          tracks: []\n        }; // translate audio and video streams to tracks\n\n        if (programMapTable.video !== null) {\n          pmt.tracks.push({\n            timelineStartInfo: {\n              baseMediaDecodeTime: 0\n            },\n            id: +programMapTable.video,\n            codec: 'avc',\n            type: 'video'\n          });\n        }\n        if (programMapTable.audio !== null) {\n          pmt.tracks.push({\n            timelineStartInfo: {\n              baseMediaDecodeTime: 0\n            },\n            id: +programMapTable.audio,\n            codec: 'adts',\n            type: 'audio'\n          });\n        }\n        self.trigger('data', pmt);\n      }\n      segmentHadPmt = false;\n      this.flushStreams_();\n      this.trigger('done');\n    };\n  };\n  ElementaryStream.prototype = new Stream$4();\n  var m2ts$1 = {\n    PAT_PID: 0x0000,\n    MP2T_PACKET_LENGTH: MP2T_PACKET_LENGTH$1,\n    TransportPacketStream: TransportPacketStream,\n    TransportParseStream: TransportParseStream,\n    ElementaryStream: ElementaryStream,\n    TimestampRolloverStream: TimestampRolloverStream,\n    CaptionStream: CaptionStream$1.CaptionStream,\n    Cea608Stream: CaptionStream$1.Cea608Stream,\n    Cea708Stream: CaptionStream$1.Cea708Stream,\n    MetadataStream: metadataStream\n  };\n  for (var type in StreamTypes$2) {\n    if (StreamTypes$2.hasOwnProperty(type)) {\n      m2ts$1[type] = StreamTypes$2[type];\n    }\n  }\n  var m2ts_1 = m2ts$1;\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   */\n\n  var Stream$3 = stream;\n  var ONE_SECOND_IN_TS$2 = clock$2.ONE_SECOND_IN_TS;\n  var AdtsStream$1;\n  var ADTS_SAMPLING_FREQUENCIES$1 = [96000, 88200, 64000, 48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025, 8000, 7350];\n  /*\n   * Accepts a ElementaryStream and emits data events with parsed\n   * AAC Audio Frames of the individual packets. Input audio in ADTS\n   * format is unpacked and re-emitted as AAC frames.\n   *\n   * @see http://wiki.multimedia.cx/index.php?title=ADTS\n   * @see http://wiki.multimedia.cx/?title=Understanding_AAC\n   */\n\n  AdtsStream$1 = function (handlePartialSegments) {\n    var buffer,\n      frameNum = 0;\n    AdtsStream$1.prototype.init.call(this);\n    this.skipWarn_ = function (start, end) {\n      this.trigger('log', {\n        level: 'warn',\n        message: `adts skiping bytes ${start} to ${end} in frame ${frameNum} outside syncword`\n      });\n    };\n    this.push = function (packet) {\n      var i = 0,\n        frameLength,\n        protectionSkipBytes,\n        oldBuffer,\n        sampleCount,\n        adtsFrameDuration;\n      if (!handlePartialSegments) {\n        frameNum = 0;\n      }\n      if (packet.type !== 'audio') {\n        // ignore non-audio data\n        return;\n      } // Prepend any data in the buffer to the input data so that we can parse\n      // aac frames the cross a PES packet boundary\n\n      if (buffer && buffer.length) {\n        oldBuffer = buffer;\n        buffer = new Uint8Array(oldBuffer.byteLength + packet.data.byteLength);\n        buffer.set(oldBuffer);\n        buffer.set(packet.data, oldBuffer.byteLength);\n      } else {\n        buffer = packet.data;\n      } // unpack any ADTS frames which have been fully received\n      // for details on the ADTS header, see http://wiki.multimedia.cx/index.php?title=ADTS\n\n      var skip; // We use i + 7 here because we want to be able to parse the entire header.\n      // If we don't have enough bytes to do that, then we definitely won't have a full frame.\n\n      while (i + 7 < buffer.length) {\n        // Look for the start of an ADTS header..\n        if (buffer[i] !== 0xFF || (buffer[i + 1] & 0xF6) !== 0xF0) {\n          if (typeof skip !== 'number') {\n            skip = i;\n          } // If a valid header was not found,  jump one forward and attempt to\n          // find a valid ADTS header starting at the next byte\n\n          i++;\n          continue;\n        }\n        if (typeof skip === 'number') {\n          this.skipWarn_(skip, i);\n          skip = null;\n        } // The protection skip bit tells us if we have 2 bytes of CRC data at the\n        // end of the ADTS header\n\n        protectionSkipBytes = (~buffer[i + 1] & 0x01) * 2; // Frame length is a 13 bit integer starting 16 bits from the\n        // end of the sync sequence\n        // NOTE: frame length includes the size of the header\n\n        frameLength = (buffer[i + 3] & 0x03) << 11 | buffer[i + 4] << 3 | (buffer[i + 5] & 0xe0) >> 5;\n        sampleCount = ((buffer[i + 6] & 0x03) + 1) * 1024;\n        adtsFrameDuration = sampleCount * ONE_SECOND_IN_TS$2 / ADTS_SAMPLING_FREQUENCIES$1[(buffer[i + 2] & 0x3c) >>> 2]; // If we don't have enough data to actually finish this ADTS frame,\n        // then we have to wait for more data\n\n        if (buffer.byteLength - i < frameLength) {\n          break;\n        } // Otherwise, deliver the complete AAC frame\n\n        this.trigger('data', {\n          pts: packet.pts + frameNum * adtsFrameDuration,\n          dts: packet.dts + frameNum * adtsFrameDuration,\n          sampleCount: sampleCount,\n          audioobjecttype: (buffer[i + 2] >>> 6 & 0x03) + 1,\n          channelcount: (buffer[i + 2] & 1) << 2 | (buffer[i + 3] & 0xc0) >>> 6,\n          samplerate: ADTS_SAMPLING_FREQUENCIES$1[(buffer[i + 2] & 0x3c) >>> 2],\n          samplingfrequencyindex: (buffer[i + 2] & 0x3c) >>> 2,\n          // assume ISO/IEC 14496-12 AudioSampleEntry default of 16\n          samplesize: 16,\n          // data is the frame without it's header\n          data: buffer.subarray(i + 7 + protectionSkipBytes, i + frameLength)\n        });\n        frameNum++;\n        i += frameLength;\n      }\n      if (typeof skip === 'number') {\n        this.skipWarn_(skip, i);\n        skip = null;\n      } // remove processed bytes from the buffer.\n\n      buffer = buffer.subarray(i);\n    };\n    this.flush = function () {\n      frameNum = 0;\n      this.trigger('done');\n    };\n    this.reset = function () {\n      buffer = void 0;\n      this.trigger('reset');\n    };\n    this.endTimeline = function () {\n      buffer = void 0;\n      this.trigger('endedtimeline');\n    };\n  };\n  AdtsStream$1.prototype = new Stream$3();\n  var adts = AdtsStream$1;\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   */\n\n  var ExpGolomb$1;\n  /**\n   * Parser for exponential Golomb codes, a variable-bitwidth number encoding\n   * scheme used by h264.\n   */\n\n  ExpGolomb$1 = function (workingData) {\n    var\n      // the number of bytes left to examine in workingData\n      workingBytesAvailable = workingData.byteLength,\n      // the current word being examined\n      workingWord = 0,\n      // :uint\n      // the number of bits left to examine in the current word\n      workingBitsAvailable = 0; // :uint;\n    // ():uint\n\n    this.length = function () {\n      return 8 * workingBytesAvailable;\n    }; // ():uint\n\n    this.bitsAvailable = function () {\n      return 8 * workingBytesAvailable + workingBitsAvailable;\n    }; // ():void\n\n    this.loadWord = function () {\n      var position = workingData.byteLength - workingBytesAvailable,\n        workingBytes = new Uint8Array(4),\n        availableBytes = Math.min(4, workingBytesAvailable);\n      if (availableBytes === 0) {\n        throw new Error('no bytes available');\n      }\n      workingBytes.set(workingData.subarray(position, position + availableBytes));\n      workingWord = new DataView(workingBytes.buffer).getUint32(0); // track the amount of workingData that has been processed\n\n      workingBitsAvailable = availableBytes * 8;\n      workingBytesAvailable -= availableBytes;\n    }; // (count:int):void\n\n    this.skipBits = function (count) {\n      var skipBytes; // :int\n\n      if (workingBitsAvailable > count) {\n        workingWord <<= count;\n        workingBitsAvailable -= count;\n      } else {\n        count -= workingBitsAvailable;\n        skipBytes = Math.floor(count / 8);\n        count -= skipBytes * 8;\n        workingBytesAvailable -= skipBytes;\n        this.loadWord();\n        workingWord <<= count;\n        workingBitsAvailable -= count;\n      }\n    }; // (size:int):uint\n\n    this.readBits = function (size) {\n      var bits = Math.min(workingBitsAvailable, size),\n        // :uint\n        valu = workingWord >>> 32 - bits; // :uint\n      // if size > 31, handle error\n\n      workingBitsAvailable -= bits;\n      if (workingBitsAvailable > 0) {\n        workingWord <<= bits;\n      } else if (workingBytesAvailable > 0) {\n        this.loadWord();\n      }\n      bits = size - bits;\n      if (bits > 0) {\n        return valu << bits | this.readBits(bits);\n      }\n      return valu;\n    }; // ():uint\n\n    this.skipLeadingZeros = function () {\n      var leadingZeroCount; // :uint\n\n      for (leadingZeroCount = 0; leadingZeroCount < workingBitsAvailable; ++leadingZeroCount) {\n        if ((workingWord & 0x80000000 >>> leadingZeroCount) !== 0) {\n          // the first bit of working word is 1\n          workingWord <<= leadingZeroCount;\n          workingBitsAvailable -= leadingZeroCount;\n          return leadingZeroCount;\n        }\n      } // we exhausted workingWord and still have not found a 1\n\n      this.loadWord();\n      return leadingZeroCount + this.skipLeadingZeros();\n    }; // ():void\n\n    this.skipUnsignedExpGolomb = function () {\n      this.skipBits(1 + this.skipLeadingZeros());\n    }; // ():void\n\n    this.skipExpGolomb = function () {\n      this.skipBits(1 + this.skipLeadingZeros());\n    }; // ():uint\n\n    this.readUnsignedExpGolomb = function () {\n      var clz = this.skipLeadingZeros(); // :uint\n\n      return this.readBits(clz + 1) - 1;\n    }; // ():int\n\n    this.readExpGolomb = function () {\n      var valu = this.readUnsignedExpGolomb(); // :int\n\n      if (0x01 & valu) {\n        // the number is odd if the low order bit is set\n        return 1 + valu >>> 1; // add 1 to make it even, and divide by 2\n      }\n\n      return -1 * (valu >>> 1); // divide by two then make it negative\n    }; // Some convenience functions\n    // :Boolean\n\n    this.readBoolean = function () {\n      return this.readBits(1) === 1;\n    }; // ():int\n\n    this.readUnsignedByte = function () {\n      return this.readBits(8);\n    };\n    this.loadWord();\n  };\n  var expGolomb = ExpGolomb$1;\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   */\n\n  var Stream$2 = stream;\n  var ExpGolomb = expGolomb;\n  var H264Stream$1, NalByteStream;\n  var PROFILES_WITH_OPTIONAL_SPS_DATA;\n  /**\n   * Accepts a NAL unit byte stream and unpacks the embedded NAL units.\n   */\n\n  NalByteStream = function () {\n    var syncPoint = 0,\n      i,\n      buffer;\n    NalByteStream.prototype.init.call(this);\n    /*\n     * Scans a byte stream and triggers a data event with the NAL units found.\n     * @param {Object} data Event received from H264Stream\n     * @param {Uint8Array} data.data The h264 byte stream to be scanned\n     *\n     * @see H264Stream.push\n     */\n\n    this.push = function (data) {\n      var swapBuffer;\n      if (!buffer) {\n        buffer = data.data;\n      } else {\n        swapBuffer = new Uint8Array(buffer.byteLength + data.data.byteLength);\n        swapBuffer.set(buffer);\n        swapBuffer.set(data.data, buffer.byteLength);\n        buffer = swapBuffer;\n      }\n      var len = buffer.byteLength; // Rec. ITU-T H.264, Annex B\n      // scan for NAL unit boundaries\n      // a match looks like this:\n      // 0 0 1 .. NAL .. 0 0 1\n      // ^ sync point        ^ i\n      // or this:\n      // 0 0 1 .. NAL .. 0 0 0\n      // ^ sync point        ^ i\n      // advance the sync point to a NAL start, if necessary\n\n      for (; syncPoint < len - 3; syncPoint++) {\n        if (buffer[syncPoint + 2] === 1) {\n          // the sync point is properly aligned\n          i = syncPoint + 5;\n          break;\n        }\n      }\n      while (i < len) {\n        // look at the current byte to determine if we've hit the end of\n        // a NAL unit boundary\n        switch (buffer[i]) {\n          case 0:\n            // skip past non-sync sequences\n            if (buffer[i - 1] !== 0) {\n              i += 2;\n              break;\n            } else if (buffer[i - 2] !== 0) {\n              i++;\n              break;\n            } // deliver the NAL unit if it isn't empty\n\n            if (syncPoint + 3 !== i - 2) {\n              this.trigger('data', buffer.subarray(syncPoint + 3, i - 2));\n            } // drop trailing zeroes\n\n            do {\n              i++;\n            } while (buffer[i] !== 1 && i < len);\n            syncPoint = i - 2;\n            i += 3;\n            break;\n          case 1:\n            // skip past non-sync sequences\n            if (buffer[i - 1] !== 0 || buffer[i - 2] !== 0) {\n              i += 3;\n              break;\n            } // deliver the NAL unit\n\n            this.trigger('data', buffer.subarray(syncPoint + 3, i - 2));\n            syncPoint = i - 2;\n            i += 3;\n            break;\n          default:\n            // the current byte isn't a one or zero, so it cannot be part\n            // of a sync sequence\n            i += 3;\n            break;\n        }\n      } // filter out the NAL units that were delivered\n\n      buffer = buffer.subarray(syncPoint);\n      i -= syncPoint;\n      syncPoint = 0;\n    };\n    this.reset = function () {\n      buffer = null;\n      syncPoint = 0;\n      this.trigger('reset');\n    };\n    this.flush = function () {\n      // deliver the last buffered NAL unit\n      if (buffer && buffer.byteLength > 3) {\n        this.trigger('data', buffer.subarray(syncPoint + 3));\n      } // reset the stream state\n\n      buffer = null;\n      syncPoint = 0;\n      this.trigger('done');\n    };\n    this.endTimeline = function () {\n      this.flush();\n      this.trigger('endedtimeline');\n    };\n  };\n  NalByteStream.prototype = new Stream$2(); // values of profile_idc that indicate additional fields are included in the SPS\n  // see Recommendation ITU-T H.264 (4/2013),\n  // 7.3.2.1.1 Sequence parameter set data syntax\n\n  PROFILES_WITH_OPTIONAL_SPS_DATA = {\n    100: true,\n    110: true,\n    122: true,\n    244: true,\n    44: true,\n    83: true,\n    86: true,\n    118: true,\n    128: true,\n    // TODO: the three profiles below don't\n    // appear to have sps data in the specificiation anymore?\n    138: true,\n    139: true,\n    134: true\n  };\n  /**\n   * Accepts input from a ElementaryStream and produces H.264 NAL unit data\n   * events.\n   */\n\n  H264Stream$1 = function () {\n    var nalByteStream = new NalByteStream(),\n      self,\n      trackId,\n      currentPts,\n      currentDts,\n      discardEmulationPreventionBytes,\n      readSequenceParameterSet,\n      skipScalingList;\n    H264Stream$1.prototype.init.call(this);\n    self = this;\n    /*\n     * Pushes a packet from a stream onto the NalByteStream\n     *\n     * @param {Object} packet - A packet received from a stream\n     * @param {Uint8Array} packet.data - The raw bytes of the packet\n     * @param {Number} packet.dts - Decode timestamp of the packet\n     * @param {Number} packet.pts - Presentation timestamp of the packet\n     * @param {Number} packet.trackId - The id of the h264 track this packet came from\n     * @param {('video'|'audio')} packet.type - The type of packet\n     *\n     */\n\n    this.push = function (packet) {\n      if (packet.type !== 'video') {\n        return;\n      }\n      trackId = packet.trackId;\n      currentPts = packet.pts;\n      currentDts = packet.dts;\n      nalByteStream.push(packet);\n    };\n    /*\n     * Identify NAL unit types and pass on the NALU, trackId, presentation and decode timestamps\n     * for the NALUs to the next stream component.\n     * Also, preprocess caption and sequence parameter NALUs.\n     *\n     * @param {Uint8Array} data - A NAL unit identified by `NalByteStream.push`\n     * @see NalByteStream.push\n     */\n\n    nalByteStream.on('data', function (data) {\n      var event = {\n        trackId: trackId,\n        pts: currentPts,\n        dts: currentDts,\n        data: data,\n        nalUnitTypeCode: data[0] & 0x1f\n      };\n      switch (event.nalUnitTypeCode) {\n        case 0x05:\n          event.nalUnitType = 'slice_layer_without_partitioning_rbsp_idr';\n          break;\n        case 0x06:\n          event.nalUnitType = 'sei_rbsp';\n          event.escapedRBSP = discardEmulationPreventionBytes(data.subarray(1));\n          break;\n        case 0x07:\n          event.nalUnitType = 'seq_parameter_set_rbsp';\n          event.escapedRBSP = discardEmulationPreventionBytes(data.subarray(1));\n          event.config = readSequenceParameterSet(event.escapedRBSP);\n          break;\n        case 0x08:\n          event.nalUnitType = 'pic_parameter_set_rbsp';\n          break;\n        case 0x09:\n          event.nalUnitType = 'access_unit_delimiter_rbsp';\n          break;\n      } // This triggers data on the H264Stream\n\n      self.trigger('data', event);\n    });\n    nalByteStream.on('done', function () {\n      self.trigger('done');\n    });\n    nalByteStream.on('partialdone', function () {\n      self.trigger('partialdone');\n    });\n    nalByteStream.on('reset', function () {\n      self.trigger('reset');\n    });\n    nalByteStream.on('endedtimeline', function () {\n      self.trigger('endedtimeline');\n    });\n    this.flush = function () {\n      nalByteStream.flush();\n    };\n    this.partialFlush = function () {\n      nalByteStream.partialFlush();\n    };\n    this.reset = function () {\n      nalByteStream.reset();\n    };\n    this.endTimeline = function () {\n      nalByteStream.endTimeline();\n    };\n    /**\n     * Advance the ExpGolomb decoder past a scaling list. The scaling\n     * list is optionally transmitted as part of a sequence parameter\n     * set and is not relevant to transmuxing.\n     * @param count {number} the number of entries in this scaling list\n     * @param expGolombDecoder {object} an ExpGolomb pointed to the\n     * start of a scaling list\n     * @see Recommendation ITU-T H.264, Section 7.3.2.1.1.1\n     */\n\n    skipScalingList = function (count, expGolombDecoder) {\n      var lastScale = 8,\n        nextScale = 8,\n        j,\n        deltaScale;\n      for (j = 0; j < count; j++) {\n        if (nextScale !== 0) {\n          deltaScale = expGolombDecoder.readExpGolomb();\n          nextScale = (lastScale + deltaScale + 256) % 256;\n        }\n        lastScale = nextScale === 0 ? lastScale : nextScale;\n      }\n    };\n    /**\n     * Expunge any \"Emulation Prevention\" bytes from a \"Raw Byte\n     * Sequence Payload\"\n     * @param data {Uint8Array} the bytes of a RBSP from a NAL\n     * unit\n     * @return {Uint8Array} the RBSP without any Emulation\n     * Prevention Bytes\n     */\n\n    discardEmulationPreventionBytes = function (data) {\n      var length = data.byteLength,\n        emulationPreventionBytesPositions = [],\n        i = 1,\n        newLength,\n        newData; // Find all `Emulation Prevention Bytes`\n\n      while (i < length - 2) {\n        if (data[i] === 0 && data[i + 1] === 0 && data[i + 2] === 0x03) {\n          emulationPreventionBytesPositions.push(i + 2);\n          i += 2;\n        } else {\n          i++;\n        }\n      } // If no Emulation Prevention Bytes were found just return the original\n      // array\n\n      if (emulationPreventionBytesPositions.length === 0) {\n        return data;\n      } // Create a new array to hold the NAL unit data\n\n      newLength = length - emulationPreventionBytesPositions.length;\n      newData = new Uint8Array(newLength);\n      var sourceIndex = 0;\n      for (i = 0; i < newLength; sourceIndex++, i++) {\n        if (sourceIndex === emulationPreventionBytesPositions[0]) {\n          // Skip this byte\n          sourceIndex++; // Remove this position index\n\n          emulationPreventionBytesPositions.shift();\n        }\n        newData[i] = data[sourceIndex];\n      }\n      return newData;\n    };\n    /**\n     * Read a sequence parameter set and return some interesting video\n     * properties. A sequence parameter set is the H264 metadata that\n     * describes the properties of upcoming video frames.\n     * @param data {Uint8Array} the bytes of a sequence parameter set\n     * @return {object} an object with configuration parsed from the\n     * sequence parameter set, including the dimensions of the\n     * associated video frames.\n     */\n\n    readSequenceParameterSet = function (data) {\n      var frameCropLeftOffset = 0,\n        frameCropRightOffset = 0,\n        frameCropTopOffset = 0,\n        frameCropBottomOffset = 0,\n        expGolombDecoder,\n        profileIdc,\n        levelIdc,\n        profileCompatibility,\n        chromaFormatIdc,\n        picOrderCntType,\n        numRefFramesInPicOrderCntCycle,\n        picWidthInMbsMinus1,\n        picHeightInMapUnitsMinus1,\n        frameMbsOnlyFlag,\n        scalingListCount,\n        sarRatio = [1, 1],\n        aspectRatioIdc,\n        i;\n      expGolombDecoder = new ExpGolomb(data);\n      profileIdc = expGolombDecoder.readUnsignedByte(); // profile_idc\n\n      profileCompatibility = expGolombDecoder.readUnsignedByte(); // constraint_set[0-5]_flag\n\n      levelIdc = expGolombDecoder.readUnsignedByte(); // level_idc u(8)\n\n      expGolombDecoder.skipUnsignedExpGolomb(); // seq_parameter_set_id\n      // some profiles have more optional data we don't need\n\n      if (PROFILES_WITH_OPTIONAL_SPS_DATA[profileIdc]) {\n        chromaFormatIdc = expGolombDecoder.readUnsignedExpGolomb();\n        if (chromaFormatIdc === 3) {\n          expGolombDecoder.skipBits(1); // separate_colour_plane_flag\n        }\n\n        expGolombDecoder.skipUnsignedExpGolomb(); // bit_depth_luma_minus8\n\n        expGolombDecoder.skipUnsignedExpGolomb(); // bit_depth_chroma_minus8\n\n        expGolombDecoder.skipBits(1); // qpprime_y_zero_transform_bypass_flag\n\n        if (expGolombDecoder.readBoolean()) {\n          // seq_scaling_matrix_present_flag\n          scalingListCount = chromaFormatIdc !== 3 ? 8 : 12;\n          for (i = 0; i < scalingListCount; i++) {\n            if (expGolombDecoder.readBoolean()) {\n              // seq_scaling_list_present_flag[ i ]\n              if (i < 6) {\n                skipScalingList(16, expGolombDecoder);\n              } else {\n                skipScalingList(64, expGolombDecoder);\n              }\n            }\n          }\n        }\n      }\n      expGolombDecoder.skipUnsignedExpGolomb(); // log2_max_frame_num_minus4\n\n      picOrderCntType = expGolombDecoder.readUnsignedExpGolomb();\n      if (picOrderCntType === 0) {\n        expGolombDecoder.readUnsignedExpGolomb(); // log2_max_pic_order_cnt_lsb_minus4\n      } else if (picOrderCntType === 1) {\n        expGolombDecoder.skipBits(1); // delta_pic_order_always_zero_flag\n\n        expGolombDecoder.skipExpGolomb(); // offset_for_non_ref_pic\n\n        expGolombDecoder.skipExpGolomb(); // offset_for_top_to_bottom_field\n\n        numRefFramesInPicOrderCntCycle = expGolombDecoder.readUnsignedExpGolomb();\n        for (i = 0; i < numRefFramesInPicOrderCntCycle; i++) {\n          expGolombDecoder.skipExpGolomb(); // offset_for_ref_frame[ i ]\n        }\n      }\n\n      expGolombDecoder.skipUnsignedExpGolomb(); // max_num_ref_frames\n\n      expGolombDecoder.skipBits(1); // gaps_in_frame_num_value_allowed_flag\n\n      picWidthInMbsMinus1 = expGolombDecoder.readUnsignedExpGolomb();\n      picHeightInMapUnitsMinus1 = expGolombDecoder.readUnsignedExpGolomb();\n      frameMbsOnlyFlag = expGolombDecoder.readBits(1);\n      if (frameMbsOnlyFlag === 0) {\n        expGolombDecoder.skipBits(1); // mb_adaptive_frame_field_flag\n      }\n\n      expGolombDecoder.skipBits(1); // direct_8x8_inference_flag\n\n      if (expGolombDecoder.readBoolean()) {\n        // frame_cropping_flag\n        frameCropLeftOffset = expGolombDecoder.readUnsignedExpGolomb();\n        frameCropRightOffset = expGolombDecoder.readUnsignedExpGolomb();\n        frameCropTopOffset = expGolombDecoder.readUnsignedExpGolomb();\n        frameCropBottomOffset = expGolombDecoder.readUnsignedExpGolomb();\n      }\n      if (expGolombDecoder.readBoolean()) {\n        // vui_parameters_present_flag\n        if (expGolombDecoder.readBoolean()) {\n          // aspect_ratio_info_present_flag\n          aspectRatioIdc = expGolombDecoder.readUnsignedByte();\n          switch (aspectRatioIdc) {\n            case 1:\n              sarRatio = [1, 1];\n              break;\n            case 2:\n              sarRatio = [12, 11];\n              break;\n            case 3:\n              sarRatio = [10, 11];\n              break;\n            case 4:\n              sarRatio = [16, 11];\n              break;\n            case 5:\n              sarRatio = [40, 33];\n              break;\n            case 6:\n              sarRatio = [24, 11];\n              break;\n            case 7:\n              sarRatio = [20, 11];\n              break;\n            case 8:\n              sarRatio = [32, 11];\n              break;\n            case 9:\n              sarRatio = [80, 33];\n              break;\n            case 10:\n              sarRatio = [18, 11];\n              break;\n            case 11:\n              sarRatio = [15, 11];\n              break;\n            case 12:\n              sarRatio = [64, 33];\n              break;\n            case 13:\n              sarRatio = [160, 99];\n              break;\n            case 14:\n              sarRatio = [4, 3];\n              break;\n            case 15:\n              sarRatio = [3, 2];\n              break;\n            case 16:\n              sarRatio = [2, 1];\n              break;\n            case 255:\n              {\n                sarRatio = [expGolombDecoder.readUnsignedByte() << 8 | expGolombDecoder.readUnsignedByte(), expGolombDecoder.readUnsignedByte() << 8 | expGolombDecoder.readUnsignedByte()];\n                break;\n              }\n          }\n          if (sarRatio) {\n            sarRatio[0] / sarRatio[1];\n          }\n        }\n      }\n      return {\n        profileIdc: profileIdc,\n        levelIdc: levelIdc,\n        profileCompatibility: profileCompatibility,\n        width: (picWidthInMbsMinus1 + 1) * 16 - frameCropLeftOffset * 2 - frameCropRightOffset * 2,\n        height: (2 - frameMbsOnlyFlag) * (picHeightInMapUnitsMinus1 + 1) * 16 - frameCropTopOffset * 2 - frameCropBottomOffset * 2,\n        // sar is sample aspect ratio\n        sarRatio: sarRatio\n      };\n    };\n  };\n  H264Stream$1.prototype = new Stream$2();\n  var h264 = {\n    H264Stream: H264Stream$1,\n    NalByteStream: NalByteStream\n  };\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   *\n   * Utilities to detect basic properties and metadata about Aac data.\n   */\n\n  var ADTS_SAMPLING_FREQUENCIES = [96000, 88200, 64000, 48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025, 8000, 7350];\n  var parseId3TagSize = function (header, byteIndex) {\n    var returnSize = header[byteIndex + 6] << 21 | header[byteIndex + 7] << 14 | header[byteIndex + 8] << 7 | header[byteIndex + 9],\n      flags = header[byteIndex + 5],\n      footerPresent = (flags & 16) >> 4; // if we get a negative returnSize clamp it to 0\n\n    returnSize = returnSize >= 0 ? returnSize : 0;\n    if (footerPresent) {\n      return returnSize + 20;\n    }\n    return returnSize + 10;\n  };\n  var getId3Offset = function (data, offset) {\n    if (data.length - offset < 10 || data[offset] !== 'I'.charCodeAt(0) || data[offset + 1] !== 'D'.charCodeAt(0) || data[offset + 2] !== '3'.charCodeAt(0)) {\n      return offset;\n    }\n    offset += parseId3TagSize(data, offset);\n    return getId3Offset(data, offset);\n  }; // TODO: use vhs-utils\n\n  var isLikelyAacData$1 = function (data) {\n    var offset = getId3Offset(data, 0);\n    return data.length >= offset + 2 && (data[offset] & 0xFF) === 0xFF && (data[offset + 1] & 0xF0) === 0xF0 &&\n    // verify that the 2 layer bits are 0, aka this\n    // is not mp3 data but aac data.\n    (data[offset + 1] & 0x16) === 0x10;\n  };\n  var parseSyncSafeInteger = function (data) {\n    return data[0] << 21 | data[1] << 14 | data[2] << 7 | data[3];\n  }; // return a percent-encoded representation of the specified byte range\n  // @see http://en.wikipedia.org/wiki/Percent-encoding\n\n  var percentEncode = function (bytes, start, end) {\n    var i,\n      result = '';\n    for (i = start; i < end; i++) {\n      result += '%' + ('00' + bytes[i].toString(16)).slice(-2);\n    }\n    return result;\n  }; // return the string representation of the specified byte range,\n  // interpreted as ISO-8859-1.\n\n  var parseIso88591 = function (bytes, start, end) {\n    return unescape(percentEncode(bytes, start, end)); // jshint ignore:line\n  };\n\n  var parseAdtsSize = function (header, byteIndex) {\n    var lowThree = (header[byteIndex + 5] & 0xE0) >> 5,\n      middle = header[byteIndex + 4] << 3,\n      highTwo = header[byteIndex + 3] & 0x3 << 11;\n    return highTwo | middle | lowThree;\n  };\n  var parseType$4 = function (header, byteIndex) {\n    if (header[byteIndex] === 'I'.charCodeAt(0) && header[byteIndex + 1] === 'D'.charCodeAt(0) && header[byteIndex + 2] === '3'.charCodeAt(0)) {\n      return 'timed-metadata';\n    } else if (header[byteIndex] & 0xff === 0xff && (header[byteIndex + 1] & 0xf0) === 0xf0) {\n      return 'audio';\n    }\n    return null;\n  };\n  var parseSampleRate = function (packet) {\n    var i = 0;\n    while (i + 5 < packet.length) {\n      if (packet[i] !== 0xFF || (packet[i + 1] & 0xF6) !== 0xF0) {\n        // If a valid header was not found,  jump one forward and attempt to\n        // find a valid ADTS header starting at the next byte\n        i++;\n        continue;\n      }\n      return ADTS_SAMPLING_FREQUENCIES[(packet[i + 2] & 0x3c) >>> 2];\n    }\n    return null;\n  };\n  var parseAacTimestamp = function (packet) {\n    var frameStart, frameSize, frame, frameHeader; // find the start of the first frame and the end of the tag\n\n    frameStart = 10;\n    if (packet[5] & 0x40) {\n      // advance the frame start past the extended header\n      frameStart += 4; // header size field\n\n      frameStart += parseSyncSafeInteger(packet.subarray(10, 14));\n    } // parse one or more ID3 frames\n    // http://id3.org/id3v2.3.0#ID3v2_frame_overview\n\n    do {\n      // determine the number of bytes in this frame\n      frameSize = parseSyncSafeInteger(packet.subarray(frameStart + 4, frameStart + 8));\n      if (frameSize < 1) {\n        return null;\n      }\n      frameHeader = String.fromCharCode(packet[frameStart], packet[frameStart + 1], packet[frameStart + 2], packet[frameStart + 3]);\n      if (frameHeader === 'PRIV') {\n        frame = packet.subarray(frameStart + 10, frameStart + frameSize + 10);\n        for (var i = 0; i < frame.byteLength; i++) {\n          if (frame[i] === 0) {\n            var owner = parseIso88591(frame, 0, i);\n            if (owner === 'com.apple.streaming.transportStreamTimestamp') {\n              var d = frame.subarray(i + 1);\n              var size = (d[3] & 0x01) << 30 | d[4] << 22 | d[5] << 14 | d[6] << 6 | d[7] >>> 2;\n              size *= 4;\n              size += d[7] & 0x03;\n              return size;\n            }\n            break;\n          }\n        }\n      }\n      frameStart += 10; // advance past the frame header\n\n      frameStart += frameSize; // advance past the frame body\n    } while (frameStart < packet.byteLength);\n    return null;\n  };\n  var utils = {\n    isLikelyAacData: isLikelyAacData$1,\n    parseId3TagSize: parseId3TagSize,\n    parseAdtsSize: parseAdtsSize,\n    parseType: parseType$4,\n    parseSampleRate: parseSampleRate,\n    parseAacTimestamp: parseAacTimestamp\n  };\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   *\n   * A stream-based aac to mp4 converter. This utility can be used to\n   * deliver mp4s to a SourceBuffer on platforms that support native\n   * Media Source Extensions.\n   */\n\n  var Stream$1 = stream;\n  var aacUtils = utils; // Constants\n\n  var AacStream$1;\n  /**\n   * Splits an incoming stream of binary data into ADTS and ID3 Frames.\n   */\n\n  AacStream$1 = function () {\n    var everything = new Uint8Array(),\n      timeStamp = 0;\n    AacStream$1.prototype.init.call(this);\n    this.setTimestamp = function (timestamp) {\n      timeStamp = timestamp;\n    };\n    this.push = function (bytes) {\n      var frameSize = 0,\n        byteIndex = 0,\n        bytesLeft,\n        chunk,\n        packet,\n        tempLength; // If there are bytes remaining from the last segment, prepend them to the\n      // bytes that were pushed in\n\n      if (everything.length) {\n        tempLength = everything.length;\n        everything = new Uint8Array(bytes.byteLength + tempLength);\n        everything.set(everything.subarray(0, tempLength));\n        everything.set(bytes, tempLength);\n      } else {\n        everything = bytes;\n      }\n      while (everything.length - byteIndex >= 3) {\n        if (everything[byteIndex] === 'I'.charCodeAt(0) && everything[byteIndex + 1] === 'D'.charCodeAt(0) && everything[byteIndex + 2] === '3'.charCodeAt(0)) {\n          // Exit early because we don't have enough to parse\n          // the ID3 tag header\n          if (everything.length - byteIndex < 10) {\n            break;\n          } // check framesize\n\n          frameSize = aacUtils.parseId3TagSize(everything, byteIndex); // Exit early if we don't have enough in the buffer\n          // to emit a full packet\n          // Add to byteIndex to support multiple ID3 tags in sequence\n\n          if (byteIndex + frameSize > everything.length) {\n            break;\n          }\n          chunk = {\n            type: 'timed-metadata',\n            data: everything.subarray(byteIndex, byteIndex + frameSize)\n          };\n          this.trigger('data', chunk);\n          byteIndex += frameSize;\n          continue;\n        } else if ((everything[byteIndex] & 0xff) === 0xff && (everything[byteIndex + 1] & 0xf0) === 0xf0) {\n          // Exit early because we don't have enough to parse\n          // the ADTS frame header\n          if (everything.length - byteIndex < 7) {\n            break;\n          }\n          frameSize = aacUtils.parseAdtsSize(everything, byteIndex); // Exit early if we don't have enough in the buffer\n          // to emit a full packet\n\n          if (byteIndex + frameSize > everything.length) {\n            break;\n          }\n          packet = {\n            type: 'audio',\n            data: everything.subarray(byteIndex, byteIndex + frameSize),\n            pts: timeStamp,\n            dts: timeStamp\n          };\n          this.trigger('data', packet);\n          byteIndex += frameSize;\n          continue;\n        }\n        byteIndex++;\n      }\n      bytesLeft = everything.length - byteIndex;\n      if (bytesLeft > 0) {\n        everything = everything.subarray(byteIndex);\n      } else {\n        everything = new Uint8Array();\n      }\n    };\n    this.reset = function () {\n      everything = new Uint8Array();\n      this.trigger('reset');\n    };\n    this.endTimeline = function () {\n      everything = new Uint8Array();\n      this.trigger('endedtimeline');\n    };\n  };\n  AacStream$1.prototype = new Stream$1();\n  var aac = AacStream$1;\n  var AUDIO_PROPERTIES$1 = ['audioobjecttype', 'channelcount', 'samplerate', 'samplingfrequencyindex', 'samplesize'];\n  var audioProperties = AUDIO_PROPERTIES$1;\n  var VIDEO_PROPERTIES$1 = ['width', 'height', 'profileIdc', 'levelIdc', 'profileCompatibility', 'sarRatio'];\n  var videoProperties = VIDEO_PROPERTIES$1;\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   *\n   * A stream-based mp2t to mp4 converter. This utility can be used to\n   * deliver mp4s to a SourceBuffer on platforms that support native\n   * Media Source Extensions.\n   */\n\n  var Stream = stream;\n  var mp4 = mp4Generator;\n  var frameUtils = frameUtils$1;\n  var audioFrameUtils = audioFrameUtils$1;\n  var trackDecodeInfo = trackDecodeInfo$1;\n  var m2ts = m2ts_1;\n  var clock = clock$2;\n  var AdtsStream = adts;\n  var H264Stream = h264.H264Stream;\n  var AacStream = aac;\n  var isLikelyAacData = utils.isLikelyAacData;\n  var ONE_SECOND_IN_TS$1 = clock$2.ONE_SECOND_IN_TS;\n  var AUDIO_PROPERTIES = audioProperties;\n  var VIDEO_PROPERTIES = videoProperties; // object types\n\n  var VideoSegmentStream, AudioSegmentStream, Transmuxer, CoalesceStream;\n  var retriggerForStream = function (key, event) {\n    event.stream = key;\n    this.trigger('log', event);\n  };\n  var addPipelineLogRetriggers = function (transmuxer, pipeline) {\n    var keys = Object.keys(pipeline);\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i]; // skip non-stream keys and headOfPipeline\n      // which is just a duplicate\n\n      if (key === 'headOfPipeline' || !pipeline[key].on) {\n        continue;\n      }\n      pipeline[key].on('log', retriggerForStream.bind(transmuxer, key));\n    }\n  };\n  /**\n   * Compare two arrays (even typed) for same-ness\n   */\n\n  var arrayEquals = function (a, b) {\n    var i;\n    if (a.length !== b.length) {\n      return false;\n    } // compare the value of each element in the array\n\n    for (i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) {\n        return false;\n      }\n    }\n    return true;\n  };\n  var generateSegmentTimingInfo = function (baseMediaDecodeTime, startDts, startPts, endDts, endPts, prependedContentDuration) {\n    var ptsOffsetFromDts = startPts - startDts,\n      decodeDuration = endDts - startDts,\n      presentationDuration = endPts - startPts; // The PTS and DTS values are based on the actual stream times from the segment,\n    // however, the player time values will reflect a start from the baseMediaDecodeTime.\n    // In order to provide relevant values for the player times, base timing info on the\n    // baseMediaDecodeTime and the DTS and PTS durations of the segment.\n\n    return {\n      start: {\n        dts: baseMediaDecodeTime,\n        pts: baseMediaDecodeTime + ptsOffsetFromDts\n      },\n      end: {\n        dts: baseMediaDecodeTime + decodeDuration,\n        pts: baseMediaDecodeTime + presentationDuration\n      },\n      prependedContentDuration: prependedContentDuration,\n      baseMediaDecodeTime: baseMediaDecodeTime\n    };\n  };\n  /**\n   * Constructs a single-track, ISO BMFF media segment from AAC data\n   * events. The output of this stream can be fed to a SourceBuffer\n   * configured with a suitable initialization segment.\n   * @param track {object} track metadata configuration\n   * @param options {object} transmuxer options object\n   * @param options.keepOriginalTimestamps {boolean} If true, keep the timestamps\n   *        in the source; false to adjust the first segment to start at 0.\n   */\n\n  AudioSegmentStream = function (track, options) {\n    var adtsFrames = [],\n      sequenceNumber,\n      earliestAllowedDts = 0,\n      audioAppendStartTs = 0,\n      videoBaseMediaDecodeTime = Infinity;\n    options = options || {};\n    sequenceNumber = options.firstSequenceNumber || 0;\n    AudioSegmentStream.prototype.init.call(this);\n    this.push = function (data) {\n      trackDecodeInfo.collectDtsInfo(track, data);\n      if (track) {\n        AUDIO_PROPERTIES.forEach(function (prop) {\n          track[prop] = data[prop];\n        });\n      } // buffer audio data until end() is called\n\n      adtsFrames.push(data);\n    };\n    this.setEarliestDts = function (earliestDts) {\n      earliestAllowedDts = earliestDts;\n    };\n    this.setVideoBaseMediaDecodeTime = function (baseMediaDecodeTime) {\n      videoBaseMediaDecodeTime = baseMediaDecodeTime;\n    };\n    this.setAudioAppendStart = function (timestamp) {\n      audioAppendStartTs = timestamp;\n    };\n    this.flush = function () {\n      var frames, moof, mdat, boxes, frameDuration, segmentDuration, videoClockCyclesOfSilencePrefixed; // return early if no audio data has been observed\n\n      if (adtsFrames.length === 0) {\n        this.trigger('done', 'AudioSegmentStream');\n        return;\n      }\n      frames = audioFrameUtils.trimAdtsFramesByEarliestDts(adtsFrames, track, earliestAllowedDts);\n      track.baseMediaDecodeTime = trackDecodeInfo.calculateTrackBaseMediaDecodeTime(track, options.keepOriginalTimestamps); // amount of audio filled but the value is in video clock rather than audio clock\n\n      videoClockCyclesOfSilencePrefixed = audioFrameUtils.prefixWithSilence(track, frames, audioAppendStartTs, videoBaseMediaDecodeTime); // we have to build the index from byte locations to\n      // samples (that is, adts frames) in the audio data\n\n      track.samples = audioFrameUtils.generateSampleTable(frames); // concatenate the audio data to constuct the mdat\n\n      mdat = mp4.mdat(audioFrameUtils.concatenateFrameData(frames));\n      adtsFrames = [];\n      moof = mp4.moof(sequenceNumber, [track]);\n      boxes = new Uint8Array(moof.byteLength + mdat.byteLength); // bump the sequence number for next time\n\n      sequenceNumber++;\n      boxes.set(moof);\n      boxes.set(mdat, moof.byteLength);\n      trackDecodeInfo.clearDtsInfo(track);\n      frameDuration = Math.ceil(ONE_SECOND_IN_TS$1 * 1024 / track.samplerate); // TODO this check was added to maintain backwards compatibility (particularly with\n      // tests) on adding the timingInfo event. However, it seems unlikely that there's a\n      // valid use-case where an init segment/data should be triggered without associated\n      // frames. Leaving for now, but should be looked into.\n\n      if (frames.length) {\n        segmentDuration = frames.length * frameDuration;\n        this.trigger('segmentTimingInfo', generateSegmentTimingInfo(\n        // The audio track's baseMediaDecodeTime is in audio clock cycles, but the\n        // frame info is in video clock cycles. Convert to match expectation of\n        // listeners (that all timestamps will be based on video clock cycles).\n        clock.audioTsToVideoTs(track.baseMediaDecodeTime, track.samplerate),\n        // frame times are already in video clock, as is segment duration\n        frames[0].dts, frames[0].pts, frames[0].dts + segmentDuration, frames[0].pts + segmentDuration, videoClockCyclesOfSilencePrefixed || 0));\n        this.trigger('timingInfo', {\n          start: frames[0].pts,\n          end: frames[0].pts + segmentDuration\n        });\n      }\n      this.trigger('data', {\n        track: track,\n        boxes: boxes\n      });\n      this.trigger('done', 'AudioSegmentStream');\n    };\n    this.reset = function () {\n      trackDecodeInfo.clearDtsInfo(track);\n      adtsFrames = [];\n      this.trigger('reset');\n    };\n  };\n  AudioSegmentStream.prototype = new Stream();\n  /**\n   * Constructs a single-track, ISO BMFF media segment from H264 data\n   * events. The output of this stream can be fed to a SourceBuffer\n   * configured with a suitable initialization segment.\n   * @param track {object} track metadata configuration\n   * @param options {object} transmuxer options object\n   * @param options.alignGopsAtEnd {boolean} If true, start from the end of the\n   *        gopsToAlignWith list when attempting to align gop pts\n   * @param options.keepOriginalTimestamps {boolean} If true, keep the timestamps\n   *        in the source; false to adjust the first segment to start at 0.\n   */\n\n  VideoSegmentStream = function (track, options) {\n    var sequenceNumber,\n      nalUnits = [],\n      gopsToAlignWith = [],\n      config,\n      pps;\n    options = options || {};\n    sequenceNumber = options.firstSequenceNumber || 0;\n    VideoSegmentStream.prototype.init.call(this);\n    delete track.minPTS;\n    this.gopCache_ = [];\n    /**\n      * Constructs a ISO BMFF segment given H264 nalUnits\n      * @param {Object} nalUnit A data event representing a nalUnit\n      * @param {String} nalUnit.nalUnitType\n      * @param {Object} nalUnit.config Properties for a mp4 track\n      * @param {Uint8Array} nalUnit.data The nalUnit bytes\n      * @see lib/codecs/h264.js\n     **/\n\n    this.push = function (nalUnit) {\n      trackDecodeInfo.collectDtsInfo(track, nalUnit); // record the track config\n\n      if (nalUnit.nalUnitType === 'seq_parameter_set_rbsp' && !config) {\n        config = nalUnit.config;\n        track.sps = [nalUnit.data];\n        VIDEO_PROPERTIES.forEach(function (prop) {\n          track[prop] = config[prop];\n        }, this);\n      }\n      if (nalUnit.nalUnitType === 'pic_parameter_set_rbsp' && !pps) {\n        pps = nalUnit.data;\n        track.pps = [nalUnit.data];\n      } // buffer video until flush() is called\n\n      nalUnits.push(nalUnit);\n    };\n    /**\n      * Pass constructed ISO BMFF track and boxes on to the\n      * next stream in the pipeline\n     **/\n\n    this.flush = function () {\n      var frames,\n        gopForFusion,\n        gops,\n        moof,\n        mdat,\n        boxes,\n        prependedContentDuration = 0,\n        firstGop,\n        lastGop; // Throw away nalUnits at the start of the byte stream until\n      // we find the first AUD\n\n      while (nalUnits.length) {\n        if (nalUnits[0].nalUnitType === 'access_unit_delimiter_rbsp') {\n          break;\n        }\n        nalUnits.shift();\n      } // Return early if no video data has been observed\n\n      if (nalUnits.length === 0) {\n        this.resetStream_();\n        this.trigger('done', 'VideoSegmentStream');\n        return;\n      } // Organize the raw nal-units into arrays that represent\n      // higher-level constructs such as frames and gops\n      // (group-of-pictures)\n\n      frames = frameUtils.groupNalsIntoFrames(nalUnits);\n      gops = frameUtils.groupFramesIntoGops(frames); // If the first frame of this fragment is not a keyframe we have\n      // a problem since MSE (on Chrome) requires a leading keyframe.\n      //\n      // We have two approaches to repairing this situation:\n      // 1) GOP-FUSION:\n      //    This is where we keep track of the GOPS (group-of-pictures)\n      //    from previous fragments and attempt to find one that we can\n      //    prepend to the current fragment in order to create a valid\n      //    fragment.\n      // 2) KEYFRAME-PULLING:\n      //    Here we search for the first keyframe in the fragment and\n      //    throw away all the frames between the start of the fragment\n      //    and that keyframe. We then extend the duration and pull the\n      //    PTS of the keyframe forward so that it covers the time range\n      //    of the frames that were disposed of.\n      //\n      // #1 is far prefereable over #2 which can cause \"stuttering\" but\n      // requires more things to be just right.\n\n      if (!gops[0][0].keyFrame) {\n        // Search for a gop for fusion from our gopCache\n        gopForFusion = this.getGopForFusion_(nalUnits[0], track);\n        if (gopForFusion) {\n          // in order to provide more accurate timing information about the segment, save\n          // the number of seconds prepended to the original segment due to GOP fusion\n          prependedContentDuration = gopForFusion.duration;\n          gops.unshift(gopForFusion); // Adjust Gops' metadata to account for the inclusion of the\n          // new gop at the beginning\n\n          gops.byteLength += gopForFusion.byteLength;\n          gops.nalCount += gopForFusion.nalCount;\n          gops.pts = gopForFusion.pts;\n          gops.dts = gopForFusion.dts;\n          gops.duration += gopForFusion.duration;\n        } else {\n          // If we didn't find a candidate gop fall back to keyframe-pulling\n          gops = frameUtils.extendFirstKeyFrame(gops);\n        }\n      } // Trim gops to align with gopsToAlignWith\n\n      if (gopsToAlignWith.length) {\n        var alignedGops;\n        if (options.alignGopsAtEnd) {\n          alignedGops = this.alignGopsAtEnd_(gops);\n        } else {\n          alignedGops = this.alignGopsAtStart_(gops);\n        }\n        if (!alignedGops) {\n          // save all the nals in the last GOP into the gop cache\n          this.gopCache_.unshift({\n            gop: gops.pop(),\n            pps: track.pps,\n            sps: track.sps\n          }); // Keep a maximum of 6 GOPs in the cache\n\n          this.gopCache_.length = Math.min(6, this.gopCache_.length); // Clear nalUnits\n\n          nalUnits = []; // return early no gops can be aligned with desired gopsToAlignWith\n\n          this.resetStream_();\n          this.trigger('done', 'VideoSegmentStream');\n          return;\n        } // Some gops were trimmed. clear dts info so minSegmentDts and pts are correct\n        // when recalculated before sending off to CoalesceStream\n\n        trackDecodeInfo.clearDtsInfo(track);\n        gops = alignedGops;\n      }\n      trackDecodeInfo.collectDtsInfo(track, gops); // First, we have to build the index from byte locations to\n      // samples (that is, frames) in the video data\n\n      track.samples = frameUtils.generateSampleTable(gops); // Concatenate the video data and construct the mdat\n\n      mdat = mp4.mdat(frameUtils.concatenateNalData(gops));\n      track.baseMediaDecodeTime = trackDecodeInfo.calculateTrackBaseMediaDecodeTime(track, options.keepOriginalTimestamps);\n      this.trigger('processedGopsInfo', gops.map(function (gop) {\n        return {\n          pts: gop.pts,\n          dts: gop.dts,\n          byteLength: gop.byteLength\n        };\n      }));\n      firstGop = gops[0];\n      lastGop = gops[gops.length - 1];\n      this.trigger('segmentTimingInfo', generateSegmentTimingInfo(track.baseMediaDecodeTime, firstGop.dts, firstGop.pts, lastGop.dts + lastGop.duration, lastGop.pts + lastGop.duration, prependedContentDuration));\n      this.trigger('timingInfo', {\n        start: gops[0].pts,\n        end: gops[gops.length - 1].pts + gops[gops.length - 1].duration\n      }); // save all the nals in the last GOP into the gop cache\n\n      this.gopCache_.unshift({\n        gop: gops.pop(),\n        pps: track.pps,\n        sps: track.sps\n      }); // Keep a maximum of 6 GOPs in the cache\n\n      this.gopCache_.length = Math.min(6, this.gopCache_.length); // Clear nalUnits\n\n      nalUnits = [];\n      this.trigger('baseMediaDecodeTime', track.baseMediaDecodeTime);\n      this.trigger('timelineStartInfo', track.timelineStartInfo);\n      moof = mp4.moof(sequenceNumber, [track]); // it would be great to allocate this array up front instead of\n      // throwing away hundreds of media segment fragments\n\n      boxes = new Uint8Array(moof.byteLength + mdat.byteLength); // Bump the sequence number for next time\n\n      sequenceNumber++;\n      boxes.set(moof);\n      boxes.set(mdat, moof.byteLength);\n      this.trigger('data', {\n        track: track,\n        boxes: boxes\n      });\n      this.resetStream_(); // Continue with the flush process now\n\n      this.trigger('done', 'VideoSegmentStream');\n    };\n    this.reset = function () {\n      this.resetStream_();\n      nalUnits = [];\n      this.gopCache_.length = 0;\n      gopsToAlignWith.length = 0;\n      this.trigger('reset');\n    };\n    this.resetStream_ = function () {\n      trackDecodeInfo.clearDtsInfo(track); // reset config and pps because they may differ across segments\n      // for instance, when we are rendition switching\n\n      config = undefined;\n      pps = undefined;\n    }; // Search for a candidate Gop for gop-fusion from the gop cache and\n    // return it or return null if no good candidate was found\n\n    this.getGopForFusion_ = function (nalUnit) {\n      var halfSecond = 45000,\n        // Half-a-second in a 90khz clock\n        allowableOverlap = 10000,\n        // About 3 frames @ 30fps\n        nearestDistance = Infinity,\n        dtsDistance,\n        nearestGopObj,\n        currentGop,\n        currentGopObj,\n        i; // Search for the GOP nearest to the beginning of this nal unit\n\n      for (i = 0; i < this.gopCache_.length; i++) {\n        currentGopObj = this.gopCache_[i];\n        currentGop = currentGopObj.gop; // Reject Gops with different SPS or PPS\n\n        if (!(track.pps && arrayEquals(track.pps[0], currentGopObj.pps[0])) || !(track.sps && arrayEquals(track.sps[0], currentGopObj.sps[0]))) {\n          continue;\n        } // Reject Gops that would require a negative baseMediaDecodeTime\n\n        if (currentGop.dts < track.timelineStartInfo.dts) {\n          continue;\n        } // The distance between the end of the gop and the start of the nalUnit\n\n        dtsDistance = nalUnit.dts - currentGop.dts - currentGop.duration; // Only consider GOPS that start before the nal unit and end within\n        // a half-second of the nal unit\n\n        if (dtsDistance >= -allowableOverlap && dtsDistance <= halfSecond) {\n          // Always use the closest GOP we found if there is more than\n          // one candidate\n          if (!nearestGopObj || nearestDistance > dtsDistance) {\n            nearestGopObj = currentGopObj;\n            nearestDistance = dtsDistance;\n          }\n        }\n      }\n      if (nearestGopObj) {\n        return nearestGopObj.gop;\n      }\n      return null;\n    }; // trim gop list to the first gop found that has a matching pts with a gop in the list\n    // of gopsToAlignWith starting from the START of the list\n\n    this.alignGopsAtStart_ = function (gops) {\n      var alignIndex, gopIndex, align, gop, byteLength, nalCount, duration, alignedGops;\n      byteLength = gops.byteLength;\n      nalCount = gops.nalCount;\n      duration = gops.duration;\n      alignIndex = gopIndex = 0;\n      while (alignIndex < gopsToAlignWith.length && gopIndex < gops.length) {\n        align = gopsToAlignWith[alignIndex];\n        gop = gops[gopIndex];\n        if (align.pts === gop.pts) {\n          break;\n        }\n        if (gop.pts > align.pts) {\n          // this current gop starts after the current gop we want to align on, so increment\n          // align index\n          alignIndex++;\n          continue;\n        } // current gop starts before the current gop we want to align on. so increment gop\n        // index\n\n        gopIndex++;\n        byteLength -= gop.byteLength;\n        nalCount -= gop.nalCount;\n        duration -= gop.duration;\n      }\n      if (gopIndex === 0) {\n        // no gops to trim\n        return gops;\n      }\n      if (gopIndex === gops.length) {\n        // all gops trimmed, skip appending all gops\n        return null;\n      }\n      alignedGops = gops.slice(gopIndex);\n      alignedGops.byteLength = byteLength;\n      alignedGops.duration = duration;\n      alignedGops.nalCount = nalCount;\n      alignedGops.pts = alignedGops[0].pts;\n      alignedGops.dts = alignedGops[0].dts;\n      return alignedGops;\n    }; // trim gop list to the first gop found that has a matching pts with a gop in the list\n    // of gopsToAlignWith starting from the END of the list\n\n    this.alignGopsAtEnd_ = function (gops) {\n      var alignIndex, gopIndex, align, gop, alignEndIndex, matchFound;\n      alignIndex = gopsToAlignWith.length - 1;\n      gopIndex = gops.length - 1;\n      alignEndIndex = null;\n      matchFound = false;\n      while (alignIndex >= 0 && gopIndex >= 0) {\n        align = gopsToAlignWith[alignIndex];\n        gop = gops[gopIndex];\n        if (align.pts === gop.pts) {\n          matchFound = true;\n          break;\n        }\n        if (align.pts > gop.pts) {\n          alignIndex--;\n          continue;\n        }\n        if (alignIndex === gopsToAlignWith.length - 1) {\n          // gop.pts is greater than the last alignment candidate. If no match is found\n          // by the end of this loop, we still want to append gops that come after this\n          // point\n          alignEndIndex = gopIndex;\n        }\n        gopIndex--;\n      }\n      if (!matchFound && alignEndIndex === null) {\n        return null;\n      }\n      var trimIndex;\n      if (matchFound) {\n        trimIndex = gopIndex;\n      } else {\n        trimIndex = alignEndIndex;\n      }\n      if (trimIndex === 0) {\n        return gops;\n      }\n      var alignedGops = gops.slice(trimIndex);\n      var metadata = alignedGops.reduce(function (total, gop) {\n        total.byteLength += gop.byteLength;\n        total.duration += gop.duration;\n        total.nalCount += gop.nalCount;\n        return total;\n      }, {\n        byteLength: 0,\n        duration: 0,\n        nalCount: 0\n      });\n      alignedGops.byteLength = metadata.byteLength;\n      alignedGops.duration = metadata.duration;\n      alignedGops.nalCount = metadata.nalCount;\n      alignedGops.pts = alignedGops[0].pts;\n      alignedGops.dts = alignedGops[0].dts;\n      return alignedGops;\n    };\n    this.alignGopsWith = function (newGopsToAlignWith) {\n      gopsToAlignWith = newGopsToAlignWith;\n    };\n  };\n  VideoSegmentStream.prototype = new Stream();\n  /**\n   * A Stream that can combine multiple streams (ie. audio & video)\n   * into a single output segment for MSE. Also supports audio-only\n   * and video-only streams.\n   * @param options {object} transmuxer options object\n   * @param options.keepOriginalTimestamps {boolean} If true, keep the timestamps\n   *        in the source; false to adjust the first segment to start at media timeline start.\n   */\n\n  CoalesceStream = function (options, metadataStream) {\n    // Number of Tracks per output segment\n    // If greater than 1, we combine multiple\n    // tracks into a single segment\n    this.numberOfTracks = 0;\n    this.metadataStream = metadataStream;\n    options = options || {};\n    if (typeof options.remux !== 'undefined') {\n      this.remuxTracks = !!options.remux;\n    } else {\n      this.remuxTracks = true;\n    }\n    if (typeof options.keepOriginalTimestamps === 'boolean') {\n      this.keepOriginalTimestamps = options.keepOriginalTimestamps;\n    } else {\n      this.keepOriginalTimestamps = false;\n    }\n    this.pendingTracks = [];\n    this.videoTrack = null;\n    this.pendingBoxes = [];\n    this.pendingCaptions = [];\n    this.pendingMetadata = [];\n    this.pendingBytes = 0;\n    this.emittedTracks = 0;\n    CoalesceStream.prototype.init.call(this); // Take output from multiple\n\n    this.push = function (output) {\n      // buffer incoming captions until the associated video segment\n      // finishes\n      if (output.content || output.text) {\n        return this.pendingCaptions.push(output);\n      } // buffer incoming id3 tags until the final flush\n\n      if (output.frames) {\n        return this.pendingMetadata.push(output);\n      } // Add this track to the list of pending tracks and store\n      // important information required for the construction of\n      // the final segment\n\n      this.pendingTracks.push(output.track);\n      this.pendingBytes += output.boxes.byteLength; // TODO: is there an issue for this against chrome?\n      // We unshift audio and push video because\n      // as of Chrome 75 when switching from\n      // one init segment to another if the video\n      // mdat does not appear after the audio mdat\n      // only audio will play for the duration of our transmux.\n\n      if (output.track.type === 'video') {\n        this.videoTrack = output.track;\n        this.pendingBoxes.push(output.boxes);\n      }\n      if (output.track.type === 'audio') {\n        this.audioTrack = output.track;\n        this.pendingBoxes.unshift(output.boxes);\n      }\n    };\n  };\n  CoalesceStream.prototype = new Stream();\n  CoalesceStream.prototype.flush = function (flushSource) {\n    var offset = 0,\n      event = {\n        captions: [],\n        captionStreams: {},\n        metadata: [],\n        info: {}\n      },\n      caption,\n      id3,\n      initSegment,\n      timelineStartPts = 0,\n      i;\n    if (this.pendingTracks.length < this.numberOfTracks) {\n      if (flushSource !== 'VideoSegmentStream' && flushSource !== 'AudioSegmentStream') {\n        // Return because we haven't received a flush from a data-generating\n        // portion of the segment (meaning that we have only recieved meta-data\n        // or captions.)\n        return;\n      } else if (this.remuxTracks) {\n        // Return until we have enough tracks from the pipeline to remux (if we\n        // are remuxing audio and video into a single MP4)\n        return;\n      } else if (this.pendingTracks.length === 0) {\n        // In the case where we receive a flush without any data having been\n        // received we consider it an emitted track for the purposes of coalescing\n        // `done` events.\n        // We do this for the case where there is an audio and video track in the\n        // segment but no audio data. (seen in several playlists with alternate\n        // audio tracks and no audio present in the main TS segments.)\n        this.emittedTracks++;\n        if (this.emittedTracks >= this.numberOfTracks) {\n          this.trigger('done');\n          this.emittedTracks = 0;\n        }\n        return;\n      }\n    }\n    if (this.videoTrack) {\n      timelineStartPts = this.videoTrack.timelineStartInfo.pts;\n      VIDEO_PROPERTIES.forEach(function (prop) {\n        event.info[prop] = this.videoTrack[prop];\n      }, this);\n    } else if (this.audioTrack) {\n      timelineStartPts = this.audioTrack.timelineStartInfo.pts;\n      AUDIO_PROPERTIES.forEach(function (prop) {\n        event.info[prop] = this.audioTrack[prop];\n      }, this);\n    }\n    if (this.videoTrack || this.audioTrack) {\n      if (this.pendingTracks.length === 1) {\n        event.type = this.pendingTracks[0].type;\n      } else {\n        event.type = 'combined';\n      }\n      this.emittedTracks += this.pendingTracks.length;\n      initSegment = mp4.initSegment(this.pendingTracks); // Create a new typed array to hold the init segment\n\n      event.initSegment = new Uint8Array(initSegment.byteLength); // Create an init segment containing a moov\n      // and track definitions\n\n      event.initSegment.set(initSegment); // Create a new typed array to hold the moof+mdats\n\n      event.data = new Uint8Array(this.pendingBytes); // Append each moof+mdat (one per track) together\n\n      for (i = 0; i < this.pendingBoxes.length; i++) {\n        event.data.set(this.pendingBoxes[i], offset);\n        offset += this.pendingBoxes[i].byteLength;\n      } // Translate caption PTS times into second offsets to match the\n      // video timeline for the segment, and add track info\n\n      for (i = 0; i < this.pendingCaptions.length; i++) {\n        caption = this.pendingCaptions[i];\n        caption.startTime = clock.metadataTsToSeconds(caption.startPts, timelineStartPts, this.keepOriginalTimestamps);\n        caption.endTime = clock.metadataTsToSeconds(caption.endPts, timelineStartPts, this.keepOriginalTimestamps);\n        event.captionStreams[caption.stream] = true;\n        event.captions.push(caption);\n      } // Translate ID3 frame PTS times into second offsets to match the\n      // video timeline for the segment\n\n      for (i = 0; i < this.pendingMetadata.length; i++) {\n        id3 = this.pendingMetadata[i];\n        id3.cueTime = clock.metadataTsToSeconds(id3.pts, timelineStartPts, this.keepOriginalTimestamps);\n        event.metadata.push(id3);\n      } // We add this to every single emitted segment even though we only need\n      // it for the first\n\n      event.metadata.dispatchType = this.metadataStream.dispatchType; // Reset stream state\n\n      this.pendingTracks.length = 0;\n      this.videoTrack = null;\n      this.pendingBoxes.length = 0;\n      this.pendingCaptions.length = 0;\n      this.pendingBytes = 0;\n      this.pendingMetadata.length = 0; // Emit the built segment\n      // We include captions and ID3 tags for backwards compatibility,\n      // ideally we should send only video and audio in the data event\n\n      this.trigger('data', event); // Emit each caption to the outside world\n      // Ideally, this would happen immediately on parsing captions,\n      // but we need to ensure that video data is sent back first\n      // so that caption timing can be adjusted to match video timing\n\n      for (i = 0; i < event.captions.length; i++) {\n        caption = event.captions[i];\n        this.trigger('caption', caption);\n      } // Emit each id3 tag to the outside world\n      // Ideally, this would happen immediately on parsing the tag,\n      // but we need to ensure that video data is sent back first\n      // so that ID3 frame timing can be adjusted to match video timing\n\n      for (i = 0; i < event.metadata.length; i++) {\n        id3 = event.metadata[i];\n        this.trigger('id3Frame', id3);\n      }\n    } // Only emit `done` if all tracks have been flushed and emitted\n\n    if (this.emittedTracks >= this.numberOfTracks) {\n      this.trigger('done');\n      this.emittedTracks = 0;\n    }\n  };\n  CoalesceStream.prototype.setRemux = function (val) {\n    this.remuxTracks = val;\n  };\n  /**\n   * A Stream that expects MP2T binary data as input and produces\n   * corresponding media segments, suitable for use with Media Source\n   * Extension (MSE) implementations that support the ISO BMFF byte\n   * stream format, like Chrome.\n   */\n\n  Transmuxer = function (options) {\n    var self = this,\n      hasFlushed = true,\n      videoTrack,\n      audioTrack;\n    Transmuxer.prototype.init.call(this);\n    options = options || {};\n    this.baseMediaDecodeTime = options.baseMediaDecodeTime || 0;\n    this.transmuxPipeline_ = {};\n    this.setupAacPipeline = function () {\n      var pipeline = {};\n      this.transmuxPipeline_ = pipeline;\n      pipeline.type = 'aac';\n      pipeline.metadataStream = new m2ts.MetadataStream(); // set up the parsing pipeline\n\n      pipeline.aacStream = new AacStream();\n      pipeline.audioTimestampRolloverStream = new m2ts.TimestampRolloverStream('audio');\n      pipeline.timedMetadataTimestampRolloverStream = new m2ts.TimestampRolloverStream('timed-metadata');\n      pipeline.adtsStream = new AdtsStream();\n      pipeline.coalesceStream = new CoalesceStream(options, pipeline.metadataStream);\n      pipeline.headOfPipeline = pipeline.aacStream;\n      pipeline.aacStream.pipe(pipeline.audioTimestampRolloverStream).pipe(pipeline.adtsStream);\n      pipeline.aacStream.pipe(pipeline.timedMetadataTimestampRolloverStream).pipe(pipeline.metadataStream).pipe(pipeline.coalesceStream);\n      pipeline.metadataStream.on('timestamp', function (frame) {\n        pipeline.aacStream.setTimestamp(frame.timeStamp);\n      });\n      pipeline.aacStream.on('data', function (data) {\n        if (data.type !== 'timed-metadata' && data.type !== 'audio' || pipeline.audioSegmentStream) {\n          return;\n        }\n        audioTrack = audioTrack || {\n          timelineStartInfo: {\n            baseMediaDecodeTime: self.baseMediaDecodeTime\n          },\n          codec: 'adts',\n          type: 'audio'\n        }; // hook up the audio segment stream to the first track with aac data\n\n        pipeline.coalesceStream.numberOfTracks++;\n        pipeline.audioSegmentStream = new AudioSegmentStream(audioTrack, options);\n        pipeline.audioSegmentStream.on('log', self.getLogTrigger_('audioSegmentStream'));\n        pipeline.audioSegmentStream.on('timingInfo', self.trigger.bind(self, 'audioTimingInfo')); // Set up the final part of the audio pipeline\n\n        pipeline.adtsStream.pipe(pipeline.audioSegmentStream).pipe(pipeline.coalesceStream); // emit pmt info\n\n        self.trigger('trackinfo', {\n          hasAudio: !!audioTrack,\n          hasVideo: !!videoTrack\n        });\n      }); // Re-emit any data coming from the coalesce stream to the outside world\n\n      pipeline.coalesceStream.on('data', this.trigger.bind(this, 'data')); // Let the consumer know we have finished flushing the entire pipeline\n\n      pipeline.coalesceStream.on('done', this.trigger.bind(this, 'done'));\n      addPipelineLogRetriggers(this, pipeline);\n    };\n    this.setupTsPipeline = function () {\n      var pipeline = {};\n      this.transmuxPipeline_ = pipeline;\n      pipeline.type = 'ts';\n      pipeline.metadataStream = new m2ts.MetadataStream(); // set up the parsing pipeline\n\n      pipeline.packetStream = new m2ts.TransportPacketStream();\n      pipeline.parseStream = new m2ts.TransportParseStream();\n      pipeline.elementaryStream = new m2ts.ElementaryStream();\n      pipeline.timestampRolloverStream = new m2ts.TimestampRolloverStream();\n      pipeline.adtsStream = new AdtsStream();\n      pipeline.h264Stream = new H264Stream();\n      pipeline.captionStream = new m2ts.CaptionStream(options);\n      pipeline.coalesceStream = new CoalesceStream(options, pipeline.metadataStream);\n      pipeline.headOfPipeline = pipeline.packetStream; // disassemble MPEG2-TS packets into elementary streams\n\n      pipeline.packetStream.pipe(pipeline.parseStream).pipe(pipeline.elementaryStream).pipe(pipeline.timestampRolloverStream); // !!THIS ORDER IS IMPORTANT!!\n      // demux the streams\n\n      pipeline.timestampRolloverStream.pipe(pipeline.h264Stream);\n      pipeline.timestampRolloverStream.pipe(pipeline.adtsStream);\n      pipeline.timestampRolloverStream.pipe(pipeline.metadataStream).pipe(pipeline.coalesceStream); // Hook up CEA-608/708 caption stream\n\n      pipeline.h264Stream.pipe(pipeline.captionStream).pipe(pipeline.coalesceStream);\n      pipeline.elementaryStream.on('data', function (data) {\n        var i;\n        if (data.type === 'metadata') {\n          i = data.tracks.length; // scan the tracks listed in the metadata\n\n          while (i--) {\n            if (!videoTrack && data.tracks[i].type === 'video') {\n              videoTrack = data.tracks[i];\n              videoTrack.timelineStartInfo.baseMediaDecodeTime = self.baseMediaDecodeTime;\n            } else if (!audioTrack && data.tracks[i].type === 'audio') {\n              audioTrack = data.tracks[i];\n              audioTrack.timelineStartInfo.baseMediaDecodeTime = self.baseMediaDecodeTime;\n            }\n          } // hook up the video segment stream to the first track with h264 data\n\n          if (videoTrack && !pipeline.videoSegmentStream) {\n            pipeline.coalesceStream.numberOfTracks++;\n            pipeline.videoSegmentStream = new VideoSegmentStream(videoTrack, options);\n            pipeline.videoSegmentStream.on('log', self.getLogTrigger_('videoSegmentStream'));\n            pipeline.videoSegmentStream.on('timelineStartInfo', function (timelineStartInfo) {\n              // When video emits timelineStartInfo data after a flush, we forward that\n              // info to the AudioSegmentStream, if it exists, because video timeline\n              // data takes precedence.  Do not do this if keepOriginalTimestamps is set,\n              // because this is a particularly subtle form of timestamp alteration.\n              if (audioTrack && !options.keepOriginalTimestamps) {\n                audioTrack.timelineStartInfo = timelineStartInfo; // On the first segment we trim AAC frames that exist before the\n                // very earliest DTS we have seen in video because Chrome will\n                // interpret any video track with a baseMediaDecodeTime that is\n                // non-zero as a gap.\n\n                pipeline.audioSegmentStream.setEarliestDts(timelineStartInfo.dts - self.baseMediaDecodeTime);\n              }\n            });\n            pipeline.videoSegmentStream.on('processedGopsInfo', self.trigger.bind(self, 'gopInfo'));\n            pipeline.videoSegmentStream.on('segmentTimingInfo', self.trigger.bind(self, 'videoSegmentTimingInfo'));\n            pipeline.videoSegmentStream.on('baseMediaDecodeTime', function (baseMediaDecodeTime) {\n              if (audioTrack) {\n                pipeline.audioSegmentStream.setVideoBaseMediaDecodeTime(baseMediaDecodeTime);\n              }\n            });\n            pipeline.videoSegmentStream.on('timingInfo', self.trigger.bind(self, 'videoTimingInfo')); // Set up the final part of the video pipeline\n\n            pipeline.h264Stream.pipe(pipeline.videoSegmentStream).pipe(pipeline.coalesceStream);\n          }\n          if (audioTrack && !pipeline.audioSegmentStream) {\n            // hook up the audio segment stream to the first track with aac data\n            pipeline.coalesceStream.numberOfTracks++;\n            pipeline.audioSegmentStream = new AudioSegmentStream(audioTrack, options);\n            pipeline.audioSegmentStream.on('log', self.getLogTrigger_('audioSegmentStream'));\n            pipeline.audioSegmentStream.on('timingInfo', self.trigger.bind(self, 'audioTimingInfo'));\n            pipeline.audioSegmentStream.on('segmentTimingInfo', self.trigger.bind(self, 'audioSegmentTimingInfo')); // Set up the final part of the audio pipeline\n\n            pipeline.adtsStream.pipe(pipeline.audioSegmentStream).pipe(pipeline.coalesceStream);\n          } // emit pmt info\n\n          self.trigger('trackinfo', {\n            hasAudio: !!audioTrack,\n            hasVideo: !!videoTrack\n          });\n        }\n      }); // Re-emit any data coming from the coalesce stream to the outside world\n\n      pipeline.coalesceStream.on('data', this.trigger.bind(this, 'data'));\n      pipeline.coalesceStream.on('id3Frame', function (id3Frame) {\n        id3Frame.dispatchType = pipeline.metadataStream.dispatchType;\n        self.trigger('id3Frame', id3Frame);\n      });\n      pipeline.coalesceStream.on('caption', this.trigger.bind(this, 'caption')); // Let the consumer know we have finished flushing the entire pipeline\n\n      pipeline.coalesceStream.on('done', this.trigger.bind(this, 'done'));\n      addPipelineLogRetriggers(this, pipeline);\n    }; // hook up the segment streams once track metadata is delivered\n\n    this.setBaseMediaDecodeTime = function (baseMediaDecodeTime) {\n      var pipeline = this.transmuxPipeline_;\n      if (!options.keepOriginalTimestamps) {\n        this.baseMediaDecodeTime = baseMediaDecodeTime;\n      }\n      if (audioTrack) {\n        audioTrack.timelineStartInfo.dts = undefined;\n        audioTrack.timelineStartInfo.pts = undefined;\n        trackDecodeInfo.clearDtsInfo(audioTrack);\n        if (pipeline.audioTimestampRolloverStream) {\n          pipeline.audioTimestampRolloverStream.discontinuity();\n        }\n      }\n      if (videoTrack) {\n        if (pipeline.videoSegmentStream) {\n          pipeline.videoSegmentStream.gopCache_ = [];\n        }\n        videoTrack.timelineStartInfo.dts = undefined;\n        videoTrack.timelineStartInfo.pts = undefined;\n        trackDecodeInfo.clearDtsInfo(videoTrack);\n        pipeline.captionStream.reset();\n      }\n      if (pipeline.timestampRolloverStream) {\n        pipeline.timestampRolloverStream.discontinuity();\n      }\n    };\n    this.setAudioAppendStart = function (timestamp) {\n      if (audioTrack) {\n        this.transmuxPipeline_.audioSegmentStream.setAudioAppendStart(timestamp);\n      }\n    };\n    this.setRemux = function (val) {\n      var pipeline = this.transmuxPipeline_;\n      options.remux = val;\n      if (pipeline && pipeline.coalesceStream) {\n        pipeline.coalesceStream.setRemux(val);\n      }\n    };\n    this.alignGopsWith = function (gopsToAlignWith) {\n      if (videoTrack && this.transmuxPipeline_.videoSegmentStream) {\n        this.transmuxPipeline_.videoSegmentStream.alignGopsWith(gopsToAlignWith);\n      }\n    };\n    this.getLogTrigger_ = function (key) {\n      var self = this;\n      return function (event) {\n        event.stream = key;\n        self.trigger('log', event);\n      };\n    }; // feed incoming data to the front of the parsing pipeline\n\n    this.push = function (data) {\n      if (hasFlushed) {\n        var isAac = isLikelyAacData(data);\n        if (isAac && this.transmuxPipeline_.type !== 'aac') {\n          this.setupAacPipeline();\n        } else if (!isAac && this.transmuxPipeline_.type !== 'ts') {\n          this.setupTsPipeline();\n        }\n        hasFlushed = false;\n      }\n      this.transmuxPipeline_.headOfPipeline.push(data);\n    }; // flush any buffered data\n\n    this.flush = function () {\n      hasFlushed = true; // Start at the top of the pipeline and flush all pending work\n\n      this.transmuxPipeline_.headOfPipeline.flush();\n    };\n    this.endTimeline = function () {\n      this.transmuxPipeline_.headOfPipeline.endTimeline();\n    };\n    this.reset = function () {\n      if (this.transmuxPipeline_.headOfPipeline) {\n        this.transmuxPipeline_.headOfPipeline.reset();\n      }\n    }; // Caption data has to be reset when seeking outside buffered range\n\n    this.resetCaptions = function () {\n      if (this.transmuxPipeline_.captionStream) {\n        this.transmuxPipeline_.captionStream.reset();\n      }\n    };\n  };\n  Transmuxer.prototype = new Stream();\n  var transmuxer = {\n    Transmuxer: Transmuxer,\n    VideoSegmentStream: VideoSegmentStream,\n    AudioSegmentStream: AudioSegmentStream,\n    AUDIO_PROPERTIES: AUDIO_PROPERTIES,\n    VIDEO_PROPERTIES: VIDEO_PROPERTIES,\n    // exported for testing\n    generateSegmentTimingInfo: generateSegmentTimingInfo\n  };\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   */\n\n  var toUnsigned$3 = function (value) {\n    return value >>> 0;\n  };\n  var toHexString$1 = function (value) {\n    return ('00' + value.toString(16)).slice(-2);\n  };\n  var bin = {\n    toUnsigned: toUnsigned$3,\n    toHexString: toHexString$1\n  };\n  var parseType$3 = function (buffer) {\n    var result = '';\n    result += String.fromCharCode(buffer[0]);\n    result += String.fromCharCode(buffer[1]);\n    result += String.fromCharCode(buffer[2]);\n    result += String.fromCharCode(buffer[3]);\n    return result;\n  };\n  var parseType_1 = parseType$3;\n  var toUnsigned$2 = bin.toUnsigned;\n  var parseType$2 = parseType_1;\n  var findBox$2 = function (data, path) {\n    var results = [],\n      i,\n      size,\n      type,\n      end,\n      subresults;\n    if (!path.length) {\n      // short-circuit the search for empty paths\n      return null;\n    }\n    for (i = 0; i < data.byteLength;) {\n      size = toUnsigned$2(data[i] << 24 | data[i + 1] << 16 | data[i + 2] << 8 | data[i + 3]);\n      type = parseType$2(data.subarray(i + 4, i + 8));\n      end = size > 1 ? i + size : data.byteLength;\n      if (type === path[0]) {\n        if (path.length === 1) {\n          // this is the end of the path and we've found the box we were\n          // looking for\n          results.push(data.subarray(i + 8, end));\n        } else {\n          // recursively search for the next box along the path\n          subresults = findBox$2(data.subarray(i + 8, end), path.slice(1));\n          if (subresults.length) {\n            results = results.concat(subresults);\n          }\n        }\n      }\n      i = end;\n    } // we've finished searching all of data\n\n    return results;\n  };\n  var findBox_1 = findBox$2;\n  var toUnsigned$1 = bin.toUnsigned;\n  var getUint64$2 = numbers.getUint64;\n  var tfdt = function (data) {\n    var result = {\n      version: data[0],\n      flags: new Uint8Array(data.subarray(1, 4))\n    };\n    if (result.version === 1) {\n      result.baseMediaDecodeTime = getUint64$2(data.subarray(4));\n    } else {\n      result.baseMediaDecodeTime = toUnsigned$1(data[4] << 24 | data[5] << 16 | data[6] << 8 | data[7]);\n    }\n    return result;\n  };\n  var parseTfdt$2 = tfdt;\n  var parseSampleFlags$1 = function (flags) {\n    return {\n      isLeading: (flags[0] & 0x0c) >>> 2,\n      dependsOn: flags[0] & 0x03,\n      isDependedOn: (flags[1] & 0xc0) >>> 6,\n      hasRedundancy: (flags[1] & 0x30) >>> 4,\n      paddingValue: (flags[1] & 0x0e) >>> 1,\n      isNonSyncSample: flags[1] & 0x01,\n      degradationPriority: flags[2] << 8 | flags[3]\n    };\n  };\n  var parseSampleFlags_1 = parseSampleFlags$1;\n  var parseSampleFlags = parseSampleFlags_1;\n  var trun = function (data) {\n    var result = {\n        version: data[0],\n        flags: new Uint8Array(data.subarray(1, 4)),\n        samples: []\n      },\n      view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n      // Flag interpretation\n      dataOffsetPresent = result.flags[2] & 0x01,\n      // compare with 2nd byte of 0x1\n      firstSampleFlagsPresent = result.flags[2] & 0x04,\n      // compare with 2nd byte of 0x4\n      sampleDurationPresent = result.flags[1] & 0x01,\n      // compare with 2nd byte of 0x100\n      sampleSizePresent = result.flags[1] & 0x02,\n      // compare with 2nd byte of 0x200\n      sampleFlagsPresent = result.flags[1] & 0x04,\n      // compare with 2nd byte of 0x400\n      sampleCompositionTimeOffsetPresent = result.flags[1] & 0x08,\n      // compare with 2nd byte of 0x800\n      sampleCount = view.getUint32(4),\n      offset = 8,\n      sample;\n    if (dataOffsetPresent) {\n      // 32 bit signed integer\n      result.dataOffset = view.getInt32(offset);\n      offset += 4;\n    } // Overrides the flags for the first sample only. The order of\n    // optional values will be: duration, size, compositionTimeOffset\n\n    if (firstSampleFlagsPresent && sampleCount) {\n      sample = {\n        flags: parseSampleFlags(data.subarray(offset, offset + 4))\n      };\n      offset += 4;\n      if (sampleDurationPresent) {\n        sample.duration = view.getUint32(offset);\n        offset += 4;\n      }\n      if (sampleSizePresent) {\n        sample.size = view.getUint32(offset);\n        offset += 4;\n      }\n      if (sampleCompositionTimeOffsetPresent) {\n        if (result.version === 1) {\n          sample.compositionTimeOffset = view.getInt32(offset);\n        } else {\n          sample.compositionTimeOffset = view.getUint32(offset);\n        }\n        offset += 4;\n      }\n      result.samples.push(sample);\n      sampleCount--;\n    }\n    while (sampleCount--) {\n      sample = {};\n      if (sampleDurationPresent) {\n        sample.duration = view.getUint32(offset);\n        offset += 4;\n      }\n      if (sampleSizePresent) {\n        sample.size = view.getUint32(offset);\n        offset += 4;\n      }\n      if (sampleFlagsPresent) {\n        sample.flags = parseSampleFlags(data.subarray(offset, offset + 4));\n        offset += 4;\n      }\n      if (sampleCompositionTimeOffsetPresent) {\n        if (result.version === 1) {\n          sample.compositionTimeOffset = view.getInt32(offset);\n        } else {\n          sample.compositionTimeOffset = view.getUint32(offset);\n        }\n        offset += 4;\n      }\n      result.samples.push(sample);\n    }\n    return result;\n  };\n  var parseTrun$2 = trun;\n  var tfhd = function (data) {\n    var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n      result = {\n        version: data[0],\n        flags: new Uint8Array(data.subarray(1, 4)),\n        trackId: view.getUint32(4)\n      },\n      baseDataOffsetPresent = result.flags[2] & 0x01,\n      sampleDescriptionIndexPresent = result.flags[2] & 0x02,\n      defaultSampleDurationPresent = result.flags[2] & 0x08,\n      defaultSampleSizePresent = result.flags[2] & 0x10,\n      defaultSampleFlagsPresent = result.flags[2] & 0x20,\n      durationIsEmpty = result.flags[0] & 0x010000,\n      defaultBaseIsMoof = result.flags[0] & 0x020000,\n      i;\n    i = 8;\n    if (baseDataOffsetPresent) {\n      i += 4; // truncate top 4 bytes\n      // FIXME: should we read the full 64 bits?\n\n      result.baseDataOffset = view.getUint32(12);\n      i += 4;\n    }\n    if (sampleDescriptionIndexPresent) {\n      result.sampleDescriptionIndex = view.getUint32(i);\n      i += 4;\n    }\n    if (defaultSampleDurationPresent) {\n      result.defaultSampleDuration = view.getUint32(i);\n      i += 4;\n    }\n    if (defaultSampleSizePresent) {\n      result.defaultSampleSize = view.getUint32(i);\n      i += 4;\n    }\n    if (defaultSampleFlagsPresent) {\n      result.defaultSampleFlags = view.getUint32(i);\n    }\n    if (durationIsEmpty) {\n      result.durationIsEmpty = true;\n    }\n    if (!baseDataOffsetPresent && defaultBaseIsMoof) {\n      result.baseDataOffsetIsMoof = true;\n    }\n    return result;\n  };\n  var parseTfhd$2 = tfhd;\n  var win;\n  if (typeof window !== \"undefined\") {\n    win = window;\n  } else if (typeof commonjsGlobal !== \"undefined\") {\n    win = commonjsGlobal;\n  } else if (typeof self !== \"undefined\") {\n    win = self;\n  } else {\n    win = {};\n  }\n  var window_1 = win;\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   *\n   * Reads in-band CEA-708 captions out of FMP4 segments.\n   * @see https://en.wikipedia.org/wiki/CEA-708\n   */\n\n  var discardEmulationPreventionBytes = captionPacketParser.discardEmulationPreventionBytes;\n  var CaptionStream = captionStream.CaptionStream;\n  var findBox$1 = findBox_1;\n  var parseTfdt$1 = parseTfdt$2;\n  var parseTrun$1 = parseTrun$2;\n  var parseTfhd$1 = parseTfhd$2;\n  var window$2 = window_1;\n  /**\n    * Maps an offset in the mdat to a sample based on the the size of the samples.\n    * Assumes that `parseSamples` has been called first.\n    *\n    * @param {Number} offset - The offset into the mdat\n    * @param {Object[]} samples - An array of samples, parsed using `parseSamples`\n    * @return {?Object} The matching sample, or null if no match was found.\n    *\n    * @see ISO-BMFF-12/2015, Section 8.8.8\n   **/\n\n  var mapToSample = function (offset, samples) {\n    var approximateOffset = offset;\n    for (var i = 0; i < samples.length; i++) {\n      var sample = samples[i];\n      if (approximateOffset < sample.size) {\n        return sample;\n      }\n      approximateOffset -= sample.size;\n    }\n    return null;\n  };\n  /**\n    * Finds SEI nal units contained in a Media Data Box.\n    * Assumes that `parseSamples` has been called first.\n    *\n    * @param {Uint8Array} avcStream - The bytes of the mdat\n    * @param {Object[]} samples - The samples parsed out by `parseSamples`\n    * @param {Number} trackId - The trackId of this video track\n    * @return {Object[]} seiNals - the parsed SEI NALUs found.\n    *   The contents of the seiNal should match what is expected by\n    *   CaptionStream.push (nalUnitType, size, data, escapedRBSP, pts, dts)\n    *\n    * @see ISO-BMFF-12/2015, Section 8.1.1\n    * @see Rec. ITU-T H.264, 7.3.2.3.1\n   **/\n\n  var findSeiNals = function (avcStream, samples, trackId) {\n    var avcView = new DataView(avcStream.buffer, avcStream.byteOffset, avcStream.byteLength),\n      result = {\n        logs: [],\n        seiNals: []\n      },\n      seiNal,\n      i,\n      length,\n      lastMatchedSample;\n    for (i = 0; i + 4 < avcStream.length; i += length) {\n      length = avcView.getUint32(i);\n      i += 4; // Bail if this doesn't appear to be an H264 stream\n\n      if (length <= 0) {\n        continue;\n      }\n      switch (avcStream[i] & 0x1F) {\n        case 0x06:\n          var data = avcStream.subarray(i + 1, i + 1 + length);\n          var matchingSample = mapToSample(i, samples);\n          seiNal = {\n            nalUnitType: 'sei_rbsp',\n            size: length,\n            data: data,\n            escapedRBSP: discardEmulationPreventionBytes(data),\n            trackId: trackId\n          };\n          if (matchingSample) {\n            seiNal.pts = matchingSample.pts;\n            seiNal.dts = matchingSample.dts;\n            lastMatchedSample = matchingSample;\n          } else if (lastMatchedSample) {\n            // If a matching sample cannot be found, use the last\n            // sample's values as they should be as close as possible\n            seiNal.pts = lastMatchedSample.pts;\n            seiNal.dts = lastMatchedSample.dts;\n          } else {\n            result.logs.push({\n              level: 'warn',\n              message: 'We\\'ve encountered a nal unit without data at ' + i + ' for trackId ' + trackId + '. See mux.js#223.'\n            });\n            break;\n          }\n          result.seiNals.push(seiNal);\n          break;\n      }\n    }\n    return result;\n  };\n  /**\n    * Parses sample information out of Track Run Boxes and calculates\n    * the absolute presentation and decode timestamps of each sample.\n    *\n    * @param {Array<Uint8Array>} truns - The Trun Run boxes to be parsed\n    * @param {Number|BigInt} baseMediaDecodeTime - base media decode time from tfdt\n        @see ISO-BMFF-12/2015, Section 8.8.12\n    * @param {Object} tfhd - The parsed Track Fragment Header\n    *   @see inspect.parseTfhd\n    * @return {Object[]} the parsed samples\n    *\n    * @see ISO-BMFF-12/2015, Section 8.8.8\n   **/\n\n  var parseSamples = function (truns, baseMediaDecodeTime, tfhd) {\n    var currentDts = baseMediaDecodeTime;\n    var defaultSampleDuration = tfhd.defaultSampleDuration || 0;\n    var defaultSampleSize = tfhd.defaultSampleSize || 0;\n    var trackId = tfhd.trackId;\n    var allSamples = [];\n    truns.forEach(function (trun) {\n      // Note: We currently do not parse the sample table as well\n      // as the trun. It's possible some sources will require this.\n      // moov > trak > mdia > minf > stbl\n      var trackRun = parseTrun$1(trun);\n      var samples = trackRun.samples;\n      samples.forEach(function (sample) {\n        if (sample.duration === undefined) {\n          sample.duration = defaultSampleDuration;\n        }\n        if (sample.size === undefined) {\n          sample.size = defaultSampleSize;\n        }\n        sample.trackId = trackId;\n        sample.dts = currentDts;\n        if (sample.compositionTimeOffset === undefined) {\n          sample.compositionTimeOffset = 0;\n        }\n        if (typeof currentDts === 'bigint') {\n          sample.pts = currentDts + window$2.BigInt(sample.compositionTimeOffset);\n          currentDts += window$2.BigInt(sample.duration);\n        } else {\n          sample.pts = currentDts + sample.compositionTimeOffset;\n          currentDts += sample.duration;\n        }\n      });\n      allSamples = allSamples.concat(samples);\n    });\n    return allSamples;\n  };\n  /**\n    * Parses out caption nals from an FMP4 segment's video tracks.\n    *\n    * @param {Uint8Array} segment - The bytes of a single segment\n    * @param {Number} videoTrackId - The trackId of a video track in the segment\n    * @return {Object.<Number, Object[]>} A mapping of video trackId to\n    *   a list of seiNals found in that track\n   **/\n\n  var parseCaptionNals = function (segment, videoTrackId) {\n    // To get the samples\n    var trafs = findBox$1(segment, ['moof', 'traf']); // To get SEI NAL units\n\n    var mdats = findBox$1(segment, ['mdat']);\n    var captionNals = {};\n    var mdatTrafPairs = []; // Pair up each traf with a mdat as moofs and mdats are in pairs\n\n    mdats.forEach(function (mdat, index) {\n      var matchingTraf = trafs[index];\n      mdatTrafPairs.push({\n        mdat: mdat,\n        traf: matchingTraf\n      });\n    });\n    mdatTrafPairs.forEach(function (pair) {\n      var mdat = pair.mdat;\n      var traf = pair.traf;\n      var tfhd = findBox$1(traf, ['tfhd']); // Exactly 1 tfhd per traf\n\n      var headerInfo = parseTfhd$1(tfhd[0]);\n      var trackId = headerInfo.trackId;\n      var tfdt = findBox$1(traf, ['tfdt']); // Either 0 or 1 tfdt per traf\n\n      var baseMediaDecodeTime = tfdt.length > 0 ? parseTfdt$1(tfdt[0]).baseMediaDecodeTime : 0;\n      var truns = findBox$1(traf, ['trun']);\n      var samples;\n      var result; // Only parse video data for the chosen video track\n\n      if (videoTrackId === trackId && truns.length > 0) {\n        samples = parseSamples(truns, baseMediaDecodeTime, headerInfo);\n        result = findSeiNals(mdat, samples, trackId);\n        if (!captionNals[trackId]) {\n          captionNals[trackId] = {\n            seiNals: [],\n            logs: []\n          };\n        }\n        captionNals[trackId].seiNals = captionNals[trackId].seiNals.concat(result.seiNals);\n        captionNals[trackId].logs = captionNals[trackId].logs.concat(result.logs);\n      }\n    });\n    return captionNals;\n  };\n  /**\n    * Parses out inband captions from an MP4 container and returns\n    * caption objects that can be used by WebVTT and the TextTrack API.\n    * @see https://developer.mozilla.org/en-US/docs/Web/API/VTTCue\n    * @see https://developer.mozilla.org/en-US/docs/Web/API/TextTrack\n    * Assumes that `probe.getVideoTrackIds` and `probe.timescale` have been called first\n    *\n    * @param {Uint8Array} segment - The fmp4 segment containing embedded captions\n    * @param {Number} trackId - The id of the video track to parse\n    * @param {Number} timescale - The timescale for the video track from the init segment\n    *\n    * @return {?Object[]} parsedCaptions - A list of captions or null if no video tracks\n    * @return {Number} parsedCaptions[].startTime - The time to show the caption in seconds\n    * @return {Number} parsedCaptions[].endTime - The time to stop showing the caption in seconds\n    * @return {Object[]} parsedCaptions[].content - A list of individual caption segments\n    * @return {String} parsedCaptions[].content.text - The visible content of the caption segment\n    * @return {Number} parsedCaptions[].content.line - The line height from 1-15 for positioning of the caption segment\n    * @return {Number} parsedCaptions[].content.position - The column indent percentage for cue positioning from 10-80\n   **/\n\n  var parseEmbeddedCaptions = function (segment, trackId, timescale) {\n    var captionNals; // the ISO-BMFF spec says that trackId can't be zero, but there's some broken content out there\n\n    if (trackId === null) {\n      return null;\n    }\n    captionNals = parseCaptionNals(segment, trackId);\n    var trackNals = captionNals[trackId] || {};\n    return {\n      seiNals: trackNals.seiNals,\n      logs: trackNals.logs,\n      timescale: timescale\n    };\n  };\n  /**\n    * Converts SEI NALUs into captions that can be used by video.js\n   **/\n\n  var CaptionParser = function () {\n    var isInitialized = false;\n    var captionStream; // Stores segments seen before trackId and timescale are set\n\n    var segmentCache; // Stores video track ID of the track being parsed\n\n    var trackId; // Stores the timescale of the track being parsed\n\n    var timescale; // Stores captions parsed so far\n\n    var parsedCaptions; // Stores whether we are receiving partial data or not\n\n    var parsingPartial;\n    /**\n      * A method to indicate whether a CaptionParser has been initalized\n      * @returns {Boolean}\n     **/\n\n    this.isInitialized = function () {\n      return isInitialized;\n    };\n    /**\n      * Initializes the underlying CaptionStream, SEI NAL parsing\n      * and management, and caption collection\n     **/\n\n    this.init = function (options) {\n      captionStream = new CaptionStream();\n      isInitialized = true;\n      parsingPartial = options ? options.isPartial : false; // Collect dispatched captions\n\n      captionStream.on('data', function (event) {\n        // Convert to seconds in the source's timescale\n        event.startTime = event.startPts / timescale;\n        event.endTime = event.endPts / timescale;\n        parsedCaptions.captions.push(event);\n        parsedCaptions.captionStreams[event.stream] = true;\n      });\n      captionStream.on('log', function (log) {\n        parsedCaptions.logs.push(log);\n      });\n    };\n    /**\n      * Determines if a new video track will be selected\n      * or if the timescale changed\n      * @return {Boolean}\n     **/\n\n    this.isNewInit = function (videoTrackIds, timescales) {\n      if (videoTrackIds && videoTrackIds.length === 0 || timescales && typeof timescales === 'object' && Object.keys(timescales).length === 0) {\n        return false;\n      }\n      return trackId !== videoTrackIds[0] || timescale !== timescales[trackId];\n    };\n    /**\n      * Parses out SEI captions and interacts with underlying\n      * CaptionStream to return dispatched captions\n      *\n      * @param {Uint8Array} segment - The fmp4 segment containing embedded captions\n      * @param {Number[]} videoTrackIds - A list of video tracks found in the init segment\n      * @param {Object.<Number, Number>} timescales - The timescales found in the init segment\n      * @see parseEmbeddedCaptions\n      * @see m2ts/caption-stream.js\n     **/\n\n    this.parse = function (segment, videoTrackIds, timescales) {\n      var parsedData;\n      if (!this.isInitialized()) {\n        return null; // This is not likely to be a video segment\n      } else if (!videoTrackIds || !timescales) {\n        return null;\n      } else if (this.isNewInit(videoTrackIds, timescales)) {\n        // Use the first video track only as there is no\n        // mechanism to switch to other video tracks\n        trackId = videoTrackIds[0];\n        timescale = timescales[trackId]; // If an init segment has not been seen yet, hold onto segment\n        // data until we have one.\n        // the ISO-BMFF spec says that trackId can't be zero, but there's some broken content out there\n      } else if (trackId === null || !timescale) {\n        segmentCache.push(segment);\n        return null;\n      } // Now that a timescale and trackId is set, parse cached segments\n\n      while (segmentCache.length > 0) {\n        var cachedSegment = segmentCache.shift();\n        this.parse(cachedSegment, videoTrackIds, timescales);\n      }\n      parsedData = parseEmbeddedCaptions(segment, trackId, timescale);\n      if (parsedData && parsedData.logs) {\n        parsedCaptions.logs = parsedCaptions.logs.concat(parsedData.logs);\n      }\n      if (parsedData === null || !parsedData.seiNals) {\n        if (parsedCaptions.logs.length) {\n          return {\n            logs: parsedCaptions.logs,\n            captions: [],\n            captionStreams: []\n          };\n        }\n        return null;\n      }\n      this.pushNals(parsedData.seiNals); // Force the parsed captions to be dispatched\n\n      this.flushStream();\n      return parsedCaptions;\n    };\n    /**\n      * Pushes SEI NALUs onto CaptionStream\n      * @param {Object[]} nals - A list of SEI nals parsed using `parseCaptionNals`\n      * Assumes that `parseCaptionNals` has been called first\n      * @see m2ts/caption-stream.js\n      **/\n\n    this.pushNals = function (nals) {\n      if (!this.isInitialized() || !nals || nals.length === 0) {\n        return null;\n      }\n      nals.forEach(function (nal) {\n        captionStream.push(nal);\n      });\n    };\n    /**\n      * Flushes underlying CaptionStream to dispatch processed, displayable captions\n      * @see m2ts/caption-stream.js\n     **/\n\n    this.flushStream = function () {\n      if (!this.isInitialized()) {\n        return null;\n      }\n      if (!parsingPartial) {\n        captionStream.flush();\n      } else {\n        captionStream.partialFlush();\n      }\n    };\n    /**\n      * Reset caption buckets for new data\n     **/\n\n    this.clearParsedCaptions = function () {\n      parsedCaptions.captions = [];\n      parsedCaptions.captionStreams = {};\n      parsedCaptions.logs = [];\n    };\n    /**\n      * Resets underlying CaptionStream\n      * @see m2ts/caption-stream.js\n     **/\n\n    this.resetCaptionStream = function () {\n      if (!this.isInitialized()) {\n        return null;\n      }\n      captionStream.reset();\n    };\n    /**\n      * Convenience method to clear all captions flushed from the\n      * CaptionStream and still being parsed\n      * @see m2ts/caption-stream.js\n     **/\n\n    this.clearAllCaptions = function () {\n      this.clearParsedCaptions();\n      this.resetCaptionStream();\n    };\n    /**\n      * Reset caption parser\n     **/\n\n    this.reset = function () {\n      segmentCache = [];\n      trackId = null;\n      timescale = null;\n      if (!parsedCaptions) {\n        parsedCaptions = {\n          captions: [],\n          // CC1, CC2, CC3, CC4\n          captionStreams: {},\n          logs: []\n        };\n      } else {\n        this.clearParsedCaptions();\n      }\n      this.resetCaptionStream();\n    };\n    this.reset();\n  };\n  var captionParser = CaptionParser;\n  /**\n   * Returns the first string in the data array ending with a null char '\\0'\n   * @param {UInt8} data \n   * @returns the string with the null char\n   */\n\n  var uint8ToCString$1 = function (data) {\n    var index = 0;\n    var curChar = String.fromCharCode(data[index]);\n    var retString = '';\n    while (curChar !== '\\0') {\n      retString += curChar;\n      index++;\n      curChar = String.fromCharCode(data[index]);\n    } // Add nullChar\n\n    retString += curChar;\n    return retString;\n  };\n  var string = {\n    uint8ToCString: uint8ToCString$1\n  };\n  var uint8ToCString = string.uint8ToCString;\n  var getUint64$1 = numbers.getUint64;\n  /**\n   * Based on: ISO/IEC 23009 Section: 5.10.3.3\n   * References:\n   * https://dashif-documents.azurewebsites.net/Events/master/event.html#emsg-format\n   * https://aomediacodec.github.io/id3-emsg/\n   * \n   * Takes emsg box data as a uint8 array and returns a emsg box object\n   * @param {UInt8Array} boxData data from emsg box\n   * @returns A parsed emsg box object\n   */\n\n  var parseEmsgBox = function (boxData) {\n    // version + flags\n    var offset = 4;\n    var version = boxData[0];\n    var scheme_id_uri, value, timescale, presentation_time, presentation_time_delta, event_duration, id, message_data;\n    if (version === 0) {\n      scheme_id_uri = uint8ToCString(boxData.subarray(offset));\n      offset += scheme_id_uri.length;\n      value = uint8ToCString(boxData.subarray(offset));\n      offset += value.length;\n      var dv = new DataView(boxData.buffer);\n      timescale = dv.getUint32(offset);\n      offset += 4;\n      presentation_time_delta = dv.getUint32(offset);\n      offset += 4;\n      event_duration = dv.getUint32(offset);\n      offset += 4;\n      id = dv.getUint32(offset);\n      offset += 4;\n    } else if (version === 1) {\n      var dv = new DataView(boxData.buffer);\n      timescale = dv.getUint32(offset);\n      offset += 4;\n      presentation_time = getUint64$1(boxData.subarray(offset));\n      offset += 8;\n      event_duration = dv.getUint32(offset);\n      offset += 4;\n      id = dv.getUint32(offset);\n      offset += 4;\n      scheme_id_uri = uint8ToCString(boxData.subarray(offset));\n      offset += scheme_id_uri.length;\n      value = uint8ToCString(boxData.subarray(offset));\n      offset += value.length;\n    }\n    message_data = new Uint8Array(boxData.subarray(offset, boxData.byteLength));\n    var emsgBox = {\n      scheme_id_uri,\n      value,\n      // if timescale is undefined or 0 set to 1 \n      timescale: timescale ? timescale : 1,\n      presentation_time,\n      presentation_time_delta,\n      event_duration,\n      id,\n      message_data\n    };\n    return isValidEmsgBox(version, emsgBox) ? emsgBox : undefined;\n  };\n  /**\n   * Scales a presentation time or time delta with an offset with a provided timescale\n   * @param {number} presentationTime \n   * @param {number} timescale \n   * @param {number} timeDelta \n   * @param {number} offset \n   * @returns the scaled time as a number\n   */\n\n  var scaleTime = function (presentationTime, timescale, timeDelta, offset) {\n    return presentationTime || presentationTime === 0 ? presentationTime / timescale : offset + timeDelta / timescale;\n  };\n  /**\n   * Checks the emsg box data for validity based on the version\n   * @param {number} version of the emsg box to validate\n   * @param {Object} emsg the emsg data to validate\n   * @returns if the box is valid as a boolean\n   */\n\n  var isValidEmsgBox = function (version, emsg) {\n    var hasScheme = emsg.scheme_id_uri !== '\\0';\n    var isValidV0Box = version === 0 && isDefined(emsg.presentation_time_delta) && hasScheme;\n    var isValidV1Box = version === 1 && isDefined(emsg.presentation_time) && hasScheme; // Only valid versions of emsg are 0 and 1\n\n    return !(version > 1) && isValidV0Box || isValidV1Box;\n  }; // Utility function to check if an object is defined\n\n  var isDefined = function (data) {\n    return data !== undefined || data !== null;\n  };\n  var emsg$1 = {\n    parseEmsgBox: parseEmsgBox,\n    scaleTime: scaleTime\n  };\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   *\n   * Utilities to detect basic properties and metadata about MP4s.\n   */\n\n  var toUnsigned = bin.toUnsigned;\n  var toHexString = bin.toHexString;\n  var findBox = findBox_1;\n  var parseType$1 = parseType_1;\n  var emsg = emsg$1;\n  var parseTfhd = parseTfhd$2;\n  var parseTrun = parseTrun$2;\n  var parseTfdt = parseTfdt$2;\n  var getUint64 = numbers.getUint64;\n  var timescale, startTime, compositionStartTime, getVideoTrackIds, getTracks, getTimescaleFromMediaHeader, getEmsgID3;\n  var window$1 = window_1;\n  var parseId3Frames = parseId3.parseId3Frames;\n  /**\n   * Parses an MP4 initialization segment and extracts the timescale\n   * values for any declared tracks. Timescale values indicate the\n   * number of clock ticks per second to assume for time-based values\n   * elsewhere in the MP4.\n   *\n   * To determine the start time of an MP4, you need two pieces of\n   * information: the timescale unit and the earliest base media decode\n   * time. Multiple timescales can be specified within an MP4 but the\n   * base media decode time is always expressed in the timescale from\n   * the media header box for the track:\n   * ```\n   * moov > trak > mdia > mdhd.timescale\n   * ```\n   * @param init {Uint8Array} the bytes of the init segment\n   * @return {object} a hash of track ids to timescale values or null if\n   * the init segment is malformed.\n   */\n\n  timescale = function (init) {\n    var result = {},\n      traks = findBox(init, ['moov', 'trak']); // mdhd timescale\n\n    return traks.reduce(function (result, trak) {\n      var tkhd, version, index, id, mdhd;\n      tkhd = findBox(trak, ['tkhd'])[0];\n      if (!tkhd) {\n        return null;\n      }\n      version = tkhd[0];\n      index = version === 0 ? 12 : 20;\n      id = toUnsigned(tkhd[index] << 24 | tkhd[index + 1] << 16 | tkhd[index + 2] << 8 | tkhd[index + 3]);\n      mdhd = findBox(trak, ['mdia', 'mdhd'])[0];\n      if (!mdhd) {\n        return null;\n      }\n      version = mdhd[0];\n      index = version === 0 ? 12 : 20;\n      result[id] = toUnsigned(mdhd[index] << 24 | mdhd[index + 1] << 16 | mdhd[index + 2] << 8 | mdhd[index + 3]);\n      return result;\n    }, result);\n  };\n  /**\n   * Determine the base media decode start time, in seconds, for an MP4\n   * fragment. If multiple fragments are specified, the earliest time is\n   * returned.\n   *\n   * The base media decode time can be parsed from track fragment\n   * metadata:\n   * ```\n   * moof > traf > tfdt.baseMediaDecodeTime\n   * ```\n   * It requires the timescale value from the mdhd to interpret.\n   *\n   * @param timescale {object} a hash of track ids to timescale values.\n   * @return {number} the earliest base media decode start time for the\n   * fragment, in seconds\n   */\n\n  startTime = function (timescale, fragment) {\n    var trafs; // we need info from two childrend of each track fragment box\n\n    trafs = findBox(fragment, ['moof', 'traf']); // determine the start times for each track\n\n    var lowestTime = trafs.reduce(function (acc, traf) {\n      var tfhd = findBox(traf, ['tfhd'])[0]; // get the track id from the tfhd\n\n      var id = toUnsigned(tfhd[4] << 24 | tfhd[5] << 16 | tfhd[6] << 8 | tfhd[7]); // assume a 90kHz clock if no timescale was specified\n\n      var scale = timescale[id] || 90e3; // get the base media decode time from the tfdt\n\n      var tfdt = findBox(traf, ['tfdt'])[0];\n      var dv = new DataView(tfdt.buffer, tfdt.byteOffset, tfdt.byteLength);\n      var baseTime; // version 1 is 64 bit\n\n      if (tfdt[0] === 1) {\n        baseTime = getUint64(tfdt.subarray(4, 12));\n      } else {\n        baseTime = dv.getUint32(4);\n      } // convert base time to seconds if it is a valid number.\n\n      let seconds;\n      if (typeof baseTime === 'bigint') {\n        seconds = baseTime / window$1.BigInt(scale);\n      } else if (typeof baseTime === 'number' && !isNaN(baseTime)) {\n        seconds = baseTime / scale;\n      }\n      if (seconds < Number.MAX_SAFE_INTEGER) {\n        seconds = Number(seconds);\n      }\n      if (seconds < acc) {\n        acc = seconds;\n      }\n      return acc;\n    }, Infinity);\n    return typeof lowestTime === 'bigint' || isFinite(lowestTime) ? lowestTime : 0;\n  };\n  /**\n   * Determine the composition start, in seconds, for an MP4\n   * fragment.\n   *\n   * The composition start time of a fragment can be calculated using the base\n   * media decode time, composition time offset, and timescale, as follows:\n   *\n   * compositionStartTime = (baseMediaDecodeTime + compositionTimeOffset) / timescale\n   *\n   * All of the aforementioned information is contained within a media fragment's\n   * `traf` box, except for timescale info, which comes from the initialization\n   * segment, so a track id (also contained within a `traf`) is also necessary to\n   * associate it with a timescale\n   *\n   *\n   * @param timescales {object} - a hash of track ids to timescale values.\n   * @param fragment {Unit8Array} - the bytes of a media segment\n   * @return {number} the composition start time for the fragment, in seconds\n   **/\n\n  compositionStartTime = function (timescales, fragment) {\n    var trafBoxes = findBox(fragment, ['moof', 'traf']);\n    var baseMediaDecodeTime = 0;\n    var compositionTimeOffset = 0;\n    var trackId;\n    if (trafBoxes && trafBoxes.length) {\n      // The spec states that track run samples contained within a `traf` box are contiguous, but\n      // it does not explicitly state whether the `traf` boxes themselves are contiguous.\n      // We will assume that they are, so we only need the first to calculate start time.\n      var tfhd = findBox(trafBoxes[0], ['tfhd'])[0];\n      var trun = findBox(trafBoxes[0], ['trun'])[0];\n      var tfdt = findBox(trafBoxes[0], ['tfdt'])[0];\n      if (tfhd) {\n        var parsedTfhd = parseTfhd(tfhd);\n        trackId = parsedTfhd.trackId;\n      }\n      if (tfdt) {\n        var parsedTfdt = parseTfdt(tfdt);\n        baseMediaDecodeTime = parsedTfdt.baseMediaDecodeTime;\n      }\n      if (trun) {\n        var parsedTrun = parseTrun(trun);\n        if (parsedTrun.samples && parsedTrun.samples.length) {\n          compositionTimeOffset = parsedTrun.samples[0].compositionTimeOffset || 0;\n        }\n      }\n    } // Get timescale for this specific track. Assume a 90kHz clock if no timescale was\n    // specified.\n\n    var timescale = timescales[trackId] || 90e3; // return the composition start time, in seconds\n\n    if (typeof baseMediaDecodeTime === 'bigint') {\n      compositionTimeOffset = window$1.BigInt(compositionTimeOffset);\n      timescale = window$1.BigInt(timescale);\n    }\n    var result = (baseMediaDecodeTime + compositionTimeOffset) / timescale;\n    if (typeof result === 'bigint' && result < Number.MAX_SAFE_INTEGER) {\n      result = Number(result);\n    }\n    return result;\n  };\n  /**\n    * Find the trackIds of the video tracks in this source.\n    * Found by parsing the Handler Reference and Track Header Boxes:\n    *   moov > trak > mdia > hdlr\n    *   moov > trak > tkhd\n    *\n    * @param {Uint8Array} init - The bytes of the init segment for this source\n    * @return {Number[]} A list of trackIds\n    *\n    * @see ISO-BMFF-12/2015, Section 8.4.3\n   **/\n\n  getVideoTrackIds = function (init) {\n    var traks = findBox(init, ['moov', 'trak']);\n    var videoTrackIds = [];\n    traks.forEach(function (trak) {\n      var hdlrs = findBox(trak, ['mdia', 'hdlr']);\n      var tkhds = findBox(trak, ['tkhd']);\n      hdlrs.forEach(function (hdlr, index) {\n        var handlerType = parseType$1(hdlr.subarray(8, 12));\n        var tkhd = tkhds[index];\n        var view;\n        var version;\n        var trackId;\n        if (handlerType === 'vide') {\n          view = new DataView(tkhd.buffer, tkhd.byteOffset, tkhd.byteLength);\n          version = view.getUint8(0);\n          trackId = version === 0 ? view.getUint32(12) : view.getUint32(20);\n          videoTrackIds.push(trackId);\n        }\n      });\n    });\n    return videoTrackIds;\n  };\n  getTimescaleFromMediaHeader = function (mdhd) {\n    // mdhd is a FullBox, meaning it will have its own version as the first byte\n    var version = mdhd[0];\n    var index = version === 0 ? 12 : 20;\n    return toUnsigned(mdhd[index] << 24 | mdhd[index + 1] << 16 | mdhd[index + 2] << 8 | mdhd[index + 3]);\n  };\n  /**\n   * Get all the video, audio, and hint tracks from a non fragmented\n   * mp4 segment\n   */\n\n  getTracks = function (init) {\n    var traks = findBox(init, ['moov', 'trak']);\n    var tracks = [];\n    traks.forEach(function (trak) {\n      var track = {};\n      var tkhd = findBox(trak, ['tkhd'])[0];\n      var view, tkhdVersion; // id\n\n      if (tkhd) {\n        view = new DataView(tkhd.buffer, tkhd.byteOffset, tkhd.byteLength);\n        tkhdVersion = view.getUint8(0);\n        track.id = tkhdVersion === 0 ? view.getUint32(12) : view.getUint32(20);\n      }\n      var hdlr = findBox(trak, ['mdia', 'hdlr'])[0]; // type\n\n      if (hdlr) {\n        var type = parseType$1(hdlr.subarray(8, 12));\n        if (type === 'vide') {\n          track.type = 'video';\n        } else if (type === 'soun') {\n          track.type = 'audio';\n        } else {\n          track.type = type;\n        }\n      } // codec\n\n      var stsd = findBox(trak, ['mdia', 'minf', 'stbl', 'stsd'])[0];\n      if (stsd) {\n        var sampleDescriptions = stsd.subarray(8); // gives the codec type string\n\n        track.codec = parseType$1(sampleDescriptions.subarray(4, 8));\n        var codecBox = findBox(sampleDescriptions, [track.codec])[0];\n        var codecConfig, codecConfigType;\n        if (codecBox) {\n          // https://tools.ietf.org/html/rfc6381#section-3.3\n          if (/^[asm]vc[1-9]$/i.test(track.codec)) {\n            // we don't need anything but the \"config\" parameter of the\n            // avc1 codecBox\n            codecConfig = codecBox.subarray(78);\n            codecConfigType = parseType$1(codecConfig.subarray(4, 8));\n            if (codecConfigType === 'avcC' && codecConfig.length > 11) {\n              track.codec += '.'; // left padded with zeroes for single digit hex\n              // profile idc\n\n              track.codec += toHexString(codecConfig[9]); // the byte containing the constraint_set flags\n\n              track.codec += toHexString(codecConfig[10]); // level idc\n\n              track.codec += toHexString(codecConfig[11]);\n            } else {\n              // TODO: show a warning that we couldn't parse the codec\n              // and are using the default\n              track.codec = 'avc1.4d400d';\n            }\n          } else if (/^mp4[a,v]$/i.test(track.codec)) {\n            // we do not need anything but the streamDescriptor of the mp4a codecBox\n            codecConfig = codecBox.subarray(28);\n            codecConfigType = parseType$1(codecConfig.subarray(4, 8));\n            if (codecConfigType === 'esds' && codecConfig.length > 20 && codecConfig[19] !== 0) {\n              track.codec += '.' + toHexString(codecConfig[19]); // this value is only a single digit\n\n              track.codec += '.' + toHexString(codecConfig[20] >>> 2 & 0x3f).replace(/^0/, '');\n            } else {\n              // TODO: show a warning that we couldn't parse the codec\n              // and are using the default\n              track.codec = 'mp4a.40.2';\n            }\n          } else {\n            // flac, opus, etc\n            track.codec = track.codec.toLowerCase();\n          }\n        }\n      }\n      var mdhd = findBox(trak, ['mdia', 'mdhd'])[0];\n      if (mdhd) {\n        track.timescale = getTimescaleFromMediaHeader(mdhd);\n      }\n      tracks.push(track);\n    });\n    return tracks;\n  };\n  /**\n   * Returns an array of emsg ID3 data from the provided segmentData.\n   * An offset can also be provided as the Latest Arrival Time to calculate \n   * the Event Start Time of v0 EMSG boxes. \n   * See: https://dashif-documents.azurewebsites.net/Events/master/event.html#Inband-event-timing\n   * \n   * @param {Uint8Array} segmentData the segment byte array.\n   * @param {number} offset the segment start time or Latest Arrival Time, \n   * @return {Object[]} an array of ID3 parsed from EMSG boxes\n   */\n\n  getEmsgID3 = function (segmentData, offset = 0) {\n    var emsgBoxes = findBox(segmentData, ['emsg']);\n    return emsgBoxes.map(data => {\n      var parsedBox = emsg.parseEmsgBox(new Uint8Array(data));\n      var parsedId3Frames = parseId3Frames(parsedBox.message_data);\n      return {\n        cueTime: emsg.scaleTime(parsedBox.presentation_time, parsedBox.timescale, parsedBox.presentation_time_delta, offset),\n        duration: emsg.scaleTime(parsedBox.event_duration, parsedBox.timescale),\n        frames: parsedId3Frames\n      };\n    });\n  };\n  var probe$2 = {\n    // export mp4 inspector's findBox and parseType for backwards compatibility\n    findBox: findBox,\n    parseType: parseType$1,\n    timescale: timescale,\n    startTime: startTime,\n    compositionStartTime: compositionStartTime,\n    videoTrackIds: getVideoTrackIds,\n    tracks: getTracks,\n    getTimescaleFromMediaHeader: getTimescaleFromMediaHeader,\n    getEmsgID3: getEmsgID3\n  };\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   *\n   * Utilities to detect basic properties and metadata about TS Segments.\n   */\n\n  var StreamTypes$1 = streamTypes;\n  var parsePid = function (packet) {\n    var pid = packet[1] & 0x1f;\n    pid <<= 8;\n    pid |= packet[2];\n    return pid;\n  };\n  var parsePayloadUnitStartIndicator = function (packet) {\n    return !!(packet[1] & 0x40);\n  };\n  var parseAdaptionField = function (packet) {\n    var offset = 0; // if an adaption field is present, its length is specified by the\n    // fifth byte of the TS packet header. The adaptation field is\n    // used to add stuffing to PES packets that don't fill a complete\n    // TS packet, and to specify some forms of timing and control data\n    // that we do not currently use.\n\n    if ((packet[3] & 0x30) >>> 4 > 0x01) {\n      offset += packet[4] + 1;\n    }\n    return offset;\n  };\n  var parseType = function (packet, pmtPid) {\n    var pid = parsePid(packet);\n    if (pid === 0) {\n      return 'pat';\n    } else if (pid === pmtPid) {\n      return 'pmt';\n    } else if (pmtPid) {\n      return 'pes';\n    }\n    return null;\n  };\n  var parsePat = function (packet) {\n    var pusi = parsePayloadUnitStartIndicator(packet);\n    var offset = 4 + parseAdaptionField(packet);\n    if (pusi) {\n      offset += packet[offset] + 1;\n    }\n    return (packet[offset + 10] & 0x1f) << 8 | packet[offset + 11];\n  };\n  var parsePmt = function (packet) {\n    var programMapTable = {};\n    var pusi = parsePayloadUnitStartIndicator(packet);\n    var payloadOffset = 4 + parseAdaptionField(packet);\n    if (pusi) {\n      payloadOffset += packet[payloadOffset] + 1;\n    } // PMTs can be sent ahead of the time when they should actually\n    // take effect. We don't believe this should ever be the case\n    // for HLS but we'll ignore \"forward\" PMT declarations if we see\n    // them. Future PMT declarations have the current_next_indicator\n    // set to zero.\n\n    if (!(packet[payloadOffset + 5] & 0x01)) {\n      return;\n    }\n    var sectionLength, tableEnd, programInfoLength; // the mapping table ends at the end of the current section\n\n    sectionLength = (packet[payloadOffset + 1] & 0x0f) << 8 | packet[payloadOffset + 2];\n    tableEnd = 3 + sectionLength - 4; // to determine where the table is, we have to figure out how\n    // long the program info descriptors are\n\n    programInfoLength = (packet[payloadOffset + 10] & 0x0f) << 8 | packet[payloadOffset + 11]; // advance the offset to the first entry in the mapping table\n\n    var offset = 12 + programInfoLength;\n    while (offset < tableEnd) {\n      var i = payloadOffset + offset; // add an entry that maps the elementary_pid to the stream_type\n\n      programMapTable[(packet[i + 1] & 0x1F) << 8 | packet[i + 2]] = packet[i]; // move to the next table entry\n      // skip past the elementary stream descriptors, if present\n\n      offset += ((packet[i + 3] & 0x0F) << 8 | packet[i + 4]) + 5;\n    }\n    return programMapTable;\n  };\n  var parsePesType = function (packet, programMapTable) {\n    var pid = parsePid(packet);\n    var type = programMapTable[pid];\n    switch (type) {\n      case StreamTypes$1.H264_STREAM_TYPE:\n        return 'video';\n      case StreamTypes$1.ADTS_STREAM_TYPE:\n        return 'audio';\n      case StreamTypes$1.METADATA_STREAM_TYPE:\n        return 'timed-metadata';\n      default:\n        return null;\n    }\n  };\n  var parsePesTime = function (packet) {\n    var pusi = parsePayloadUnitStartIndicator(packet);\n    if (!pusi) {\n      return null;\n    }\n    var offset = 4 + parseAdaptionField(packet);\n    if (offset >= packet.byteLength) {\n      // From the H 222.0 MPEG-TS spec\n      // \"For transport stream packets carrying PES packets, stuffing is needed when there\n      //  is insufficient PES packet data to completely fill the transport stream packet\n      //  payload bytes. Stuffing is accomplished by defining an adaptation field longer than\n      //  the sum of the lengths of the data elements in it, so that the payload bytes\n      //  remaining after the adaptation field exactly accommodates the available PES packet\n      //  data.\"\n      //\n      // If the offset is >= the length of the packet, then the packet contains no data\n      // and instead is just adaption field stuffing bytes\n      return null;\n    }\n    var pes = null;\n    var ptsDtsFlags; // PES packets may be annotated with a PTS value, or a PTS value\n    // and a DTS value. Determine what combination of values is\n    // available to work with.\n\n    ptsDtsFlags = packet[offset + 7]; // PTS and DTS are normally stored as a 33-bit number.  Javascript\n    // performs all bitwise operations on 32-bit integers but javascript\n    // supports a much greater range (52-bits) of integer using standard\n    // mathematical operations.\n    // We construct a 31-bit value using bitwise operators over the 31\n    // most significant bits and then multiply by 4 (equal to a left-shift\n    // of 2) before we add the final 2 least significant bits of the\n    // timestamp (equal to an OR.)\n\n    if (ptsDtsFlags & 0xC0) {\n      pes = {}; // the PTS and DTS are not written out directly. For information\n      // on how they are encoded, see\n      // http://dvd.sourceforge.net/dvdinfo/pes-hdr.html\n\n      pes.pts = (packet[offset + 9] & 0x0E) << 27 | (packet[offset + 10] & 0xFF) << 20 | (packet[offset + 11] & 0xFE) << 12 | (packet[offset + 12] & 0xFF) << 5 | (packet[offset + 13] & 0xFE) >>> 3;\n      pes.pts *= 4; // Left shift by 2\n\n      pes.pts += (packet[offset + 13] & 0x06) >>> 1; // OR by the two LSBs\n\n      pes.dts = pes.pts;\n      if (ptsDtsFlags & 0x40) {\n        pes.dts = (packet[offset + 14] & 0x0E) << 27 | (packet[offset + 15] & 0xFF) << 20 | (packet[offset + 16] & 0xFE) << 12 | (packet[offset + 17] & 0xFF) << 5 | (packet[offset + 18] & 0xFE) >>> 3;\n        pes.dts *= 4; // Left shift by 2\n\n        pes.dts += (packet[offset + 18] & 0x06) >>> 1; // OR by the two LSBs\n      }\n    }\n\n    return pes;\n  };\n  var parseNalUnitType = function (type) {\n    switch (type) {\n      case 0x05:\n        return 'slice_layer_without_partitioning_rbsp_idr';\n      case 0x06:\n        return 'sei_rbsp';\n      case 0x07:\n        return 'seq_parameter_set_rbsp';\n      case 0x08:\n        return 'pic_parameter_set_rbsp';\n      case 0x09:\n        return 'access_unit_delimiter_rbsp';\n      default:\n        return null;\n    }\n  };\n  var videoPacketContainsKeyFrame = function (packet) {\n    var offset = 4 + parseAdaptionField(packet);\n    var frameBuffer = packet.subarray(offset);\n    var frameI = 0;\n    var frameSyncPoint = 0;\n    var foundKeyFrame = false;\n    var nalType; // advance the sync point to a NAL start, if necessary\n\n    for (; frameSyncPoint < frameBuffer.byteLength - 3; frameSyncPoint++) {\n      if (frameBuffer[frameSyncPoint + 2] === 1) {\n        // the sync point is properly aligned\n        frameI = frameSyncPoint + 5;\n        break;\n      }\n    }\n    while (frameI < frameBuffer.byteLength) {\n      // look at the current byte to determine if we've hit the end of\n      // a NAL unit boundary\n      switch (frameBuffer[frameI]) {\n        case 0:\n          // skip past non-sync sequences\n          if (frameBuffer[frameI - 1] !== 0) {\n            frameI += 2;\n            break;\n          } else if (frameBuffer[frameI - 2] !== 0) {\n            frameI++;\n            break;\n          }\n          if (frameSyncPoint + 3 !== frameI - 2) {\n            nalType = parseNalUnitType(frameBuffer[frameSyncPoint + 3] & 0x1f);\n            if (nalType === 'slice_layer_without_partitioning_rbsp_idr') {\n              foundKeyFrame = true;\n            }\n          } // drop trailing zeroes\n\n          do {\n            frameI++;\n          } while (frameBuffer[frameI] !== 1 && frameI < frameBuffer.length);\n          frameSyncPoint = frameI - 2;\n          frameI += 3;\n          break;\n        case 1:\n          // skip past non-sync sequences\n          if (frameBuffer[frameI - 1] !== 0 || frameBuffer[frameI - 2] !== 0) {\n            frameI += 3;\n            break;\n          }\n          nalType = parseNalUnitType(frameBuffer[frameSyncPoint + 3] & 0x1f);\n          if (nalType === 'slice_layer_without_partitioning_rbsp_idr') {\n            foundKeyFrame = true;\n          }\n          frameSyncPoint = frameI - 2;\n          frameI += 3;\n          break;\n        default:\n          // the current byte isn't a one or zero, so it cannot be part\n          // of a sync sequence\n          frameI += 3;\n          break;\n      }\n    }\n    frameBuffer = frameBuffer.subarray(frameSyncPoint);\n    frameI -= frameSyncPoint;\n    frameSyncPoint = 0; // parse the final nal\n\n    if (frameBuffer && frameBuffer.byteLength > 3) {\n      nalType = parseNalUnitType(frameBuffer[frameSyncPoint + 3] & 0x1f);\n      if (nalType === 'slice_layer_without_partitioning_rbsp_idr') {\n        foundKeyFrame = true;\n      }\n    }\n    return foundKeyFrame;\n  };\n  var probe$1 = {\n    parseType: parseType,\n    parsePat: parsePat,\n    parsePmt: parsePmt,\n    parsePayloadUnitStartIndicator: parsePayloadUnitStartIndicator,\n    parsePesType: parsePesType,\n    parsePesTime: parsePesTime,\n    videoPacketContainsKeyFrame: videoPacketContainsKeyFrame\n  };\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   *\n   * Parse mpeg2 transport stream packets to extract basic timing information\n   */\n\n  var StreamTypes = streamTypes;\n  var handleRollover = timestampRolloverStream.handleRollover;\n  var probe = {};\n  probe.ts = probe$1;\n  probe.aac = utils;\n  var ONE_SECOND_IN_TS = clock$2.ONE_SECOND_IN_TS;\n  var MP2T_PACKET_LENGTH = 188,\n    // bytes\n    SYNC_BYTE = 0x47;\n  /**\n   * walks through segment data looking for pat and pmt packets to parse out\n   * program map table information\n   */\n\n  var parsePsi_ = function (bytes, pmt) {\n    var startIndex = 0,\n      endIndex = MP2T_PACKET_LENGTH,\n      packet,\n      type;\n    while (endIndex < bytes.byteLength) {\n      // Look for a pair of start and end sync bytes in the data..\n      if (bytes[startIndex] === SYNC_BYTE && bytes[endIndex] === SYNC_BYTE) {\n        // We found a packet\n        packet = bytes.subarray(startIndex, endIndex);\n        type = probe.ts.parseType(packet, pmt.pid);\n        switch (type) {\n          case 'pat':\n            pmt.pid = probe.ts.parsePat(packet);\n            break;\n          case 'pmt':\n            var table = probe.ts.parsePmt(packet);\n            pmt.table = pmt.table || {};\n            Object.keys(table).forEach(function (key) {\n              pmt.table[key] = table[key];\n            });\n            break;\n        }\n        startIndex += MP2T_PACKET_LENGTH;\n        endIndex += MP2T_PACKET_LENGTH;\n        continue;\n      } // If we get here, we have somehow become de-synchronized and we need to step\n      // forward one byte at a time until we find a pair of sync bytes that denote\n      // a packet\n\n      startIndex++;\n      endIndex++;\n    }\n  };\n  /**\n   * walks through the segment data from the start and end to get timing information\n   * for the first and last audio pes packets\n   */\n\n  var parseAudioPes_ = function (bytes, pmt, result) {\n    var startIndex = 0,\n      endIndex = MP2T_PACKET_LENGTH,\n      packet,\n      type,\n      pesType,\n      pusi,\n      parsed;\n    var endLoop = false; // Start walking from start of segment to get first audio packet\n\n    while (endIndex <= bytes.byteLength) {\n      // Look for a pair of start and end sync bytes in the data..\n      if (bytes[startIndex] === SYNC_BYTE && (bytes[endIndex] === SYNC_BYTE || endIndex === bytes.byteLength)) {\n        // We found a packet\n        packet = bytes.subarray(startIndex, endIndex);\n        type = probe.ts.parseType(packet, pmt.pid);\n        switch (type) {\n          case 'pes':\n            pesType = probe.ts.parsePesType(packet, pmt.table);\n            pusi = probe.ts.parsePayloadUnitStartIndicator(packet);\n            if (pesType === 'audio' && pusi) {\n              parsed = probe.ts.parsePesTime(packet);\n              if (parsed) {\n                parsed.type = 'audio';\n                result.audio.push(parsed);\n                endLoop = true;\n              }\n            }\n            break;\n        }\n        if (endLoop) {\n          break;\n        }\n        startIndex += MP2T_PACKET_LENGTH;\n        endIndex += MP2T_PACKET_LENGTH;\n        continue;\n      } // If we get here, we have somehow become de-synchronized and we need to step\n      // forward one byte at a time until we find a pair of sync bytes that denote\n      // a packet\n\n      startIndex++;\n      endIndex++;\n    } // Start walking from end of segment to get last audio packet\n\n    endIndex = bytes.byteLength;\n    startIndex = endIndex - MP2T_PACKET_LENGTH;\n    endLoop = false;\n    while (startIndex >= 0) {\n      // Look for a pair of start and end sync bytes in the data..\n      if (bytes[startIndex] === SYNC_BYTE && (bytes[endIndex] === SYNC_BYTE || endIndex === bytes.byteLength)) {\n        // We found a packet\n        packet = bytes.subarray(startIndex, endIndex);\n        type = probe.ts.parseType(packet, pmt.pid);\n        switch (type) {\n          case 'pes':\n            pesType = probe.ts.parsePesType(packet, pmt.table);\n            pusi = probe.ts.parsePayloadUnitStartIndicator(packet);\n            if (pesType === 'audio' && pusi) {\n              parsed = probe.ts.parsePesTime(packet);\n              if (parsed) {\n                parsed.type = 'audio';\n                result.audio.push(parsed);\n                endLoop = true;\n              }\n            }\n            break;\n        }\n        if (endLoop) {\n          break;\n        }\n        startIndex -= MP2T_PACKET_LENGTH;\n        endIndex -= MP2T_PACKET_LENGTH;\n        continue;\n      } // If we get here, we have somehow become de-synchronized and we need to step\n      // forward one byte at a time until we find a pair of sync bytes that denote\n      // a packet\n\n      startIndex--;\n      endIndex--;\n    }\n  };\n  /**\n   * walks through the segment data from the start and end to get timing information\n   * for the first and last video pes packets as well as timing information for the first\n   * key frame.\n   */\n\n  var parseVideoPes_ = function (bytes, pmt, result) {\n    var startIndex = 0,\n      endIndex = MP2T_PACKET_LENGTH,\n      packet,\n      type,\n      pesType,\n      pusi,\n      parsed,\n      frame,\n      i,\n      pes;\n    var endLoop = false;\n    var currentFrame = {\n      data: [],\n      size: 0\n    }; // Start walking from start of segment to get first video packet\n\n    while (endIndex < bytes.byteLength) {\n      // Look for a pair of start and end sync bytes in the data..\n      if (bytes[startIndex] === SYNC_BYTE && bytes[endIndex] === SYNC_BYTE) {\n        // We found a packet\n        packet = bytes.subarray(startIndex, endIndex);\n        type = probe.ts.parseType(packet, pmt.pid);\n        switch (type) {\n          case 'pes':\n            pesType = probe.ts.parsePesType(packet, pmt.table);\n            pusi = probe.ts.parsePayloadUnitStartIndicator(packet);\n            if (pesType === 'video') {\n              if (pusi && !endLoop) {\n                parsed = probe.ts.parsePesTime(packet);\n                if (parsed) {\n                  parsed.type = 'video';\n                  result.video.push(parsed);\n                  endLoop = true;\n                }\n              }\n              if (!result.firstKeyFrame) {\n                if (pusi) {\n                  if (currentFrame.size !== 0) {\n                    frame = new Uint8Array(currentFrame.size);\n                    i = 0;\n                    while (currentFrame.data.length) {\n                      pes = currentFrame.data.shift();\n                      frame.set(pes, i);\n                      i += pes.byteLength;\n                    }\n                    if (probe.ts.videoPacketContainsKeyFrame(frame)) {\n                      var firstKeyFrame = probe.ts.parsePesTime(frame); // PTS/DTS may not be available. Simply *not* setting\n                      // the keyframe seems to work fine with HLS playback\n                      // and definitely preferable to a crash with TypeError...\n\n                      if (firstKeyFrame) {\n                        result.firstKeyFrame = firstKeyFrame;\n                        result.firstKeyFrame.type = 'video';\n                      } else {\n                        // eslint-disable-next-line\n                        console.warn('Failed to extract PTS/DTS from PES at first keyframe. ' + 'This could be an unusual TS segment, or else mux.js did not ' + 'parse your TS segment correctly. If you know your TS ' + 'segments do contain PTS/DTS on keyframes please file a bug ' + 'report! You can try ffprobe to double check for yourself.');\n                      }\n                    }\n                    currentFrame.size = 0;\n                  }\n                }\n                currentFrame.data.push(packet);\n                currentFrame.size += packet.byteLength;\n              }\n            }\n            break;\n        }\n        if (endLoop && result.firstKeyFrame) {\n          break;\n        }\n        startIndex += MP2T_PACKET_LENGTH;\n        endIndex += MP2T_PACKET_LENGTH;\n        continue;\n      } // If we get here, we have somehow become de-synchronized and we need to step\n      // forward one byte at a time until we find a pair of sync bytes that denote\n      // a packet\n\n      startIndex++;\n      endIndex++;\n    } // Start walking from end of segment to get last video packet\n\n    endIndex = bytes.byteLength;\n    startIndex = endIndex - MP2T_PACKET_LENGTH;\n    endLoop = false;\n    while (startIndex >= 0) {\n      // Look for a pair of start and end sync bytes in the data..\n      if (bytes[startIndex] === SYNC_BYTE && bytes[endIndex] === SYNC_BYTE) {\n        // We found a packet\n        packet = bytes.subarray(startIndex, endIndex);\n        type = probe.ts.parseType(packet, pmt.pid);\n        switch (type) {\n          case 'pes':\n            pesType = probe.ts.parsePesType(packet, pmt.table);\n            pusi = probe.ts.parsePayloadUnitStartIndicator(packet);\n            if (pesType === 'video' && pusi) {\n              parsed = probe.ts.parsePesTime(packet);\n              if (parsed) {\n                parsed.type = 'video';\n                result.video.push(parsed);\n                endLoop = true;\n              }\n            }\n            break;\n        }\n        if (endLoop) {\n          break;\n        }\n        startIndex -= MP2T_PACKET_LENGTH;\n        endIndex -= MP2T_PACKET_LENGTH;\n        continue;\n      } // If we get here, we have somehow become de-synchronized and we need to step\n      // forward one byte at a time until we find a pair of sync bytes that denote\n      // a packet\n\n      startIndex--;\n      endIndex--;\n    }\n  };\n  /**\n   * Adjusts the timestamp information for the segment to account for\n   * rollover and convert to seconds based on pes packet timescale (90khz clock)\n   */\n\n  var adjustTimestamp_ = function (segmentInfo, baseTimestamp) {\n    if (segmentInfo.audio && segmentInfo.audio.length) {\n      var audioBaseTimestamp = baseTimestamp;\n      if (typeof audioBaseTimestamp === 'undefined' || isNaN(audioBaseTimestamp)) {\n        audioBaseTimestamp = segmentInfo.audio[0].dts;\n      }\n      segmentInfo.audio.forEach(function (info) {\n        info.dts = handleRollover(info.dts, audioBaseTimestamp);\n        info.pts = handleRollover(info.pts, audioBaseTimestamp); // time in seconds\n\n        info.dtsTime = info.dts / ONE_SECOND_IN_TS;\n        info.ptsTime = info.pts / ONE_SECOND_IN_TS;\n      });\n    }\n    if (segmentInfo.video && segmentInfo.video.length) {\n      var videoBaseTimestamp = baseTimestamp;\n      if (typeof videoBaseTimestamp === 'undefined' || isNaN(videoBaseTimestamp)) {\n        videoBaseTimestamp = segmentInfo.video[0].dts;\n      }\n      segmentInfo.video.forEach(function (info) {\n        info.dts = handleRollover(info.dts, videoBaseTimestamp);\n        info.pts = handleRollover(info.pts, videoBaseTimestamp); // time in seconds\n\n        info.dtsTime = info.dts / ONE_SECOND_IN_TS;\n        info.ptsTime = info.pts / ONE_SECOND_IN_TS;\n      });\n      if (segmentInfo.firstKeyFrame) {\n        var frame = segmentInfo.firstKeyFrame;\n        frame.dts = handleRollover(frame.dts, videoBaseTimestamp);\n        frame.pts = handleRollover(frame.pts, videoBaseTimestamp); // time in seconds\n\n        frame.dtsTime = frame.dts / ONE_SECOND_IN_TS;\n        frame.ptsTime = frame.pts / ONE_SECOND_IN_TS;\n      }\n    }\n  };\n  /**\n   * inspects the aac data stream for start and end time information\n   */\n\n  var inspectAac_ = function (bytes) {\n    var endLoop = false,\n      audioCount = 0,\n      sampleRate = null,\n      timestamp = null,\n      frameSize = 0,\n      byteIndex = 0,\n      packet;\n    while (bytes.length - byteIndex >= 3) {\n      var type = probe.aac.parseType(bytes, byteIndex);\n      switch (type) {\n        case 'timed-metadata':\n          // Exit early because we don't have enough to parse\n          // the ID3 tag header\n          if (bytes.length - byteIndex < 10) {\n            endLoop = true;\n            break;\n          }\n          frameSize = probe.aac.parseId3TagSize(bytes, byteIndex); // Exit early if we don't have enough in the buffer\n          // to emit a full packet\n\n          if (frameSize > bytes.length) {\n            endLoop = true;\n            break;\n          }\n          if (timestamp === null) {\n            packet = bytes.subarray(byteIndex, byteIndex + frameSize);\n            timestamp = probe.aac.parseAacTimestamp(packet);\n          }\n          byteIndex += frameSize;\n          break;\n        case 'audio':\n          // Exit early because we don't have enough to parse\n          // the ADTS frame header\n          if (bytes.length - byteIndex < 7) {\n            endLoop = true;\n            break;\n          }\n          frameSize = probe.aac.parseAdtsSize(bytes, byteIndex); // Exit early if we don't have enough in the buffer\n          // to emit a full packet\n\n          if (frameSize > bytes.length) {\n            endLoop = true;\n            break;\n          }\n          if (sampleRate === null) {\n            packet = bytes.subarray(byteIndex, byteIndex + frameSize);\n            sampleRate = probe.aac.parseSampleRate(packet);\n          }\n          audioCount++;\n          byteIndex += frameSize;\n          break;\n        default:\n          byteIndex++;\n          break;\n      }\n      if (endLoop) {\n        return null;\n      }\n    }\n    if (sampleRate === null || timestamp === null) {\n      return null;\n    }\n    var audioTimescale = ONE_SECOND_IN_TS / sampleRate;\n    var result = {\n      audio: [{\n        type: 'audio',\n        dts: timestamp,\n        pts: timestamp\n      }, {\n        type: 'audio',\n        dts: timestamp + audioCount * 1024 * audioTimescale,\n        pts: timestamp + audioCount * 1024 * audioTimescale\n      }]\n    };\n    return result;\n  };\n  /**\n   * inspects the transport stream segment data for start and end time information\n   * of the audio and video tracks (when present) as well as the first key frame's\n   * start time.\n   */\n\n  var inspectTs_ = function (bytes) {\n    var pmt = {\n      pid: null,\n      table: null\n    };\n    var result = {};\n    parsePsi_(bytes, pmt);\n    for (var pid in pmt.table) {\n      if (pmt.table.hasOwnProperty(pid)) {\n        var type = pmt.table[pid];\n        switch (type) {\n          case StreamTypes.H264_STREAM_TYPE:\n            result.video = [];\n            parseVideoPes_(bytes, pmt, result);\n            if (result.video.length === 0) {\n              delete result.video;\n            }\n            break;\n          case StreamTypes.ADTS_STREAM_TYPE:\n            result.audio = [];\n            parseAudioPes_(bytes, pmt, result);\n            if (result.audio.length === 0) {\n              delete result.audio;\n            }\n            break;\n        }\n      }\n    }\n    return result;\n  };\n  /**\n   * Inspects segment byte data and returns an object with start and end timing information\n   *\n   * @param {Uint8Array} bytes The segment byte data\n   * @param {Number} baseTimestamp Relative reference timestamp used when adjusting frame\n   *  timestamps for rollover. This value must be in 90khz clock.\n   * @return {Object} Object containing start and end frame timing info of segment.\n   */\n\n  var inspect = function (bytes, baseTimestamp) {\n    var isAacData = probe.aac.isLikelyAacData(bytes);\n    var result;\n    if (isAacData) {\n      result = inspectAac_(bytes);\n    } else {\n      result = inspectTs_(bytes);\n    }\n    if (!result || !result.audio && !result.video) {\n      return null;\n    }\n    adjustTimestamp_(result, baseTimestamp);\n    return result;\n  };\n  var tsInspector = {\n    inspect: inspect,\n    parseAudioPes_: parseAudioPes_\n  };\n  /* global self */\n\n  /**\n   * Re-emits transmuxer events by converting them into messages to the\n   * world outside the worker.\n   *\n   * @param {Object} transmuxer the transmuxer to wire events on\n   * @private\n   */\n\n  const wireTransmuxerEvents = function (self, transmuxer) {\n    transmuxer.on('data', function (segment) {\n      // transfer ownership of the underlying ArrayBuffer\n      // instead of doing a copy to save memory\n      // ArrayBuffers are transferable but generic TypedArrays are not\n      // @link https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers#Passing_data_by_transferring_ownership_(transferable_objects)\n      const initArray = segment.initSegment;\n      segment.initSegment = {\n        data: initArray.buffer,\n        byteOffset: initArray.byteOffset,\n        byteLength: initArray.byteLength\n      };\n      const typedArray = segment.data;\n      segment.data = typedArray.buffer;\n      self.postMessage({\n        action: 'data',\n        segment,\n        byteOffset: typedArray.byteOffset,\n        byteLength: typedArray.byteLength\n      }, [segment.data]);\n    });\n    transmuxer.on('done', function (data) {\n      self.postMessage({\n        action: 'done'\n      });\n    });\n    transmuxer.on('gopInfo', function (gopInfo) {\n      self.postMessage({\n        action: 'gopInfo',\n        gopInfo\n      });\n    });\n    transmuxer.on('videoSegmentTimingInfo', function (timingInfo) {\n      const videoSegmentTimingInfo = {\n        start: {\n          decode: clock$2.videoTsToSeconds(timingInfo.start.dts),\n          presentation: clock$2.videoTsToSeconds(timingInfo.start.pts)\n        },\n        end: {\n          decode: clock$2.videoTsToSeconds(timingInfo.end.dts),\n          presentation: clock$2.videoTsToSeconds(timingInfo.end.pts)\n        },\n        baseMediaDecodeTime: clock$2.videoTsToSeconds(timingInfo.baseMediaDecodeTime)\n      };\n      if (timingInfo.prependedContentDuration) {\n        videoSegmentTimingInfo.prependedContentDuration = clock$2.videoTsToSeconds(timingInfo.prependedContentDuration);\n      }\n      self.postMessage({\n        action: 'videoSegmentTimingInfo',\n        videoSegmentTimingInfo\n      });\n    });\n    transmuxer.on('audioSegmentTimingInfo', function (timingInfo) {\n      // Note that all times for [audio/video]SegmentTimingInfo events are in video clock\n      const audioSegmentTimingInfo = {\n        start: {\n          decode: clock$2.videoTsToSeconds(timingInfo.start.dts),\n          presentation: clock$2.videoTsToSeconds(timingInfo.start.pts)\n        },\n        end: {\n          decode: clock$2.videoTsToSeconds(timingInfo.end.dts),\n          presentation: clock$2.videoTsToSeconds(timingInfo.end.pts)\n        },\n        baseMediaDecodeTime: clock$2.videoTsToSeconds(timingInfo.baseMediaDecodeTime)\n      };\n      if (timingInfo.prependedContentDuration) {\n        audioSegmentTimingInfo.prependedContentDuration = clock$2.videoTsToSeconds(timingInfo.prependedContentDuration);\n      }\n      self.postMessage({\n        action: 'audioSegmentTimingInfo',\n        audioSegmentTimingInfo\n      });\n    });\n    transmuxer.on('id3Frame', function (id3Frame) {\n      self.postMessage({\n        action: 'id3Frame',\n        id3Frame\n      });\n    });\n    transmuxer.on('caption', function (caption) {\n      self.postMessage({\n        action: 'caption',\n        caption\n      });\n    });\n    transmuxer.on('trackinfo', function (trackInfo) {\n      self.postMessage({\n        action: 'trackinfo',\n        trackInfo\n      });\n    });\n    transmuxer.on('audioTimingInfo', function (audioTimingInfo) {\n      // convert to video TS since we prioritize video time over audio\n      self.postMessage({\n        action: 'audioTimingInfo',\n        audioTimingInfo: {\n          start: clock$2.videoTsToSeconds(audioTimingInfo.start),\n          end: clock$2.videoTsToSeconds(audioTimingInfo.end)\n        }\n      });\n    });\n    transmuxer.on('videoTimingInfo', function (videoTimingInfo) {\n      self.postMessage({\n        action: 'videoTimingInfo',\n        videoTimingInfo: {\n          start: clock$2.videoTsToSeconds(videoTimingInfo.start),\n          end: clock$2.videoTsToSeconds(videoTimingInfo.end)\n        }\n      });\n    });\n    transmuxer.on('log', function (log) {\n      self.postMessage({\n        action: 'log',\n        log\n      });\n    });\n  };\n  /**\n   * All incoming messages route through this hash. If no function exists\n   * to handle an incoming message, then we ignore the message.\n   *\n   * @class MessageHandlers\n   * @param {Object} options the options to initialize with\n   */\n\n  class MessageHandlers {\n    constructor(self, options) {\n      this.options = options || {};\n      this.self = self;\n      this.init();\n    }\n    /**\n     * initialize our web worker and wire all the events.\n     */\n\n    init() {\n      if (this.transmuxer) {\n        this.transmuxer.dispose();\n      }\n      this.transmuxer = new transmuxer.Transmuxer(this.options);\n      wireTransmuxerEvents(this.self, this.transmuxer);\n    }\n    pushMp4Captions(data) {\n      if (!this.captionParser) {\n        this.captionParser = new captionParser();\n        this.captionParser.init();\n      }\n      const segment = new Uint8Array(data.data, data.byteOffset, data.byteLength);\n      const parsed = this.captionParser.parse(segment, data.trackIds, data.timescales);\n      this.self.postMessage({\n        action: 'mp4Captions',\n        captions: parsed && parsed.captions || [],\n        logs: parsed && parsed.logs || [],\n        data: segment.buffer\n      }, [segment.buffer]);\n    }\n    probeMp4StartTime({\n      timescales,\n      data\n    }) {\n      const startTime = probe$2.startTime(timescales, data);\n      this.self.postMessage({\n        action: 'probeMp4StartTime',\n        startTime,\n        data\n      }, [data.buffer]);\n    }\n    probeMp4Tracks({\n      data\n    }) {\n      const tracks = probe$2.tracks(data);\n      this.self.postMessage({\n        action: 'probeMp4Tracks',\n        tracks,\n        data\n      }, [data.buffer]);\n    }\n    /**\n     * Probes an mp4 segment for EMSG boxes containing ID3 data.\n     * https://aomediacodec.github.io/id3-emsg/\n     *\n     * @param {Uint8Array} data segment data\n     * @param {number} offset segment start time\n     * @return {Object[]} an array of ID3 frames\n     */\n\n    probeEmsgID3({\n      data,\n      offset\n    }) {\n      const id3Frames = probe$2.getEmsgID3(data, offset);\n      this.self.postMessage({\n        action: 'probeEmsgID3',\n        id3Frames,\n        emsgData: data\n      }, [data.buffer]);\n    }\n    /**\n     * Probe an mpeg2-ts segment to determine the start time of the segment in it's\n     * internal \"media time,\" as well as whether it contains video and/or audio.\n     *\n     * @private\n     * @param {Uint8Array} bytes - segment bytes\n     * @param {number} baseStartTime\n     *        Relative reference timestamp used when adjusting frame timestamps for rollover.\n     *        This value should be in seconds, as it's converted to a 90khz clock within the\n     *        function body.\n     * @return {Object} The start time of the current segment in \"media time\" as well as\n     *                  whether it contains video and/or audio\n     */\n\n    probeTs({\n      data,\n      baseStartTime\n    }) {\n      const tsStartTime = typeof baseStartTime === 'number' && !isNaN(baseStartTime) ? baseStartTime * clock$2.ONE_SECOND_IN_TS : void 0;\n      const timeInfo = tsInspector.inspect(data, tsStartTime);\n      let result = null;\n      if (timeInfo) {\n        result = {\n          // each type's time info comes back as an array of 2 times, start and end\n          hasVideo: timeInfo.video && timeInfo.video.length === 2 || false,\n          hasAudio: timeInfo.audio && timeInfo.audio.length === 2 || false\n        };\n        if (result.hasVideo) {\n          result.videoStart = timeInfo.video[0].ptsTime;\n        }\n        if (result.hasAudio) {\n          result.audioStart = timeInfo.audio[0].ptsTime;\n        }\n      }\n      this.self.postMessage({\n        action: 'probeTs',\n        result,\n        data\n      }, [data.buffer]);\n    }\n    clearAllMp4Captions() {\n      if (this.captionParser) {\n        this.captionParser.clearAllCaptions();\n      }\n    }\n    clearParsedMp4Captions() {\n      if (this.captionParser) {\n        this.captionParser.clearParsedCaptions();\n      }\n    }\n    /**\n     * Adds data (a ts segment) to the start of the transmuxer pipeline for\n     * processing.\n     *\n     * @param {ArrayBuffer} data data to push into the muxer\n     */\n\n    push(data) {\n      // Cast array buffer to correct type for transmuxer\n      const segment = new Uint8Array(data.data, data.byteOffset, data.byteLength);\n      this.transmuxer.push(segment);\n    }\n    /**\n     * Recreate the transmuxer so that the next segment added via `push`\n     * start with a fresh transmuxer.\n     */\n\n    reset() {\n      this.transmuxer.reset();\n    }\n    /**\n     * Set the value that will be used as the `baseMediaDecodeTime` time for the\n     * next segment pushed in. Subsequent segments will have their `baseMediaDecodeTime`\n     * set relative to the first based on the PTS values.\n     *\n     * @param {Object} data used to set the timestamp offset in the muxer\n     */\n\n    setTimestampOffset(data) {\n      const timestampOffset = data.timestampOffset || 0;\n      this.transmuxer.setBaseMediaDecodeTime(Math.round(clock$2.secondsToVideoTs(timestampOffset)));\n    }\n    setAudioAppendStart(data) {\n      this.transmuxer.setAudioAppendStart(Math.ceil(clock$2.secondsToVideoTs(data.appendStart)));\n    }\n    setRemux(data) {\n      this.transmuxer.setRemux(data.remux);\n    }\n    /**\n     * Forces the pipeline to finish processing the last segment and emit it's\n     * results.\n     *\n     * @param {Object} data event data, not really used\n     */\n\n    flush(data) {\n      this.transmuxer.flush(); // transmuxed done action is fired after both audio/video pipelines are flushed\n\n      self.postMessage({\n        action: 'done',\n        type: 'transmuxed'\n      });\n    }\n    endTimeline() {\n      this.transmuxer.endTimeline(); // transmuxed endedtimeline action is fired after both audio/video pipelines end their\n      // timelines\n\n      self.postMessage({\n        action: 'endedtimeline',\n        type: 'transmuxed'\n      });\n    }\n    alignGopsWith(data) {\n      this.transmuxer.alignGopsWith(data.gopsToAlignWith.slice());\n    }\n  }\n  /**\n   * Our web worker interface so that things can talk to mux.js\n   * that will be running in a web worker. the scope is passed to this by\n   * webworkify.\n   *\n   * @param {Object} self the scope for the web worker\n   */\n\n  self.onmessage = function (event) {\n    if (event.data.action === 'init' && event.data.options) {\n      this.messageHandlers = new MessageHandlers(self, event.data.options);\n      return;\n    }\n    if (!this.messageHandlers) {\n      this.messageHandlers = new MessageHandlers(self);\n    }\n    if (event.data && event.data.action && event.data.action !== 'init') {\n      if (this.messageHandlers[event.data.action]) {\n        this.messageHandlers[event.data.action](event.data);\n      }\n    }\n  };\n}));\nvar TransmuxWorker = factory(workerCode$1);\n/* rollup-plugin-worker-factory end for worker!/home/runner/work/http-streaming/http-streaming/src/transmuxer-worker.js */\n\nconst handleData_ = (event, transmuxedData, callback) => {\n  const {\n    type,\n    initSegment,\n    captions,\n    captionStreams,\n    metadata,\n    videoFrameDtsTime,\n    videoFramePtsTime\n  } = event.data.segment;\n  transmuxedData.buffer.push({\n    captions,\n    captionStreams,\n    metadata\n  });\n  const boxes = event.data.segment.boxes || {\n    data: event.data.segment.data\n  };\n  const result = {\n    type,\n    // cast ArrayBuffer to TypedArray\n    data: new Uint8Array(boxes.data, boxes.data.byteOffset, boxes.data.byteLength),\n    initSegment: new Uint8Array(initSegment.data, initSegment.byteOffset, initSegment.byteLength)\n  };\n  if (typeof videoFrameDtsTime !== 'undefined') {\n    result.videoFrameDtsTime = videoFrameDtsTime;\n  }\n  if (typeof videoFramePtsTime !== 'undefined') {\n    result.videoFramePtsTime = videoFramePtsTime;\n  }\n  callback(result);\n};\nconst handleDone_ = ({\n  transmuxedData,\n  callback\n}) => {\n  // Previously we only returned data on data events,\n  // not on done events. Clear out the buffer to keep that consistent.\n  transmuxedData.buffer = []; // all buffers should have been flushed from the muxer, so start processing anything we\n  // have received\n\n  callback(transmuxedData);\n};\nconst handleGopInfo_ = (event, transmuxedData) => {\n  transmuxedData.gopInfo = event.data.gopInfo;\n};\nconst processTransmux = options => {\n  const {\n    transmuxer,\n    bytes,\n    audioAppendStart,\n    gopsToAlignWith,\n    remux,\n    onData,\n    onTrackInfo,\n    onAudioTimingInfo,\n    onVideoTimingInfo,\n    onVideoSegmentTimingInfo,\n    onAudioSegmentTimingInfo,\n    onId3,\n    onCaptions,\n    onDone,\n    onEndedTimeline,\n    onTransmuxerLog,\n    isEndOfTimeline\n  } = options;\n  const transmuxedData = {\n    buffer: []\n  };\n  let waitForEndedTimelineEvent = isEndOfTimeline;\n  const handleMessage = event => {\n    if (transmuxer.currentTransmux !== options) {\n      // disposed\n      return;\n    }\n    if (event.data.action === 'data') {\n      handleData_(event, transmuxedData, onData);\n    }\n    if (event.data.action === 'trackinfo') {\n      onTrackInfo(event.data.trackInfo);\n    }\n    if (event.data.action === 'gopInfo') {\n      handleGopInfo_(event, transmuxedData);\n    }\n    if (event.data.action === 'audioTimingInfo') {\n      onAudioTimingInfo(event.data.audioTimingInfo);\n    }\n    if (event.data.action === 'videoTimingInfo') {\n      onVideoTimingInfo(event.data.videoTimingInfo);\n    }\n    if (event.data.action === 'videoSegmentTimingInfo') {\n      onVideoSegmentTimingInfo(event.data.videoSegmentTimingInfo);\n    }\n    if (event.data.action === 'audioSegmentTimingInfo') {\n      onAudioSegmentTimingInfo(event.data.audioSegmentTimingInfo);\n    }\n    if (event.data.action === 'id3Frame') {\n      onId3([event.data.id3Frame], event.data.id3Frame.dispatchType);\n    }\n    if (event.data.action === 'caption') {\n      onCaptions(event.data.caption);\n    }\n    if (event.data.action === 'endedtimeline') {\n      waitForEndedTimelineEvent = false;\n      onEndedTimeline();\n    }\n    if (event.data.action === 'log') {\n      onTransmuxerLog(event.data.log);\n    } // wait for the transmuxed event since we may have audio and video\n\n    if (event.data.type !== 'transmuxed') {\n      return;\n    } // If the \"endedtimeline\" event has not yet fired, and this segment represents the end\n    // of a timeline, that means there may still be data events before the segment\n    // processing can be considerred complete. In that case, the final event should be\n    // an \"endedtimeline\" event with the type \"transmuxed.\"\n\n    if (waitForEndedTimelineEvent) {\n      return;\n    }\n    transmuxer.onmessage = null;\n    handleDone_({\n      transmuxedData,\n      callback: onDone\n    });\n    /* eslint-disable no-use-before-define */\n\n    dequeue(transmuxer);\n    /* eslint-enable */\n  };\n\n  transmuxer.onmessage = handleMessage;\n  if (audioAppendStart) {\n    transmuxer.postMessage({\n      action: 'setAudioAppendStart',\n      appendStart: audioAppendStart\n    });\n  } // allow empty arrays to be passed to clear out GOPs\n\n  if (Array.isArray(gopsToAlignWith)) {\n    transmuxer.postMessage({\n      action: 'alignGopsWith',\n      gopsToAlignWith\n    });\n  }\n  if (typeof remux !== 'undefined') {\n    transmuxer.postMessage({\n      action: 'setRemux',\n      remux\n    });\n  }\n  if (bytes.byteLength) {\n    const buffer = bytes instanceof ArrayBuffer ? bytes : bytes.buffer;\n    const byteOffset = bytes instanceof ArrayBuffer ? 0 : bytes.byteOffset;\n    transmuxer.postMessage({\n      action: 'push',\n      // Send the typed-array of data as an ArrayBuffer so that\n      // it can be sent as a \"Transferable\" and avoid the costly\n      // memory copy\n      data: buffer,\n      // To recreate the original typed-array, we need information\n      // about what portion of the ArrayBuffer it was a view into\n      byteOffset,\n      byteLength: bytes.byteLength\n    }, [buffer]);\n  }\n  if (isEndOfTimeline) {\n    transmuxer.postMessage({\n      action: 'endTimeline'\n    });\n  } // even if we didn't push any bytes, we have to make sure we flush in case we reached\n  // the end of the segment\n\n  transmuxer.postMessage({\n    action: 'flush'\n  });\n};\nconst dequeue = transmuxer => {\n  transmuxer.currentTransmux = null;\n  if (transmuxer.transmuxQueue.length) {\n    transmuxer.currentTransmux = transmuxer.transmuxQueue.shift();\n    if (typeof transmuxer.currentTransmux === 'function') {\n      transmuxer.currentTransmux();\n    } else {\n      processTransmux(transmuxer.currentTransmux);\n    }\n  }\n};\nconst processAction = (transmuxer, action) => {\n  transmuxer.postMessage({\n    action\n  });\n  dequeue(transmuxer);\n};\nconst enqueueAction = (action, transmuxer) => {\n  if (!transmuxer.currentTransmux) {\n    transmuxer.currentTransmux = action;\n    processAction(transmuxer, action);\n    return;\n  }\n  transmuxer.transmuxQueue.push(processAction.bind(null, transmuxer, action));\n};\nconst reset = transmuxer => {\n  enqueueAction('reset', transmuxer);\n};\nconst endTimeline = transmuxer => {\n  enqueueAction('endTimeline', transmuxer);\n};\nconst transmux = options => {\n  if (!options.transmuxer.currentTransmux) {\n    options.transmuxer.currentTransmux = options;\n    processTransmux(options);\n    return;\n  }\n  options.transmuxer.transmuxQueue.push(options);\n};\nconst createTransmuxer = options => {\n  const transmuxer = new TransmuxWorker();\n  transmuxer.currentTransmux = null;\n  transmuxer.transmuxQueue = [];\n  const term = transmuxer.terminate;\n  transmuxer.terminate = () => {\n    transmuxer.currentTransmux = null;\n    transmuxer.transmuxQueue.length = 0;\n    return term.call(transmuxer);\n  };\n  transmuxer.postMessage({\n    action: 'init',\n    options\n  });\n  return transmuxer;\n};\nvar segmentTransmuxer = {\n  reset,\n  endTimeline,\n  transmux,\n  createTransmuxer\n};\nconst workerCallback = function (options) {\n  const transmuxer = options.transmuxer;\n  const endAction = options.endAction || options.action;\n  const callback = options.callback;\n  const message = _extends({}, options, {\n    endAction: null,\n    transmuxer: null,\n    callback: null\n  });\n  const listenForEndEvent = event => {\n    if (event.data.action !== endAction) {\n      return;\n    }\n    transmuxer.removeEventListener('message', listenForEndEvent); // transfer ownership of bytes back to us.\n\n    if (event.data.data) {\n      event.data.data = new Uint8Array(event.data.data, options.byteOffset || 0, options.byteLength || event.data.data.byteLength);\n      if (options.data) {\n        options.data = event.data.data;\n      }\n    }\n    callback(event.data);\n  };\n  transmuxer.addEventListener('message', listenForEndEvent);\n  if (options.data) {\n    const isArrayBuffer = options.data instanceof ArrayBuffer;\n    message.byteOffset = isArrayBuffer ? 0 : options.data.byteOffset;\n    message.byteLength = options.data.byteLength;\n    const transfers = [isArrayBuffer ? options.data : options.data.buffer];\n    transmuxer.postMessage(message, transfers);\n  } else {\n    transmuxer.postMessage(message);\n  }\n};\nconst REQUEST_ERRORS = {\n  FAILURE: 2,\n  TIMEOUT: -101,\n  ABORTED: -102\n};\n/**\n * Abort all requests\n *\n * @param {Object} activeXhrs - an object that tracks all XHR requests\n */\n\nconst abortAll = activeXhrs => {\n  activeXhrs.forEach(xhr => {\n    xhr.abort();\n  });\n};\n/**\n * Gather important bandwidth stats once a request has completed\n *\n * @param {Object} request - the XHR request from which to gather stats\n */\n\nconst getRequestStats = request => {\n  return {\n    bandwidth: request.bandwidth,\n    bytesReceived: request.bytesReceived || 0,\n    roundTripTime: request.roundTripTime || 0\n  };\n};\n/**\n * If possible gather bandwidth stats as a request is in\n * progress\n *\n * @param {Event} progressEvent - an event object from an XHR's progress event\n */\n\nconst getProgressStats = progressEvent => {\n  const request = progressEvent.target;\n  const roundTripTime = Date.now() - request.requestTime;\n  const stats = {\n    bandwidth: Infinity,\n    bytesReceived: 0,\n    roundTripTime: roundTripTime || 0\n  };\n  stats.bytesReceived = progressEvent.loaded; // This can result in Infinity if stats.roundTripTime is 0 but that is ok\n  // because we should only use bandwidth stats on progress to determine when\n  // abort a request early due to insufficient bandwidth\n\n  stats.bandwidth = Math.floor(stats.bytesReceived / stats.roundTripTime * 8 * 1000);\n  return stats;\n};\n/**\n * Handle all error conditions in one place and return an object\n * with all the information\n *\n * @param {Error|null} error - if non-null signals an error occured with the XHR\n * @param {Object} request -  the XHR request that possibly generated the error\n */\n\nconst handleErrors = (error, request) => {\n  if (request.timedout) {\n    return {\n      status: request.status,\n      message: 'HLS request timed-out at URL: ' + request.uri,\n      code: REQUEST_ERRORS.TIMEOUT,\n      xhr: request\n    };\n  }\n  if (request.aborted) {\n    return {\n      status: request.status,\n      message: 'HLS request aborted at URL: ' + request.uri,\n      code: REQUEST_ERRORS.ABORTED,\n      xhr: request\n    };\n  }\n  if (error) {\n    return {\n      status: request.status,\n      message: 'HLS request errored at URL: ' + request.uri,\n      code: REQUEST_ERRORS.FAILURE,\n      xhr: request\n    };\n  }\n  if (request.responseType === 'arraybuffer' && request.response.byteLength === 0) {\n    return {\n      status: request.status,\n      message: 'Empty HLS response at URL: ' + request.uri,\n      code: REQUEST_ERRORS.FAILURE,\n      xhr: request\n    };\n  }\n  return null;\n};\n/**\n * Handle responses for key data and convert the key data to the correct format\n * for the decryption step later\n *\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Array} objects - objects to add the key bytes to.\n * @param {Function} finishProcessingFn - a callback to execute to continue processing\n *                                        this request\n */\n\nconst handleKeyResponse = (segment, objects, finishProcessingFn) => (error, request) => {\n  const response = request.response;\n  const errorObj = handleErrors(error, request);\n  if (errorObj) {\n    return finishProcessingFn(errorObj, segment);\n  }\n  if (response.byteLength !== 16) {\n    return finishProcessingFn({\n      status: request.status,\n      message: 'Invalid HLS key at URL: ' + request.uri,\n      code: REQUEST_ERRORS.FAILURE,\n      xhr: request\n    }, segment);\n  }\n  const view = new DataView(response);\n  const bytes = new Uint32Array([view.getUint32(0), view.getUint32(4), view.getUint32(8), view.getUint32(12)]);\n  for (let i = 0; i < objects.length; i++) {\n    objects[i].bytes = bytes;\n  }\n  return finishProcessingFn(null, segment);\n};\nconst parseInitSegment = (segment, callback) => {\n  const type = detectContainerForBytes(segment.map.bytes); // TODO: We should also handle ts init segments here, but we\n  // only know how to parse mp4 init segments at the moment\n\n  if (type !== 'mp4') {\n    const uri = segment.map.resolvedUri || segment.map.uri;\n    return callback({\n      internal: true,\n      message: `Found unsupported ${type || 'unknown'} container for initialization segment at URL: ${uri}`,\n      code: REQUEST_ERRORS.FAILURE\n    });\n  }\n  workerCallback({\n    action: 'probeMp4Tracks',\n    data: segment.map.bytes,\n    transmuxer: segment.transmuxer,\n    callback: ({\n      tracks,\n      data\n    }) => {\n      // transfer bytes back to us\n      segment.map.bytes = data;\n      tracks.forEach(function (track) {\n        segment.map.tracks = segment.map.tracks || {}; // only support one track of each type for now\n\n        if (segment.map.tracks[track.type]) {\n          return;\n        }\n        segment.map.tracks[track.type] = track;\n        if (typeof track.id === 'number' && track.timescale) {\n          segment.map.timescales = segment.map.timescales || {};\n          segment.map.timescales[track.id] = track.timescale;\n        }\n      });\n      return callback(null);\n    }\n  });\n};\n/**\n * Handle init-segment responses\n *\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} finishProcessingFn - a callback to execute to continue processing\n *                                        this request\n */\n\nconst handleInitSegmentResponse = ({\n  segment,\n  finishProcessingFn\n}) => (error, request) => {\n  const errorObj = handleErrors(error, request);\n  if (errorObj) {\n    return finishProcessingFn(errorObj, segment);\n  }\n  const bytes = new Uint8Array(request.response); // init segment is encypted, we will have to wait\n  // until the key request is done to decrypt.\n\n  if (segment.map.key) {\n    segment.map.encryptedBytes = bytes;\n    return finishProcessingFn(null, segment);\n  }\n  segment.map.bytes = bytes;\n  parseInitSegment(segment, function (parseError) {\n    if (parseError) {\n      parseError.xhr = request;\n      parseError.status = request.status;\n      return finishProcessingFn(parseError, segment);\n    }\n    finishProcessingFn(null, segment);\n  });\n};\n/**\n * Response handler for segment-requests being sure to set the correct\n * property depending on whether the segment is encryped or not\n * Also records and keeps track of stats that are used for ABR purposes\n *\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} finishProcessingFn - a callback to execute to continue processing\n *                                        this request\n */\n\nconst handleSegmentResponse = ({\n  segment,\n  finishProcessingFn,\n  responseType\n}) => (error, request) => {\n  const errorObj = handleErrors(error, request);\n  if (errorObj) {\n    return finishProcessingFn(errorObj, segment);\n  }\n  const newBytes =\n  // although responseText \"should\" exist, this guard serves to prevent an error being\n  // thrown for two primary cases:\n  // 1. the mime type override stops working, or is not implemented for a specific\n  //    browser\n  // 2. when using mock XHR libraries like sinon that do not allow the override behavior\n  responseType === 'arraybuffer' || !request.responseText ? request.response : stringToArrayBuffer(request.responseText.substring(segment.lastReachedChar || 0));\n  segment.stats = getRequestStats(request);\n  if (segment.key) {\n    segment.encryptedBytes = new Uint8Array(newBytes);\n  } else {\n    segment.bytes = new Uint8Array(newBytes);\n  }\n  return finishProcessingFn(null, segment);\n};\nconst transmuxAndNotify = ({\n  segment,\n  bytes,\n  trackInfoFn,\n  timingInfoFn,\n  videoSegmentTimingInfoFn,\n  audioSegmentTimingInfoFn,\n  id3Fn,\n  captionsFn,\n  isEndOfTimeline,\n  endedTimelineFn,\n  dataFn,\n  doneFn,\n  onTransmuxerLog\n}) => {\n  const fmp4Tracks = segment.map && segment.map.tracks || {};\n  const isMuxed = Boolean(fmp4Tracks.audio && fmp4Tracks.video); // Keep references to each function so we can null them out after we're done with them.\n  // One reason for this is that in the case of full segments, we want to trust start\n  // times from the probe, rather than the transmuxer.\n\n  let audioStartFn = timingInfoFn.bind(null, segment, 'audio', 'start');\n  const audioEndFn = timingInfoFn.bind(null, segment, 'audio', 'end');\n  let videoStartFn = timingInfoFn.bind(null, segment, 'video', 'start');\n  const videoEndFn = timingInfoFn.bind(null, segment, 'video', 'end');\n  const finish = () => transmux({\n    bytes,\n    transmuxer: segment.transmuxer,\n    audioAppendStart: segment.audioAppendStart,\n    gopsToAlignWith: segment.gopsToAlignWith,\n    remux: isMuxed,\n    onData: result => {\n      result.type = result.type === 'combined' ? 'video' : result.type;\n      dataFn(segment, result);\n    },\n    onTrackInfo: trackInfo => {\n      if (trackInfoFn) {\n        if (isMuxed) {\n          trackInfo.isMuxed = true;\n        }\n        trackInfoFn(segment, trackInfo);\n      }\n    },\n    onAudioTimingInfo: audioTimingInfo => {\n      // we only want the first start value we encounter\n      if (audioStartFn && typeof audioTimingInfo.start !== 'undefined') {\n        audioStartFn(audioTimingInfo.start);\n        audioStartFn = null;\n      } // we want to continually update the end time\n\n      if (audioEndFn && typeof audioTimingInfo.end !== 'undefined') {\n        audioEndFn(audioTimingInfo.end);\n      }\n    },\n    onVideoTimingInfo: videoTimingInfo => {\n      // we only want the first start value we encounter\n      if (videoStartFn && typeof videoTimingInfo.start !== 'undefined') {\n        videoStartFn(videoTimingInfo.start);\n        videoStartFn = null;\n      } // we want to continually update the end time\n\n      if (videoEndFn && typeof videoTimingInfo.end !== 'undefined') {\n        videoEndFn(videoTimingInfo.end);\n      }\n    },\n    onVideoSegmentTimingInfo: videoSegmentTimingInfo => {\n      videoSegmentTimingInfoFn(videoSegmentTimingInfo);\n    },\n    onAudioSegmentTimingInfo: audioSegmentTimingInfo => {\n      audioSegmentTimingInfoFn(audioSegmentTimingInfo);\n    },\n    onId3: (id3Frames, dispatchType) => {\n      id3Fn(segment, id3Frames, dispatchType);\n    },\n    onCaptions: captions => {\n      captionsFn(segment, [captions]);\n    },\n    isEndOfTimeline,\n    onEndedTimeline: () => {\n      endedTimelineFn();\n    },\n    onTransmuxerLog,\n    onDone: result => {\n      if (!doneFn) {\n        return;\n      }\n      result.type = result.type === 'combined' ? 'video' : result.type;\n      doneFn(null, segment, result);\n    }\n  }); // In the transmuxer, we don't yet have the ability to extract a \"proper\" start time.\n  // Meaning cached frame data may corrupt our notion of where this segment\n  // really starts. To get around this, probe for the info needed.\n\n  workerCallback({\n    action: 'probeTs',\n    transmuxer: segment.transmuxer,\n    data: bytes,\n    baseStartTime: segment.baseStartTime,\n    callback: data => {\n      segment.bytes = bytes = data.data;\n      const probeResult = data.result;\n      if (probeResult) {\n        trackInfoFn(segment, {\n          hasAudio: probeResult.hasAudio,\n          hasVideo: probeResult.hasVideo,\n          isMuxed\n        });\n        trackInfoFn = null;\n      }\n      finish();\n    }\n  });\n};\nconst handleSegmentBytes = ({\n  segment,\n  bytes,\n  trackInfoFn,\n  timingInfoFn,\n  videoSegmentTimingInfoFn,\n  audioSegmentTimingInfoFn,\n  id3Fn,\n  captionsFn,\n  isEndOfTimeline,\n  endedTimelineFn,\n  dataFn,\n  doneFn,\n  onTransmuxerLog\n}) => {\n  let bytesAsUint8Array = new Uint8Array(bytes); // TODO:\n  // We should have a handler that fetches the number of bytes required\n  // to check if something is fmp4. This will allow us to save bandwidth\n  // because we can only exclude a playlist and abort requests\n  // by codec after trackinfo triggers.\n\n  if (isLikelyFmp4MediaSegment(bytesAsUint8Array)) {\n    segment.isFmp4 = true;\n    const {\n      tracks\n    } = segment.map;\n    const trackInfo = {\n      isFmp4: true,\n      hasVideo: !!tracks.video,\n      hasAudio: !!tracks.audio\n    }; // if we have a audio track, with a codec that is not set to\n    // encrypted audio\n\n    if (tracks.audio && tracks.audio.codec && tracks.audio.codec !== 'enca') {\n      trackInfo.audioCodec = tracks.audio.codec;\n    } // if we have a video track, with a codec that is not set to\n    // encrypted video\n\n    if (tracks.video && tracks.video.codec && tracks.video.codec !== 'encv') {\n      trackInfo.videoCodec = tracks.video.codec;\n    }\n    if (tracks.video && tracks.audio) {\n      trackInfo.isMuxed = true;\n    } // since we don't support appending fmp4 data on progress, we know we have the full\n    // segment here\n\n    trackInfoFn(segment, trackInfo); // The probe doesn't provide the segment end time, so only callback with the start\n    // time. The end time can be roughly calculated by the receiver using the duration.\n    //\n    // Note that the start time returned by the probe reflects the baseMediaDecodeTime, as\n    // that is the true start of the segment (where the playback engine should begin\n    // decoding).\n\n    const finishLoading = (captions, id3Frames) => {\n      // if the track still has audio at this point it is only possible\n      // for it to be audio only. See `tracks.video && tracks.audio` if statement\n      // above.\n      // we make sure to use segment.bytes here as that\n      dataFn(segment, {\n        data: bytesAsUint8Array,\n        type: trackInfo.hasAudio && !trackInfo.isMuxed ? 'audio' : 'video'\n      });\n      if (id3Frames && id3Frames.length) {\n        id3Fn(segment, id3Frames);\n      }\n      if (captions && captions.length) {\n        captionsFn(segment, captions);\n      }\n      doneFn(null, segment, {});\n    };\n    workerCallback({\n      action: 'probeMp4StartTime',\n      timescales: segment.map.timescales,\n      data: bytesAsUint8Array,\n      transmuxer: segment.transmuxer,\n      callback: ({\n        data,\n        startTime\n      }) => {\n        // transfer bytes back to us\n        bytes = data.buffer;\n        segment.bytes = bytesAsUint8Array = data;\n        if (trackInfo.hasAudio && !trackInfo.isMuxed) {\n          timingInfoFn(segment, 'audio', 'start', startTime);\n        }\n        if (trackInfo.hasVideo) {\n          timingInfoFn(segment, 'video', 'start', startTime);\n        }\n        workerCallback({\n          action: 'probeEmsgID3',\n          data: bytesAsUint8Array,\n          transmuxer: segment.transmuxer,\n          offset: startTime,\n          callback: ({\n            emsgData,\n            id3Frames\n          }) => {\n            // transfer bytes back to us\n            bytes = emsgData.buffer;\n            segment.bytes = bytesAsUint8Array = emsgData; // Run through the CaptionParser in case there are captions.\n            // Initialize CaptionParser if it hasn't been yet\n\n            if (!tracks.video || !emsgData.byteLength || !segment.transmuxer) {\n              finishLoading(undefined, id3Frames);\n              return;\n            }\n            workerCallback({\n              action: 'pushMp4Captions',\n              endAction: 'mp4Captions',\n              transmuxer: segment.transmuxer,\n              data: bytesAsUint8Array,\n              timescales: segment.map.timescales,\n              trackIds: [tracks.video.id],\n              callback: message => {\n                // transfer bytes back to us\n                bytes = message.data.buffer;\n                segment.bytes = bytesAsUint8Array = message.data;\n                message.logs.forEach(function (log) {\n                  onTransmuxerLog(merge(log, {\n                    stream: 'mp4CaptionParser'\n                  }));\n                });\n                finishLoading(message.captions, id3Frames);\n              }\n            });\n          }\n        });\n      }\n    });\n    return;\n  } // VTT or other segments that don't need processing\n\n  if (!segment.transmuxer) {\n    doneFn(null, segment, {});\n    return;\n  }\n  if (typeof segment.container === 'undefined') {\n    segment.container = detectContainerForBytes(bytesAsUint8Array);\n  }\n  if (segment.container !== 'ts' && segment.container !== 'aac') {\n    trackInfoFn(segment, {\n      hasAudio: false,\n      hasVideo: false\n    });\n    doneFn(null, segment, {});\n    return;\n  } // ts or aac\n\n  transmuxAndNotify({\n    segment,\n    bytes,\n    trackInfoFn,\n    timingInfoFn,\n    videoSegmentTimingInfoFn,\n    audioSegmentTimingInfoFn,\n    id3Fn,\n    captionsFn,\n    isEndOfTimeline,\n    endedTimelineFn,\n    dataFn,\n    doneFn,\n    onTransmuxerLog\n  });\n};\nconst decrypt = function ({\n  id,\n  key,\n  encryptedBytes,\n  decryptionWorker\n}, callback) {\n  const decryptionHandler = event => {\n    if (event.data.source === id) {\n      decryptionWorker.removeEventListener('message', decryptionHandler);\n      const decrypted = event.data.decrypted;\n      callback(new Uint8Array(decrypted.bytes, decrypted.byteOffset, decrypted.byteLength));\n    }\n  };\n  decryptionWorker.addEventListener('message', decryptionHandler);\n  let keyBytes;\n  if (key.bytes.slice) {\n    keyBytes = key.bytes.slice();\n  } else {\n    keyBytes = new Uint32Array(Array.prototype.slice.call(key.bytes));\n  } // incrementally decrypt the bytes\n\n  decryptionWorker.postMessage(createTransferableMessage({\n    source: id,\n    encrypted: encryptedBytes,\n    key: keyBytes,\n    iv: key.iv\n  }), [encryptedBytes.buffer, keyBytes.buffer]);\n};\n/**\n * Decrypt the segment via the decryption web worker\n *\n * @param {WebWorker} decryptionWorker - a WebWorker interface to AES-128 decryption\n *                                       routines\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} trackInfoFn - a callback that receives track info\n * @param {Function} timingInfoFn - a callback that receives timing info\n * @param {Function} videoSegmentTimingInfoFn\n *                   a callback that receives video timing info based on media times and\n *                   any adjustments made by the transmuxer\n * @param {Function} audioSegmentTimingInfoFn\n *                   a callback that receives audio timing info based on media times and\n *                   any adjustments made by the transmuxer\n * @param {boolean}  isEndOfTimeline\n *                   true if this segment represents the last segment in a timeline\n * @param {Function} endedTimelineFn\n *                   a callback made when a timeline is ended, will only be called if\n *                   isEndOfTimeline is true\n * @param {Function} dataFn - a callback that is executed when segment bytes are available\n *                            and ready to use\n * @param {Function} doneFn - a callback that is executed after decryption has completed\n */\n\nconst decryptSegment = ({\n  decryptionWorker,\n  segment,\n  trackInfoFn,\n  timingInfoFn,\n  videoSegmentTimingInfoFn,\n  audioSegmentTimingInfoFn,\n  id3Fn,\n  captionsFn,\n  isEndOfTimeline,\n  endedTimelineFn,\n  dataFn,\n  doneFn,\n  onTransmuxerLog\n}) => {\n  decrypt({\n    id: segment.requestId,\n    key: segment.key,\n    encryptedBytes: segment.encryptedBytes,\n    decryptionWorker\n  }, decryptedBytes => {\n    segment.bytes = decryptedBytes;\n    handleSegmentBytes({\n      segment,\n      bytes: segment.bytes,\n      trackInfoFn,\n      timingInfoFn,\n      videoSegmentTimingInfoFn,\n      audioSegmentTimingInfoFn,\n      id3Fn,\n      captionsFn,\n      isEndOfTimeline,\n      endedTimelineFn,\n      dataFn,\n      doneFn,\n      onTransmuxerLog\n    });\n  });\n};\n/**\n * This function waits for all XHRs to finish (with either success or failure)\n * before continueing processing via it's callback. The function gathers errors\n * from each request into a single errors array so that the error status for\n * each request can be examined later.\n *\n * @param {Object} activeXhrs - an object that tracks all XHR requests\n * @param {WebWorker} decryptionWorker - a WebWorker interface to AES-128 decryption\n *                                       routines\n * @param {Function} trackInfoFn - a callback that receives track info\n * @param {Function} timingInfoFn - a callback that receives timing info\n * @param {Function} videoSegmentTimingInfoFn\n *                   a callback that receives video timing info based on media times and\n *                   any adjustments made by the transmuxer\n * @param {Function} audioSegmentTimingInfoFn\n *                   a callback that receives audio timing info based on media times and\n *                   any adjustments made by the transmuxer\n * @param {Function} id3Fn - a callback that receives ID3 metadata\n * @param {Function} captionsFn - a callback that receives captions\n * @param {boolean}  isEndOfTimeline\n *                   true if this segment represents the last segment in a timeline\n * @param {Function} endedTimelineFn\n *                   a callback made when a timeline is ended, will only be called if\n *                   isEndOfTimeline is true\n * @param {Function} dataFn - a callback that is executed when segment bytes are available\n *                            and ready to use\n * @param {Function} doneFn - a callback that is executed after all resources have been\n *                            downloaded and any decryption completed\n */\n\nconst waitForCompletion = ({\n  activeXhrs,\n  decryptionWorker,\n  trackInfoFn,\n  timingInfoFn,\n  videoSegmentTimingInfoFn,\n  audioSegmentTimingInfoFn,\n  id3Fn,\n  captionsFn,\n  isEndOfTimeline,\n  endedTimelineFn,\n  dataFn,\n  doneFn,\n  onTransmuxerLog\n}) => {\n  let count = 0;\n  let didError = false;\n  return (error, segment) => {\n    if (didError) {\n      return;\n    }\n    if (error) {\n      didError = true; // If there are errors, we have to abort any outstanding requests\n\n      abortAll(activeXhrs); // Even though the requests above are aborted, and in theory we could wait until we\n      // handle the aborted events from those requests, there are some cases where we may\n      // never get an aborted event. For instance, if the network connection is lost and\n      // there were two requests, the first may have triggered an error immediately, while\n      // the second request remains unsent. In that case, the aborted algorithm will not\n      // trigger an abort: see https://xhr.spec.whatwg.org/#the-abort()-method\n      //\n      // We also can't rely on the ready state of the XHR, since the request that\n      // triggered the connection error may also show as a ready state of 0 (unsent).\n      // Therefore, we have to finish this group of requests immediately after the first\n      // seen error.\n\n      return doneFn(error, segment);\n    }\n    count += 1;\n    if (count === activeXhrs.length) {\n      const segmentFinish = function () {\n        if (segment.encryptedBytes) {\n          return decryptSegment({\n            decryptionWorker,\n            segment,\n            trackInfoFn,\n            timingInfoFn,\n            videoSegmentTimingInfoFn,\n            audioSegmentTimingInfoFn,\n            id3Fn,\n            captionsFn,\n            isEndOfTimeline,\n            endedTimelineFn,\n            dataFn,\n            doneFn,\n            onTransmuxerLog\n          });\n        } // Otherwise, everything is ready just continue\n\n        handleSegmentBytes({\n          segment,\n          bytes: segment.bytes,\n          trackInfoFn,\n          timingInfoFn,\n          videoSegmentTimingInfoFn,\n          audioSegmentTimingInfoFn,\n          id3Fn,\n          captionsFn,\n          isEndOfTimeline,\n          endedTimelineFn,\n          dataFn,\n          doneFn,\n          onTransmuxerLog\n        });\n      }; // Keep track of when *all* of the requests have completed\n\n      segment.endOfAllRequests = Date.now();\n      if (segment.map && segment.map.encryptedBytes && !segment.map.bytes) {\n        return decrypt({\n          decryptionWorker,\n          // add -init to the \"id\" to differentiate between segment\n          // and init segment decryption, just in case they happen\n          // at the same time at some point in the future.\n          id: segment.requestId + '-init',\n          encryptedBytes: segment.map.encryptedBytes,\n          key: segment.map.key\n        }, decryptedBytes => {\n          segment.map.bytes = decryptedBytes;\n          parseInitSegment(segment, parseError => {\n            if (parseError) {\n              abortAll(activeXhrs);\n              return doneFn(parseError, segment);\n            }\n            segmentFinish();\n          });\n        });\n      }\n      segmentFinish();\n    }\n  };\n};\n/**\n * Calls the abort callback if any request within the batch was aborted. Will only call\n * the callback once per batch of requests, even if multiple were aborted.\n *\n * @param {Object} loadendState - state to check to see if the abort function was called\n * @param {Function} abortFn - callback to call for abort\n */\n\nconst handleLoadEnd = ({\n  loadendState,\n  abortFn\n}) => event => {\n  const request = event.target;\n  if (request.aborted && abortFn && !loadendState.calledAbortFn) {\n    abortFn();\n    loadendState.calledAbortFn = true;\n  }\n};\n/**\n * Simple progress event callback handler that gathers some stats before\n * executing a provided callback with the `segment` object\n *\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} progressFn - a callback that is executed each time a progress event\n *                                is received\n * @param {Function} trackInfoFn - a callback that receives track info\n * @param {Function} timingInfoFn - a callback that receives timing info\n * @param {Function} videoSegmentTimingInfoFn\n *                   a callback that receives video timing info based on media times and\n *                   any adjustments made by the transmuxer\n * @param {Function} audioSegmentTimingInfoFn\n *                   a callback that receives audio timing info based on media times and\n *                   any adjustments made by the transmuxer\n * @param {boolean}  isEndOfTimeline\n *                   true if this segment represents the last segment in a timeline\n * @param {Function} endedTimelineFn\n *                   a callback made when a timeline is ended, will only be called if\n *                   isEndOfTimeline is true\n * @param {Function} dataFn - a callback that is executed when segment bytes are available\n *                            and ready to use\n * @param {Event} event - the progress event object from XMLHttpRequest\n */\n\nconst handleProgress = ({\n  segment,\n  progressFn,\n  trackInfoFn,\n  timingInfoFn,\n  videoSegmentTimingInfoFn,\n  audioSegmentTimingInfoFn,\n  id3Fn,\n  captionsFn,\n  isEndOfTimeline,\n  endedTimelineFn,\n  dataFn\n}) => event => {\n  const request = event.target;\n  if (request.aborted) {\n    return;\n  }\n  segment.stats = merge(segment.stats, getProgressStats(event)); // record the time that we receive the first byte of data\n\n  if (!segment.stats.firstBytesReceivedAt && segment.stats.bytesReceived) {\n    segment.stats.firstBytesReceivedAt = Date.now();\n  }\n  return progressFn(event, segment);\n};\n/**\n * Load all resources and does any processing necessary for a media-segment\n *\n * Features:\n *   decrypts the media-segment if it has a key uri and an iv\n *   aborts *all* requests if *any* one request fails\n *\n * The segment object, at minimum, has the following format:\n * {\n *   resolvedUri: String,\n *   [transmuxer]: Object,\n *   [byterange]: {\n *     offset: Number,\n *     length: Number\n *   },\n *   [key]: {\n *     resolvedUri: String\n *     [byterange]: {\n *       offset: Number,\n *       length: Number\n *     },\n *     iv: {\n *       bytes: Uint32Array\n *     }\n *   },\n *   [map]: {\n *     resolvedUri: String,\n *     [byterange]: {\n *       offset: Number,\n *       length: Number\n *     },\n *     [bytes]: Uint8Array\n *   }\n * }\n * ...where [name] denotes optional properties\n *\n * @param {Function} xhr - an instance of the xhr wrapper in xhr.js\n * @param {Object} xhrOptions - the base options to provide to all xhr requests\n * @param {WebWorker} decryptionWorker - a WebWorker interface to AES-128\n *                                       decryption routines\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} abortFn - a callback called (only once) if any piece of a request was\n *                             aborted\n * @param {Function} progressFn - a callback that receives progress events from the main\n *                                segment's xhr request\n * @param {Function} trackInfoFn - a callback that receives track info\n * @param {Function} timingInfoFn - a callback that receives timing info\n * @param {Function} videoSegmentTimingInfoFn\n *                   a callback that receives video timing info based on media times and\n *                   any adjustments made by the transmuxer\n * @param {Function} audioSegmentTimingInfoFn\n *                   a callback that receives audio timing info based on media times and\n *                   any adjustments made by the transmuxer\n * @param {Function} id3Fn - a callback that receives ID3 metadata\n * @param {Function} captionsFn - a callback that receives captions\n * @param {boolean}  isEndOfTimeline\n *                   true if this segment represents the last segment in a timeline\n * @param {Function} endedTimelineFn\n *                   a callback made when a timeline is ended, will only be called if\n *                   isEndOfTimeline is true\n * @param {Function} dataFn - a callback that receives data from the main segment's xhr\n *                            request, transmuxed if needed\n * @param {Function} doneFn - a callback that is executed only once all requests have\n *                            succeeded or failed\n * @return {Function} a function that, when invoked, immediately aborts all\n *                     outstanding requests\n */\n\nconst mediaSegmentRequest = ({\n  xhr,\n  xhrOptions,\n  decryptionWorker,\n  segment,\n  abortFn,\n  progressFn,\n  trackInfoFn,\n  timingInfoFn,\n  videoSegmentTimingInfoFn,\n  audioSegmentTimingInfoFn,\n  id3Fn,\n  captionsFn,\n  isEndOfTimeline,\n  endedTimelineFn,\n  dataFn,\n  doneFn,\n  onTransmuxerLog\n}) => {\n  const activeXhrs = [];\n  const finishProcessingFn = waitForCompletion({\n    activeXhrs,\n    decryptionWorker,\n    trackInfoFn,\n    timingInfoFn,\n    videoSegmentTimingInfoFn,\n    audioSegmentTimingInfoFn,\n    id3Fn,\n    captionsFn,\n    isEndOfTimeline,\n    endedTimelineFn,\n    dataFn,\n    doneFn,\n    onTransmuxerLog\n  }); // optionally, request the decryption key\n\n  if (segment.key && !segment.key.bytes) {\n    const objects = [segment.key];\n    if (segment.map && !segment.map.bytes && segment.map.key && segment.map.key.resolvedUri === segment.key.resolvedUri) {\n      objects.push(segment.map.key);\n    }\n    const keyRequestOptions = merge(xhrOptions, {\n      uri: segment.key.resolvedUri,\n      responseType: 'arraybuffer'\n    });\n    const keyRequestCallback = handleKeyResponse(segment, objects, finishProcessingFn);\n    const keyXhr = xhr(keyRequestOptions, keyRequestCallback);\n    activeXhrs.push(keyXhr);\n  } // optionally, request the associated media init segment\n\n  if (segment.map && !segment.map.bytes) {\n    const differentMapKey = segment.map.key && (!segment.key || segment.key.resolvedUri !== segment.map.key.resolvedUri);\n    if (differentMapKey) {\n      const mapKeyRequestOptions = merge(xhrOptions, {\n        uri: segment.map.key.resolvedUri,\n        responseType: 'arraybuffer'\n      });\n      const mapKeyRequestCallback = handleKeyResponse(segment, [segment.map.key], finishProcessingFn);\n      const mapKeyXhr = xhr(mapKeyRequestOptions, mapKeyRequestCallback);\n      activeXhrs.push(mapKeyXhr);\n    }\n    const initSegmentOptions = merge(xhrOptions, {\n      uri: segment.map.resolvedUri,\n      responseType: 'arraybuffer',\n      headers: segmentXhrHeaders(segment.map)\n    });\n    const initSegmentRequestCallback = handleInitSegmentResponse({\n      segment,\n      finishProcessingFn\n    });\n    const initSegmentXhr = xhr(initSegmentOptions, initSegmentRequestCallback);\n    activeXhrs.push(initSegmentXhr);\n  }\n  const segmentRequestOptions = merge(xhrOptions, {\n    uri: segment.part && segment.part.resolvedUri || segment.resolvedUri,\n    responseType: 'arraybuffer',\n    headers: segmentXhrHeaders(segment)\n  });\n  const segmentRequestCallback = handleSegmentResponse({\n    segment,\n    finishProcessingFn,\n    responseType: segmentRequestOptions.responseType\n  });\n  const segmentXhr = xhr(segmentRequestOptions, segmentRequestCallback);\n  segmentXhr.addEventListener('progress', handleProgress({\n    segment,\n    progressFn,\n    trackInfoFn,\n    timingInfoFn,\n    videoSegmentTimingInfoFn,\n    audioSegmentTimingInfoFn,\n    id3Fn,\n    captionsFn,\n    isEndOfTimeline,\n    endedTimelineFn,\n    dataFn\n  }));\n  activeXhrs.push(segmentXhr); // since all parts of the request must be considered, but should not make callbacks\n  // multiple times, provide a shared state object\n\n  const loadendState = {};\n  activeXhrs.forEach(activeXhr => {\n    activeXhr.addEventListener('loadend', handleLoadEnd({\n      loadendState,\n      abortFn\n    }));\n  });\n  return () => abortAll(activeXhrs);\n};\n\n/**\n * @file - codecs.js - Handles tasks regarding codec strings such as translating them to\n * codec strings, or translating codec strings into objects that can be examined.\n */\nconst logFn$1 = logger('CodecUtils');\n/**\n * Returns a set of codec strings parsed from the playlist or the default\n * codec strings if no codecs were specified in the playlist\n *\n * @param {Playlist} media the current media playlist\n * @return {Object} an object with the video and audio codecs\n */\n\nconst getCodecs = function (media) {\n  // if the codecs were explicitly specified, use them instead of the\n  // defaults\n  const mediaAttributes = media.attributes || {};\n  if (mediaAttributes.CODECS) {\n    return parseCodecs(mediaAttributes.CODECS);\n  }\n};\nconst isMaat = (main, media) => {\n  const mediaAttributes = media.attributes || {};\n  return main && main.mediaGroups && main.mediaGroups.AUDIO && mediaAttributes.AUDIO && main.mediaGroups.AUDIO[mediaAttributes.AUDIO];\n};\nconst isMuxed = (main, media) => {\n  if (!isMaat(main, media)) {\n    return true;\n  }\n  const mediaAttributes = media.attributes || {};\n  const audioGroup = main.mediaGroups.AUDIO[mediaAttributes.AUDIO];\n  for (const groupId in audioGroup) {\n    // If an audio group has a URI (the case for HLS, as HLS will use external playlists),\n    // or there are listed playlists (the case for DASH, as the manifest will have already\n    // provided all of the details necessary to generate the audio playlist, as opposed to\n    // HLS' externally requested playlists), then the content is demuxed.\n    if (!audioGroup[groupId].uri && !audioGroup[groupId].playlists) {\n      return true;\n    }\n  }\n  return false;\n};\nconst unwrapCodecList = function (codecList) {\n  const codecs = {};\n  codecList.forEach(({\n    mediaType,\n    type,\n    details\n  }) => {\n    codecs[mediaType] = codecs[mediaType] || [];\n    codecs[mediaType].push(translateLegacyCodec(`${type}${details}`));\n  });\n  Object.keys(codecs).forEach(function (mediaType) {\n    if (codecs[mediaType].length > 1) {\n      logFn$1(`multiple ${mediaType} codecs found as attributes: ${codecs[mediaType].join(', ')}. Setting playlist codecs to null so that we wait for mux.js to probe segments for real codecs.`);\n      codecs[mediaType] = null;\n      return;\n    }\n    codecs[mediaType] = codecs[mediaType][0];\n  });\n  return codecs;\n};\nconst codecCount = function (codecObj) {\n  let count = 0;\n  if (codecObj.audio) {\n    count++;\n  }\n  if (codecObj.video) {\n    count++;\n  }\n  return count;\n};\n/**\n * Calculates the codec strings for a working configuration of\n * SourceBuffers to play variant streams in a main playlist. If\n * there is no possible working configuration, an empty object will be\n * returned.\n *\n * @param main {Object} the m3u8 object for the main playlist\n * @param media {Object} the m3u8 object for the variant playlist\n * @return {Object} the codec strings.\n *\n * @private\n */\n\nconst codecsForPlaylist = function (main, media) {\n  const mediaAttributes = media.attributes || {};\n  const codecInfo = unwrapCodecList(getCodecs(media) || []); // HLS with multiple-audio tracks must always get an audio codec.\n  // Put another way, there is no way to have a video-only multiple-audio HLS!\n\n  if (isMaat(main, media) && !codecInfo.audio) {\n    if (!isMuxed(main, media)) {\n      // It is possible for codecs to be specified on the audio media group playlist but\n      // not on the rendition playlist. This is mostly the case for DASH, where audio and\n      // video are always separate (and separately specified).\n      const defaultCodecs = unwrapCodecList(codecsFromDefault(main, mediaAttributes.AUDIO) || []);\n      if (defaultCodecs.audio) {\n        codecInfo.audio = defaultCodecs.audio;\n      }\n    }\n  }\n  return codecInfo;\n};\nconst logFn = logger('PlaylistSelector');\nconst representationToString = function (representation) {\n  if (!representation || !representation.playlist) {\n    return;\n  }\n  const playlist = representation.playlist;\n  return JSON.stringify({\n    id: playlist.id,\n    bandwidth: representation.bandwidth,\n    width: representation.width,\n    height: representation.height,\n    codecs: playlist.attributes && playlist.attributes.CODECS || ''\n  });\n}; // Utilities\n\n/**\n * Returns the CSS value for the specified property on an element\n * using `getComputedStyle`. Firefox has a long-standing issue where\n * getComputedStyle() may return null when running in an iframe with\n * `display: none`.\n *\n * @see https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n * @param {HTMLElement} el the htmlelement to work on\n * @param {string} the proprety to get the style for\n */\n\nconst safeGetComputedStyle = function (el, property) {\n  if (!el) {\n    return '';\n  }\n  const result = window$1.getComputedStyle(el);\n  if (!result) {\n    return '';\n  }\n  return result[property];\n};\n/**\n * Resuable stable sort function\n *\n * @param {Playlists} array\n * @param {Function} sortFn Different comparators\n * @function stableSort\n */\n\nconst stableSort = function (array, sortFn) {\n  const newArray = array.slice();\n  array.sort(function (left, right) {\n    const cmp = sortFn(left, right);\n    if (cmp === 0) {\n      return newArray.indexOf(left) - newArray.indexOf(right);\n    }\n    return cmp;\n  });\n};\n/**\n * A comparator function to sort two playlist object by bandwidth.\n *\n * @param {Object} left a media playlist object\n * @param {Object} right a media playlist object\n * @return {number} Greater than zero if the bandwidth attribute of\n * left is greater than the corresponding attribute of right. Less\n * than zero if the bandwidth of right is greater than left and\n * exactly zero if the two are equal.\n */\n\nconst comparePlaylistBandwidth = function (left, right) {\n  let leftBandwidth;\n  let rightBandwidth;\n  if (left.attributes.BANDWIDTH) {\n    leftBandwidth = left.attributes.BANDWIDTH;\n  }\n  leftBandwidth = leftBandwidth || window$1.Number.MAX_VALUE;\n  if (right.attributes.BANDWIDTH) {\n    rightBandwidth = right.attributes.BANDWIDTH;\n  }\n  rightBandwidth = rightBandwidth || window$1.Number.MAX_VALUE;\n  return leftBandwidth - rightBandwidth;\n};\n/**\n * A comparator function to sort two playlist object by resolution (width).\n *\n * @param {Object} left a media playlist object\n * @param {Object} right a media playlist object\n * @return {number} Greater than zero if the resolution.width attribute of\n * left is greater than the corresponding attribute of right. Less\n * than zero if the resolution.width of right is greater than left and\n * exactly zero if the two are equal.\n */\n\nconst comparePlaylistResolution = function (left, right) {\n  let leftWidth;\n  let rightWidth;\n  if (left.attributes.RESOLUTION && left.attributes.RESOLUTION.width) {\n    leftWidth = left.attributes.RESOLUTION.width;\n  }\n  leftWidth = leftWidth || window$1.Number.MAX_VALUE;\n  if (right.attributes.RESOLUTION && right.attributes.RESOLUTION.width) {\n    rightWidth = right.attributes.RESOLUTION.width;\n  }\n  rightWidth = rightWidth || window$1.Number.MAX_VALUE; // NOTE - Fallback to bandwidth sort as appropriate in cases where multiple renditions\n  // have the same media dimensions/ resolution\n\n  if (leftWidth === rightWidth && left.attributes.BANDWIDTH && right.attributes.BANDWIDTH) {\n    return left.attributes.BANDWIDTH - right.attributes.BANDWIDTH;\n  }\n  return leftWidth - rightWidth;\n};\n/**\n * Chooses the appropriate media playlist based on bandwidth and player size\n *\n * @param {Object} main\n *        Object representation of the main manifest\n * @param {number} playerBandwidth\n *        Current calculated bandwidth of the player\n * @param {number} playerWidth\n *        Current width of the player element (should account for the device pixel ratio)\n * @param {number} playerHeight\n *        Current height of the player element (should account for the device pixel ratio)\n * @param {boolean} limitRenditionByPlayerDimensions\n *        True if the player width and height should be used during the selection, false otherwise\n * @param {Object} playlistController\n *        the current playlistController object\n * @return {Playlist} the highest bitrate playlist less than the\n * currently detected bandwidth, accounting for some amount of\n * bandwidth variance\n */\n\nlet simpleSelector = function (main, playerBandwidth, playerWidth, playerHeight, limitRenditionByPlayerDimensions, playlistController) {\n  // If we end up getting called before `main` is available, exit early\n  if (!main) {\n    return;\n  }\n  const options = {\n    bandwidth: playerBandwidth,\n    width: playerWidth,\n    height: playerHeight,\n    limitRenditionByPlayerDimensions\n  };\n  let playlists = main.playlists; // if playlist is audio only, select between currently active audio group playlists.\n\n  if (Playlist.isAudioOnly(main)) {\n    playlists = playlistController.getAudioTrackPlaylists_(); // add audioOnly to options so that we log audioOnly: true\n    // at the buttom of this function for debugging.\n\n    options.audioOnly = true;\n  } // convert the playlists to an intermediary representation to make comparisons easier\n\n  let sortedPlaylistReps = playlists.map(playlist => {\n    let bandwidth;\n    const width = playlist.attributes && playlist.attributes.RESOLUTION && playlist.attributes.RESOLUTION.width;\n    const height = playlist.attributes && playlist.attributes.RESOLUTION && playlist.attributes.RESOLUTION.height;\n    bandwidth = playlist.attributes && playlist.attributes.BANDWIDTH;\n    bandwidth = bandwidth || window$1.Number.MAX_VALUE;\n    return {\n      bandwidth,\n      width,\n      height,\n      playlist\n    };\n  });\n  stableSort(sortedPlaylistReps, (left, right) => left.bandwidth - right.bandwidth); // filter out any playlists that have been excluded due to\n  // incompatible configurations\n\n  sortedPlaylistReps = sortedPlaylistReps.filter(rep => !Playlist.isIncompatible(rep.playlist)); // filter out any playlists that have been disabled manually through the representations\n  // api or excluded temporarily due to playback errors.\n\n  let enabledPlaylistReps = sortedPlaylistReps.filter(rep => Playlist.isEnabled(rep.playlist));\n  if (!enabledPlaylistReps.length) {\n    // if there are no enabled playlists, then they have all been excluded or disabled\n    // by the user through the representations api. In this case, ignore exclusion and\n    // fallback to what the user wants by using playlists the user has not disabled.\n    enabledPlaylistReps = sortedPlaylistReps.filter(rep => !Playlist.isDisabled(rep.playlist));\n  } // filter out any variant that has greater effective bitrate\n  // than the current estimated bandwidth\n\n  const bandwidthPlaylistReps = enabledPlaylistReps.filter(rep => rep.bandwidth * Config.BANDWIDTH_VARIANCE < playerBandwidth);\n  let highestRemainingBandwidthRep = bandwidthPlaylistReps[bandwidthPlaylistReps.length - 1]; // get all of the renditions with the same (highest) bandwidth\n  // and then taking the very first element\n\n  const bandwidthBestRep = bandwidthPlaylistReps.filter(rep => rep.bandwidth === highestRemainingBandwidthRep.bandwidth)[0]; // if we're not going to limit renditions by player size, make an early decision.\n\n  if (limitRenditionByPlayerDimensions === false) {\n    const chosenRep = bandwidthBestRep || enabledPlaylistReps[0] || sortedPlaylistReps[0];\n    if (chosenRep && chosenRep.playlist) {\n      let type = 'sortedPlaylistReps';\n      if (bandwidthBestRep) {\n        type = 'bandwidthBestRep';\n      }\n      if (enabledPlaylistReps[0]) {\n        type = 'enabledPlaylistReps';\n      }\n      logFn(`choosing ${representationToString(chosenRep)} using ${type} with options`, options);\n      return chosenRep.playlist;\n    }\n    logFn('could not choose a playlist with options', options);\n    return null;\n  } // filter out playlists without resolution information\n\n  const haveResolution = bandwidthPlaylistReps.filter(rep => rep.width && rep.height); // sort variants by resolution\n\n  stableSort(haveResolution, (left, right) => left.width - right.width); // if we have the exact resolution as the player use it\n\n  const resolutionBestRepList = haveResolution.filter(rep => rep.width === playerWidth && rep.height === playerHeight);\n  highestRemainingBandwidthRep = resolutionBestRepList[resolutionBestRepList.length - 1]; // ensure that we pick the highest bandwidth variant that have exact resolution\n\n  const resolutionBestRep = resolutionBestRepList.filter(rep => rep.bandwidth === highestRemainingBandwidthRep.bandwidth)[0];\n  let resolutionPlusOneList;\n  let resolutionPlusOneSmallest;\n  let resolutionPlusOneRep; // find the smallest variant that is larger than the player\n  // if there is no match of exact resolution\n\n  if (!resolutionBestRep) {\n    resolutionPlusOneList = haveResolution.filter(rep => rep.width > playerWidth || rep.height > playerHeight); // find all the variants have the same smallest resolution\n\n    resolutionPlusOneSmallest = resolutionPlusOneList.filter(rep => rep.width === resolutionPlusOneList[0].width && rep.height === resolutionPlusOneList[0].height); // ensure that we also pick the highest bandwidth variant that\n    // is just-larger-than the video player\n\n    highestRemainingBandwidthRep = resolutionPlusOneSmallest[resolutionPlusOneSmallest.length - 1];\n    resolutionPlusOneRep = resolutionPlusOneSmallest.filter(rep => rep.bandwidth === highestRemainingBandwidthRep.bandwidth)[0];\n  }\n  let leastPixelDiffRep; // If this selector proves to be better than others,\n  // resolutionPlusOneRep and resolutionBestRep and all\n  // the code involving them should be removed.\n\n  if (playlistController.leastPixelDiffSelector) {\n    // find the variant that is closest to the player's pixel size\n    const leastPixelDiffList = haveResolution.map(rep => {\n      rep.pixelDiff = Math.abs(rep.width - playerWidth) + Math.abs(rep.height - playerHeight);\n      return rep;\n    }); // get the highest bandwidth, closest resolution playlist\n\n    stableSort(leastPixelDiffList, (left, right) => {\n      // sort by highest bandwidth if pixelDiff is the same\n      if (left.pixelDiff === right.pixelDiff) {\n        return right.bandwidth - left.bandwidth;\n      }\n      return left.pixelDiff - right.pixelDiff;\n    });\n    leastPixelDiffRep = leastPixelDiffList[0];\n  } // fallback chain of variants\n\n  const chosenRep = leastPixelDiffRep || resolutionPlusOneRep || resolutionBestRep || bandwidthBestRep || enabledPlaylistReps[0] || sortedPlaylistReps[0];\n  if (chosenRep && chosenRep.playlist) {\n    let type = 'sortedPlaylistReps';\n    if (leastPixelDiffRep) {\n      type = 'leastPixelDiffRep';\n    } else if (resolutionPlusOneRep) {\n      type = 'resolutionPlusOneRep';\n    } else if (resolutionBestRep) {\n      type = 'resolutionBestRep';\n    } else if (bandwidthBestRep) {\n      type = 'bandwidthBestRep';\n    } else if (enabledPlaylistReps[0]) {\n      type = 'enabledPlaylistReps';\n    }\n    logFn(`choosing ${representationToString(chosenRep)} using ${type} with options`, options);\n    return chosenRep.playlist;\n  }\n  logFn('could not choose a playlist with options', options);\n  return null;\n};\n\n/**\n * Chooses the appropriate media playlist based on the most recent\n * bandwidth estimate and the player size.\n *\n * Expects to be called within the context of an instance of VhsHandler\n *\n * @return {Playlist} the highest bitrate playlist less than the\n * currently detected bandwidth, accounting for some amount of\n * bandwidth variance\n */\n\nconst lastBandwidthSelector = function () {\n  const pixelRatio = this.useDevicePixelRatio ? window$1.devicePixelRatio || 1 : 1;\n  return simpleSelector(this.playlists.main, this.systemBandwidth, parseInt(safeGetComputedStyle(this.tech_.el(), 'width'), 10) * pixelRatio, parseInt(safeGetComputedStyle(this.tech_.el(), 'height'), 10) * pixelRatio, this.limitRenditionByPlayerDimensions, this.playlistController_);\n};\n/**\n * Chooses the appropriate media playlist based on an\n * exponential-weighted moving average of the bandwidth after\n * filtering for player size.\n *\n * Expects to be called within the context of an instance of VhsHandler\n *\n * @param {number} decay - a number between 0 and 1. Higher values of\n * this parameter will cause previous bandwidth estimates to lose\n * significance more quickly.\n * @return {Function} a function which can be invoked to create a new\n * playlist selector function.\n * @see https://en.wikipedia.org/wiki/Moving_average#Exponential_moving_average\n */\n\nconst movingAverageBandwidthSelector = function (decay) {\n  let average = -1;\n  let lastSystemBandwidth = -1;\n  if (decay < 0 || decay > 1) {\n    throw new Error('Moving average bandwidth decay must be between 0 and 1.');\n  }\n  return function () {\n    const pixelRatio = this.useDevicePixelRatio ? window$1.devicePixelRatio || 1 : 1;\n    if (average < 0) {\n      average = this.systemBandwidth;\n      lastSystemBandwidth = this.systemBandwidth;\n    } // stop the average value from decaying for every 250ms\n    // when the systemBandwidth is constant\n    // and\n    // stop average from setting to a very low value when the\n    // systemBandwidth becomes 0 in case of chunk cancellation\n\n    if (this.systemBandwidth > 0 && this.systemBandwidth !== lastSystemBandwidth) {\n      average = decay * this.systemBandwidth + (1 - decay) * average;\n      lastSystemBandwidth = this.systemBandwidth;\n    }\n    return simpleSelector(this.playlists.main, average, parseInt(safeGetComputedStyle(this.tech_.el(), 'width'), 10) * pixelRatio, parseInt(safeGetComputedStyle(this.tech_.el(), 'height'), 10) * pixelRatio, this.limitRenditionByPlayerDimensions, this.playlistController_);\n  };\n};\n/**\n * Chooses the appropriate media playlist based on the potential to rebuffer\n *\n * @param {Object} settings\n *        Object of information required to use this selector\n * @param {Object} settings.main\n *        Object representation of the main manifest\n * @param {number} settings.currentTime\n *        The current time of the player\n * @param {number} settings.bandwidth\n *        Current measured bandwidth\n * @param {number} settings.duration\n *        Duration of the media\n * @param {number} settings.segmentDuration\n *        Segment duration to be used in round trip time calculations\n * @param {number} settings.timeUntilRebuffer\n *        Time left in seconds until the player has to rebuffer\n * @param {number} settings.currentTimeline\n *        The current timeline segments are being loaded from\n * @param {SyncController} settings.syncController\n *        SyncController for determining if we have a sync point for a given playlist\n * @return {Object|null}\n *         {Object} return.playlist\n *         The highest bandwidth playlist with the least amount of rebuffering\n *         {Number} return.rebufferingImpact\n *         The amount of time in seconds switching to this playlist will rebuffer. A\n *         negative value means that switching will cause zero rebuffering.\n */\n\nconst minRebufferMaxBandwidthSelector = function (settings) {\n  const {\n    main,\n    currentTime,\n    bandwidth,\n    duration,\n    segmentDuration,\n    timeUntilRebuffer,\n    currentTimeline,\n    syncController\n  } = settings; // filter out any playlists that have been excluded due to\n  // incompatible configurations\n\n  const compatiblePlaylists = main.playlists.filter(playlist => !Playlist.isIncompatible(playlist)); // filter out any playlists that have been disabled manually through the representations\n  // api or excluded temporarily due to playback errors.\n\n  let enabledPlaylists = compatiblePlaylists.filter(Playlist.isEnabled);\n  if (!enabledPlaylists.length) {\n    // if there are no enabled playlists, then they have all been excluded or disabled\n    // by the user through the representations api. In this case, ignore exclusion and\n    // fallback to what the user wants by using playlists the user has not disabled.\n    enabledPlaylists = compatiblePlaylists.filter(playlist => !Playlist.isDisabled(playlist));\n  }\n  const bandwidthPlaylists = enabledPlaylists.filter(Playlist.hasAttribute.bind(null, 'BANDWIDTH'));\n  const rebufferingEstimates = bandwidthPlaylists.map(playlist => {\n    const syncPoint = syncController.getSyncPoint(playlist, duration, currentTimeline, currentTime); // If there is no sync point for this playlist, switching to it will require a\n    // sync request first. This will double the request time\n\n    const numRequests = syncPoint ? 1 : 2;\n    const requestTimeEstimate = Playlist.estimateSegmentRequestTime(segmentDuration, bandwidth, playlist);\n    const rebufferingImpact = requestTimeEstimate * numRequests - timeUntilRebuffer;\n    return {\n      playlist,\n      rebufferingImpact\n    };\n  });\n  const noRebufferingPlaylists = rebufferingEstimates.filter(estimate => estimate.rebufferingImpact <= 0); // Sort by bandwidth DESC\n\n  stableSort(noRebufferingPlaylists, (a, b) => comparePlaylistBandwidth(b.playlist, a.playlist));\n  if (noRebufferingPlaylists.length) {\n    return noRebufferingPlaylists[0];\n  }\n  stableSort(rebufferingEstimates, (a, b) => a.rebufferingImpact - b.rebufferingImpact);\n  return rebufferingEstimates[0] || null;\n};\n/**\n * Chooses the appropriate media playlist, which in this case is the lowest bitrate\n * one with video.  If no renditions with video exist, return the lowest audio rendition.\n *\n * Expects to be called within the context of an instance of VhsHandler\n *\n * @return {Object|null}\n *         {Object} return.playlist\n *         The lowest bitrate playlist that contains a video codec.  If no such rendition\n *         exists pick the lowest audio rendition.\n */\n\nconst lowestBitrateCompatibleVariantSelector = function () {\n  // filter out any playlists that have been excluded due to\n  // incompatible configurations or playback errors\n  const playlists = this.playlists.main.playlists.filter(Playlist.isEnabled); // Sort ascending by bitrate\n\n  stableSort(playlists, (a, b) => comparePlaylistBandwidth(a, b)); // Parse and assume that playlists with no video codec have no video\n  // (this is not necessarily true, although it is generally true).\n  //\n  // If an entire manifest has no valid videos everything will get filtered\n  // out.\n\n  const playlistsWithVideo = playlists.filter(playlist => !!codecsForPlaylist(this.playlists.main, playlist).video);\n  return playlistsWithVideo[0] || null;\n};\n\n/**\n * Combine all segments into a single Uint8Array\n *\n * @param {Object} segmentObj\n * @return {Uint8Array} concatenated bytes\n * @private\n */\nconst concatSegments = segmentObj => {\n  let offset = 0;\n  let tempBuffer;\n  if (segmentObj.bytes) {\n    tempBuffer = new Uint8Array(segmentObj.bytes); // combine the individual segments into one large typed-array\n\n    segmentObj.segments.forEach(segment => {\n      tempBuffer.set(segment, offset);\n      offset += segment.byteLength;\n    });\n  }\n  return tempBuffer;\n};\n\n/**\n * @file text-tracks.js\n */\n/**\n * Create captions text tracks on video.js if they do not exist\n *\n * @param {Object} inbandTextTracks a reference to current inbandTextTracks\n * @param {Object} tech the video.js tech\n * @param {Object} captionStream the caption stream to create\n * @private\n */\n\nconst createCaptionsTrackIfNotExists = function (inbandTextTracks, tech, captionStream) {\n  if (!inbandTextTracks[captionStream]) {\n    tech.trigger({\n      type: 'usage',\n      name: 'vhs-608'\n    });\n    let instreamId = captionStream; // we need to translate SERVICEn for 708 to how mux.js currently labels them\n\n    if (/^cc708_/.test(captionStream)) {\n      instreamId = 'SERVICE' + captionStream.split('_')[1];\n    }\n    const track = tech.textTracks().getTrackById(instreamId);\n    if (track) {\n      // Resuse an existing track with a CC# id because this was\n      // very likely created by videojs-contrib-hls from information\n      // in the m3u8 for us to use\n      inbandTextTracks[captionStream] = track;\n    } else {\n      // This section gets called when we have caption services that aren't specified in the manifest.\n      // Manifest level caption services are handled in media-groups.js under CLOSED-CAPTIONS.\n      const captionServices = tech.options_.vhs && tech.options_.vhs.captionServices || {};\n      let label = captionStream;\n      let language = captionStream;\n      let def = false;\n      const captionService = captionServices[instreamId];\n      if (captionService) {\n        label = captionService.label;\n        language = captionService.language;\n        def = captionService.default;\n      } // Otherwise, create a track with the default `CC#` label and\n      // without a language\n\n      inbandTextTracks[captionStream] = tech.addRemoteTextTrack({\n        kind: 'captions',\n        id: instreamId,\n        // TODO: investigate why this doesn't seem to turn the caption on by default\n        default: def,\n        label,\n        language\n      }, false).track;\n    }\n  }\n};\n/**\n * Add caption text track data to a source handler given an array of captions\n *\n * @param {Object}\n *   @param {Object} inbandTextTracks the inband text tracks\n *   @param {number} timestampOffset the timestamp offset of the source buffer\n *   @param {Array} captionArray an array of caption data\n * @private\n */\n\nconst addCaptionData = function ({\n  inbandTextTracks,\n  captionArray,\n  timestampOffset\n}) {\n  if (!captionArray) {\n    return;\n  }\n  const Cue = window$1.WebKitDataCue || window$1.VTTCue;\n  captionArray.forEach(caption => {\n    const track = caption.stream; // in CEA 608 captions, video.js/mux.js sends a content array\n    // with positioning data\n\n    if (caption.content) {\n      caption.content.forEach(value => {\n        const cue = new Cue(caption.startTime + timestampOffset, caption.endTime + timestampOffset, value.text);\n        cue.line = value.line;\n        cue.align = 'left';\n        cue.position = value.position;\n        cue.positionAlign = 'line-left';\n        inbandTextTracks[track].addCue(cue);\n      });\n    } else {\n      // otherwise, a text value with combined captions is sent\n      inbandTextTracks[track].addCue(new Cue(caption.startTime + timestampOffset, caption.endTime + timestampOffset, caption.text));\n    }\n  });\n};\n/**\n * Define properties on a cue for backwards compatability,\n * but warn the user that the way that they are using it\n * is depricated and will be removed at a later date.\n *\n * @param {Cue} cue the cue to add the properties on\n * @private\n */\n\nconst deprecateOldCue = function (cue) {\n  Object.defineProperties(cue.frame, {\n    id: {\n      get() {\n        videojs.log.warn('cue.frame.id is deprecated. Use cue.value.key instead.');\n        return cue.value.key;\n      }\n    },\n    value: {\n      get() {\n        videojs.log.warn('cue.frame.value is deprecated. Use cue.value.data instead.');\n        return cue.value.data;\n      }\n    },\n    privateData: {\n      get() {\n        videojs.log.warn('cue.frame.privateData is deprecated. Use cue.value.data instead.');\n        return cue.value.data;\n      }\n    }\n  });\n};\n/**\n * Add metadata text track data to a source handler given an array of metadata\n *\n * @param {Object}\n *   @param {Object} inbandTextTracks the inband text tracks\n *   @param {Array} metadataArray an array of meta data\n *   @param {number} timestampOffset the timestamp offset of the source buffer\n *   @param {number} videoDuration the duration of the video\n * @private\n */\n\nconst addMetadata = ({\n  inbandTextTracks,\n  metadataArray,\n  timestampOffset,\n  videoDuration\n}) => {\n  if (!metadataArray) {\n    return;\n  }\n  const Cue = window$1.WebKitDataCue || window$1.VTTCue;\n  const metadataTrack = inbandTextTracks.metadataTrack_;\n  if (!metadataTrack) {\n    return;\n  }\n  metadataArray.forEach(metadata => {\n    const time = metadata.cueTime + timestampOffset; // if time isn't a finite number between 0 and Infinity, like NaN,\n    // ignore this bit of metadata.\n    // This likely occurs when you have an non-timed ID3 tag like TIT2,\n    // which is the \"Title/Songname/Content description\" frame\n\n    if (typeof time !== 'number' || window$1.isNaN(time) || time < 0 || !(time < Infinity)) {\n      return;\n    } // If we have no frames, we can't create a cue.\n\n    if (!metadata.frames || !metadata.frames.length) {\n      return;\n    }\n    metadata.frames.forEach(frame => {\n      const cue = new Cue(time, time, frame.value || frame.url || frame.data || '');\n      cue.frame = frame;\n      cue.value = frame;\n      deprecateOldCue(cue);\n      metadataTrack.addCue(cue);\n    });\n  });\n  if (!metadataTrack.cues || !metadataTrack.cues.length) {\n    return;\n  } // Updating the metadeta cues so that\n  // the endTime of each cue is the startTime of the next cue\n  // the endTime of last cue is the duration of the video\n\n  const cues = metadataTrack.cues;\n  const cuesArray = []; // Create a copy of the TextTrackCueList...\n  // ...disregarding cues with a falsey value\n\n  for (let i = 0; i < cues.length; i++) {\n    if (cues[i]) {\n      cuesArray.push(cues[i]);\n    }\n  } // Group cues by their startTime value\n\n  const cuesGroupedByStartTime = cuesArray.reduce((obj, cue) => {\n    const timeSlot = obj[cue.startTime] || [];\n    timeSlot.push(cue);\n    obj[cue.startTime] = timeSlot;\n    return obj;\n  }, {}); // Sort startTimes by ascending order\n\n  const sortedStartTimes = Object.keys(cuesGroupedByStartTime).sort((a, b) => Number(a) - Number(b)); // Map each cue group's endTime to the next group's startTime\n\n  sortedStartTimes.forEach((startTime, idx) => {\n    const cueGroup = cuesGroupedByStartTime[startTime];\n    const finiteDuration = isFinite(videoDuration) ? videoDuration : startTime;\n    const nextTime = Number(sortedStartTimes[idx + 1]) || finiteDuration; // Map each cue's endTime the next group's startTime\n\n    cueGroup.forEach(cue => {\n      cue.endTime = nextTime;\n    });\n  });\n}; // object for mapping daterange attributes\n\nconst dateRangeAttr = {\n  id: 'ID',\n  class: 'CLASS',\n  startDate: 'START-DATE',\n  duration: 'DURATION',\n  endDate: 'END-DATE',\n  endOnNext: 'END-ON-NEXT',\n  plannedDuration: 'PLANNED-DURATION',\n  scte35Out: 'SCTE35-OUT',\n  scte35In: 'SCTE35-IN'\n};\nconst dateRangeKeysToOmit = new Set(['id', 'class', 'startDate', 'duration', 'endDate', 'endOnNext', 'startTime', 'endTime', 'processDateRange']);\n/**\n * Add DateRange metadata text track to a source handler given an array of metadata\n *\n * @param {Object}\n *   @param {Object} inbandTextTracks the inband text tracks\n *   @param {Array} dateRanges parsed media playlist\n * @private\n */\n\nconst addDateRangeMetadata = ({\n  inbandTextTracks,\n  dateRanges\n}) => {\n  const metadataTrack = inbandTextTracks.metadataTrack_;\n  if (!metadataTrack) {\n    return;\n  }\n  const Cue = window$1.WebKitDataCue || window$1.VTTCue;\n  dateRanges.forEach(dateRange => {\n    // we generate multiple cues for each date range with different attributes\n    for (const key of Object.keys(dateRange)) {\n      if (dateRangeKeysToOmit.has(key)) {\n        continue;\n      }\n      const cue = new Cue(dateRange.startTime, dateRange.endTime, '');\n      cue.id = dateRange.id;\n      cue.type = 'com.apple.quicktime.HLS';\n      cue.value = {\n        key: dateRangeAttr[key],\n        data: dateRange[key]\n      };\n      if (key === 'scte35Out' || key === 'scte35In') {\n        cue.value.data = new Uint8Array(cue.value.data.match(/[\\da-f]{2}/gi)).buffer;\n      }\n      metadataTrack.addCue(cue);\n    }\n    dateRange.processDateRange();\n  });\n};\n/**\n * Create metadata text track on video.js if it does not exist\n *\n * @param {Object} inbandTextTracks a reference to current inbandTextTracks\n * @param {string} dispatchType the inband metadata track dispatch type\n * @param {Object} tech the video.js tech\n * @private\n */\n\nconst createMetadataTrackIfNotExists = (inbandTextTracks, dispatchType, tech) => {\n  if (inbandTextTracks.metadataTrack_) {\n    return;\n  }\n  inbandTextTracks.metadataTrack_ = tech.addRemoteTextTrack({\n    kind: 'metadata',\n    label: 'Timed Metadata'\n  }, false).track;\n  if (!videojs.browser.IS_ANY_SAFARI) {\n    inbandTextTracks.metadataTrack_.inBandMetadataTrackDispatchType = dispatchType;\n  }\n};\n/**\n * Remove cues from a track on video.js.\n *\n * @param {Double} start start of where we should remove the cue\n * @param {Double} end end of where the we should remove the cue\n * @param {Object} track the text track to remove the cues from\n * @private\n */\n\nconst removeCuesFromTrack = function (start, end, track) {\n  let i;\n  let cue;\n  if (!track) {\n    return;\n  }\n  if (!track.cues) {\n    return;\n  }\n  i = track.cues.length;\n  while (i--) {\n    cue = track.cues[i]; // Remove any cue within the provided start and end time\n\n    if (cue.startTime >= start && cue.endTime <= end) {\n      track.removeCue(cue);\n    }\n  }\n};\n/**\n * Remove duplicate cues from a track on video.js (a cue is considered a\n * duplicate if it has the same time interval and text as another)\n *\n * @param {Object} track the text track to remove the duplicate cues from\n * @private\n */\n\nconst removeDuplicateCuesFromTrack = function (track) {\n  const cues = track.cues;\n  if (!cues) {\n    return;\n  }\n  const uniqueCues = {};\n  for (let i = cues.length - 1; i >= 0; i--) {\n    const cue = cues[i];\n    const cueKey = `${cue.startTime}-${cue.endTime}-${cue.text}`;\n    if (uniqueCues[cueKey]) {\n      track.removeCue(cue);\n    } else {\n      uniqueCues[cueKey] = cue;\n    }\n  }\n};\n\n/**\n * Returns a list of gops in the buffer that have a pts value of 3 seconds or more in\n * front of current time.\n *\n * @param {Array} buffer\n *        The current buffer of gop information\n * @param {number} currentTime\n *        The current time\n * @param {Double} mapping\n *        Offset to map display time to stream presentation time\n * @return {Array}\n *         List of gops considered safe to append over\n */\n\nconst gopsSafeToAlignWith = (buffer, currentTime, mapping) => {\n  if (typeof currentTime === 'undefined' || currentTime === null || !buffer.length) {\n    return [];\n  } // pts value for current time + 3 seconds to give a bit more wiggle room\n\n  const currentTimePts = Math.ceil((currentTime - mapping + 3) * ONE_SECOND_IN_TS);\n  let i;\n  for (i = 0; i < buffer.length; i++) {\n    if (buffer[i].pts > currentTimePts) {\n      break;\n    }\n  }\n  return buffer.slice(i);\n};\n/**\n * Appends gop information (timing and byteLength) received by the transmuxer for the\n * gops appended in the last call to appendBuffer\n *\n * @param {Array} buffer\n *        The current buffer of gop information\n * @param {Array} gops\n *        List of new gop information\n * @param {boolean} replace\n *        If true, replace the buffer with the new gop information. If false, append the\n *        new gop information to the buffer in the right location of time.\n * @return {Array}\n *         Updated list of gop information\n */\n\nconst updateGopBuffer = (buffer, gops, replace) => {\n  if (!gops.length) {\n    return buffer;\n  }\n  if (replace) {\n    // If we are in safe append mode, then completely overwrite the gop buffer\n    // with the most recent appeneded data. This will make sure that when appending\n    // future segments, we only try to align with gops that are both ahead of current\n    // time and in the last segment appended.\n    return gops.slice();\n  }\n  const start = gops[0].pts;\n  let i = 0;\n  for (i; i < buffer.length; i++) {\n    if (buffer[i].pts >= start) {\n      break;\n    }\n  }\n  return buffer.slice(0, i).concat(gops);\n};\n/**\n * Removes gop information in buffer that overlaps with provided start and end\n *\n * @param {Array} buffer\n *        The current buffer of gop information\n * @param {Double} start\n *        position to start the remove at\n * @param {Double} end\n *        position to end the remove at\n * @param {Double} mapping\n *        Offset to map display time to stream presentation time\n */\n\nconst removeGopBuffer = (buffer, start, end, mapping) => {\n  const startPts = Math.ceil((start - mapping) * ONE_SECOND_IN_TS);\n  const endPts = Math.ceil((end - mapping) * ONE_SECOND_IN_TS);\n  const updatedBuffer = buffer.slice();\n  let i = buffer.length;\n  while (i--) {\n    if (buffer[i].pts <= endPts) {\n      break;\n    }\n  }\n  if (i === -1) {\n    // no removal because end of remove range is before start of buffer\n    return updatedBuffer;\n  }\n  let j = i + 1;\n  while (j--) {\n    if (buffer[j].pts <= startPts) {\n      break;\n    }\n  } // clamp remove range start to 0 index\n\n  j = Math.max(j, 0);\n  updatedBuffer.splice(j, i - j + 1);\n  return updatedBuffer;\n};\nconst shallowEqual = function (a, b) {\n  // if both are undefined\n  // or one or the other is undefined\n  // they are not equal\n  if (!a && !b || !a && b || a && !b) {\n    return false;\n  } // they are the same object and thus, equal\n\n  if (a === b) {\n    return true;\n  } // sort keys so we can make sure they have\n  // all the same keys later.\n\n  const akeys = Object.keys(a).sort();\n  const bkeys = Object.keys(b).sort(); // different number of keys, not equal\n\n  if (akeys.length !== bkeys.length) {\n    return false;\n  }\n  for (let i = 0; i < akeys.length; i++) {\n    const key = akeys[i]; // different sorted keys, not equal\n\n    if (key !== bkeys[i]) {\n      return false;\n    } // different values, not equal\n\n    if (a[key] !== b[key]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// https://www.w3.org/TR/WebIDL-1/#quotaexceedederror\nconst QUOTA_EXCEEDED_ERR = 22;\n\n/**\n * The segment loader has no recourse except to fetch a segment in the\n * current playlist and use the internal timestamps in that segment to\n * generate a syncPoint. This function returns a good candidate index\n * for that process.\n *\n * @param {Array} segments - the segments array from a playlist.\n * @return {number} An index of a segment from the playlist to load\n */\n\nconst getSyncSegmentCandidate = function (currentTimeline, segments, targetTime) {\n  segments = segments || [];\n  const timelineSegments = [];\n  let time = 0;\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    if (currentTimeline === segment.timeline) {\n      timelineSegments.push(i);\n      time += segment.duration;\n      if (time > targetTime) {\n        return i;\n      }\n    }\n  }\n  if (timelineSegments.length === 0) {\n    return 0;\n  } // default to the last timeline segment\n\n  return timelineSegments[timelineSegments.length - 1];\n}; // In the event of a quota exceeded error, keep at least one second of back buffer. This\n// number was arbitrarily chosen and may be updated in the future, but seemed reasonable\n// as a start to prevent any potential issues with removing content too close to the\n// playhead.\n\nconst MIN_BACK_BUFFER = 1; // in ms\n\nconst CHECK_BUFFER_DELAY = 500;\nconst finite = num => typeof num === 'number' && isFinite(num); // With most content hovering around 30fps, if a segment has a duration less than a half\n// frame at 30fps or one frame at 60fps, the bandwidth and throughput calculations will\n// not accurately reflect the rest of the content.\n\nconst MIN_SEGMENT_DURATION_TO_SAVE_STATS = 1 / 60;\nconst illegalMediaSwitch = (loaderType, startingMedia, trackInfo) => {\n  // Although these checks should most likely cover non 'main' types, for now it narrows\n  // the scope of our checks.\n  if (loaderType !== 'main' || !startingMedia || !trackInfo) {\n    return null;\n  }\n  if (!trackInfo.hasAudio && !trackInfo.hasVideo) {\n    return 'Neither audio nor video found in segment.';\n  }\n  if (startingMedia.hasVideo && !trackInfo.hasVideo) {\n    return 'Only audio found in segment when we expected video.' + ' We can\\'t switch to audio only from a stream that had video.' + ' To get rid of this message, please add codec information to the manifest.';\n  }\n  if (!startingMedia.hasVideo && trackInfo.hasVideo) {\n    return 'Video found in segment when we expected only audio.' + ' We can\\'t switch to a stream with video from an audio only stream.' + ' To get rid of this message, please add codec information to the manifest.';\n  }\n  return null;\n};\n/**\n * Calculates a time value that is safe to remove from the back buffer without interrupting\n * playback.\n *\n * @param {TimeRange} seekable\n *        The current seekable range\n * @param {number} currentTime\n *        The current time of the player\n * @param {number} targetDuration\n *        The target duration of the current playlist\n * @return {number}\n *         Time that is safe to remove from the back buffer without interrupting playback\n */\n\nconst safeBackBufferTrimTime = (seekable, currentTime, targetDuration) => {\n  // 30 seconds before the playhead provides a safe default for trimming.\n  //\n  // Choosing a reasonable default is particularly important for high bitrate content and\n  // VOD videos/live streams with large windows, as the buffer may end up overfilled and\n  // throw an APPEND_BUFFER_ERR.\n  let trimTime = currentTime - Config.BACK_BUFFER_LENGTH;\n  if (seekable.length) {\n    // Some live playlists may have a shorter window of content than the full allowed back\n    // buffer. For these playlists, don't save content that's no longer within the window.\n    trimTime = Math.max(trimTime, seekable.start(0));\n  } // Don't remove within target duration of the current time to avoid the possibility of\n  // removing the GOP currently being played, as removing it can cause playback stalls.\n\n  const maxTrimTime = currentTime - targetDuration;\n  return Math.min(maxTrimTime, trimTime);\n};\nconst segmentInfoString = segmentInfo => {\n  const {\n    startOfSegment,\n    duration,\n    segment,\n    part,\n    playlist: {\n      mediaSequence: seq,\n      id,\n      segments = []\n    },\n    mediaIndex: index,\n    partIndex,\n    timeline\n  } = segmentInfo;\n  const segmentLen = segments.length - 1;\n  let selection = 'mediaIndex/partIndex increment';\n  if (segmentInfo.getMediaInfoForTime) {\n    selection = `getMediaInfoForTime (${segmentInfo.getMediaInfoForTime})`;\n  } else if (segmentInfo.isSyncRequest) {\n    selection = 'getSyncSegmentCandidate (isSyncRequest)';\n  }\n  if (segmentInfo.independent) {\n    selection += ` with independent ${segmentInfo.independent}`;\n  }\n  const hasPartIndex = typeof partIndex === 'number';\n  const name = segmentInfo.segment.uri ? 'segment' : 'pre-segment';\n  const zeroBasedPartCount = hasPartIndex ? getKnownPartCount({\n    preloadSegment: segment\n  }) - 1 : 0;\n  return `${name} [${seq + index}/${seq + segmentLen}]` + (hasPartIndex ? ` part [${partIndex}/${zeroBasedPartCount}]` : '') + ` segment start/end [${segment.start} => ${segment.end}]` + (hasPartIndex ? ` part start/end [${part.start} => ${part.end}]` : '') + ` startOfSegment [${startOfSegment}]` + ` duration [${duration}]` + ` timeline [${timeline}]` + ` selected by [${selection}]` + ` playlist [${id}]`;\n};\nconst timingInfoPropertyForMedia = mediaType => `${mediaType}TimingInfo`;\n/**\n * Returns the timestamp offset to use for the segment.\n *\n * @param {number} segmentTimeline\n *        The timeline of the segment\n * @param {number} currentTimeline\n *        The timeline currently being followed by the loader\n * @param {number} startOfSegment\n *        The estimated segment start\n * @param {TimeRange[]} buffered\n *        The loader's buffer\n * @param {boolean} overrideCheck\n *        If true, no checks are made to see if the timestamp offset value should be set,\n *        but sets it directly to a value.\n *\n * @return {number|null}\n *         Either a number representing a new timestamp offset, or null if the segment is\n *         part of the same timeline\n */\n\nconst timestampOffsetForSegment = ({\n  segmentTimeline,\n  currentTimeline,\n  startOfSegment,\n  buffered,\n  overrideCheck\n}) => {\n  // Check to see if we are crossing a discontinuity to see if we need to set the\n  // timestamp offset on the transmuxer and source buffer.\n  //\n  // Previously, we changed the timestampOffset if the start of this segment was less than\n  // the currently set timestampOffset, but this isn't desirable as it can produce bad\n  // behavior, especially around long running live streams.\n  if (!overrideCheck && segmentTimeline === currentTimeline) {\n    return null;\n  } // When changing renditions, it's possible to request a segment on an older timeline. For\n  // instance, given two renditions with the following:\n  //\n  // #EXTINF:10\n  // segment1\n  // #EXT-X-DISCONTINUITY\n  // #EXTINF:10\n  // segment2\n  // #EXTINF:10\n  // segment3\n  //\n  // And the current player state:\n  //\n  // current time: 8\n  // buffer: 0 => 20\n  //\n  // The next segment on the current rendition would be segment3, filling the buffer from\n  // 20s onwards. However, if a rendition switch happens after segment2 was requested,\n  // then the next segment to be requested will be segment1 from the new rendition in\n  // order to fill time 8 and onwards. Using the buffered end would result in repeated\n  // content (since it would position segment1 of the new rendition starting at 20s). This\n  // case can be identified when the new segment's timeline is a prior value. Instead of\n  // using the buffered end, the startOfSegment can be used, which, hopefully, will be\n  // more accurate to the actual start time of the segment.\n\n  if (segmentTimeline < currentTimeline) {\n    return startOfSegment;\n  } // segmentInfo.startOfSegment used to be used as the timestamp offset, however, that\n  // value uses the end of the last segment if it is available. While this value\n  // should often be correct, it's better to rely on the buffered end, as the new\n  // content post discontinuity should line up with the buffered end as if it were\n  // time 0 for the new content.\n\n  return buffered.length ? buffered.end(buffered.length - 1) : startOfSegment;\n};\n/**\n * Returns whether or not the loader should wait for a timeline change from the timeline\n * change controller before processing the segment.\n *\n * Primary timing in VHS goes by video. This is different from most media players, as\n * audio is more often used as the primary timing source. For the foreseeable future, VHS\n * will continue to use video as the primary timing source, due to the current logic and\n * expectations built around it.\n\n * Since the timing follows video, in order to maintain sync, the video loader is\n * responsible for setting both audio and video source buffer timestamp offsets.\n *\n * Setting different values for audio and video source buffers could lead to\n * desyncing. The following examples demonstrate some of the situations where this\n * distinction is important. Note that all of these cases involve demuxed content. When\n * content is muxed, the audio and video are packaged together, therefore syncing\n * separate media playlists is not an issue.\n *\n * CASE 1: Audio prepares to load a new timeline before video:\n *\n * Timeline:       0                 1\n * Audio Segments: 0 1 2 3 4 5 DISCO 6 7 8 9\n * Audio Loader:                     ^\n * Video Segments: 0 1 2 3 4 5 DISCO 6 7 8 9\n * Video Loader              ^\n *\n * In the above example, the audio loader is preparing to load the 6th segment, the first\n * after a discontinuity, while the video loader is still loading the 5th segment, before\n * the discontinuity.\n *\n * If the audio loader goes ahead and loads and appends the 6th segment before the video\n * loader crosses the discontinuity, then when appended, the 6th audio segment will use\n * the timestamp offset from timeline 0. This will likely lead to desyncing. In addition,\n * the audio loader must provide the audioAppendStart value to trim the content in the\n * transmuxer, and that value relies on the audio timestamp offset. Since the audio\n * timestamp offset is set by the video (main) loader, the audio loader shouldn't load the\n * segment until that value is provided.\n *\n * CASE 2: Video prepares to load a new timeline before audio:\n *\n * Timeline:       0                 1\n * Audio Segments: 0 1 2 3 4 5 DISCO 6 7 8 9\n * Audio Loader:             ^\n * Video Segments: 0 1 2 3 4 5 DISCO 6 7 8 9\n * Video Loader                      ^\n *\n * In the above example, the video loader is preparing to load the 6th segment, the first\n * after a discontinuity, while the audio loader is still loading the 5th segment, before\n * the discontinuity.\n *\n * If the video loader goes ahead and loads and appends the 6th segment, then once the\n * segment is loaded and processed, both the video and audio timestamp offsets will be\n * set, since video is used as the primary timing source. This is to ensure content lines\n * up appropriately, as any modifications to the video timing are reflected by audio when\n * the video loader sets the audio and video timestamp offsets to the same value. However,\n * setting the timestamp offset for audio before audio has had a chance to change\n * timelines will likely lead to desyncing, as the audio loader will append segment 5 with\n * a timestamp intended to apply to segments from timeline 1 rather than timeline 0.\n *\n * CASE 3: When seeking, audio prepares to load a new timeline before video\n *\n * Timeline:       0                 1\n * Audio Segments: 0 1 2 3 4 5 DISCO 6 7 8 9\n * Audio Loader:           ^\n * Video Segments: 0 1 2 3 4 5 DISCO 6 7 8 9\n * Video Loader            ^\n *\n * In the above example, both audio and video loaders are loading segments from timeline\n * 0, but imagine that the seek originated from timeline 1.\n *\n * When seeking to a new timeline, the timestamp offset will be set based on the expected\n * segment start of the loaded video segment. In order to maintain sync, the audio loader\n * must wait for the video loader to load its segment and update both the audio and video\n * timestamp offsets before it may load and append its own segment. This is the case\n * whether the seek results in a mismatched segment request (e.g., the audio loader\n * chooses to load segment 3 and the video loader chooses to load segment 4) or the\n * loaders choose to load the same segment index from each playlist, as the segments may\n * not be aligned perfectly, even for matching segment indexes.\n *\n * @param {Object} timelinechangeController\n * @param {number} currentTimeline\n *        The timeline currently being followed by the loader\n * @param {number} segmentTimeline\n *        The timeline of the segment being loaded\n * @param {('main'|'audio')} loaderType\n *        The loader type\n * @param {boolean} audioDisabled\n *        Whether the audio is disabled for the loader. This should only be true when the\n *        loader may have muxed audio in its segment, but should not append it, e.g., for\n *        the main loader when an alternate audio playlist is active.\n *\n * @return {boolean}\n *         Whether the loader should wait for a timeline change from the timeline change\n *         controller before processing the segment\n */\n\nconst shouldWaitForTimelineChange = ({\n  timelineChangeController,\n  currentTimeline,\n  segmentTimeline,\n  loaderType,\n  audioDisabled\n}) => {\n  if (currentTimeline === segmentTimeline) {\n    return false;\n  }\n  if (loaderType === 'audio') {\n    const lastMainTimelineChange = timelineChangeController.lastTimelineChange({\n      type: 'main'\n    }); // Audio loader should wait if:\n    //\n    // * main hasn't had a timeline change yet (thus has not loaded its first segment)\n    // * main hasn't yet changed to the timeline audio is looking to load\n\n    return !lastMainTimelineChange || lastMainTimelineChange.to !== segmentTimeline;\n  } // The main loader only needs to wait for timeline changes if there's demuxed audio.\n  // Otherwise, there's nothing to wait for, since audio would be muxed into the main\n  // loader's segments (or the content is audio/video only and handled by the main\n  // loader).\n\n  if (loaderType === 'main' && audioDisabled) {\n    const pendingAudioTimelineChange = timelineChangeController.pendingTimelineChange({\n      type: 'audio'\n    }); // Main loader should wait for the audio loader if audio is not pending a timeline\n    // change to the current timeline.\n    //\n    // Since the main loader is responsible for setting the timestamp offset for both\n    // audio and video, the main loader must wait for audio to be about to change to its\n    // timeline before setting the offset, otherwise, if audio is behind in loading,\n    // segments from the previous timeline would be adjusted by the new timestamp offset.\n    //\n    // This requirement means that video will not cross a timeline until the audio is\n    // about to cross to it, so that way audio and video will always cross the timeline\n    // together.\n    //\n    // In addition to normal timeline changes, these rules also apply to the start of a\n    // stream (going from a non-existent timeline, -1, to timeline 0). It's important\n    // that these rules apply to the first timeline change because if they did not, it's\n    // possible that the main loader will cross two timelines before the audio loader has\n    // crossed one. Logic may be implemented to handle the startup as a special case, but\n    // it's easier to simply treat all timeline changes the same.\n\n    if (pendingAudioTimelineChange && pendingAudioTimelineChange.to === segmentTimeline) {\n      return false;\n    }\n    return true;\n  }\n  return false;\n};\nconst mediaDuration = timingInfos => {\n  let maxDuration = 0;\n  ['video', 'audio'].forEach(function (type) {\n    const typeTimingInfo = timingInfos[`${type}TimingInfo`];\n    if (!typeTimingInfo) {\n      return;\n    }\n    const {\n      start,\n      end\n    } = typeTimingInfo;\n    let duration;\n    if (typeof start === 'bigint' || typeof end === 'bigint') {\n      duration = window$1.BigInt(end) - window$1.BigInt(start);\n    } else if (typeof start === 'number' && typeof end === 'number') {\n      duration = end - start;\n    }\n    if (typeof duration !== 'undefined' && duration > maxDuration) {\n      maxDuration = duration;\n    }\n  }); // convert back to a number if it is lower than MAX_SAFE_INTEGER\n  // as we only need BigInt when we are above that.\n\n  if (typeof maxDuration === 'bigint' && maxDuration < Number.MAX_SAFE_INTEGER) {\n    maxDuration = Number(maxDuration);\n  }\n  return maxDuration;\n};\nconst segmentTooLong = ({\n  segmentDuration,\n  maxDuration\n}) => {\n  // 0 duration segments are most likely due to metadata only segments or a lack of\n  // information.\n  if (!segmentDuration) {\n    return false;\n  } // For HLS:\n  //\n  // https://tools.ietf.org/html/draft-pantos-http-live-streaming-23#section-4.3.3.1\n  // The EXTINF duration of each Media Segment in the Playlist\n  // file, when rounded to the nearest integer, MUST be less than or equal\n  // to the target duration; longer segments can trigger playback stalls\n  // or other errors.\n  //\n  // For DASH, the mpd-parser uses the largest reported segment duration as the target\n  // duration. Although that reported duration is occasionally approximate (i.e., not\n  // exact), a strict check may report that a segment is too long more often in DASH.\n\n  return Math.round(segmentDuration) > maxDuration + TIME_FUDGE_FACTOR;\n};\nconst getTroublesomeSegmentDurationMessage = (segmentInfo, sourceType) => {\n  // Right now we aren't following DASH's timing model exactly, so only perform\n  // this check for HLS content.\n  if (sourceType !== 'hls') {\n    return null;\n  }\n  const segmentDuration = mediaDuration({\n    audioTimingInfo: segmentInfo.audioTimingInfo,\n    videoTimingInfo: segmentInfo.videoTimingInfo\n  }); // Don't report if we lack information.\n  //\n  // If the segment has a duration of 0 it is either a lack of information or a\n  // metadata only segment and shouldn't be reported here.\n\n  if (!segmentDuration) {\n    return null;\n  }\n  const targetDuration = segmentInfo.playlist.targetDuration;\n  const isSegmentWayTooLong = segmentTooLong({\n    segmentDuration,\n    maxDuration: targetDuration * 2\n  });\n  const isSegmentSlightlyTooLong = segmentTooLong({\n    segmentDuration,\n    maxDuration: targetDuration\n  });\n  const segmentTooLongMessage = `Segment with index ${segmentInfo.mediaIndex} ` + `from playlist ${segmentInfo.playlist.id} ` + `has a duration of ${segmentDuration} ` + `when the reported duration is ${segmentInfo.duration} ` + `and the target duration is ${targetDuration}. ` + 'For HLS content, a duration in excess of the target duration may result in ' + 'playback issues. See the HLS specification section on EXT-X-TARGETDURATION for ' + 'more details: ' + 'https://tools.ietf.org/html/draft-pantos-http-live-streaming-23#section-4.3.3.1';\n  if (isSegmentWayTooLong || isSegmentSlightlyTooLong) {\n    return {\n      severity: isSegmentWayTooLong ? 'warn' : 'info',\n      message: segmentTooLongMessage\n    };\n  }\n  return null;\n};\n/**\n * An object that manages segment loading and appending.\n *\n * @class SegmentLoader\n * @param {Object} options required and optional options\n * @extends videojs.EventTarget\n */\n\nclass SegmentLoader extends videojs.EventTarget {\n  constructor(settings, options = {}) {\n    super(); // check pre-conditions\n\n    if (!settings) {\n      throw new TypeError('Initialization settings are required');\n    }\n    if (typeof settings.currentTime !== 'function') {\n      throw new TypeError('No currentTime getter specified');\n    }\n    if (!settings.mediaSource) {\n      throw new TypeError('No MediaSource specified');\n    } // public properties\n\n    this.bandwidth = settings.bandwidth;\n    this.throughput = {\n      rate: 0,\n      count: 0\n    };\n    this.roundTrip = NaN;\n    this.resetStats_();\n    this.mediaIndex = null;\n    this.partIndex = null; // private settings\n\n    this.hasPlayed_ = settings.hasPlayed;\n    this.currentTime_ = settings.currentTime;\n    this.seekable_ = settings.seekable;\n    this.seeking_ = settings.seeking;\n    this.duration_ = settings.duration;\n    this.mediaSource_ = settings.mediaSource;\n    this.vhs_ = settings.vhs;\n    this.loaderType_ = settings.loaderType;\n    this.currentMediaInfo_ = void 0;\n    this.startingMediaInfo_ = void 0;\n    this.segmentMetadataTrack_ = settings.segmentMetadataTrack;\n    this.goalBufferLength_ = settings.goalBufferLength;\n    this.sourceType_ = settings.sourceType;\n    this.sourceUpdater_ = settings.sourceUpdater;\n    this.inbandTextTracks_ = settings.inbandTextTracks;\n    this.state_ = 'INIT';\n    this.timelineChangeController_ = settings.timelineChangeController;\n    this.shouldSaveSegmentTimingInfo_ = true;\n    this.parse708captions_ = settings.parse708captions;\n    this.useDtsForTimestampOffset_ = settings.useDtsForTimestampOffset;\n    this.captionServices_ = settings.captionServices;\n    this.exactManifestTimings = settings.exactManifestTimings;\n    this.addMetadataToTextTrack = settings.addMetadataToTextTrack; // private instance variables\n\n    this.checkBufferTimeout_ = null;\n    this.error_ = void 0;\n    this.currentTimeline_ = -1;\n    this.shouldForceTimestampOffsetAfterResync_ = false;\n    this.pendingSegment_ = null;\n    this.xhrOptions_ = null;\n    this.pendingSegments_ = [];\n    this.audioDisabled_ = false;\n    this.isPendingTimestampOffset_ = false; // TODO possibly move gopBuffer and timeMapping info to a separate controller\n\n    this.gopBuffer_ = [];\n    this.timeMapping_ = 0;\n    this.safeAppend_ = false;\n    this.appendInitSegment_ = {\n      audio: true,\n      video: true\n    };\n    this.playlistOfLastInitSegment_ = {\n      audio: null,\n      video: null\n    };\n    this.callQueue_ = []; // If the segment loader prepares to load a segment, but does not have enough\n    // information yet to start the loading process (e.g., if the audio loader wants to\n    // load a segment from the next timeline but the main loader hasn't yet crossed that\n    // timeline), then the load call will be added to the queue until it is ready to be\n    // processed.\n\n    this.loadQueue_ = [];\n    this.metadataQueue_ = {\n      id3: [],\n      caption: []\n    };\n    this.waitingOnRemove_ = false;\n    this.quotaExceededErrorRetryTimeout_ = null; // Fragmented mp4 playback\n\n    this.activeInitSegmentId_ = null;\n    this.initSegments_ = {}; // HLSe playback\n\n    this.cacheEncryptionKeys_ = settings.cacheEncryptionKeys;\n    this.keyCache_ = {};\n    this.decrypter_ = settings.decrypter; // Manages the tracking and generation of sync-points, mappings\n    // between a time in the display time and a segment index within\n    // a playlist\n\n    this.syncController_ = settings.syncController;\n    this.syncPoint_ = {\n      segmentIndex: 0,\n      time: 0\n    };\n    this.transmuxer_ = this.createTransmuxer_();\n    this.triggerSyncInfoUpdate_ = () => this.trigger('syncinfoupdate');\n    this.syncController_.on('syncinfoupdate', this.triggerSyncInfoUpdate_);\n    this.mediaSource_.addEventListener('sourceopen', () => {\n      if (!this.isEndOfStream_()) {\n        this.ended_ = false;\n      }\n    }); // ...for determining the fetch location\n\n    this.fetchAtBuffer_ = false;\n    this.logger_ = logger(`SegmentLoader[${this.loaderType_}]`);\n    Object.defineProperty(this, 'state', {\n      get() {\n        return this.state_;\n      },\n      set(newState) {\n        if (newState !== this.state_) {\n          this.logger_(`${this.state_} -> ${newState}`);\n          this.state_ = newState;\n          this.trigger('statechange');\n        }\n      }\n    });\n    this.sourceUpdater_.on('ready', () => {\n      if (this.hasEnoughInfoToAppend_()) {\n        this.processCallQueue_();\n      }\n    }); // Only the main loader needs to listen for pending timeline changes, as the main\n    // loader should wait for audio to be ready to change its timeline so that both main\n    // and audio timelines change together. For more details, see the\n    // shouldWaitForTimelineChange function.\n\n    if (this.loaderType_ === 'main') {\n      this.timelineChangeController_.on('pendingtimelinechange', () => {\n        if (this.hasEnoughInfoToAppend_()) {\n          this.processCallQueue_();\n        }\n      });\n    } // The main loader only listens on pending timeline changes, but the audio loader,\n    // since its loads follow main, needs to listen on timeline changes. For more details,\n    // see the shouldWaitForTimelineChange function.\n\n    if (this.loaderType_ === 'audio') {\n      this.timelineChangeController_.on('timelinechange', () => {\n        if (this.hasEnoughInfoToLoad_()) {\n          this.processLoadQueue_();\n        }\n        if (this.hasEnoughInfoToAppend_()) {\n          this.processCallQueue_();\n        }\n      });\n    }\n  }\n  createTransmuxer_() {\n    return segmentTransmuxer.createTransmuxer({\n      remux: false,\n      alignGopsAtEnd: this.safeAppend_,\n      keepOriginalTimestamps: true,\n      parse708captions: this.parse708captions_,\n      captionServices: this.captionServices_\n    });\n  }\n  /**\n   * reset all of our media stats\n   *\n   * @private\n   */\n\n  resetStats_() {\n    this.mediaBytesTransferred = 0;\n    this.mediaRequests = 0;\n    this.mediaRequestsAborted = 0;\n    this.mediaRequestsTimedout = 0;\n    this.mediaRequestsErrored = 0;\n    this.mediaTransferDuration = 0;\n    this.mediaSecondsLoaded = 0;\n    this.mediaAppends = 0;\n  }\n  /**\n   * dispose of the SegmentLoader and reset to the default state\n   */\n\n  dispose() {\n    this.trigger('dispose');\n    this.state = 'DISPOSED';\n    this.pause();\n    this.abort_();\n    if (this.transmuxer_) {\n      this.transmuxer_.terminate();\n    }\n    this.resetStats_();\n    if (this.checkBufferTimeout_) {\n      window$1.clearTimeout(this.checkBufferTimeout_);\n    }\n    if (this.syncController_ && this.triggerSyncInfoUpdate_) {\n      this.syncController_.off('syncinfoupdate', this.triggerSyncInfoUpdate_);\n    }\n    this.off();\n  }\n  setAudio(enable) {\n    this.audioDisabled_ = !enable;\n    if (enable) {\n      this.appendInitSegment_.audio = true;\n    } else {\n      // remove current track audio if it gets disabled\n      this.sourceUpdater_.removeAudio(0, this.duration_());\n    }\n  }\n  /**\n   * abort anything that is currently doing on with the SegmentLoader\n   * and reset to a default state\n   */\n\n  abort() {\n    if (this.state !== 'WAITING') {\n      if (this.pendingSegment_) {\n        this.pendingSegment_ = null;\n      }\n      return;\n    }\n    this.abort_(); // We aborted the requests we were waiting on, so reset the loader's state to READY\n    // since we are no longer \"waiting\" on any requests. XHR callback is not always run\n    // when the request is aborted. This will prevent the loader from being stuck in the\n    // WAITING state indefinitely.\n\n    this.state = 'READY'; // don't wait for buffer check timeouts to begin fetching the\n    // next segment\n\n    if (!this.paused()) {\n      this.monitorBuffer_();\n    }\n  }\n  /**\n   * abort all pending xhr requests and null any pending segements\n   *\n   * @private\n   */\n\n  abort_() {\n    if (this.pendingSegment_ && this.pendingSegment_.abortRequests) {\n      this.pendingSegment_.abortRequests();\n    } // clear out the segment being processed\n\n    this.pendingSegment_ = null;\n    this.callQueue_ = [];\n    this.loadQueue_ = [];\n    this.metadataQueue_.id3 = [];\n    this.metadataQueue_.caption = [];\n    this.timelineChangeController_.clearPendingTimelineChange(this.loaderType_);\n    this.waitingOnRemove_ = false;\n    window$1.clearTimeout(this.quotaExceededErrorRetryTimeout_);\n    this.quotaExceededErrorRetryTimeout_ = null;\n  }\n  checkForAbort_(requestId) {\n    // If the state is APPENDING, then aborts will not modify the state, meaning the first\n    // callback that happens should reset the state to READY so that loading can continue.\n    if (this.state === 'APPENDING' && !this.pendingSegment_) {\n      this.state = 'READY';\n      return true;\n    }\n    if (!this.pendingSegment_ || this.pendingSegment_.requestId !== requestId) {\n      return true;\n    }\n    return false;\n  }\n  /**\n   * set an error on the segment loader and null out any pending segements\n   *\n   * @param {Error} error the error to set on the SegmentLoader\n   * @return {Error} the error that was set or that is currently set\n   */\n\n  error(error) {\n    if (typeof error !== 'undefined') {\n      this.logger_('error occurred:', error);\n      this.error_ = error;\n    }\n    this.pendingSegment_ = null;\n    return this.error_;\n  }\n  endOfStream() {\n    this.ended_ = true;\n    if (this.transmuxer_) {\n      // need to clear out any cached data to prepare for the new segment\n      segmentTransmuxer.reset(this.transmuxer_);\n    }\n    this.gopBuffer_.length = 0;\n    this.pause();\n    this.trigger('ended');\n  }\n  /**\n   * Indicates which time ranges are buffered\n   *\n   * @return {TimeRange}\n   *         TimeRange object representing the current buffered ranges\n   */\n\n  buffered_() {\n    const trackInfo = this.getMediaInfo_();\n    if (!this.sourceUpdater_ || !trackInfo) {\n      return createTimeRanges();\n    }\n    if (this.loaderType_ === 'main') {\n      const {\n        hasAudio,\n        hasVideo,\n        isMuxed\n      } = trackInfo;\n      if (hasVideo && hasAudio && !this.audioDisabled_ && !isMuxed) {\n        return this.sourceUpdater_.buffered();\n      }\n      if (hasVideo) {\n        return this.sourceUpdater_.videoBuffered();\n      }\n    } // One case that can be ignored for now is audio only with alt audio,\n    // as we don't yet have proper support for that.\n\n    return this.sourceUpdater_.audioBuffered();\n  }\n  /**\n   * Gets and sets init segment for the provided map\n   *\n   * @param {Object} map\n   *        The map object representing the init segment to get or set\n   * @param {boolean=} set\n   *        If true, the init segment for the provided map should be saved\n   * @return {Object}\n   *         map object for desired init segment\n   */\n\n  initSegmentForMap(map, set = false) {\n    if (!map) {\n      return null;\n    }\n    const id = initSegmentId(map);\n    let storedMap = this.initSegments_[id];\n    if (set && !storedMap && map.bytes) {\n      this.initSegments_[id] = storedMap = {\n        resolvedUri: map.resolvedUri,\n        byterange: map.byterange,\n        bytes: map.bytes,\n        tracks: map.tracks,\n        timescales: map.timescales\n      };\n    }\n    return storedMap || map;\n  }\n  /**\n   * Gets and sets key for the provided key\n   *\n   * @param {Object} key\n   *        The key object representing the key to get or set\n   * @param {boolean=} set\n   *        If true, the key for the provided key should be saved\n   * @return {Object}\n   *         Key object for desired key\n   */\n\n  segmentKey(key, set = false) {\n    if (!key) {\n      return null;\n    }\n    const id = segmentKeyId(key);\n    let storedKey = this.keyCache_[id]; // TODO: We should use the HTTP Expires header to invalidate our cache per\n    // https://tools.ietf.org/html/draft-pantos-http-live-streaming-23#section-6.2.3\n\n    if (this.cacheEncryptionKeys_ && set && !storedKey && key.bytes) {\n      this.keyCache_[id] = storedKey = {\n        resolvedUri: key.resolvedUri,\n        bytes: key.bytes\n      };\n    }\n    const result = {\n      resolvedUri: (storedKey || key).resolvedUri\n    };\n    if (storedKey) {\n      result.bytes = storedKey.bytes;\n    }\n    return result;\n  }\n  /**\n   * Returns true if all configuration required for loading is present, otherwise false.\n   *\n   * @return {boolean} True if the all configuration is ready for loading\n   * @private\n   */\n\n  couldBeginLoading_() {\n    return this.playlist_ && !this.paused();\n  }\n  /**\n   * load a playlist and start to fill the buffer\n   */\n\n  load() {\n    // un-pause\n    this.monitorBuffer_(); // if we don't have a playlist yet, keep waiting for one to be\n    // specified\n\n    if (!this.playlist_) {\n      return;\n    } // if all the configuration is ready, initialize and begin loading\n\n    if (this.state === 'INIT' && this.couldBeginLoading_()) {\n      return this.init_();\n    } // if we're in the middle of processing a segment already, don't\n    // kick off an additional segment request\n\n    if (!this.couldBeginLoading_() || this.state !== 'READY' && this.state !== 'INIT') {\n      return;\n    }\n    this.state = 'READY';\n  }\n  /**\n   * Once all the starting parameters have been specified, begin\n   * operation. This method should only be invoked from the INIT\n   * state.\n   *\n   * @private\n   */\n\n  init_() {\n    this.state = 'READY'; // if this is the audio segment loader, and it hasn't been inited before, then any old\n    // audio data from the muxed content should be removed\n\n    this.resetEverything();\n    return this.monitorBuffer_();\n  }\n  /**\n   * set a playlist on the segment loader\n   *\n   * @param {PlaylistLoader} media the playlist to set on the segment loader\n   */\n\n  playlist(newPlaylist, options = {}) {\n    if (!newPlaylist) {\n      return;\n    }\n    const oldPlaylist = this.playlist_;\n    const segmentInfo = this.pendingSegment_;\n    this.playlist_ = newPlaylist;\n    this.xhrOptions_ = options; // when we haven't started playing yet, the start of a live playlist\n    // is always our zero-time so force a sync update each time the playlist\n    // is refreshed from the server\n    //\n    // Use the INIT state to determine if playback has started, as the playlist sync info\n    // should be fixed once requests begin (as sync points are generated based on sync\n    // info), but not before then.\n\n    if (this.state === 'INIT') {\n      newPlaylist.syncInfo = {\n        mediaSequence: newPlaylist.mediaSequence,\n        time: 0\n      }; // Setting the date time mapping means mapping the program date time (if available)\n      // to time 0 on the player's timeline. The playlist's syncInfo serves a similar\n      // purpose, mapping the initial mediaSequence to time zero. Since the syncInfo can\n      // be updated as the playlist is refreshed before the loader starts loading, the\n      // program date time mapping needs to be updated as well.\n      //\n      // This mapping is only done for the main loader because a program date time should\n      // map equivalently between playlists.\n\n      if (this.loaderType_ === 'main') {\n        this.syncController_.setDateTimeMappingForStart(newPlaylist);\n      }\n    }\n    let oldId = null;\n    if (oldPlaylist) {\n      if (oldPlaylist.id) {\n        oldId = oldPlaylist.id;\n      } else if (oldPlaylist.uri) {\n        oldId = oldPlaylist.uri;\n      }\n    }\n    this.logger_(`playlist update [${oldId} => ${newPlaylist.id || newPlaylist.uri}]`);\n    this.syncController_.updateMediaSequenceMap(newPlaylist, this.currentTime_(), this.loaderType_); // in VOD, this is always a rendition switch (or we updated our syncInfo above)\n    // in LIVE, we always want to update with new playlists (including refreshes)\n\n    this.trigger('syncinfoupdate'); // if we were unpaused but waiting for a playlist, start\n    // buffering now\n\n    if (this.state === 'INIT' && this.couldBeginLoading_()) {\n      return this.init_();\n    }\n    if (!oldPlaylist || oldPlaylist.uri !== newPlaylist.uri) {\n      if (this.mediaIndex !== null) {\n        // we must reset/resync the segment loader when we switch renditions and\n        // the segment loader is already synced to the previous rendition\n        // We only want to reset the loader here for LLHLS playback, as resetLoader sets fetchAtBuffer_\n        // to false, resulting in fetching segments at currentTime and causing repeated\n        // same-segment requests on playlist change. This erroneously drives up the playback watcher\n        // stalled segment count, as re-requesting segments at the currentTime or browser cached segments\n        // will not change the buffer.\n        // Reference for LLHLS fixes: https://github.com/videojs/http-streaming/pull/1201\n        const isLLHLS = !newPlaylist.endList && typeof newPlaylist.partTargetDuration === 'number';\n        if (isLLHLS) {\n          this.resetLoader();\n        } else {\n          this.resyncLoader();\n        }\n      }\n      this.currentMediaInfo_ = void 0;\n      this.trigger('playlistupdate'); // the rest of this function depends on `oldPlaylist` being defined\n\n      return;\n    } // we reloaded the same playlist so we are in a live scenario\n    // and we will likely need to adjust the mediaIndex\n\n    const mediaSequenceDiff = newPlaylist.mediaSequence - oldPlaylist.mediaSequence;\n    this.logger_(`live window shift [${mediaSequenceDiff}]`); // update the mediaIndex on the SegmentLoader\n    // this is important because we can abort a request and this value must be\n    // equal to the last appended mediaIndex\n\n    if (this.mediaIndex !== null) {\n      this.mediaIndex -= mediaSequenceDiff; // this can happen if we are going to load the first segment, but get a playlist\n      // update during that. mediaIndex would go from 0 to -1 if mediaSequence in the\n      // new playlist was incremented by 1.\n\n      if (this.mediaIndex < 0) {\n        this.mediaIndex = null;\n        this.partIndex = null;\n      } else {\n        const segment = this.playlist_.segments[this.mediaIndex]; // partIndex should remain the same for the same segment\n        // unless parts fell off of the playlist for this segment.\n        // In that case we need to reset partIndex and resync\n\n        if (this.partIndex && (!segment.parts || !segment.parts.length || !segment.parts[this.partIndex])) {\n          const mediaIndex = this.mediaIndex;\n          this.logger_(`currently processing part (index ${this.partIndex}) no longer exists.`);\n          this.resetLoader(); // We want to throw away the partIndex and the data associated with it,\n          // as the part was dropped from our current playlists segment.\n          // The mediaIndex will still be valid so keep that around.\n\n          this.mediaIndex = mediaIndex;\n        }\n      }\n    } // update the mediaIndex on the SegmentInfo object\n    // this is important because we will update this.mediaIndex with this value\n    // in `handleAppendsDone_` after the segment has been successfully appended\n\n    if (segmentInfo) {\n      segmentInfo.mediaIndex -= mediaSequenceDiff;\n      if (segmentInfo.mediaIndex < 0) {\n        segmentInfo.mediaIndex = null;\n        segmentInfo.partIndex = null;\n      } else {\n        // we need to update the referenced segment so that timing information is\n        // saved for the new playlist's segment, however, if the segment fell off the\n        // playlist, we can leave the old reference and just lose the timing info\n        if (segmentInfo.mediaIndex >= 0) {\n          segmentInfo.segment = newPlaylist.segments[segmentInfo.mediaIndex];\n        }\n        if (segmentInfo.partIndex >= 0 && segmentInfo.segment.parts) {\n          segmentInfo.part = segmentInfo.segment.parts[segmentInfo.partIndex];\n        }\n      }\n    }\n    this.syncController_.saveExpiredSegmentInfo(oldPlaylist, newPlaylist);\n  }\n  /**\n   * Prevent the loader from fetching additional segments. If there\n   * is a segment request outstanding, it will finish processing\n   * before the loader halts. A segment loader can be unpaused by\n   * calling load().\n   */\n\n  pause() {\n    if (this.checkBufferTimeout_) {\n      window$1.clearTimeout(this.checkBufferTimeout_);\n      this.checkBufferTimeout_ = null;\n    }\n  }\n  /**\n   * Returns whether the segment loader is fetching additional\n   * segments when given the opportunity. This property can be\n   * modified through calls to pause() and load().\n   */\n\n  paused() {\n    return this.checkBufferTimeout_ === null;\n  }\n  /**\n   * Delete all the buffered data and reset the SegmentLoader\n   *\n   * @param {Function} [done] an optional callback to be executed when the remove\n   * operation is complete\n   */\n\n  resetEverything(done) {\n    this.ended_ = false;\n    this.activeInitSegmentId_ = null;\n    this.appendInitSegment_ = {\n      audio: true,\n      video: true\n    };\n    this.resetLoader(); // remove from 0, the earliest point, to Infinity, to signify removal of everything.\n    // VTT Segment Loader doesn't need to do anything but in the regular SegmentLoader,\n    // we then clamp the value to duration if necessary.\n\n    this.remove(0, Infinity, done); // clears fmp4 captions\n\n    if (this.transmuxer_) {\n      this.transmuxer_.postMessage({\n        action: 'clearAllMp4Captions'\n      }); // reset the cache in the transmuxer\n\n      this.transmuxer_.postMessage({\n        action: 'reset'\n      });\n    }\n  }\n  /**\n   * Force the SegmentLoader to resync and start loading around the currentTime instead\n   * of starting at the end of the buffer\n   *\n   * Useful for fast quality changes\n   */\n\n  resetLoader() {\n    this.fetchAtBuffer_ = false;\n    this.resyncLoader();\n  }\n  /**\n   * Force the SegmentLoader to restart synchronization and make a conservative guess\n   * before returning to the simple walk-forward method\n   */\n\n  resyncLoader() {\n    if (this.transmuxer_) {\n      // need to clear out any cached data to prepare for the new segment\n      segmentTransmuxer.reset(this.transmuxer_);\n    }\n    this.mediaIndex = null;\n    this.partIndex = null;\n    this.syncPoint_ = null;\n    this.isPendingTimestampOffset_ = false;\n    this.shouldForceTimestampOffsetAfterResync_ = true;\n    this.callQueue_ = [];\n    this.loadQueue_ = [];\n    this.metadataQueue_.id3 = [];\n    this.metadataQueue_.caption = [];\n    this.abort();\n    if (this.transmuxer_) {\n      this.transmuxer_.postMessage({\n        action: 'clearParsedMp4Captions'\n      });\n    }\n  }\n  /**\n   * Remove any data in the source buffer between start and end times\n   *\n   * @param {number} start - the start time of the region to remove from the buffer\n   * @param {number} end - the end time of the region to remove from the buffer\n   * @param {Function} [done] - an optional callback to be executed when the remove\n   * @param {boolean} force - force all remove operations to happen\n   * operation is complete\n   */\n\n  remove(start, end, done = () => {}, force = false) {\n    // clamp end to duration if we need to remove everything.\n    // This is due to a browser bug that causes issues if we remove to Infinity.\n    // videojs/videojs-contrib-hls#1225\n    if (end === Infinity) {\n      end = this.duration_();\n    } // skip removes that would throw an error\n    // commonly happens during a rendition switch at the start of a video\n    // from start 0 to end 0\n\n    if (end <= start) {\n      this.logger_('skipping remove because end ${end} is <= start ${start}');\n      return;\n    }\n    if (!this.sourceUpdater_ || !this.getMediaInfo_()) {\n      this.logger_('skipping remove because no source updater or starting media info'); // nothing to remove if we haven't processed any media\n\n      return;\n    } // set it to one to complete this function's removes\n\n    let removesRemaining = 1;\n    const removeFinished = () => {\n      removesRemaining--;\n      if (removesRemaining === 0) {\n        done();\n      }\n    };\n    if (force || !this.audioDisabled_) {\n      removesRemaining++;\n      this.sourceUpdater_.removeAudio(start, end, removeFinished);\n    } // While it would be better to only remove video if the main loader has video, this\n    // should be safe with audio only as removeVideo will call back even if there's no\n    // video buffer.\n    //\n    // In theory we can check to see if there's video before calling the remove, but in\n    // the event that we're switching between renditions and from video to audio only\n    // (when we add support for that), we may need to clear the video contents despite\n    // what the new media will contain.\n\n    if (force || this.loaderType_ === 'main') {\n      this.gopBuffer_ = removeGopBuffer(this.gopBuffer_, start, end, this.timeMapping_);\n      removesRemaining++;\n      this.sourceUpdater_.removeVideo(start, end, removeFinished);\n    } // remove any captions and ID3 tags\n\n    for (const track in this.inbandTextTracks_) {\n      removeCuesFromTrack(start, end, this.inbandTextTracks_[track]);\n    }\n    removeCuesFromTrack(start, end, this.segmentMetadataTrack_); // finished this function's removes\n\n    removeFinished();\n  }\n  /**\n   * (re-)schedule monitorBufferTick_ to run as soon as possible\n   *\n   * @private\n   */\n\n  monitorBuffer_() {\n    if (this.checkBufferTimeout_) {\n      window$1.clearTimeout(this.checkBufferTimeout_);\n    }\n    this.checkBufferTimeout_ = window$1.setTimeout(this.monitorBufferTick_.bind(this), 1);\n  }\n  /**\n   * As long as the SegmentLoader is in the READY state, periodically\n   * invoke fillBuffer_().\n   *\n   * @private\n   */\n\n  monitorBufferTick_() {\n    if (this.state === 'READY') {\n      this.fillBuffer_();\n    }\n    if (this.checkBufferTimeout_) {\n      window$1.clearTimeout(this.checkBufferTimeout_);\n    }\n    this.checkBufferTimeout_ = window$1.setTimeout(this.monitorBufferTick_.bind(this), CHECK_BUFFER_DELAY);\n  }\n  /**\n   * fill the buffer with segements unless the sourceBuffers are\n   * currently updating\n   *\n   * Note: this function should only ever be called by monitorBuffer_\n   * and never directly\n   *\n   * @private\n   */\n\n  fillBuffer_() {\n    // TODO since the source buffer maintains a queue, and we shouldn't call this function\n    // except when we're ready for the next segment, this check can most likely be removed\n    if (this.sourceUpdater_.updating()) {\n      return;\n    } // see if we need to begin loading immediately\n\n    const segmentInfo = this.chooseNextRequest_();\n    if (!segmentInfo) {\n      return;\n    }\n    if (typeof segmentInfo.timestampOffset === 'number') {\n      this.isPendingTimestampOffset_ = false;\n      this.timelineChangeController_.pendingTimelineChange({\n        type: this.loaderType_,\n        from: this.currentTimeline_,\n        to: segmentInfo.timeline\n      });\n    }\n    this.loadSegment_(segmentInfo);\n  }\n  /**\n   * Determines if we should call endOfStream on the media source based\n   * on the state of the buffer or if appened segment was the final\n   * segment in the playlist.\n   *\n   * @param {number} [mediaIndex] the media index of segment we last appended\n   * @param {Object} [playlist] a media playlist object\n   * @return {boolean} do we need to call endOfStream on the MediaSource\n   */\n\n  isEndOfStream_(mediaIndex = this.mediaIndex, playlist = this.playlist_, partIndex = this.partIndex) {\n    if (!playlist || !this.mediaSource_) {\n      return false;\n    }\n    const segment = typeof mediaIndex === 'number' && playlist.segments[mediaIndex]; // mediaIndex is zero based but length is 1 based\n\n    const appendedLastSegment = mediaIndex + 1 === playlist.segments.length; // true if there are no parts, or this is the last part.\n\n    const appendedLastPart = !segment || !segment.parts || partIndex + 1 === segment.parts.length; // if we've buffered to the end of the video, we need to call endOfStream\n    // so that MediaSources can trigger the `ended` event when it runs out of\n    // buffered data instead of waiting for me\n\n    return playlist.endList && this.mediaSource_.readyState === 'open' && appendedLastSegment && appendedLastPart;\n  }\n  /**\n   * Determines what request should be made given current segment loader state.\n   *\n   * @return {Object} a request object that describes the segment/part to load\n   */\n\n  chooseNextRequest_() {\n    const buffered = this.buffered_();\n    const bufferedEnd = lastBufferedEnd(buffered) || 0;\n    const bufferedTime = timeAheadOf(buffered, this.currentTime_());\n    const preloaded = !this.hasPlayed_() && bufferedTime >= 1;\n    const haveEnoughBuffer = bufferedTime >= this.goalBufferLength_();\n    const segments = this.playlist_.segments; // return no segment if:\n    // 1. we don't have segments\n    // 2. The video has not yet played and we already downloaded a segment\n    // 3. we already have enough buffered time\n\n    if (!segments.length || preloaded || haveEnoughBuffer) {\n      return null;\n    }\n    this.syncPoint_ = this.syncPoint_ || this.syncController_.getSyncPoint(this.playlist_, this.duration_(), this.currentTimeline_, this.currentTime_(), this.loaderType_);\n    const next = {\n      partIndex: null,\n      mediaIndex: null,\n      startOfSegment: null,\n      playlist: this.playlist_,\n      isSyncRequest: Boolean(!this.syncPoint_)\n    };\n    if (next.isSyncRequest) {\n      next.mediaIndex = getSyncSegmentCandidate(this.currentTimeline_, segments, bufferedEnd);\n      this.logger_(`choose next request. Can not find sync point. Fallback to media Index: ${next.mediaIndex}`);\n    } else if (this.mediaIndex !== null) {\n      const segment = segments[this.mediaIndex];\n      const partIndex = typeof this.partIndex === 'number' ? this.partIndex : -1;\n      next.startOfSegment = segment.end ? segment.end : bufferedEnd;\n      if (segment.parts && segment.parts[partIndex + 1]) {\n        next.mediaIndex = this.mediaIndex;\n        next.partIndex = partIndex + 1;\n      } else {\n        next.mediaIndex = this.mediaIndex + 1;\n      }\n    } else {\n      // Find the segment containing the end of the buffer or current time.\n      const {\n        segmentIndex,\n        startTime,\n        partIndex\n      } = Playlist.getMediaInfoForTime({\n        exactManifestTimings: this.exactManifestTimings,\n        playlist: this.playlist_,\n        currentTime: this.fetchAtBuffer_ ? bufferedEnd : this.currentTime_(),\n        startingPartIndex: this.syncPoint_.partIndex,\n        startingSegmentIndex: this.syncPoint_.segmentIndex,\n        startTime: this.syncPoint_.time\n      });\n      next.getMediaInfoForTime = this.fetchAtBuffer_ ? `bufferedEnd ${bufferedEnd}` : `currentTime ${this.currentTime_()}`;\n      next.mediaIndex = segmentIndex;\n      next.startOfSegment = startTime;\n      next.partIndex = partIndex;\n      this.logger_(`choose next request. Playlist switched and we have a sync point. Media Index: ${next.mediaIndex} `);\n    }\n    const nextSegment = segments[next.mediaIndex];\n    let nextPart = nextSegment && typeof next.partIndex === 'number' && nextSegment.parts && nextSegment.parts[next.partIndex]; // if the next segment index is invalid or\n    // the next partIndex is invalid do not choose a next segment.\n\n    if (!nextSegment || typeof next.partIndex === 'number' && !nextPart) {\n      return null;\n    } // if the next segment has parts, and we don't have a partIndex.\n    // Set partIndex to 0\n\n    if (typeof next.partIndex !== 'number' && nextSegment.parts) {\n      next.partIndex = 0;\n      nextPart = nextSegment.parts[0];\n    } // independentSegments applies to every segment in a playlist. If independentSegments appears in a main playlist,\n    // it applies to each segment in each media playlist.\n    // https://datatracker.ietf.org/doc/html/draft-pantos-http-live-streaming-23#section-4.3.5.1\n\n    const hasIndependentSegments = this.vhs_.playlists && this.vhs_.playlists.main && this.vhs_.playlists.main.independentSegments || this.playlist_.independentSegments; // if we have no buffered data then we need to make sure\n    // that the next part we append is \"independent\" if possible.\n    // So we check if the previous part is independent, and request\n    // it if it is.\n\n    if (!bufferedTime && nextPart && !hasIndependentSegments && !nextPart.independent) {\n      if (next.partIndex === 0) {\n        const lastSegment = segments[next.mediaIndex - 1];\n        const lastSegmentLastPart = lastSegment.parts && lastSegment.parts.length && lastSegment.parts[lastSegment.parts.length - 1];\n        if (lastSegmentLastPart && lastSegmentLastPart.independent) {\n          next.mediaIndex -= 1;\n          next.partIndex = lastSegment.parts.length - 1;\n          next.independent = 'previous segment';\n        }\n      } else if (nextSegment.parts[next.partIndex - 1].independent) {\n        next.partIndex -= 1;\n        next.independent = 'previous part';\n      }\n    }\n    const ended = this.mediaSource_ && this.mediaSource_.readyState === 'ended'; // do not choose a next segment if all of the following:\n    // 1. this is the last segment in the playlist\n    // 2. end of stream has been called on the media source already\n    // 3. the player is not seeking\n\n    if (next.mediaIndex >= segments.length - 1 && ended && !this.seeking_()) {\n      return null;\n    }\n    if (this.shouldForceTimestampOffsetAfterResync_) {\n      this.shouldForceTimestampOffsetAfterResync_ = false;\n      next.forceTimestampOffset = true;\n      this.logger_('choose next request. Force timestamp offset after loader resync');\n    }\n    return this.generateSegmentInfo_(next);\n  }\n  generateSegmentInfo_(options) {\n    const {\n      independent,\n      playlist,\n      mediaIndex,\n      startOfSegment,\n      isSyncRequest,\n      partIndex,\n      forceTimestampOffset,\n      getMediaInfoForTime\n    } = options;\n    const segment = playlist.segments[mediaIndex];\n    const part = typeof partIndex === 'number' && segment.parts[partIndex];\n    const segmentInfo = {\n      requestId: 'segment-loader-' + Math.random(),\n      // resolve the segment URL relative to the playlist\n      uri: part && part.resolvedUri || segment.resolvedUri,\n      // the segment's mediaIndex at the time it was requested\n      mediaIndex,\n      partIndex: part ? partIndex : null,\n      // whether or not to update the SegmentLoader's state with this\n      // segment's mediaIndex\n      isSyncRequest,\n      startOfSegment,\n      // the segment's playlist\n      playlist,\n      // unencrypted bytes of the segment\n      bytes: null,\n      // when a key is defined for this segment, the encrypted bytes\n      encryptedBytes: null,\n      // The target timestampOffset for this segment when we append it\n      // to the source buffer\n      timestampOffset: null,\n      // The timeline that the segment is in\n      timeline: segment.timeline,\n      // The expected duration of the segment in seconds\n      duration: part && part.duration || segment.duration,\n      // retain the segment in case the playlist updates while doing an async process\n      segment,\n      part,\n      byteLength: 0,\n      transmuxer: this.transmuxer_,\n      // type of getMediaInfoForTime that was used to get this segment\n      getMediaInfoForTime,\n      independent\n    };\n    const overrideCheck = typeof forceTimestampOffset !== 'undefined' ? forceTimestampOffset : this.isPendingTimestampOffset_;\n    segmentInfo.timestampOffset = this.timestampOffsetForSegment_({\n      segmentTimeline: segment.timeline,\n      currentTimeline: this.currentTimeline_,\n      startOfSegment,\n      buffered: this.buffered_(),\n      overrideCheck\n    });\n    const audioBufferedEnd = lastBufferedEnd(this.sourceUpdater_.audioBuffered());\n    if (typeof audioBufferedEnd === 'number') {\n      // since the transmuxer is using the actual timing values, but the buffer is\n      // adjusted by the timestamp offset, we must adjust the value here\n      segmentInfo.audioAppendStart = audioBufferedEnd - this.sourceUpdater_.audioTimestampOffset();\n    }\n    if (this.sourceUpdater_.videoBuffered().length) {\n      segmentInfo.gopsToAlignWith = gopsSafeToAlignWith(this.gopBuffer_,\n      // since the transmuxer is using the actual timing values, but the time is\n      // adjusted by the timestmap offset, we must adjust the value here\n      this.currentTime_() - this.sourceUpdater_.videoTimestampOffset(), this.timeMapping_);\n    }\n    return segmentInfo;\n  } // get the timestampoffset for a segment,\n  // added so that vtt segment loader can override and prevent\n  // adding timestamp offsets.\n\n  timestampOffsetForSegment_(options) {\n    return timestampOffsetForSegment(options);\n  }\n  /**\n   * Determines if the network has enough bandwidth to complete the current segment\n   * request in a timely manner. If not, the request will be aborted early and bandwidth\n   * updated to trigger a playlist switch.\n   *\n   * @param {Object} stats\n   *        Object containing stats about the request timing and size\n   * @private\n   */\n\n  earlyAbortWhenNeeded_(stats) {\n    if (this.vhs_.tech_.paused() ||\n    // Don't abort if the current playlist is on the lowestEnabledRendition\n    // TODO: Replace using timeout with a boolean indicating whether this playlist is\n    //       the lowestEnabledRendition.\n    !this.xhrOptions_.timeout ||\n    // Don't abort if we have no bandwidth information to estimate segment sizes\n    !this.playlist_.attributes.BANDWIDTH) {\n      return;\n    } // Wait at least 1 second since the first byte of data has been received before\n    // using the calculated bandwidth from the progress event to allow the bitrate\n    // to stabilize\n\n    if (Date.now() - (stats.firstBytesReceivedAt || Date.now()) < 1000) {\n      return;\n    }\n    const currentTime = this.currentTime_();\n    const measuredBandwidth = stats.bandwidth;\n    const segmentDuration = this.pendingSegment_.duration;\n    const requestTimeRemaining = Playlist.estimateSegmentRequestTime(segmentDuration, measuredBandwidth, this.playlist_, stats.bytesReceived); // Subtract 1 from the timeUntilRebuffer so we still consider an early abort\n    // if we are only left with less than 1 second when the request completes.\n    // A negative timeUntilRebuffering indicates we are already rebuffering\n\n    const timeUntilRebuffer$1 = timeUntilRebuffer(this.buffered_(), currentTime, this.vhs_.tech_.playbackRate()) - 1; // Only consider aborting early if the estimated time to finish the download\n    // is larger than the estimated time until the player runs out of forward buffer\n\n    if (requestTimeRemaining <= timeUntilRebuffer$1) {\n      return;\n    }\n    const switchCandidate = minRebufferMaxBandwidthSelector({\n      main: this.vhs_.playlists.main,\n      currentTime,\n      bandwidth: measuredBandwidth,\n      duration: this.duration_(),\n      segmentDuration,\n      timeUntilRebuffer: timeUntilRebuffer$1,\n      currentTimeline: this.currentTimeline_,\n      syncController: this.syncController_\n    });\n    if (!switchCandidate) {\n      return;\n    }\n    const rebufferingImpact = requestTimeRemaining - timeUntilRebuffer$1;\n    const timeSavedBySwitching = rebufferingImpact - switchCandidate.rebufferingImpact;\n    let minimumTimeSaving = 0.5; // If we are already rebuffering, increase the amount of variance we add to the\n    // potential round trip time of the new request so that we are not too aggressive\n    // with switching to a playlist that might save us a fraction of a second.\n\n    if (timeUntilRebuffer$1 <= TIME_FUDGE_FACTOR) {\n      minimumTimeSaving = 1;\n    }\n    if (!switchCandidate.playlist || switchCandidate.playlist.uri === this.playlist_.uri || timeSavedBySwitching < minimumTimeSaving) {\n      return;\n    } // set the bandwidth to that of the desired playlist being sure to scale by\n    // BANDWIDTH_VARIANCE and add one so the playlist selector does not exclude it\n    // don't trigger a bandwidthupdate as the bandwidth is artifial\n\n    this.bandwidth = switchCandidate.playlist.attributes.BANDWIDTH * Config.BANDWIDTH_VARIANCE + 1;\n    this.trigger('earlyabort');\n  }\n  handleAbort_(segmentInfo) {\n    this.logger_(`Aborting ${segmentInfoString(segmentInfo)}`);\n    this.mediaRequestsAborted += 1;\n  }\n  /**\n   * XHR `progress` event handler\n   *\n   * @param {Event}\n   *        The XHR `progress` event\n   * @param {Object} simpleSegment\n   *        A simplified segment object copy\n   * @private\n   */\n\n  handleProgress_(event, simpleSegment) {\n    this.earlyAbortWhenNeeded_(simpleSegment.stats);\n    if (this.checkForAbort_(simpleSegment.requestId)) {\n      return;\n    }\n    this.trigger('progress');\n  }\n  handleTrackInfo_(simpleSegment, trackInfo) {\n    this.earlyAbortWhenNeeded_(simpleSegment.stats);\n    if (this.checkForAbort_(simpleSegment.requestId)) {\n      return;\n    }\n    if (this.checkForIllegalMediaSwitch(trackInfo)) {\n      return;\n    }\n    trackInfo = trackInfo || {}; // When we have track info, determine what media types this loader is dealing with.\n    // Guard against cases where we're not getting track info at all until we are\n    // certain that all streams will provide it.\n\n    if (!shallowEqual(this.currentMediaInfo_, trackInfo)) {\n      this.appendInitSegment_ = {\n        audio: true,\n        video: true\n      };\n      this.startingMediaInfo_ = trackInfo;\n      this.currentMediaInfo_ = trackInfo;\n      this.logger_('trackinfo update', trackInfo);\n      this.trigger('trackinfo');\n    } // trackinfo may cause an abort if the trackinfo\n    // causes a codec change to an unsupported codec.\n\n    if (this.checkForAbort_(simpleSegment.requestId)) {\n      return;\n    } // set trackinfo on the pending segment so that\n    // it can append.\n\n    this.pendingSegment_.trackInfo = trackInfo; // check if any calls were waiting on the track info\n\n    if (this.hasEnoughInfoToAppend_()) {\n      this.processCallQueue_();\n    }\n  }\n  handleTimingInfo_(simpleSegment, mediaType, timeType, time) {\n    this.earlyAbortWhenNeeded_(simpleSegment.stats);\n    if (this.checkForAbort_(simpleSegment.requestId)) {\n      return;\n    }\n    const segmentInfo = this.pendingSegment_;\n    const timingInfoProperty = timingInfoPropertyForMedia(mediaType);\n    segmentInfo[timingInfoProperty] = segmentInfo[timingInfoProperty] || {};\n    segmentInfo[timingInfoProperty][timeType] = time;\n    this.logger_(`timinginfo: ${mediaType} - ${timeType} - ${time}`); // check if any calls were waiting on the timing info\n\n    if (this.hasEnoughInfoToAppend_()) {\n      this.processCallQueue_();\n    }\n  }\n  handleCaptions_(simpleSegment, captionData) {\n    this.earlyAbortWhenNeeded_(simpleSegment.stats);\n    if (this.checkForAbort_(simpleSegment.requestId)) {\n      return;\n    } // This could only happen with fmp4 segments, but\n    // should still not happen in general\n\n    if (captionData.length === 0) {\n      this.logger_('SegmentLoader received no captions from a caption event');\n      return;\n    }\n    const segmentInfo = this.pendingSegment_; // Wait until we have some video data so that caption timing\n    // can be adjusted by the timestamp offset\n\n    if (!segmentInfo.hasAppendedData_) {\n      this.metadataQueue_.caption.push(this.handleCaptions_.bind(this, simpleSegment, captionData));\n      return;\n    }\n    const timestampOffset = this.sourceUpdater_.videoTimestampOffset() === null ? this.sourceUpdater_.audioTimestampOffset() : this.sourceUpdater_.videoTimestampOffset();\n    const captionTracks = {}; // get total start/end and captions for each track/stream\n\n    captionData.forEach(caption => {\n      // caption.stream is actually a track name...\n      // set to the existing values in tracks or default values\n      captionTracks[caption.stream] = captionTracks[caption.stream] || {\n        // Infinity, as any other value will be less than this\n        startTime: Infinity,\n        captions: [],\n        // 0 as an other value will be more than this\n        endTime: 0\n      };\n      const captionTrack = captionTracks[caption.stream];\n      captionTrack.startTime = Math.min(captionTrack.startTime, caption.startTime + timestampOffset);\n      captionTrack.endTime = Math.max(captionTrack.endTime, caption.endTime + timestampOffset);\n      captionTrack.captions.push(caption);\n    });\n    Object.keys(captionTracks).forEach(trackName => {\n      const {\n        startTime,\n        endTime,\n        captions\n      } = captionTracks[trackName];\n      const inbandTextTracks = this.inbandTextTracks_;\n      this.logger_(`adding cues from ${startTime} -> ${endTime} for ${trackName}`);\n      createCaptionsTrackIfNotExists(inbandTextTracks, this.vhs_.tech_, trackName); // clear out any cues that start and end at the same time period for the same track.\n      // We do this because a rendition change that also changes the timescale for captions\n      // will result in captions being re-parsed for certain segments. If we add them again\n      // without clearing we will have two of the same captions visible.\n\n      removeCuesFromTrack(startTime, endTime, inbandTextTracks[trackName]);\n      addCaptionData({\n        captionArray: captions,\n        inbandTextTracks,\n        timestampOffset\n      });\n    }); // Reset stored captions since we added parsed\n    // captions to a text track at this point\n\n    if (this.transmuxer_) {\n      this.transmuxer_.postMessage({\n        action: 'clearParsedMp4Captions'\n      });\n    }\n  }\n  handleId3_(simpleSegment, id3Frames, dispatchType) {\n    this.earlyAbortWhenNeeded_(simpleSegment.stats);\n    if (this.checkForAbort_(simpleSegment.requestId)) {\n      return;\n    }\n    const segmentInfo = this.pendingSegment_; // we need to have appended data in order for the timestamp offset to be set\n\n    if (!segmentInfo.hasAppendedData_) {\n      this.metadataQueue_.id3.push(this.handleId3_.bind(this, simpleSegment, id3Frames, dispatchType));\n      return;\n    }\n    this.addMetadataToTextTrack(dispatchType, id3Frames, this.duration_());\n  }\n  processMetadataQueue_() {\n    this.metadataQueue_.id3.forEach(fn => fn());\n    this.metadataQueue_.caption.forEach(fn => fn());\n    this.metadataQueue_.id3 = [];\n    this.metadataQueue_.caption = [];\n  }\n  processCallQueue_() {\n    const callQueue = this.callQueue_; // Clear out the queue before the queued functions are run, since some of the\n    // functions may check the length of the load queue and default to pushing themselves\n    // back onto the queue.\n\n    this.callQueue_ = [];\n    callQueue.forEach(fun => fun());\n  }\n  processLoadQueue_() {\n    const loadQueue = this.loadQueue_; // Clear out the queue before the queued functions are run, since some of the\n    // functions may check the length of the load queue and default to pushing themselves\n    // back onto the queue.\n\n    this.loadQueue_ = [];\n    loadQueue.forEach(fun => fun());\n  }\n  /**\n   * Determines whether the loader has enough info to load the next segment.\n   *\n   * @return {boolean}\n   *         Whether or not the loader has enough info to load the next segment\n   */\n\n  hasEnoughInfoToLoad_() {\n    // Since primary timing goes by video, only the audio loader potentially needs to wait\n    // to load.\n    if (this.loaderType_ !== 'audio') {\n      return true;\n    }\n    const segmentInfo = this.pendingSegment_; // A fill buffer must have already run to establish a pending segment before there's\n    // enough info to load.\n\n    if (!segmentInfo) {\n      return false;\n    } // The first segment can and should be loaded immediately so that source buffers are\n    // created together (before appending). Source buffer creation uses the presence of\n    // audio and video data to determine whether to create audio/video source buffers, and\n    // uses processed (transmuxed or parsed) media to determine the types required.\n\n    if (!this.getCurrentMediaInfo_()) {\n      return true;\n    }\n    if (\n    // Technically, instead of waiting to load a segment on timeline changes, a segment\n    // can be requested and downloaded and only wait before it is transmuxed or parsed.\n    // But in practice, there are a few reasons why it is better to wait until a loader\n    // is ready to append that segment before requesting and downloading:\n    //\n    // 1. Because audio and main loaders cross discontinuities together, if this loader\n    //    is waiting for the other to catch up, then instead of requesting another\n    //    segment and using up more bandwidth, by not yet loading, more bandwidth is\n    //    allotted to the loader currently behind.\n    // 2. media-segment-request doesn't have to have logic to consider whether a segment\n    // is ready to be processed or not, isolating the queueing behavior to the loader.\n    // 3. The audio loader bases some of its segment properties on timing information\n    //    provided by the main loader, meaning that, if the logic for waiting on\n    //    processing was in media-segment-request, then it would also need to know how\n    //    to re-generate the segment information after the main loader caught up.\n    shouldWaitForTimelineChange({\n      timelineChangeController: this.timelineChangeController_,\n      currentTimeline: this.currentTimeline_,\n      segmentTimeline: segmentInfo.timeline,\n      loaderType: this.loaderType_,\n      audioDisabled: this.audioDisabled_\n    })) {\n      return false;\n    }\n    return true;\n  }\n  getCurrentMediaInfo_(segmentInfo = this.pendingSegment_) {\n    return segmentInfo && segmentInfo.trackInfo || this.currentMediaInfo_;\n  }\n  getMediaInfo_(segmentInfo = this.pendingSegment_) {\n    return this.getCurrentMediaInfo_(segmentInfo) || this.startingMediaInfo_;\n  }\n  getPendingSegmentPlaylist() {\n    return this.pendingSegment_ ? this.pendingSegment_.playlist : null;\n  }\n  hasEnoughInfoToAppend_() {\n    if (!this.sourceUpdater_.ready()) {\n      return false;\n    } // If content needs to be removed or the loader is waiting on an append reattempt,\n    // then no additional content should be appended until the prior append is resolved.\n\n    if (this.waitingOnRemove_ || this.quotaExceededErrorRetryTimeout_) {\n      return false;\n    }\n    const segmentInfo = this.pendingSegment_;\n    const trackInfo = this.getCurrentMediaInfo_(); // no segment to append any data for or\n    // we do not have information on this specific\n    // segment yet\n\n    if (!segmentInfo || !trackInfo) {\n      return false;\n    }\n    const {\n      hasAudio,\n      hasVideo,\n      isMuxed\n    } = trackInfo;\n    if (hasVideo && !segmentInfo.videoTimingInfo) {\n      return false;\n    } // muxed content only relies on video timing information for now.\n\n    if (hasAudio && !this.audioDisabled_ && !isMuxed && !segmentInfo.audioTimingInfo) {\n      return false;\n    }\n    if (shouldWaitForTimelineChange({\n      timelineChangeController: this.timelineChangeController_,\n      currentTimeline: this.currentTimeline_,\n      segmentTimeline: segmentInfo.timeline,\n      loaderType: this.loaderType_,\n      audioDisabled: this.audioDisabled_\n    })) {\n      return false;\n    }\n    return true;\n  }\n  handleData_(simpleSegment, result) {\n    this.earlyAbortWhenNeeded_(simpleSegment.stats);\n    if (this.checkForAbort_(simpleSegment.requestId)) {\n      return;\n    } // If there's anything in the call queue, then this data came later and should be\n    // executed after the calls currently queued.\n\n    if (this.callQueue_.length || !this.hasEnoughInfoToAppend_()) {\n      this.callQueue_.push(this.handleData_.bind(this, simpleSegment, result));\n      return;\n    }\n    const segmentInfo = this.pendingSegment_; // update the time mapping so we can translate from display time to media time\n\n    this.setTimeMapping_(segmentInfo.timeline); // for tracking overall stats\n\n    this.updateMediaSecondsLoaded_(segmentInfo.part || segmentInfo.segment); // Note that the state isn't changed from loading to appending. This is because abort\n    // logic may change behavior depending on the state, and changing state too early may\n    // inflate our estimates of bandwidth. In the future this should be re-examined to\n    // note more granular states.\n    // don't process and append data if the mediaSource is closed\n\n    if (this.mediaSource_.readyState === 'closed') {\n      return;\n    } // if this request included an initialization segment, save that data\n    // to the initSegment cache\n\n    if (simpleSegment.map) {\n      simpleSegment.map = this.initSegmentForMap(simpleSegment.map, true); // move over init segment properties to media request\n\n      segmentInfo.segment.map = simpleSegment.map;\n    } // if this request included a segment key, save that data in the cache\n\n    if (simpleSegment.key) {\n      this.segmentKey(simpleSegment.key, true);\n    }\n    segmentInfo.isFmp4 = simpleSegment.isFmp4;\n    segmentInfo.timingInfo = segmentInfo.timingInfo || {};\n    if (segmentInfo.isFmp4) {\n      this.trigger('fmp4');\n      segmentInfo.timingInfo.start = segmentInfo[timingInfoPropertyForMedia(result.type)].start;\n    } else {\n      const trackInfo = this.getCurrentMediaInfo_();\n      const useVideoTimingInfo = this.loaderType_ === 'main' && trackInfo && trackInfo.hasVideo;\n      let firstVideoFrameTimeForData;\n      if (useVideoTimingInfo) {\n        firstVideoFrameTimeForData = segmentInfo.videoTimingInfo.start;\n      } // Segment loader knows more about segment timing than the transmuxer (in certain\n      // aspects), so make any changes required for a more accurate start time.\n      // Don't set the end time yet, as the segment may not be finished processing.\n\n      segmentInfo.timingInfo.start = this.trueSegmentStart_({\n        currentStart: segmentInfo.timingInfo.start,\n        playlist: segmentInfo.playlist,\n        mediaIndex: segmentInfo.mediaIndex,\n        currentVideoTimestampOffset: this.sourceUpdater_.videoTimestampOffset(),\n        useVideoTimingInfo,\n        firstVideoFrameTimeForData,\n        videoTimingInfo: segmentInfo.videoTimingInfo,\n        audioTimingInfo: segmentInfo.audioTimingInfo\n      });\n    } // Init segments for audio and video only need to be appended in certain cases. Now\n    // that data is about to be appended, we can check the final cases to determine\n    // whether we should append an init segment.\n\n    this.updateAppendInitSegmentStatus(segmentInfo, result.type); // Timestamp offset should be updated once we get new data and have its timing info,\n    // as we use the start of the segment to offset the best guess (playlist provided)\n    // timestamp offset.\n\n    this.updateSourceBufferTimestampOffset_(segmentInfo); // if this is a sync request we need to determine whether it should\n    // be appended or not.\n\n    if (segmentInfo.isSyncRequest) {\n      // first save/update our timing info for this segment.\n      // this is what allows us to choose an accurate segment\n      // and the main reason we make a sync request.\n      this.updateTimingInfoEnd_(segmentInfo);\n      this.syncController_.saveSegmentTimingInfo({\n        segmentInfo,\n        shouldSaveTimelineMapping: this.loaderType_ === 'main'\n      });\n      const next = this.chooseNextRequest_(); // If the sync request isn't the segment that would be requested next\n      // after taking into account its timing info, do not append it.\n\n      if (next.mediaIndex !== segmentInfo.mediaIndex || next.partIndex !== segmentInfo.partIndex) {\n        this.logger_('sync segment was incorrect, not appending');\n        return;\n      } // otherwise append it like any other segment as our guess was correct.\n\n      this.logger_('sync segment was correct, appending');\n    } // Save some state so that in the future anything waiting on first append (and/or\n    // timestamp offset(s)) can process immediately. While the extra state isn't optimal,\n    // we need some notion of whether the timestamp offset or other relevant information\n    // has had a chance to be set.\n\n    segmentInfo.hasAppendedData_ = true; // Now that the timestamp offset should be set, we can append any waiting ID3 tags.\n\n    this.processMetadataQueue_();\n    this.appendData_(segmentInfo, result);\n  }\n  updateAppendInitSegmentStatus(segmentInfo, type) {\n    // alt audio doesn't manage timestamp offset\n    if (this.loaderType_ === 'main' && typeof segmentInfo.timestampOffset === 'number' &&\n    // in the case that we're handling partial data, we don't want to append an init\n    // segment for each chunk\n    !segmentInfo.changedTimestampOffset) {\n      // if the timestamp offset changed, the timeline may have changed, so we have to re-\n      // append init segments\n      this.appendInitSegment_ = {\n        audio: true,\n        video: true\n      };\n    }\n    if (this.playlistOfLastInitSegment_[type] !== segmentInfo.playlist) {\n      // make sure we append init segment on playlist changes, in case the media config\n      // changed\n      this.appendInitSegment_[type] = true;\n    }\n  }\n  getInitSegmentAndUpdateState_({\n    type,\n    initSegment,\n    map,\n    playlist\n  }) {\n    // \"The EXT-X-MAP tag specifies how to obtain the Media Initialization Section\n    // (Section 3) required to parse the applicable Media Segments.  It applies to every\n    // Media Segment that appears after it in the Playlist until the next EXT-X-MAP tag\n    // or until the end of the playlist.\"\n    // https://tools.ietf.org/html/draft-pantos-http-live-streaming-23#section-4.3.2.5\n    if (map) {\n      const id = initSegmentId(map);\n      if (this.activeInitSegmentId_ === id) {\n        // don't need to re-append the init segment if the ID matches\n        return null;\n      } // a map-specified init segment takes priority over any transmuxed (or otherwise\n      // obtained) init segment\n      //\n      // this also caches the init segment for later use\n\n      initSegment = this.initSegmentForMap(map, true).bytes;\n      this.activeInitSegmentId_ = id;\n    } // We used to always prepend init segments for video, however, that shouldn't be\n    // necessary. Instead, we should only append on changes, similar to what we've always\n    // done for audio. This is more important (though may not be that important) for\n    // frame-by-frame appending for LHLS, simply because of the increased quantity of\n    // appends.\n\n    if (initSegment && this.appendInitSegment_[type]) {\n      // Make sure we track the playlist that we last used for the init segment, so that\n      // we can re-append the init segment in the event that we get data from a new\n      // playlist. Discontinuities and track changes are handled in other sections.\n      this.playlistOfLastInitSegment_[type] = playlist; // Disable future init segment appends for this type. Until a change is necessary.\n\n      this.appendInitSegment_[type] = false; // we need to clear out the fmp4 active init segment id, since\n      // we are appending the muxer init segment\n\n      this.activeInitSegmentId_ = null;\n      return initSegment;\n    }\n    return null;\n  }\n  handleQuotaExceededError_({\n    segmentInfo,\n    type,\n    bytes\n  }, error) {\n    const audioBuffered = this.sourceUpdater_.audioBuffered();\n    const videoBuffered = this.sourceUpdater_.videoBuffered(); // For now we're ignoring any notion of gaps in the buffer, but they, in theory,\n    // should be cleared out during the buffer removals. However, log in case it helps\n    // debug.\n\n    if (audioBuffered.length > 1) {\n      this.logger_('On QUOTA_EXCEEDED_ERR, found gaps in the audio buffer: ' + timeRangesToArray(audioBuffered).join(', '));\n    }\n    if (videoBuffered.length > 1) {\n      this.logger_('On QUOTA_EXCEEDED_ERR, found gaps in the video buffer: ' + timeRangesToArray(videoBuffered).join(', '));\n    }\n    const audioBufferStart = audioBuffered.length ? audioBuffered.start(0) : 0;\n    const audioBufferEnd = audioBuffered.length ? audioBuffered.end(audioBuffered.length - 1) : 0;\n    const videoBufferStart = videoBuffered.length ? videoBuffered.start(0) : 0;\n    const videoBufferEnd = videoBuffered.length ? videoBuffered.end(videoBuffered.length - 1) : 0;\n    if (audioBufferEnd - audioBufferStart <= MIN_BACK_BUFFER && videoBufferEnd - videoBufferStart <= MIN_BACK_BUFFER) {\n      // Can't remove enough buffer to make room for new segment (or the browser doesn't\n      // allow for appends of segments this size). In the future, it may be possible to\n      // split up the segment and append in pieces, but for now, error out this playlist\n      // in an attempt to switch to a more manageable rendition.\n      this.logger_('On QUOTA_EXCEEDED_ERR, single segment too large to append to ' + 'buffer, triggering an error. ' + `Appended byte length: ${bytes.byteLength}, ` + `audio buffer: ${timeRangesToArray(audioBuffered).join(', ')}, ` + `video buffer: ${timeRangesToArray(videoBuffered).join(', ')}, `);\n      this.error({\n        message: 'Quota exceeded error with append of a single segment of content',\n        excludeUntil: Infinity\n      });\n      this.trigger('error');\n      return;\n    } // To try to resolve the quota exceeded error, clear back buffer and retry. This means\n    // that the segment-loader should block on future events until this one is handled, so\n    // that it doesn't keep moving onto further segments. Adding the call to the call\n    // queue will prevent further appends until waitingOnRemove_ and\n    // quotaExceededErrorRetryTimeout_ are cleared.\n    //\n    // Note that this will only block the current loader. In the case of demuxed content,\n    // the other load may keep filling as fast as possible. In practice, this should be\n    // OK, as it is a rare case when either audio has a high enough bitrate to fill up a\n    // source buffer, or video fills without enough room for audio to append (and without\n    // the availability of clearing out seconds of back buffer to make room for audio).\n    // But it might still be good to handle this case in the future as a TODO.\n\n    this.waitingOnRemove_ = true;\n    this.callQueue_.push(this.appendToSourceBuffer_.bind(this, {\n      segmentInfo,\n      type,\n      bytes\n    }));\n    const currentTime = this.currentTime_(); // Try to remove as much audio and video as possible to make room for new content\n    // before retrying.\n\n    const timeToRemoveUntil = currentTime - MIN_BACK_BUFFER;\n    this.logger_(`On QUOTA_EXCEEDED_ERR, removing audio/video from 0 to ${timeToRemoveUntil}`);\n    this.remove(0, timeToRemoveUntil, () => {\n      this.logger_(`On QUOTA_EXCEEDED_ERR, retrying append in ${MIN_BACK_BUFFER}s`);\n      this.waitingOnRemove_ = false; // wait the length of time alotted in the back buffer to prevent wasted\n      // attempts (since we can't clear less than the minimum)\n\n      this.quotaExceededErrorRetryTimeout_ = window$1.setTimeout(() => {\n        this.logger_('On QUOTA_EXCEEDED_ERR, re-processing call queue');\n        this.quotaExceededErrorRetryTimeout_ = null;\n        this.processCallQueue_();\n      }, MIN_BACK_BUFFER * 1000);\n    }, true);\n  }\n  handleAppendError_({\n    segmentInfo,\n    type,\n    bytes\n  }, error) {\n    // if there's no error, nothing to do\n    if (!error) {\n      return;\n    }\n    if (error.code === QUOTA_EXCEEDED_ERR) {\n      this.handleQuotaExceededError_({\n        segmentInfo,\n        type,\n        bytes\n      }); // A quota exceeded error should be recoverable with a future re-append, so no need\n      // to trigger an append error.\n\n      return;\n    }\n    this.logger_('Received non QUOTA_EXCEEDED_ERR on append', error);\n    this.error(`${type} append of ${bytes.length}b failed for segment ` + `#${segmentInfo.mediaIndex} in playlist ${segmentInfo.playlist.id}`); // If an append errors, we often can't recover.\n    // (see https://w3c.github.io/media-source/#sourcebuffer-append-error).\n    //\n    // Trigger a special error so that it can be handled separately from normal,\n    // recoverable errors.\n\n    this.trigger('appenderror');\n  }\n  appendToSourceBuffer_({\n    segmentInfo,\n    type,\n    initSegment,\n    data,\n    bytes\n  }) {\n    // If this is a re-append, bytes were already created and don't need to be recreated\n    if (!bytes) {\n      const segments = [data];\n      let byteLength = data.byteLength;\n      if (initSegment) {\n        // if the media initialization segment is changing, append it before the content\n        // segment\n        segments.unshift(initSegment);\n        byteLength += initSegment.byteLength;\n      } // Technically we should be OK appending the init segment separately, however, we\n      // haven't yet tested that, and prepending is how we have always done things.\n\n      bytes = concatSegments({\n        bytes: byteLength,\n        segments\n      });\n    }\n    this.sourceUpdater_.appendBuffer({\n      segmentInfo,\n      type,\n      bytes\n    }, this.handleAppendError_.bind(this, {\n      segmentInfo,\n      type,\n      bytes\n    }));\n  }\n  handleSegmentTimingInfo_(type, requestId, segmentTimingInfo) {\n    if (!this.pendingSegment_ || requestId !== this.pendingSegment_.requestId) {\n      return;\n    }\n    const segment = this.pendingSegment_.segment;\n    const timingInfoProperty = `${type}TimingInfo`;\n    if (!segment[timingInfoProperty]) {\n      segment[timingInfoProperty] = {};\n    }\n    segment[timingInfoProperty].transmuxerPrependedSeconds = segmentTimingInfo.prependedContentDuration || 0;\n    segment[timingInfoProperty].transmuxedPresentationStart = segmentTimingInfo.start.presentation;\n    segment[timingInfoProperty].transmuxedDecodeStart = segmentTimingInfo.start.decode;\n    segment[timingInfoProperty].transmuxedPresentationEnd = segmentTimingInfo.end.presentation;\n    segment[timingInfoProperty].transmuxedDecodeEnd = segmentTimingInfo.end.decode; // mainly used as a reference for debugging\n\n    segment[timingInfoProperty].baseMediaDecodeTime = segmentTimingInfo.baseMediaDecodeTime;\n  }\n  appendData_(segmentInfo, result) {\n    const {\n      type,\n      data\n    } = result;\n    if (!data || !data.byteLength) {\n      return;\n    }\n    if (type === 'audio' && this.audioDisabled_) {\n      return;\n    }\n    const initSegment = this.getInitSegmentAndUpdateState_({\n      type,\n      initSegment: result.initSegment,\n      playlist: segmentInfo.playlist,\n      map: segmentInfo.isFmp4 ? segmentInfo.segment.map : null\n    });\n    this.appendToSourceBuffer_({\n      segmentInfo,\n      type,\n      initSegment,\n      data\n    });\n  }\n  /**\n   * load a specific segment from a request into the buffer\n   *\n   * @private\n   */\n\n  loadSegment_(segmentInfo) {\n    this.state = 'WAITING';\n    this.pendingSegment_ = segmentInfo;\n    this.trimBackBuffer_(segmentInfo);\n    if (typeof segmentInfo.timestampOffset === 'number') {\n      if (this.transmuxer_) {\n        this.transmuxer_.postMessage({\n          action: 'clearAllMp4Captions'\n        });\n      }\n    }\n    if (!this.hasEnoughInfoToLoad_()) {\n      this.loadQueue_.push(() => {\n        // regenerate the audioAppendStart, timestampOffset, etc as they\n        // may have changed since this function was added to the queue.\n        const options = _extends({}, segmentInfo, {\n          forceTimestampOffset: true\n        });\n        _extends(segmentInfo, this.generateSegmentInfo_(options));\n        this.isPendingTimestampOffset_ = false;\n        this.updateTransmuxerAndRequestSegment_(segmentInfo);\n      });\n      return;\n    }\n    this.updateTransmuxerAndRequestSegment_(segmentInfo);\n  }\n  updateTransmuxerAndRequestSegment_(segmentInfo) {\n    // We'll update the source buffer's timestamp offset once we have transmuxed data, but\n    // the transmuxer still needs to be updated before then.\n    //\n    // Even though keepOriginalTimestamps is set to true for the transmuxer, timestamp\n    // offset must be passed to the transmuxer for stream correcting adjustments.\n    if (this.shouldUpdateTransmuxerTimestampOffset_(segmentInfo.timestampOffset)) {\n      this.gopBuffer_.length = 0; // gopsToAlignWith was set before the GOP buffer was cleared\n\n      segmentInfo.gopsToAlignWith = [];\n      this.timeMapping_ = 0; // reset values in the transmuxer since a discontinuity should start fresh\n\n      this.transmuxer_.postMessage({\n        action: 'reset'\n      });\n      this.transmuxer_.postMessage({\n        action: 'setTimestampOffset',\n        timestampOffset: segmentInfo.timestampOffset\n      });\n    }\n    const simpleSegment = this.createSimplifiedSegmentObj_(segmentInfo);\n    const isEndOfStream = this.isEndOfStream_(segmentInfo.mediaIndex, segmentInfo.playlist, segmentInfo.partIndex);\n    const isWalkingForward = this.mediaIndex !== null;\n    const isDiscontinuity = segmentInfo.timeline !== this.currentTimeline_ &&\n    // currentTimeline starts at -1, so we shouldn't end the timeline switching to 0,\n    // the first timeline\n    segmentInfo.timeline > 0;\n    const isEndOfTimeline = isEndOfStream || isWalkingForward && isDiscontinuity;\n    this.logger_(`Requesting ${segmentInfoString(segmentInfo)}`); // If there's an init segment associated with this segment, but it is not cached (identified by a lack of bytes),\n    // then this init segment has never been seen before and should be appended.\n    //\n    // At this point the content type (audio/video or both) is not yet known, but it should be safe to set\n    // both to true and leave the decision of whether to append the init segment to append time.\n\n    if (simpleSegment.map && !simpleSegment.map.bytes) {\n      this.logger_('going to request init segment.');\n      this.appendInitSegment_ = {\n        video: true,\n        audio: true\n      };\n    }\n    segmentInfo.abortRequests = mediaSegmentRequest({\n      xhr: this.vhs_.xhr,\n      xhrOptions: this.xhrOptions_,\n      decryptionWorker: this.decrypter_,\n      segment: simpleSegment,\n      abortFn: this.handleAbort_.bind(this, segmentInfo),\n      progressFn: this.handleProgress_.bind(this),\n      trackInfoFn: this.handleTrackInfo_.bind(this),\n      timingInfoFn: this.handleTimingInfo_.bind(this),\n      videoSegmentTimingInfoFn: this.handleSegmentTimingInfo_.bind(this, 'video', segmentInfo.requestId),\n      audioSegmentTimingInfoFn: this.handleSegmentTimingInfo_.bind(this, 'audio', segmentInfo.requestId),\n      captionsFn: this.handleCaptions_.bind(this),\n      isEndOfTimeline,\n      endedTimelineFn: () => {\n        this.logger_('received endedtimeline callback');\n      },\n      id3Fn: this.handleId3_.bind(this),\n      dataFn: this.handleData_.bind(this),\n      doneFn: this.segmentRequestFinished_.bind(this),\n      onTransmuxerLog: ({\n        message,\n        level,\n        stream\n      }) => {\n        this.logger_(`${segmentInfoString(segmentInfo)} logged from transmuxer stream ${stream} as a ${level}: ${message}`);\n      }\n    });\n  }\n  /**\n   * trim the back buffer so that we don't have too much data\n   * in the source buffer\n   *\n   * @private\n   *\n   * @param {Object} segmentInfo - the current segment\n   */\n\n  trimBackBuffer_(segmentInfo) {\n    const removeToTime = safeBackBufferTrimTime(this.seekable_(), this.currentTime_(), this.playlist_.targetDuration || 10); // Chrome has a hard limit of 150MB of\n    // buffer and a very conservative \"garbage collector\"\n    // We manually clear out the old buffer to ensure\n    // we don't trigger the QuotaExceeded error\n    // on the source buffer during subsequent appends\n\n    if (removeToTime > 0) {\n      this.remove(0, removeToTime);\n    }\n  }\n  /**\n   * created a simplified copy of the segment object with just the\n   * information necessary to perform the XHR and decryption\n   *\n   * @private\n   *\n   * @param {Object} segmentInfo - the current segment\n   * @return {Object} a simplified segment object copy\n   */\n\n  createSimplifiedSegmentObj_(segmentInfo) {\n    const segment = segmentInfo.segment;\n    const part = segmentInfo.part;\n    const simpleSegment = {\n      resolvedUri: part ? part.resolvedUri : segment.resolvedUri,\n      byterange: part ? part.byterange : segment.byterange,\n      requestId: segmentInfo.requestId,\n      transmuxer: segmentInfo.transmuxer,\n      audioAppendStart: segmentInfo.audioAppendStart,\n      gopsToAlignWith: segmentInfo.gopsToAlignWith,\n      part: segmentInfo.part\n    };\n    const previousSegment = segmentInfo.playlist.segments[segmentInfo.mediaIndex - 1];\n    if (previousSegment && previousSegment.timeline === segment.timeline) {\n      // The baseStartTime of a segment is used to handle rollover when probing the TS\n      // segment to retrieve timing information. Since the probe only looks at the media's\n      // times (e.g., PTS and DTS values of the segment), and doesn't consider the\n      // player's time (e.g., player.currentTime()), baseStartTime should reflect the\n      // media time as well. transmuxedDecodeEnd represents the end time of a segment, in\n      // seconds of media time, so should be used here. The previous segment is used since\n      // the end of the previous segment should represent the beginning of the current\n      // segment, so long as they are on the same timeline.\n      if (previousSegment.videoTimingInfo) {\n        simpleSegment.baseStartTime = previousSegment.videoTimingInfo.transmuxedDecodeEnd;\n      } else if (previousSegment.audioTimingInfo) {\n        simpleSegment.baseStartTime = previousSegment.audioTimingInfo.transmuxedDecodeEnd;\n      }\n    }\n    if (segment.key) {\n      // if the media sequence is greater than 2^32, the IV will be incorrect\n      // assuming 10s segments, that would be about 1300 years\n      const iv = segment.key.iv || new Uint32Array([0, 0, 0, segmentInfo.mediaIndex + segmentInfo.playlist.mediaSequence]);\n      simpleSegment.key = this.segmentKey(segment.key);\n      simpleSegment.key.iv = iv;\n    }\n    if (segment.map) {\n      simpleSegment.map = this.initSegmentForMap(segment.map);\n    }\n    return simpleSegment;\n  }\n  saveTransferStats_(stats) {\n    // every request counts as a media request even if it has been aborted\n    // or canceled due to a timeout\n    this.mediaRequests += 1;\n    if (stats) {\n      this.mediaBytesTransferred += stats.bytesReceived;\n      this.mediaTransferDuration += stats.roundTripTime;\n    }\n  }\n  saveBandwidthRelatedStats_(duration, stats) {\n    // byteLength will be used for throughput, and should be based on bytes receieved,\n    // which we only know at the end of the request and should reflect total bytes\n    // downloaded rather than just bytes processed from components of the segment\n    this.pendingSegment_.byteLength = stats.bytesReceived;\n    if (duration < MIN_SEGMENT_DURATION_TO_SAVE_STATS) {\n      this.logger_(`Ignoring segment's bandwidth because its duration of ${duration}` + ` is less than the min to record ${MIN_SEGMENT_DURATION_TO_SAVE_STATS}`);\n      return;\n    }\n    this.bandwidth = stats.bandwidth;\n    this.roundTrip = stats.roundTripTime;\n  }\n  handleTimeout_() {\n    // although the VTT segment loader bandwidth isn't really used, it's good to\n    // maintain functinality between segment loaders\n    this.mediaRequestsTimedout += 1;\n    this.bandwidth = 1;\n    this.roundTrip = NaN;\n    this.trigger('bandwidthupdate');\n    this.trigger('timeout');\n  }\n  /**\n   * Handle the callback from the segmentRequest function and set the\n   * associated SegmentLoader state and errors if necessary\n   *\n   * @private\n   */\n\n  segmentRequestFinished_(error, simpleSegment, result) {\n    // TODO handle special cases, e.g., muxed audio/video but only audio in the segment\n    // check the call queue directly since this function doesn't need to deal with any\n    // data, and can continue even if the source buffers are not set up and we didn't get\n    // any data from the segment\n    if (this.callQueue_.length) {\n      this.callQueue_.push(this.segmentRequestFinished_.bind(this, error, simpleSegment, result));\n      return;\n    }\n    this.saveTransferStats_(simpleSegment.stats); // The request was aborted and the SegmentLoader has already been reset\n\n    if (!this.pendingSegment_) {\n      return;\n    } // the request was aborted and the SegmentLoader has already started\n    // another request. this can happen when the timeout for an aborted\n    // request triggers due to a limitation in the XHR library\n    // do not count this as any sort of request or we risk double-counting\n\n    if (simpleSegment.requestId !== this.pendingSegment_.requestId) {\n      return;\n    } // an error occurred from the active pendingSegment_ so reset everything\n\n    if (error) {\n      this.pendingSegment_ = null;\n      this.state = 'READY'; // aborts are not a true error condition and nothing corrective needs to be done\n\n      if (error.code === REQUEST_ERRORS.ABORTED) {\n        return;\n      }\n      this.pause(); // the error is really just that at least one of the requests timed-out\n      // set the bandwidth to a very low value and trigger an ABR switch to\n      // take emergency action\n\n      if (error.code === REQUEST_ERRORS.TIMEOUT) {\n        this.handleTimeout_();\n        return;\n      } // if control-flow has arrived here, then the error is real\n      // emit an error event to exclude the current playlist\n\n      this.mediaRequestsErrored += 1;\n      this.error(error);\n      this.trigger('error');\n      return;\n    }\n    const segmentInfo = this.pendingSegment_; // the response was a success so set any bandwidth stats the request\n    // generated for ABR purposes\n\n    this.saveBandwidthRelatedStats_(segmentInfo.duration, simpleSegment.stats);\n    segmentInfo.endOfAllRequests = simpleSegment.endOfAllRequests;\n    if (result.gopInfo) {\n      this.gopBuffer_ = updateGopBuffer(this.gopBuffer_, result.gopInfo, this.safeAppend_);\n    } // Although we may have already started appending on progress, we shouldn't switch the\n    // state away from loading until we are officially done loading the segment data.\n\n    this.state = 'APPENDING'; // used for testing\n\n    this.trigger('appending');\n    this.waitForAppendsToComplete_(segmentInfo);\n  }\n  setTimeMapping_(timeline) {\n    const timelineMapping = this.syncController_.mappingForTimeline(timeline);\n    if (timelineMapping !== null) {\n      this.timeMapping_ = timelineMapping;\n    }\n  }\n  updateMediaSecondsLoaded_(segment) {\n    if (typeof segment.start === 'number' && typeof segment.end === 'number') {\n      this.mediaSecondsLoaded += segment.end - segment.start;\n    } else {\n      this.mediaSecondsLoaded += segment.duration;\n    }\n  }\n  shouldUpdateTransmuxerTimestampOffset_(timestampOffset) {\n    if (timestampOffset === null) {\n      return false;\n    } // note that we're potentially using the same timestamp offset for both video and\n    // audio\n\n    if (this.loaderType_ === 'main' && timestampOffset !== this.sourceUpdater_.videoTimestampOffset()) {\n      return true;\n    }\n    if (!this.audioDisabled_ && timestampOffset !== this.sourceUpdater_.audioTimestampOffset()) {\n      return true;\n    }\n    return false;\n  }\n  trueSegmentStart_({\n    currentStart,\n    playlist,\n    mediaIndex,\n    firstVideoFrameTimeForData,\n    currentVideoTimestampOffset,\n    useVideoTimingInfo,\n    videoTimingInfo,\n    audioTimingInfo\n  }) {\n    if (typeof currentStart !== 'undefined') {\n      // if start was set once, keep using it\n      return currentStart;\n    }\n    if (!useVideoTimingInfo) {\n      return audioTimingInfo.start;\n    }\n    const previousSegment = playlist.segments[mediaIndex - 1]; // The start of a segment should be the start of the first full frame contained\n    // within that segment. Since the transmuxer maintains a cache of incomplete data\n    // from and/or the last frame seen, the start time may reflect a frame that starts\n    // in the previous segment. Check for that case and ensure the start time is\n    // accurate for the segment.\n\n    if (mediaIndex === 0 || !previousSegment || typeof previousSegment.start === 'undefined' || previousSegment.end !== firstVideoFrameTimeForData + currentVideoTimestampOffset) {\n      return firstVideoFrameTimeForData;\n    }\n    return videoTimingInfo.start;\n  }\n  waitForAppendsToComplete_(segmentInfo) {\n    const trackInfo = this.getCurrentMediaInfo_(segmentInfo);\n    if (!trackInfo) {\n      this.error({\n        message: 'No starting media returned, likely due to an unsupported media format.',\n        playlistExclusionDuration: Infinity\n      });\n      this.trigger('error');\n      return;\n    } // Although transmuxing is done, appends may not yet be finished. Throw a marker\n    // on each queue this loader is responsible for to ensure that the appends are\n    // complete.\n\n    const {\n      hasAudio,\n      hasVideo,\n      isMuxed\n    } = trackInfo;\n    const waitForVideo = this.loaderType_ === 'main' && hasVideo;\n    const waitForAudio = !this.audioDisabled_ && hasAudio && !isMuxed;\n    segmentInfo.waitingOnAppends = 0; // segments with no data\n\n    if (!segmentInfo.hasAppendedData_) {\n      if (!segmentInfo.timingInfo && typeof segmentInfo.timestampOffset === 'number') {\n        // When there's no audio or video data in the segment, there's no audio or video\n        // timing information.\n        //\n        // If there's no audio or video timing information, then the timestamp offset\n        // can't be adjusted to the appropriate value for the transmuxer and source\n        // buffers.\n        //\n        // Therefore, the next segment should be used to set the timestamp offset.\n        this.isPendingTimestampOffset_ = true;\n      } // override settings for metadata only segments\n\n      segmentInfo.timingInfo = {\n        start: 0\n      };\n      segmentInfo.waitingOnAppends++;\n      if (!this.isPendingTimestampOffset_) {\n        // update the timestampoffset\n        this.updateSourceBufferTimestampOffset_(segmentInfo); // make sure the metadata queue is processed even though we have\n        // no video/audio data.\n\n        this.processMetadataQueue_();\n      } // append is \"done\" instantly with no data.\n\n      this.checkAppendsDone_(segmentInfo);\n      return;\n    } // Since source updater could call back synchronously, do the increments first.\n\n    if (waitForVideo) {\n      segmentInfo.waitingOnAppends++;\n    }\n    if (waitForAudio) {\n      segmentInfo.waitingOnAppends++;\n    }\n    if (waitForVideo) {\n      this.sourceUpdater_.videoQueueCallback(this.checkAppendsDone_.bind(this, segmentInfo));\n    }\n    if (waitForAudio) {\n      this.sourceUpdater_.audioQueueCallback(this.checkAppendsDone_.bind(this, segmentInfo));\n    }\n  }\n  checkAppendsDone_(segmentInfo) {\n    if (this.checkForAbort_(segmentInfo.requestId)) {\n      return;\n    }\n    segmentInfo.waitingOnAppends--;\n    if (segmentInfo.waitingOnAppends === 0) {\n      this.handleAppendsDone_();\n    }\n  }\n  checkForIllegalMediaSwitch(trackInfo) {\n    const illegalMediaSwitchError = illegalMediaSwitch(this.loaderType_, this.getCurrentMediaInfo_(), trackInfo);\n    if (illegalMediaSwitchError) {\n      this.error({\n        message: illegalMediaSwitchError,\n        playlistExclusionDuration: Infinity\n      });\n      this.trigger('error');\n      return true;\n    }\n    return false;\n  }\n  updateSourceBufferTimestampOffset_(segmentInfo) {\n    if (segmentInfo.timestampOffset === null ||\n    // we don't yet have the start for whatever media type (video or audio) has\n    // priority, timing-wise, so we must wait\n    typeof segmentInfo.timingInfo.start !== 'number' ||\n    // already updated the timestamp offset for this segment\n    segmentInfo.changedTimestampOffset ||\n    // the alt audio loader should not be responsible for setting the timestamp offset\n    this.loaderType_ !== 'main') {\n      return;\n    }\n    let didChange = false; // Primary timing goes by video, and audio is trimmed in the transmuxer, meaning that\n    // the timing info here comes from video. In the event that the audio is longer than\n    // the video, this will trim the start of the audio.\n    // This also trims any offset from 0 at the beginning of the media\n\n    segmentInfo.timestampOffset -= this.getSegmentStartTimeForTimestampOffsetCalculation_({\n      videoTimingInfo: segmentInfo.segment.videoTimingInfo,\n      audioTimingInfo: segmentInfo.segment.audioTimingInfo,\n      timingInfo: segmentInfo.timingInfo\n    }); // In the event that there are part segment downloads, each will try to update the\n    // timestamp offset. Retaining this bit of state prevents us from updating in the\n    // future (within the same segment), however, there may be a better way to handle it.\n\n    segmentInfo.changedTimestampOffset = true;\n    if (segmentInfo.timestampOffset !== this.sourceUpdater_.videoTimestampOffset()) {\n      this.sourceUpdater_.videoTimestampOffset(segmentInfo.timestampOffset);\n      didChange = true;\n    }\n    if (segmentInfo.timestampOffset !== this.sourceUpdater_.audioTimestampOffset()) {\n      this.sourceUpdater_.audioTimestampOffset(segmentInfo.timestampOffset);\n      didChange = true;\n    }\n    if (didChange) {\n      this.trigger('timestampoffset');\n    }\n  }\n  getSegmentStartTimeForTimestampOffsetCalculation_({\n    videoTimingInfo,\n    audioTimingInfo,\n    timingInfo\n  }) {\n    if (!this.useDtsForTimestampOffset_) {\n      return timingInfo.start;\n    }\n    if (videoTimingInfo && typeof videoTimingInfo.transmuxedDecodeStart === 'number') {\n      return videoTimingInfo.transmuxedDecodeStart;\n    } // handle audio only\n\n    if (audioTimingInfo && typeof audioTimingInfo.transmuxedDecodeStart === 'number') {\n      return audioTimingInfo.transmuxedDecodeStart;\n    } // handle content not transmuxed (e.g., MP4)\n\n    return timingInfo.start;\n  }\n  updateTimingInfoEnd_(segmentInfo) {\n    segmentInfo.timingInfo = segmentInfo.timingInfo || {};\n    const trackInfo = this.getMediaInfo_();\n    const useVideoTimingInfo = this.loaderType_ === 'main' && trackInfo && trackInfo.hasVideo;\n    const prioritizedTimingInfo = useVideoTimingInfo && segmentInfo.videoTimingInfo ? segmentInfo.videoTimingInfo : segmentInfo.audioTimingInfo;\n    if (!prioritizedTimingInfo) {\n      return;\n    }\n    segmentInfo.timingInfo.end = typeof prioritizedTimingInfo.end === 'number' ?\n    // End time may not exist in a case where we aren't parsing the full segment (one\n    // current example is the case of fmp4), so use the rough duration to calculate an\n    // end time.\n    prioritizedTimingInfo.end : prioritizedTimingInfo.start + segmentInfo.duration;\n  }\n  /**\n   * callback to run when appendBuffer is finished. detects if we are\n   * in a good state to do things with the data we got, or if we need\n   * to wait for more\n   *\n   * @private\n   */\n\n  handleAppendsDone_() {\n    // appendsdone can cause an abort\n    if (this.pendingSegment_) {\n      this.trigger('appendsdone');\n    }\n    if (!this.pendingSegment_) {\n      this.state = 'READY'; // TODO should this move into this.checkForAbort to speed up requests post abort in\n      // all appending cases?\n\n      if (!this.paused()) {\n        this.monitorBuffer_();\n      }\n      return;\n    }\n    const segmentInfo = this.pendingSegment_; // Now that the end of the segment has been reached, we can set the end time. It's\n    // best to wait until all appends are done so we're sure that the primary media is\n    // finished (and we have its end time).\n\n    this.updateTimingInfoEnd_(segmentInfo);\n    if (this.shouldSaveSegmentTimingInfo_) {\n      // Timeline mappings should only be saved for the main loader. This is for multiple\n      // reasons:\n      //\n      // 1) Only one mapping is saved per timeline, meaning that if both the audio loader\n      //    and the main loader try to save the timeline mapping, whichever comes later\n      //    will overwrite the first. In theory this is OK, as the mappings should be the\n      //    same, however, it breaks for (2)\n      // 2) In the event of a live stream, the initial live point will make for a somewhat\n      //    arbitrary mapping. If audio and video streams are not perfectly in-sync, then\n      //    the mapping will be off for one of the streams, dependent on which one was\n      //    first saved (see (1)).\n      // 3) Primary timing goes by video in VHS, so the mapping should be video.\n      //\n      // Since the audio loader will wait for the main loader to load the first segment,\n      // the main loader will save the first timeline mapping, and ensure that there won't\n      // be a case where audio loads two segments without saving a mapping (thus leading\n      // to missing segment timing info).\n      this.syncController_.saveSegmentTimingInfo({\n        segmentInfo,\n        shouldSaveTimelineMapping: this.loaderType_ === 'main'\n      });\n    }\n    const segmentDurationMessage = getTroublesomeSegmentDurationMessage(segmentInfo, this.sourceType_);\n    if (segmentDurationMessage) {\n      if (segmentDurationMessage.severity === 'warn') {\n        videojs.log.warn(segmentDurationMessage.message);\n      } else {\n        this.logger_(segmentDurationMessage.message);\n      }\n    }\n    this.recordThroughput_(segmentInfo);\n    this.pendingSegment_ = null;\n    this.state = 'READY';\n    if (segmentInfo.isSyncRequest) {\n      this.trigger('syncinfoupdate'); // if the sync request was not appended\n      // then it was not the correct segment.\n      // throw it away and use the data it gave us\n      // to get the correct one.\n\n      if (!segmentInfo.hasAppendedData_) {\n        this.logger_(`Throwing away un-appended sync request ${segmentInfoString(segmentInfo)}`);\n        return;\n      }\n    }\n    this.logger_(`Appended ${segmentInfoString(segmentInfo)}`);\n    this.addSegmentMetadataCue_(segmentInfo);\n    this.fetchAtBuffer_ = true;\n    if (this.currentTimeline_ !== segmentInfo.timeline) {\n      this.timelineChangeController_.lastTimelineChange({\n        type: this.loaderType_,\n        from: this.currentTimeline_,\n        to: segmentInfo.timeline\n      }); // If audio is not disabled, the main segment loader is responsible for updating\n      // the audio timeline as well. If the content is video only, this won't have any\n      // impact.\n\n      if (this.loaderType_ === 'main' && !this.audioDisabled_) {\n        this.timelineChangeController_.lastTimelineChange({\n          type: 'audio',\n          from: this.currentTimeline_,\n          to: segmentInfo.timeline\n        });\n      }\n    }\n    this.currentTimeline_ = segmentInfo.timeline; // We must update the syncinfo to recalculate the seekable range before\n    // the following conditional otherwise it may consider this a bad \"guess\"\n    // and attempt to resync when the post-update seekable window and live\n    // point would mean that this was the perfect segment to fetch\n\n    this.trigger('syncinfoupdate');\n    const segment = segmentInfo.segment;\n    const part = segmentInfo.part;\n    const badSegmentGuess = segment.end && this.currentTime_() - segment.end > segmentInfo.playlist.targetDuration * 3;\n    const badPartGuess = part && part.end && this.currentTime_() - part.end > segmentInfo.playlist.partTargetDuration * 3; // If we previously appended a segment/part that ends more than 3 part/targetDurations before\n    // the currentTime_ that means that our conservative guess was too conservative.\n    // In that case, reset the loader state so that we try to use any information gained\n    // from the previous request to create a new, more accurate, sync-point.\n\n    if (badSegmentGuess || badPartGuess) {\n      this.logger_(`bad ${badSegmentGuess ? 'segment' : 'part'} ${segmentInfoString(segmentInfo)}`);\n      this.resetEverything();\n      return;\n    }\n    const isWalkingForward = this.mediaIndex !== null; // Don't do a rendition switch unless we have enough time to get a sync segment\n    // and conservatively guess\n\n    if (isWalkingForward) {\n      this.trigger('bandwidthupdate');\n    }\n    this.trigger('progress');\n    this.mediaIndex = segmentInfo.mediaIndex;\n    this.partIndex = segmentInfo.partIndex; // any time an update finishes and the last segment is in the\n    // buffer, end the stream. this ensures the \"ended\" event will\n    // fire if playback reaches that point.\n\n    if (this.isEndOfStream_(segmentInfo.mediaIndex, segmentInfo.playlist, segmentInfo.partIndex)) {\n      this.endOfStream();\n    } // used for testing\n\n    this.trigger('appended');\n    if (segmentInfo.hasAppendedData_) {\n      this.mediaAppends++;\n    }\n    if (!this.paused()) {\n      this.monitorBuffer_();\n    }\n  }\n  /**\n   * Records the current throughput of the decrypt, transmux, and append\n   * portion of the semgment pipeline. `throughput.rate` is a the cumulative\n   * moving average of the throughput. `throughput.count` is the number of\n   * data points in the average.\n   *\n   * @private\n   * @param {Object} segmentInfo the object returned by loadSegment\n   */\n\n  recordThroughput_(segmentInfo) {\n    if (segmentInfo.duration < MIN_SEGMENT_DURATION_TO_SAVE_STATS) {\n      this.logger_(`Ignoring segment's throughput because its duration of ${segmentInfo.duration}` + ` is less than the min to record ${MIN_SEGMENT_DURATION_TO_SAVE_STATS}`);\n      return;\n    }\n    const rate = this.throughput.rate; // Add one to the time to ensure that we don't accidentally attempt to divide\n    // by zero in the case where the throughput is ridiculously high\n\n    const segmentProcessingTime = Date.now() - segmentInfo.endOfAllRequests + 1; // Multiply by 8000 to convert from bytes/millisecond to bits/second\n\n    const segmentProcessingThroughput = Math.floor(segmentInfo.byteLength / segmentProcessingTime * 8 * 1000); // This is just a cumulative moving average calculation:\n    //   newAvg = oldAvg + (sample - oldAvg) / (sampleCount + 1)\n\n    this.throughput.rate += (segmentProcessingThroughput - rate) / ++this.throughput.count;\n  }\n  /**\n   * Adds a cue to the segment-metadata track with some metadata information about the\n   * segment\n   *\n   * @private\n   * @param {Object} segmentInfo\n   *        the object returned by loadSegment\n   * @method addSegmentMetadataCue_\n   */\n\n  addSegmentMetadataCue_(segmentInfo) {\n    if (!this.segmentMetadataTrack_) {\n      return;\n    }\n    const segment = segmentInfo.segment;\n    const start = segment.start;\n    const end = segment.end; // Do not try adding the cue if the start and end times are invalid.\n\n    if (!finite(start) || !finite(end)) {\n      return;\n    }\n    removeCuesFromTrack(start, end, this.segmentMetadataTrack_);\n    const Cue = window$1.WebKitDataCue || window$1.VTTCue;\n    const value = {\n      custom: segment.custom,\n      dateTimeObject: segment.dateTimeObject,\n      dateTimeString: segment.dateTimeString,\n      programDateTime: segment.programDateTime,\n      bandwidth: segmentInfo.playlist.attributes.BANDWIDTH,\n      resolution: segmentInfo.playlist.attributes.RESOLUTION,\n      codecs: segmentInfo.playlist.attributes.CODECS,\n      byteLength: segmentInfo.byteLength,\n      uri: segmentInfo.uri,\n      timeline: segmentInfo.timeline,\n      playlist: segmentInfo.playlist.id,\n      start,\n      end\n    };\n    const data = JSON.stringify(value);\n    const cue = new Cue(start, end, data); // Attach the metadata to the value property of the cue to keep consistency between\n    // the differences of WebKitDataCue in safari and VTTCue in other browsers\n\n    cue.value = value;\n    this.segmentMetadataTrack_.addCue(cue);\n  }\n}\nfunction noop() {}\nconst toTitleCase = function (string) {\n  if (typeof string !== 'string') {\n    return string;\n  }\n  return string.replace(/./, w => w.toUpperCase());\n};\n\n/**\n * @file source-updater.js\n */\nconst bufferTypes = ['video', 'audio'];\nconst updating = (type, sourceUpdater) => {\n  const sourceBuffer = sourceUpdater[`${type}Buffer`];\n  return sourceBuffer && sourceBuffer.updating || sourceUpdater.queuePending[type];\n};\nconst nextQueueIndexOfType = (type, queue) => {\n  for (let i = 0; i < queue.length; i++) {\n    const queueEntry = queue[i];\n    if (queueEntry.type === 'mediaSource') {\n      // If the next entry is a media source entry (uses multiple source buffers), block\n      // processing to allow it to go through first.\n      return null;\n    }\n    if (queueEntry.type === type) {\n      return i;\n    }\n  }\n  return null;\n};\nconst shiftQueue = (type, sourceUpdater) => {\n  if (sourceUpdater.queue.length === 0) {\n    return;\n  }\n  let queueIndex = 0;\n  let queueEntry = sourceUpdater.queue[queueIndex];\n  if (queueEntry.type === 'mediaSource') {\n    if (!sourceUpdater.updating() && sourceUpdater.mediaSource.readyState !== 'closed') {\n      sourceUpdater.queue.shift();\n      queueEntry.action(sourceUpdater);\n      if (queueEntry.doneFn) {\n        queueEntry.doneFn();\n      } // Only specific source buffer actions must wait for async updateend events. Media\n      // Source actions process synchronously. Therefore, both audio and video source\n      // buffers are now clear to process the next queue entries.\n\n      shiftQueue('audio', sourceUpdater);\n      shiftQueue('video', sourceUpdater);\n    } // Media Source actions require both source buffers, so if the media source action\n    // couldn't process yet (because one or both source buffers are busy), block other\n    // queue actions until both are available and the media source action can process.\n\n    return;\n  }\n  if (type === 'mediaSource') {\n    // If the queue was shifted by a media source action (this happens when pushing a\n    // media source action onto the queue), then it wasn't from an updateend event from an\n    // audio or video source buffer, so there's no change from previous state, and no\n    // processing should be done.\n    return;\n  } // Media source queue entries don't need to consider whether the source updater is\n  // started (i.e., source buffers are created) as they don't need the source buffers, but\n  // source buffer queue entries do.\n\n  if (!sourceUpdater.ready() || sourceUpdater.mediaSource.readyState === 'closed' || updating(type, sourceUpdater)) {\n    return;\n  }\n  if (queueEntry.type !== type) {\n    queueIndex = nextQueueIndexOfType(type, sourceUpdater.queue);\n    if (queueIndex === null) {\n      // Either there's no queue entry that uses this source buffer type in the queue, or\n      // there's a media source queue entry before the next entry of this type, in which\n      // case wait for that action to process first.\n      return;\n    }\n    queueEntry = sourceUpdater.queue[queueIndex];\n  }\n  sourceUpdater.queue.splice(queueIndex, 1); // Keep a record that this source buffer type is in use.\n  //\n  // The queue pending operation must be set before the action is performed in the event\n  // that the action results in a synchronous event that is acted upon. For instance, if\n  // an exception is thrown that can be handled, it's possible that new actions will be\n  // appended to an empty queue and immediately executed, but would not have the correct\n  // pending information if this property was set after the action was performed.\n\n  sourceUpdater.queuePending[type] = queueEntry;\n  queueEntry.action(type, sourceUpdater);\n  if (!queueEntry.doneFn) {\n    // synchronous operation, process next entry\n    sourceUpdater.queuePending[type] = null;\n    shiftQueue(type, sourceUpdater);\n    return;\n  }\n};\nconst cleanupBuffer = (type, sourceUpdater) => {\n  const buffer = sourceUpdater[`${type}Buffer`];\n  const titleType = toTitleCase(type);\n  if (!buffer) {\n    return;\n  }\n  buffer.removeEventListener('updateend', sourceUpdater[`on${titleType}UpdateEnd_`]);\n  buffer.removeEventListener('error', sourceUpdater[`on${titleType}Error_`]);\n  sourceUpdater.codecs[type] = null;\n  sourceUpdater[`${type}Buffer`] = null;\n};\nconst inSourceBuffers = (mediaSource, sourceBuffer) => mediaSource && sourceBuffer && Array.prototype.indexOf.call(mediaSource.sourceBuffers, sourceBuffer) !== -1;\nconst actions = {\n  appendBuffer: (bytes, segmentInfo, onError) => (type, sourceUpdater) => {\n    const sourceBuffer = sourceUpdater[`${type}Buffer`]; // can't do anything if the media source / source buffer is null\n    // or the media source does not contain this source buffer.\n\n    if (!inSourceBuffers(sourceUpdater.mediaSource, sourceBuffer)) {\n      return;\n    }\n    sourceUpdater.logger_(`Appending segment ${segmentInfo.mediaIndex}'s ${bytes.length} bytes to ${type}Buffer`);\n    try {\n      sourceBuffer.appendBuffer(bytes);\n    } catch (e) {\n      sourceUpdater.logger_(`Error with code ${e.code} ` + (e.code === QUOTA_EXCEEDED_ERR ? '(QUOTA_EXCEEDED_ERR) ' : '') + `when appending segment ${segmentInfo.mediaIndex} to ${type}Buffer`);\n      sourceUpdater.queuePending[type] = null;\n      onError(e);\n    }\n  },\n  remove: (start, end) => (type, sourceUpdater) => {\n    const sourceBuffer = sourceUpdater[`${type}Buffer`]; // can't do anything if the media source / source buffer is null\n    // or the media source does not contain this source buffer.\n\n    if (!inSourceBuffers(sourceUpdater.mediaSource, sourceBuffer)) {\n      return;\n    }\n    sourceUpdater.logger_(`Removing ${start} to ${end} from ${type}Buffer`);\n    try {\n      sourceBuffer.remove(start, end);\n    } catch (e) {\n      sourceUpdater.logger_(`Remove ${start} to ${end} from ${type}Buffer failed`);\n    }\n  },\n  timestampOffset: offset => (type, sourceUpdater) => {\n    const sourceBuffer = sourceUpdater[`${type}Buffer`]; // can't do anything if the media source / source buffer is null\n    // or the media source does not contain this source buffer.\n\n    if (!inSourceBuffers(sourceUpdater.mediaSource, sourceBuffer)) {\n      return;\n    }\n    sourceUpdater.logger_(`Setting ${type}timestampOffset to ${offset}`);\n    sourceBuffer.timestampOffset = offset;\n  },\n  callback: callback => (type, sourceUpdater) => {\n    callback();\n  },\n  endOfStream: error => sourceUpdater => {\n    if (sourceUpdater.mediaSource.readyState !== 'open') {\n      return;\n    }\n    sourceUpdater.logger_(`Calling mediaSource endOfStream(${error || ''})`);\n    try {\n      sourceUpdater.mediaSource.endOfStream(error);\n    } catch (e) {\n      videojs.log.warn('Failed to call media source endOfStream', e);\n    }\n  },\n  duration: duration => sourceUpdater => {\n    sourceUpdater.logger_(`Setting mediaSource duration to ${duration}`);\n    try {\n      sourceUpdater.mediaSource.duration = duration;\n    } catch (e) {\n      videojs.log.warn('Failed to set media source duration', e);\n    }\n  },\n  abort: () => (type, sourceUpdater) => {\n    if (sourceUpdater.mediaSource.readyState !== 'open') {\n      return;\n    }\n    const sourceBuffer = sourceUpdater[`${type}Buffer`]; // can't do anything if the media source / source buffer is null\n    // or the media source does not contain this source buffer.\n\n    if (!inSourceBuffers(sourceUpdater.mediaSource, sourceBuffer)) {\n      return;\n    }\n    sourceUpdater.logger_(`calling abort on ${type}Buffer`);\n    try {\n      sourceBuffer.abort();\n    } catch (e) {\n      videojs.log.warn(`Failed to abort on ${type}Buffer`, e);\n    }\n  },\n  addSourceBuffer: (type, codec) => sourceUpdater => {\n    const titleType = toTitleCase(type);\n    const mime = getMimeForCodec(codec);\n    sourceUpdater.logger_(`Adding ${type}Buffer with codec ${codec} to mediaSource`);\n    const sourceBuffer = sourceUpdater.mediaSource.addSourceBuffer(mime);\n    sourceBuffer.addEventListener('updateend', sourceUpdater[`on${titleType}UpdateEnd_`]);\n    sourceBuffer.addEventListener('error', sourceUpdater[`on${titleType}Error_`]);\n    sourceUpdater.codecs[type] = codec;\n    sourceUpdater[`${type}Buffer`] = sourceBuffer;\n  },\n  removeSourceBuffer: type => sourceUpdater => {\n    const sourceBuffer = sourceUpdater[`${type}Buffer`];\n    cleanupBuffer(type, sourceUpdater); // can't do anything if the media source / source buffer is null\n    // or the media source does not contain this source buffer.\n\n    if (!inSourceBuffers(sourceUpdater.mediaSource, sourceBuffer)) {\n      return;\n    }\n    sourceUpdater.logger_(`Removing ${type}Buffer with codec ${sourceUpdater.codecs[type]} from mediaSource`);\n    try {\n      sourceUpdater.mediaSource.removeSourceBuffer(sourceBuffer);\n    } catch (e) {\n      videojs.log.warn(`Failed to removeSourceBuffer ${type}Buffer`, e);\n    }\n  },\n  changeType: codec => (type, sourceUpdater) => {\n    const sourceBuffer = sourceUpdater[`${type}Buffer`];\n    const mime = getMimeForCodec(codec); // can't do anything if the media source / source buffer is null\n    // or the media source does not contain this source buffer.\n\n    if (!inSourceBuffers(sourceUpdater.mediaSource, sourceBuffer)) {\n      return;\n    } // do not update codec if we don't need to.\n\n    if (sourceUpdater.codecs[type] === codec) {\n      return;\n    }\n    sourceUpdater.logger_(`changing ${type}Buffer codec from ${sourceUpdater.codecs[type]} to ${codec}`); // check if change to the provided type is supported\n\n    try {\n      sourceBuffer.changeType(mime);\n      sourceUpdater.codecs[type] = codec;\n    } catch (e) {\n      videojs.log.warn(`Failed to changeType on ${type}Buffer`, e);\n    }\n  }\n};\nconst pushQueue = ({\n  type,\n  sourceUpdater,\n  action,\n  doneFn,\n  name\n}) => {\n  sourceUpdater.queue.push({\n    type,\n    action,\n    doneFn,\n    name\n  });\n  shiftQueue(type, sourceUpdater);\n};\nconst onUpdateend = (type, sourceUpdater) => e => {\n  // Although there should, in theory, be a pending action for any updateend receieved,\n  // there are some actions that may trigger updateend events without set definitions in\n  // the w3c spec. For instance, setting the duration on the media source may trigger\n  // updateend events on source buffers. This does not appear to be in the spec. As such,\n  // if we encounter an updateend without a corresponding pending action from our queue\n  // for that source buffer type, process the next action.\n  if (sourceUpdater.queuePending[type]) {\n    const doneFn = sourceUpdater.queuePending[type].doneFn;\n    sourceUpdater.queuePending[type] = null;\n    if (doneFn) {\n      // if there's an error, report it\n      doneFn(sourceUpdater[`${type}Error_`]);\n    }\n  }\n  shiftQueue(type, sourceUpdater);\n};\n/**\n * A queue of callbacks to be serialized and applied when a\n * MediaSource and its associated SourceBuffers are not in the\n * updating state. It is used by the segment loader to update the\n * underlying SourceBuffers when new data is loaded, for instance.\n *\n * @class SourceUpdater\n * @param {MediaSource} mediaSource the MediaSource to create the SourceBuffer from\n * @param {string} mimeType the desired MIME type of the underlying SourceBuffer\n */\n\nclass SourceUpdater extends videojs.EventTarget {\n  constructor(mediaSource) {\n    super();\n    this.mediaSource = mediaSource;\n    this.sourceopenListener_ = () => shiftQueue('mediaSource', this);\n    this.mediaSource.addEventListener('sourceopen', this.sourceopenListener_);\n    this.logger_ = logger('SourceUpdater'); // initial timestamp offset is 0\n\n    this.audioTimestampOffset_ = 0;\n    this.videoTimestampOffset_ = 0;\n    this.queue = [];\n    this.queuePending = {\n      audio: null,\n      video: null\n    };\n    this.delayedAudioAppendQueue_ = [];\n    this.videoAppendQueued_ = false;\n    this.codecs = {};\n    this.onVideoUpdateEnd_ = onUpdateend('video', this);\n    this.onAudioUpdateEnd_ = onUpdateend('audio', this);\n    this.onVideoError_ = e => {\n      // used for debugging\n      this.videoError_ = e;\n    };\n    this.onAudioError_ = e => {\n      // used for debugging\n      this.audioError_ = e;\n    };\n    this.createdSourceBuffers_ = false;\n    this.initializedEme_ = false;\n    this.triggeredReady_ = false;\n  }\n  initializedEme() {\n    this.initializedEme_ = true;\n    this.triggerReady();\n  }\n  hasCreatedSourceBuffers() {\n    // if false, likely waiting on one of the segment loaders to get enough data to create\n    // source buffers\n    return this.createdSourceBuffers_;\n  }\n  hasInitializedAnyEme() {\n    return this.initializedEme_;\n  }\n  ready() {\n    return this.hasCreatedSourceBuffers() && this.hasInitializedAnyEme();\n  }\n  createSourceBuffers(codecs) {\n    if (this.hasCreatedSourceBuffers()) {\n      // already created them before\n      return;\n    } // the intial addOrChangeSourceBuffers will always be\n    // two add buffers.\n\n    this.addOrChangeSourceBuffers(codecs);\n    this.createdSourceBuffers_ = true;\n    this.trigger('createdsourcebuffers');\n    this.triggerReady();\n  }\n  triggerReady() {\n    // only allow ready to be triggered once, this prevents the case\n    // where:\n    // 1. we trigger createdsourcebuffers\n    // 2. ie 11 synchronously initializates eme\n    // 3. the synchronous initialization causes us to trigger ready\n    // 4. We go back to the ready check in createSourceBuffers and ready is triggered again.\n    if (this.ready() && !this.triggeredReady_) {\n      this.triggeredReady_ = true;\n      this.trigger('ready');\n    }\n  }\n  /**\n   * Add a type of source buffer to the media source.\n   *\n   * @param {string} type\n   *        The type of source buffer to add.\n   *\n   * @param {string} codec\n   *        The codec to add the source buffer with.\n   */\n\n  addSourceBuffer(type, codec) {\n    pushQueue({\n      type: 'mediaSource',\n      sourceUpdater: this,\n      action: actions.addSourceBuffer(type, codec),\n      name: 'addSourceBuffer'\n    });\n  }\n  /**\n   * call abort on a source buffer.\n   *\n   * @param {string} type\n   *        The type of source buffer to call abort on.\n   */\n\n  abort(type) {\n    pushQueue({\n      type,\n      sourceUpdater: this,\n      action: actions.abort(type),\n      name: 'abort'\n    });\n  }\n  /**\n   * Call removeSourceBuffer and remove a specific type\n   * of source buffer on the mediaSource.\n   *\n   * @param {string} type\n   *        The type of source buffer to remove.\n   */\n\n  removeSourceBuffer(type) {\n    if (!this.canRemoveSourceBuffer()) {\n      videojs.log.error('removeSourceBuffer is not supported!');\n      return;\n    }\n    pushQueue({\n      type: 'mediaSource',\n      sourceUpdater: this,\n      action: actions.removeSourceBuffer(type),\n      name: 'removeSourceBuffer'\n    });\n  }\n  /**\n   * Whether or not the removeSourceBuffer function is supported\n   * on the mediaSource.\n   *\n   * @return {boolean}\n   *          if removeSourceBuffer can be called.\n   */\n\n  canRemoveSourceBuffer() {\n    // As of Firefox 83 removeSourceBuffer\n    // throws errors, so we report that it does not support this.\n    return !videojs.browser.IS_FIREFOX && window$1.MediaSource && window$1.MediaSource.prototype && typeof window$1.MediaSource.prototype.removeSourceBuffer === 'function';\n  }\n  /**\n   * Whether or not the changeType function is supported\n   * on our SourceBuffers.\n   *\n   * @return {boolean}\n   *         if changeType can be called.\n   */\n\n  static canChangeType() {\n    return window$1.SourceBuffer && window$1.SourceBuffer.prototype && typeof window$1.SourceBuffer.prototype.changeType === 'function';\n  }\n  /**\n   * Whether or not the changeType function is supported\n   * on our SourceBuffers.\n   *\n   * @return {boolean}\n   *         if changeType can be called.\n   */\n\n  canChangeType() {\n    return this.constructor.canChangeType();\n  }\n  /**\n   * Call the changeType function on a source buffer, given the code and type.\n   *\n   * @param {string} type\n   *        The type of source buffer to call changeType on.\n   *\n   * @param {string} codec\n   *        The codec string to change type with on the source buffer.\n   */\n\n  changeType(type, codec) {\n    if (!this.canChangeType()) {\n      videojs.log.error('changeType is not supported!');\n      return;\n    }\n    pushQueue({\n      type,\n      sourceUpdater: this,\n      action: actions.changeType(codec),\n      name: 'changeType'\n    });\n  }\n  /**\n   * Add source buffers with a codec or, if they are already created,\n   * call changeType on source buffers using changeType.\n   *\n   * @param {Object} codecs\n   *        Codecs to switch to\n   */\n\n  addOrChangeSourceBuffers(codecs) {\n    if (!codecs || typeof codecs !== 'object' || Object.keys(codecs).length === 0) {\n      throw new Error('Cannot addOrChangeSourceBuffers to undefined codecs');\n    }\n    Object.keys(codecs).forEach(type => {\n      const codec = codecs[type];\n      if (!this.hasCreatedSourceBuffers()) {\n        return this.addSourceBuffer(type, codec);\n      }\n      if (this.canChangeType()) {\n        this.changeType(type, codec);\n      }\n    });\n  }\n  /**\n   * Queue an update to append an ArrayBuffer.\n   *\n   * @param {MediaObject} object containing audioBytes and/or videoBytes\n   * @param {Function} done the function to call when done\n   * @see http://www.w3.org/TR/media-source/#widl-SourceBuffer-appendBuffer-void-ArrayBuffer-data\n   */\n\n  appendBuffer(options, doneFn) {\n    const {\n      segmentInfo,\n      type,\n      bytes\n    } = options;\n    this.processedAppend_ = true;\n    if (type === 'audio' && this.videoBuffer && !this.videoAppendQueued_) {\n      this.delayedAudioAppendQueue_.push([options, doneFn]);\n      this.logger_(`delayed audio append of ${bytes.length} until video append`);\n      return;\n    } // In the case of certain errors, for instance, QUOTA_EXCEEDED_ERR, updateend will\n    // not be fired. This means that the queue will be blocked until the next action\n    // taken by the segment-loader. Provide a mechanism for segment-loader to handle\n    // these errors by calling the doneFn with the specific error.\n\n    const onError = doneFn;\n    pushQueue({\n      type,\n      sourceUpdater: this,\n      action: actions.appendBuffer(bytes, segmentInfo || {\n        mediaIndex: -1\n      }, onError),\n      doneFn,\n      name: 'appendBuffer'\n    });\n    if (type === 'video') {\n      this.videoAppendQueued_ = true;\n      if (!this.delayedAudioAppendQueue_.length) {\n        return;\n      }\n      const queue = this.delayedAudioAppendQueue_.slice();\n      this.logger_(`queuing delayed audio ${queue.length} appendBuffers`);\n      this.delayedAudioAppendQueue_.length = 0;\n      queue.forEach(que => {\n        this.appendBuffer.apply(this, que);\n      });\n    }\n  }\n  /**\n   * Get the audio buffer's buffered timerange.\n   *\n   * @return {TimeRange}\n   *         The audio buffer's buffered time range\n   */\n\n  audioBuffered() {\n    // no media source/source buffer or it isn't in the media sources\n    // source buffer list\n    if (!inSourceBuffers(this.mediaSource, this.audioBuffer)) {\n      return createTimeRanges();\n    }\n    return this.audioBuffer.buffered ? this.audioBuffer.buffered : createTimeRanges();\n  }\n  /**\n   * Get the video buffer's buffered timerange.\n   *\n   * @return {TimeRange}\n   *         The video buffer's buffered time range\n   */\n\n  videoBuffered() {\n    // no media source/source buffer or it isn't in the media sources\n    // source buffer list\n    if (!inSourceBuffers(this.mediaSource, this.videoBuffer)) {\n      return createTimeRanges();\n    }\n    return this.videoBuffer.buffered ? this.videoBuffer.buffered : createTimeRanges();\n  }\n  /**\n   * Get a combined video/audio buffer's buffered timerange.\n   *\n   * @return {TimeRange}\n   *         the combined time range\n   */\n\n  buffered() {\n    const video = inSourceBuffers(this.mediaSource, this.videoBuffer) ? this.videoBuffer : null;\n    const audio = inSourceBuffers(this.mediaSource, this.audioBuffer) ? this.audioBuffer : null;\n    if (audio && !video) {\n      return this.audioBuffered();\n    }\n    if (video && !audio) {\n      return this.videoBuffered();\n    }\n    return bufferIntersection(this.audioBuffered(), this.videoBuffered());\n  }\n  /**\n   * Add a callback to the queue that will set duration on the mediaSource.\n   *\n   * @param {number} duration\n   *        The duration to set\n   *\n   * @param {Function} [doneFn]\n   *        function to run after duration has been set.\n   */\n\n  setDuration(duration, doneFn = noop) {\n    // In order to set the duration on the media source, it's necessary to wait for all\n    // source buffers to no longer be updating. \"If the updating attribute equals true on\n    // any SourceBuffer in sourceBuffers, then throw an InvalidStateError exception and\n    // abort these steps.\" (source: https://www.w3.org/TR/media-source/#attributes).\n    pushQueue({\n      type: 'mediaSource',\n      sourceUpdater: this,\n      action: actions.duration(duration),\n      name: 'duration',\n      doneFn\n    });\n  }\n  /**\n   * Add a mediaSource endOfStream call to the queue\n   *\n   * @param {Error} [error]\n   *        Call endOfStream with an error\n   *\n   * @param {Function} [doneFn]\n   *        A function that should be called when the\n   *        endOfStream call has finished.\n   */\n\n  endOfStream(error = null, doneFn = noop) {\n    if (typeof error !== 'string') {\n      error = undefined;\n    } // In order to set the duration on the media source, it's necessary to wait for all\n    // source buffers to no longer be updating. \"If the updating attribute equals true on\n    // any SourceBuffer in sourceBuffers, then throw an InvalidStateError exception and\n    // abort these steps.\" (source: https://www.w3.org/TR/media-source/#attributes).\n\n    pushQueue({\n      type: 'mediaSource',\n      sourceUpdater: this,\n      action: actions.endOfStream(error),\n      name: 'endOfStream',\n      doneFn\n    });\n  }\n  /**\n   * Queue an update to remove a time range from the buffer.\n   *\n   * @param {number} start where to start the removal\n   * @param {number} end where to end the removal\n   * @param {Function} [done=noop] optional callback to be executed when the remove\n   * operation is complete\n   * @see http://www.w3.org/TR/media-source/#widl-SourceBuffer-remove-void-double-start-unrestricted-double-end\n   */\n\n  removeAudio(start, end, done = noop) {\n    if (!this.audioBuffered().length || this.audioBuffered().end(0) === 0) {\n      done();\n      return;\n    }\n    pushQueue({\n      type: 'audio',\n      sourceUpdater: this,\n      action: actions.remove(start, end),\n      doneFn: done,\n      name: 'remove'\n    });\n  }\n  /**\n   * Queue an update to remove a time range from the buffer.\n   *\n   * @param {number} start where to start the removal\n   * @param {number} end where to end the removal\n   * @param {Function} [done=noop] optional callback to be executed when the remove\n   * operation is complete\n   * @see http://www.w3.org/TR/media-source/#widl-SourceBuffer-remove-void-double-start-unrestricted-double-end\n   */\n\n  removeVideo(start, end, done = noop) {\n    if (!this.videoBuffered().length || this.videoBuffered().end(0) === 0) {\n      done();\n      return;\n    }\n    pushQueue({\n      type: 'video',\n      sourceUpdater: this,\n      action: actions.remove(start, end),\n      doneFn: done,\n      name: 'remove'\n    });\n  }\n  /**\n   * Whether the underlying sourceBuffer is updating or not\n   *\n   * @return {boolean} the updating status of the SourceBuffer\n   */\n\n  updating() {\n    // the audio/video source buffer is updating\n    if (updating('audio', this) || updating('video', this)) {\n      return true;\n    }\n    return false;\n  }\n  /**\n   * Set/get the timestampoffset on the audio SourceBuffer\n   *\n   * @return {number} the timestamp offset\n   */\n\n  audioTimestampOffset(offset) {\n    if (typeof offset !== 'undefined' && this.audioBuffer &&\n    // no point in updating if it's the same\n    this.audioTimestampOffset_ !== offset) {\n      pushQueue({\n        type: 'audio',\n        sourceUpdater: this,\n        action: actions.timestampOffset(offset),\n        name: 'timestampOffset'\n      });\n      this.audioTimestampOffset_ = offset;\n    }\n    return this.audioTimestampOffset_;\n  }\n  /**\n   * Set/get the timestampoffset on the video SourceBuffer\n   *\n   * @return {number} the timestamp offset\n   */\n\n  videoTimestampOffset(offset) {\n    if (typeof offset !== 'undefined' && this.videoBuffer &&\n    // no point in updating if it's the same\n    this.videoTimestampOffset !== offset) {\n      pushQueue({\n        type: 'video',\n        sourceUpdater: this,\n        action: actions.timestampOffset(offset),\n        name: 'timestampOffset'\n      });\n      this.videoTimestampOffset_ = offset;\n    }\n    return this.videoTimestampOffset_;\n  }\n  /**\n   * Add a function to the queue that will be called\n   * when it is its turn to run in the audio queue.\n   *\n   * @param {Function} callback\n   *        The callback to queue.\n   */\n\n  audioQueueCallback(callback) {\n    if (!this.audioBuffer) {\n      return;\n    }\n    pushQueue({\n      type: 'audio',\n      sourceUpdater: this,\n      action: actions.callback(callback),\n      name: 'callback'\n    });\n  }\n  /**\n   * Add a function to the queue that will be called\n   * when it is its turn to run in the video queue.\n   *\n   * @param {Function} callback\n   *        The callback to queue.\n   */\n\n  videoQueueCallback(callback) {\n    if (!this.videoBuffer) {\n      return;\n    }\n    pushQueue({\n      type: 'video',\n      sourceUpdater: this,\n      action: actions.callback(callback),\n      name: 'callback'\n    });\n  }\n  /**\n   * dispose of the source updater and the underlying sourceBuffer\n   */\n\n  dispose() {\n    this.trigger('dispose');\n    bufferTypes.forEach(type => {\n      this.abort(type);\n      if (this.canRemoveSourceBuffer()) {\n        this.removeSourceBuffer(type);\n      } else {\n        this[`${type}QueueCallback`](() => cleanupBuffer(type, this));\n      }\n    });\n    this.videoAppendQueued_ = false;\n    this.delayedAudioAppendQueue_.length = 0;\n    if (this.sourceopenListener_) {\n      this.mediaSource.removeEventListener('sourceopen', this.sourceopenListener_);\n    }\n    this.off();\n  }\n}\nconst uint8ToUtf8 = uintArray => decodeURIComponent(escape(String.fromCharCode.apply(null, uintArray)));\nconst bufferToHexString = buffer => {\n  const uInt8Buffer = new Uint8Array(buffer);\n  return Array.from(uInt8Buffer).map(byte => byte.toString(16).padStart(2, '0')).join('');\n};\n\n/**\n * @file vtt-segment-loader.js\n */\nconst VTT_LINE_TERMINATORS = new Uint8Array('\\n\\n'.split('').map(char => char.charCodeAt(0)));\nclass NoVttJsError extends Error {\n  constructor() {\n    super('Trying to parse received VTT cues, but there is no WebVTT. Make sure vtt.js is loaded.');\n  }\n}\n/**\n * An object that manages segment loading and appending.\n *\n * @class VTTSegmentLoader\n * @param {Object} options required and optional options\n * @extends videojs.EventTarget\n */\n\nclass VTTSegmentLoader extends SegmentLoader {\n  constructor(settings, options = {}) {\n    super(settings, options); // SegmentLoader requires a MediaSource be specified or it will throw an error;\n    // however, VTTSegmentLoader has no need of a media source, so delete the reference\n\n    this.mediaSource_ = null;\n    this.subtitlesTrack_ = null;\n    this.loaderType_ = 'subtitle';\n    this.featuresNativeTextTracks_ = settings.featuresNativeTextTracks;\n    this.loadVttJs = settings.loadVttJs; // The VTT segment will have its own time mappings. Saving VTT segment timing info in\n    // the sync controller leads to improper behavior.\n\n    this.shouldSaveSegmentTimingInfo_ = false;\n  }\n  createTransmuxer_() {\n    // don't need to transmux any subtitles\n    return null;\n  }\n  /**\n   * Indicates which time ranges are buffered\n   *\n   * @return {TimeRange}\n   *         TimeRange object representing the current buffered ranges\n   */\n\n  buffered_() {\n    if (!this.subtitlesTrack_ || !this.subtitlesTrack_.cues || !this.subtitlesTrack_.cues.length) {\n      return createTimeRanges();\n    }\n    const cues = this.subtitlesTrack_.cues;\n    const start = cues[0].startTime;\n    const end = cues[cues.length - 1].startTime;\n    return createTimeRanges([[start, end]]);\n  }\n  /**\n   * Gets and sets init segment for the provided map\n   *\n   * @param {Object} map\n   *        The map object representing the init segment to get or set\n   * @param {boolean=} set\n   *        If true, the init segment for the provided map should be saved\n   * @return {Object}\n   *         map object for desired init segment\n   */\n\n  initSegmentForMap(map, set = false) {\n    if (!map) {\n      return null;\n    }\n    const id = initSegmentId(map);\n    let storedMap = this.initSegments_[id];\n    if (set && !storedMap && map.bytes) {\n      // append WebVTT line terminators to the media initialization segment if it exists\n      // to follow the WebVTT spec (https://w3c.github.io/webvtt/#file-structure) that\n      // requires two or more WebVTT line terminators between the WebVTT header and the\n      // rest of the file\n      const combinedByteLength = VTT_LINE_TERMINATORS.byteLength + map.bytes.byteLength;\n      const combinedSegment = new Uint8Array(combinedByteLength);\n      combinedSegment.set(map.bytes);\n      combinedSegment.set(VTT_LINE_TERMINATORS, map.bytes.byteLength);\n      this.initSegments_[id] = storedMap = {\n        resolvedUri: map.resolvedUri,\n        byterange: map.byterange,\n        bytes: combinedSegment\n      };\n    }\n    return storedMap || map;\n  }\n  /**\n   * Returns true if all configuration required for loading is present, otherwise false.\n   *\n   * @return {boolean} True if the all configuration is ready for loading\n   * @private\n   */\n\n  couldBeginLoading_() {\n    return this.playlist_ && this.subtitlesTrack_ && !this.paused();\n  }\n  /**\n   * Once all the starting parameters have been specified, begin\n   * operation. This method should only be invoked from the INIT\n   * state.\n   *\n   * @private\n   */\n\n  init_() {\n    this.state = 'READY';\n    this.resetEverything();\n    return this.monitorBuffer_();\n  }\n  /**\n   * Set a subtitle track on the segment loader to add subtitles to\n   *\n   * @param {TextTrack=} track\n   *        The text track to add loaded subtitles to\n   * @return {TextTrack}\n   *        Returns the subtitles track\n   */\n\n  track(track) {\n    if (typeof track === 'undefined') {\n      return this.subtitlesTrack_;\n    }\n    this.subtitlesTrack_ = track; // if we were unpaused but waiting for a sourceUpdater, start\n    // buffering now\n\n    if (this.state === 'INIT' && this.couldBeginLoading_()) {\n      this.init_();\n    }\n    return this.subtitlesTrack_;\n  }\n  /**\n   * Remove any data in the source buffer between start and end times\n   *\n   * @param {number} start - the start time of the region to remove from the buffer\n   * @param {number} end - the end time of the region to remove from the buffer\n   */\n\n  remove(start, end) {\n    removeCuesFromTrack(start, end, this.subtitlesTrack_);\n  }\n  /**\n   * fill the buffer with segements unless the sourceBuffers are\n   * currently updating\n   *\n   * Note: this function should only ever be called by monitorBuffer_\n   * and never directly\n   *\n   * @private\n   */\n\n  fillBuffer_() {\n    // see if we need to begin loading immediately\n    const segmentInfo = this.chooseNextRequest_();\n    if (!segmentInfo) {\n      return;\n    }\n    if (this.syncController_.timestampOffsetForTimeline(segmentInfo.timeline) === null) {\n      // We don't have the timestamp offset that we need to sync subtitles.\n      // Rerun on a timestamp offset or user interaction.\n      const checkTimestampOffset = () => {\n        this.state = 'READY';\n        if (!this.paused()) {\n          // if not paused, queue a buffer check as soon as possible\n          this.monitorBuffer_();\n        }\n      };\n      this.syncController_.one('timestampoffset', checkTimestampOffset);\n      this.state = 'WAITING_ON_TIMELINE';\n      return;\n    }\n    this.loadSegment_(segmentInfo);\n  } // never set a timestamp offset for vtt segments.\n\n  timestampOffsetForSegment_() {\n    return null;\n  }\n  chooseNextRequest_() {\n    return this.skipEmptySegments_(super.chooseNextRequest_());\n  }\n  /**\n   * Prevents the segment loader from requesting segments we know contain no subtitles\n   * by walking forward until we find the next segment that we don't know whether it is\n   * empty or not.\n   *\n   * @param {Object} segmentInfo\n   *        a segment info object that describes the current segment\n   * @return {Object}\n   *         a segment info object that describes the current segment\n   */\n\n  skipEmptySegments_(segmentInfo) {\n    while (segmentInfo && segmentInfo.segment.empty) {\n      // stop at the last possible segmentInfo\n      if (segmentInfo.mediaIndex + 1 >= segmentInfo.playlist.segments.length) {\n        segmentInfo = null;\n        break;\n      }\n      segmentInfo = this.generateSegmentInfo_({\n        playlist: segmentInfo.playlist,\n        mediaIndex: segmentInfo.mediaIndex + 1,\n        startOfSegment: segmentInfo.startOfSegment + segmentInfo.duration,\n        isSyncRequest: segmentInfo.isSyncRequest\n      });\n    }\n    return segmentInfo;\n  }\n  stopForError(error) {\n    this.error(error);\n    this.state = 'READY';\n    this.pause();\n    this.trigger('error');\n  }\n  /**\n   * append a decrypted segement to the SourceBuffer through a SourceUpdater\n   *\n   * @private\n   */\n\n  segmentRequestFinished_(error, simpleSegment, result) {\n    if (!this.subtitlesTrack_) {\n      this.state = 'READY';\n      return;\n    }\n    this.saveTransferStats_(simpleSegment.stats); // the request was aborted\n\n    if (!this.pendingSegment_) {\n      this.state = 'READY';\n      this.mediaRequestsAborted += 1;\n      return;\n    }\n    if (error) {\n      if (error.code === REQUEST_ERRORS.TIMEOUT) {\n        this.handleTimeout_();\n      }\n      if (error.code === REQUEST_ERRORS.ABORTED) {\n        this.mediaRequestsAborted += 1;\n      } else {\n        this.mediaRequestsErrored += 1;\n      }\n      this.stopForError(error);\n      return;\n    }\n    const segmentInfo = this.pendingSegment_; // although the VTT segment loader bandwidth isn't really used, it's good to\n    // maintain functionality between segment loaders\n\n    this.saveBandwidthRelatedStats_(segmentInfo.duration, simpleSegment.stats); // if this request included a segment key, save that data in the cache\n\n    if (simpleSegment.key) {\n      this.segmentKey(simpleSegment.key, true);\n    }\n    this.state = 'APPENDING'; // used for tests\n\n    this.trigger('appending');\n    const segment = segmentInfo.segment;\n    if (segment.map) {\n      segment.map.bytes = simpleSegment.map.bytes;\n    }\n    segmentInfo.bytes = simpleSegment.bytes; // Make sure that vttjs has loaded, otherwise, load it and wait till it finished loading\n\n    if (typeof window$1.WebVTT !== 'function' && typeof this.loadVttJs === 'function') {\n      this.state = 'WAITING_ON_VTTJS'; // should be fine to call multiple times\n      // script will be loaded once but multiple listeners will be added to the queue, which is expected.\n\n      this.loadVttJs().then(() => this.segmentRequestFinished_(error, simpleSegment, result), () => this.stopForError({\n        message: 'Error loading vtt.js'\n      }));\n      return;\n    }\n    segment.requested = true;\n    try {\n      this.parseVTTCues_(segmentInfo);\n    } catch (e) {\n      this.stopForError({\n        message: e.message\n      });\n      return;\n    }\n    this.updateTimeMapping_(segmentInfo, this.syncController_.timelines[segmentInfo.timeline], this.playlist_);\n    if (segmentInfo.cues.length) {\n      segmentInfo.timingInfo = {\n        start: segmentInfo.cues[0].startTime,\n        end: segmentInfo.cues[segmentInfo.cues.length - 1].endTime\n      };\n    } else {\n      segmentInfo.timingInfo = {\n        start: segmentInfo.startOfSegment,\n        end: segmentInfo.startOfSegment + segmentInfo.duration\n      };\n    }\n    if (segmentInfo.isSyncRequest) {\n      this.trigger('syncinfoupdate');\n      this.pendingSegment_ = null;\n      this.state = 'READY';\n      return;\n    }\n    segmentInfo.byteLength = segmentInfo.bytes.byteLength;\n    this.mediaSecondsLoaded += segment.duration; // Create VTTCue instances for each cue in the new segment and add them to\n    // the subtitle track\n\n    segmentInfo.cues.forEach(cue => {\n      this.subtitlesTrack_.addCue(this.featuresNativeTextTracks_ ? new window$1.VTTCue(cue.startTime, cue.endTime, cue.text) : cue);\n    }); // Remove any duplicate cues from the subtitle track. The WebVTT spec allows\n    // cues to have identical time-intervals, but if the text is also identical\n    // we can safely assume it is a duplicate that can be removed (ex. when a cue\n    // \"overlaps\" VTT segments)\n\n    removeDuplicateCuesFromTrack(this.subtitlesTrack_);\n    this.handleAppendsDone_();\n  }\n  handleData_() {// noop as we shouldn't be getting video/audio data captions\n    // that we do not support here.\n  }\n  updateTimingInfoEnd_() {// noop\n  }\n  /**\n   * Uses the WebVTT parser to parse the segment response\n   *\n   * @throws NoVttJsError\n   *\n   * @param {Object} segmentInfo\n   *        a segment info object that describes the current segment\n   * @private\n   */\n\n  parseVTTCues_(segmentInfo) {\n    let decoder;\n    let decodeBytesToString = false;\n    if (typeof window$1.WebVTT !== 'function') {\n      // caller is responsible for exception handling.\n      throw new NoVttJsError();\n    }\n    if (typeof window$1.TextDecoder === 'function') {\n      decoder = new window$1.TextDecoder('utf8');\n    } else {\n      decoder = window$1.WebVTT.StringDecoder();\n      decodeBytesToString = true;\n    }\n    const parser = new window$1.WebVTT.Parser(window$1, window$1.vttjs, decoder);\n    segmentInfo.cues = [];\n    segmentInfo.timestampmap = {\n      MPEGTS: 0,\n      LOCAL: 0\n    };\n    parser.oncue = segmentInfo.cues.push.bind(segmentInfo.cues);\n    parser.ontimestampmap = map => {\n      segmentInfo.timestampmap = map;\n    };\n    parser.onparsingerror = error => {\n      videojs.log.warn('Error encountered when parsing cues: ' + error.message);\n    };\n    if (segmentInfo.segment.map) {\n      let mapData = segmentInfo.segment.map.bytes;\n      if (decodeBytesToString) {\n        mapData = uint8ToUtf8(mapData);\n      }\n      parser.parse(mapData);\n    }\n    let segmentData = segmentInfo.bytes;\n    if (decodeBytesToString) {\n      segmentData = uint8ToUtf8(segmentData);\n    }\n    parser.parse(segmentData);\n    parser.flush();\n  }\n  /**\n   * Updates the start and end times of any cues parsed by the WebVTT parser using\n   * the information parsed from the X-TIMESTAMP-MAP header and a TS to media time mapping\n   * from the SyncController\n   *\n   * @param {Object} segmentInfo\n   *        a segment info object that describes the current segment\n   * @param {Object} mappingObj\n   *        object containing a mapping from TS to media time\n   * @param {Object} playlist\n   *        the playlist object containing the segment\n   * @private\n   */\n\n  updateTimeMapping_(segmentInfo, mappingObj, playlist) {\n    const segment = segmentInfo.segment;\n    if (!mappingObj) {\n      // If the sync controller does not have a mapping of TS to Media Time for the\n      // timeline, then we don't have enough information to update the cue\n      // start/end times\n      return;\n    }\n    if (!segmentInfo.cues.length) {\n      // If there are no cues, we also do not have enough information to figure out\n      // segment timing. Mark that the segment contains no cues so we don't re-request\n      // an empty segment.\n      segment.empty = true;\n      return;\n    }\n    const {\n      MPEGTS,\n      LOCAL\n    } = segmentInfo.timestampmap;\n    /**\n     * From the spec:\n     * The MPEGTS media timestamp MUST use a 90KHz timescale,\n     * even when non-WebVTT Media Segments use a different timescale.\n     */\n\n    const mpegTsInSeconds = MPEGTS / ONE_SECOND_IN_TS;\n    const diff = mpegTsInSeconds - LOCAL + mappingObj.mapping;\n    segmentInfo.cues.forEach(cue => {\n      const duration = cue.endTime - cue.startTime;\n      const startTime = MPEGTS === 0 ? cue.startTime + diff : this.handleRollover_(cue.startTime + diff, mappingObj.time);\n      cue.startTime = Math.max(startTime, 0);\n      cue.endTime = Math.max(startTime + duration, 0);\n    });\n    if (!playlist.syncInfo) {\n      const firstStart = segmentInfo.cues[0].startTime;\n      const lastStart = segmentInfo.cues[segmentInfo.cues.length - 1].startTime;\n      playlist.syncInfo = {\n        mediaSequence: playlist.mediaSequence + segmentInfo.mediaIndex,\n        time: Math.min(firstStart, lastStart - segment.duration)\n      };\n    }\n  }\n  /**\n   * MPEG-TS PES timestamps are limited to 2^33.\n   * Once they reach 2^33, they roll over to 0.\n   * mux.js handles PES timestamp rollover for the following scenarios:\n   * [forward rollover(right)] ->\n   *    PES timestamps monotonically increase, and once they reach 2^33, they roll over to 0\n   * [backward rollover(left)] -->\n   *    we seek back to position before rollover.\n   *\n   * According to the HLS SPEC:\n   * When synchronizing WebVTT with PES timestamps, clients SHOULD account\n   * for cases where the 33-bit PES timestamps have wrapped and the WebVTT\n   * cue times have not.  When the PES timestamp wraps, the WebVTT Segment\n   * SHOULD have a X-TIMESTAMP-MAP header that maps the current WebVTT\n   * time to the new (low valued) PES timestamp.\n   *\n   * So we want to handle rollover here and align VTT Cue start/end time to the player's time.\n   */\n\n  handleRollover_(value, reference) {\n    if (reference === null) {\n      return value;\n    }\n    let valueIn90khz = value * ONE_SECOND_IN_TS;\n    const referenceIn90khz = reference * ONE_SECOND_IN_TS;\n    let offset;\n    if (referenceIn90khz < valueIn90khz) {\n      // - 2^33\n      offset = -8589934592;\n    } else {\n      // + 2^33\n      offset = 8589934592;\n    } // distance(value - reference) > 2^32\n\n    while (Math.abs(valueIn90khz - referenceIn90khz) > 4294967296) {\n      valueIn90khz += offset;\n    }\n    return valueIn90khz / ONE_SECOND_IN_TS;\n  }\n}\n\n/**\n * @file ad-cue-tags.js\n */\n/**\n * Searches for an ad cue that overlaps with the given mediaTime\n *\n * @param {Object} track\n *        the track to find the cue for\n *\n * @param {number} mediaTime\n *        the time to find the cue at\n *\n * @return {Object|null}\n *         the found cue or null\n */\n\nconst findAdCue = function (track, mediaTime) {\n  const cues = track.cues;\n  for (let i = 0; i < cues.length; i++) {\n    const cue = cues[i];\n    if (mediaTime >= cue.adStartTime && mediaTime <= cue.adEndTime) {\n      return cue;\n    }\n  }\n  return null;\n};\nconst updateAdCues = function (media, track, offset = 0) {\n  if (!media.segments) {\n    return;\n  }\n  let mediaTime = offset;\n  let cue;\n  for (let i = 0; i < media.segments.length; i++) {\n    const segment = media.segments[i];\n    if (!cue) {\n      // Since the cues will span for at least the segment duration, adding a fudge\n      // factor of half segment duration will prevent duplicate cues from being\n      // created when timing info is not exact (e.g. cue start time initialized\n      // at 10.006677, but next call mediaTime is 10.003332 )\n      cue = findAdCue(track, mediaTime + segment.duration / 2);\n    }\n    if (cue) {\n      if ('cueIn' in segment) {\n        // Found a CUE-IN so end the cue\n        cue.endTime = mediaTime;\n        cue.adEndTime = mediaTime;\n        mediaTime += segment.duration;\n        cue = null;\n        continue;\n      }\n      if (mediaTime < cue.endTime) {\n        // Already processed this mediaTime for this cue\n        mediaTime += segment.duration;\n        continue;\n      } // otherwise extend cue until a CUE-IN is found\n\n      cue.endTime += segment.duration;\n    } else {\n      if ('cueOut' in segment) {\n        cue = new window$1.VTTCue(mediaTime, mediaTime + segment.duration, segment.cueOut);\n        cue.adStartTime = mediaTime; // Assumes tag format to be\n        // #EXT-X-CUE-OUT:30\n\n        cue.adEndTime = mediaTime + parseFloat(segment.cueOut);\n        track.addCue(cue);\n      }\n      if ('cueOutCont' in segment) {\n        // Entered into the middle of an ad cue\n        // Assumes tag formate to be\n        // #EXT-X-CUE-OUT-CONT:10/30\n        const [adOffset, adTotal] = segment.cueOutCont.split('/').map(parseFloat);\n        cue = new window$1.VTTCue(mediaTime, mediaTime + segment.duration, '');\n        cue.adStartTime = mediaTime - adOffset;\n        cue.adEndTime = cue.adStartTime + adTotal;\n        track.addCue(cue);\n      }\n    }\n    mediaTime += segment.duration;\n  }\n};\n\n/**\n * @file sync-controller.js\n */\n// synchronize expired playlist segments.\n// the max media sequence diff is 48 hours of live stream\n// content with two second segments. Anything larger than that\n// will likely be invalid.\n\nconst MAX_MEDIA_SEQUENCE_DIFF_FOR_SYNC = 86400;\nconst syncPointStrategies = [\n// Stategy \"VOD\": Handle the VOD-case where the sync-point is *always*\n//                the equivalence display-time 0 === segment-index 0\n{\n  name: 'VOD',\n  run: (syncController, playlist, duration, currentTimeline, currentTime) => {\n    if (duration !== Infinity) {\n      const syncPoint = {\n        time: 0,\n        segmentIndex: 0,\n        partIndex: null\n      };\n      return syncPoint;\n    }\n    return null;\n  }\n}, {\n  name: 'MediaSequence',\n  /**\n   * run media sequence strategy\n   *\n   * @param {SyncController} syncController\n   * @param {Object} playlist\n   * @param {number} duration\n   * @param {number} currentTimeline\n   * @param {number} currentTime\n   * @param {string} type\n   */\n  run: (syncController, playlist, duration, currentTimeline, currentTime, type) => {\n    if (!type) {\n      return null;\n    }\n    const mediaSequenceMap = syncController.getMediaSequenceMap(type);\n    if (!mediaSequenceMap || mediaSequenceMap.size === 0) {\n      return null;\n    }\n    if (playlist.mediaSequence === undefined || !Array.isArray(playlist.segments) || !playlist.segments.length) {\n      return null;\n    }\n    let currentMediaSequence = playlist.mediaSequence;\n    let segmentIndex = 0;\n    for (const segment of playlist.segments) {\n      const range = mediaSequenceMap.get(currentMediaSequence);\n      if (!range) {\n        // unexpected case\n        // we expect this playlist to be the same playlist in the map\n        // just break from the loop and move forward to the next strategy\n        break;\n      }\n      if (currentTime >= range.start && currentTime < range.end) {\n        // we found segment\n        if (Array.isArray(segment.parts) && segment.parts.length) {\n          let currentPartStart = range.start;\n          let partIndex = 0;\n          for (const part of segment.parts) {\n            const start = currentPartStart;\n            const end = start + part.duration;\n            if (currentTime >= start && currentTime < end) {\n              return {\n                time: range.start,\n                segmentIndex,\n                partIndex\n              };\n            }\n            partIndex++;\n            currentPartStart = end;\n          }\n        } // no parts found, return sync point for segment\n\n        return {\n          time: range.start,\n          segmentIndex,\n          partIndex: null\n        };\n      }\n      segmentIndex++;\n      currentMediaSequence++;\n    } // we didn't find any segments for provided current time\n\n    return null;\n  }\n},\n// Stategy \"ProgramDateTime\": We have a program-date-time tag in this playlist\n{\n  name: 'ProgramDateTime',\n  run: (syncController, playlist, duration, currentTimeline, currentTime) => {\n    if (!Object.keys(syncController.timelineToDatetimeMappings).length) {\n      return null;\n    }\n    let syncPoint = null;\n    let lastDistance = null;\n    const partsAndSegments = getPartsAndSegments(playlist);\n    currentTime = currentTime || 0;\n    for (let i = 0; i < partsAndSegments.length; i++) {\n      // start from the end and loop backwards for live\n      // or start from the front and loop forwards for non-live\n      const index = playlist.endList || currentTime === 0 ? i : partsAndSegments.length - (i + 1);\n      const partAndSegment = partsAndSegments[index];\n      const segment = partAndSegment.segment;\n      const datetimeMapping = syncController.timelineToDatetimeMappings[segment.timeline];\n      if (!datetimeMapping || !segment.dateTimeObject) {\n        continue;\n      }\n      const segmentTime = segment.dateTimeObject.getTime() / 1000;\n      let start = segmentTime + datetimeMapping; // take part duration into account.\n\n      if (segment.parts && typeof partAndSegment.partIndex === 'number') {\n        for (let z = 0; z < partAndSegment.partIndex; z++) {\n          start += segment.parts[z].duration;\n        }\n      }\n      const distance = Math.abs(currentTime - start); // Once the distance begins to increase, or if distance is 0, we have passed\n      // currentTime and can stop looking for better candidates\n\n      if (lastDistance !== null && (distance === 0 || lastDistance < distance)) {\n        break;\n      }\n      lastDistance = distance;\n      syncPoint = {\n        time: start,\n        segmentIndex: partAndSegment.segmentIndex,\n        partIndex: partAndSegment.partIndex\n      };\n    }\n    return syncPoint;\n  }\n},\n// Stategy \"Segment\": We have a known time mapping for a timeline and a\n//                    segment in the current timeline with timing data\n{\n  name: 'Segment',\n  run: (syncController, playlist, duration, currentTimeline, currentTime) => {\n    let syncPoint = null;\n    let lastDistance = null;\n    currentTime = currentTime || 0;\n    const partsAndSegments = getPartsAndSegments(playlist);\n    for (let i = 0; i < partsAndSegments.length; i++) {\n      // start from the end and loop backwards for live\n      // or start from the front and loop forwards for non-live\n      const index = playlist.endList || currentTime === 0 ? i : partsAndSegments.length - (i + 1);\n      const partAndSegment = partsAndSegments[index];\n      const segment = partAndSegment.segment;\n      const start = partAndSegment.part && partAndSegment.part.start || segment && segment.start;\n      if (segment.timeline === currentTimeline && typeof start !== 'undefined') {\n        const distance = Math.abs(currentTime - start); // Once the distance begins to increase, we have passed\n        // currentTime and can stop looking for better candidates\n\n        if (lastDistance !== null && lastDistance < distance) {\n          break;\n        }\n        if (!syncPoint || lastDistance === null || lastDistance >= distance) {\n          lastDistance = distance;\n          syncPoint = {\n            time: start,\n            segmentIndex: partAndSegment.segmentIndex,\n            partIndex: partAndSegment.partIndex\n          };\n        }\n      }\n    }\n    return syncPoint;\n  }\n},\n// Stategy \"Discontinuity\": We have a discontinuity with a known\n//                          display-time\n{\n  name: 'Discontinuity',\n  run: (syncController, playlist, duration, currentTimeline, currentTime) => {\n    let syncPoint = null;\n    currentTime = currentTime || 0;\n    if (playlist.discontinuityStarts && playlist.discontinuityStarts.length) {\n      let lastDistance = null;\n      for (let i = 0; i < playlist.discontinuityStarts.length; i++) {\n        const segmentIndex = playlist.discontinuityStarts[i];\n        const discontinuity = playlist.discontinuitySequence + i + 1;\n        const discontinuitySync = syncController.discontinuities[discontinuity];\n        if (discontinuitySync) {\n          const distance = Math.abs(currentTime - discontinuitySync.time); // Once the distance begins to increase, we have passed\n          // currentTime and can stop looking for better candidates\n\n          if (lastDistance !== null && lastDistance < distance) {\n            break;\n          }\n          if (!syncPoint || lastDistance === null || lastDistance >= distance) {\n            lastDistance = distance;\n            syncPoint = {\n              time: discontinuitySync.time,\n              segmentIndex,\n              partIndex: null\n            };\n          }\n        }\n      }\n    }\n    return syncPoint;\n  }\n},\n// Stategy \"Playlist\": We have a playlist with a known mapping of\n//                     segment index to display time\n{\n  name: 'Playlist',\n  run: (syncController, playlist, duration, currentTimeline, currentTime) => {\n    if (playlist.syncInfo) {\n      const syncPoint = {\n        time: playlist.syncInfo.time,\n        segmentIndex: playlist.syncInfo.mediaSequence - playlist.mediaSequence,\n        partIndex: null\n      };\n      return syncPoint;\n    }\n    return null;\n  }\n}];\nclass SyncController extends videojs.EventTarget {\n  constructor(options = {}) {\n    super(); // ...for synching across variants\n\n    this.timelines = [];\n    this.discontinuities = [];\n    this.timelineToDatetimeMappings = {};\n    /**\n     * @type {Map<string, Map<number, { start: number, end: number }>>}\n     * @private\n     */\n\n    this.mediaSequenceStorage_ = new Map();\n    this.logger_ = logger('SyncController');\n  }\n  /**\n   * Get media sequence map by type\n   *\n   * @param {string} type - segment loader type\n   * @return {Map<number, { start: number, end: number }> | undefined}\n   */\n\n  getMediaSequenceMap(type) {\n    return this.mediaSequenceStorage_.get(type);\n  }\n  /**\n   * Update Media Sequence Map -> <MediaSequence, Range>\n   *\n   * @param {Object} playlist - parsed playlist\n   * @param {number} currentTime - current player's time\n   * @param {string} type - segment loader type\n   * @return {void}\n   */\n\n  updateMediaSequenceMap(playlist, currentTime, type) {\n    // we should not process this playlist if it does not have mediaSequence or segments\n    if (playlist.mediaSequence === undefined || !Array.isArray(playlist.segments) || !playlist.segments.length) {\n      return;\n    }\n    const currentMap = this.getMediaSequenceMap(type);\n    const result = new Map();\n    let currentMediaSequence = playlist.mediaSequence;\n    let currentBaseTime;\n    if (!currentMap) {\n      // first playlist setup:\n      currentBaseTime = 0;\n    } else if (currentMap.has(playlist.mediaSequence)) {\n      // further playlists setup:\n      currentBaseTime = currentMap.get(playlist.mediaSequence).start;\n    } else {\n      // it seems like we have a gap between playlists, use current time as a fallback:\n      this.logger_(`MediaSequence sync for ${type} segment loader - received a gap between playlists.\nFallback base time to: ${currentTime}.\nReceived media sequence: ${currentMediaSequence}.\nCurrent map: `, currentMap);\n      currentBaseTime = currentTime;\n    }\n    this.logger_(`MediaSequence sync for ${type} segment loader.\nReceived media sequence: ${currentMediaSequence}.\nbase time is ${currentBaseTime}\nCurrent map: `, currentMap);\n    playlist.segments.forEach(segment => {\n      const start = currentBaseTime;\n      const end = start + segment.duration;\n      const range = {\n        start,\n        end\n      };\n      result.set(currentMediaSequence, range);\n      currentMediaSequence++;\n      currentBaseTime = end;\n    });\n    this.mediaSequenceStorage_.set(type, result);\n  }\n  /**\n   * Find a sync-point for the playlist specified\n   *\n   * A sync-point is defined as a known mapping from display-time to\n   * a segment-index in the current playlist.\n   *\n   * @param {Playlist} playlist\n   *        The playlist that needs a sync-point\n   * @param {number} duration\n   *        Duration of the MediaSource (Infinite if playing a live source)\n   * @param {number} currentTimeline\n   *        The last timeline from which a segment was loaded\n   * @param {number} currentTime\n   *        Current player's time\n   * @param {string} type\n   *        Segment loader type\n   * @return {Object}\n   *          A sync-point object\n   */\n\n  getSyncPoint(playlist, duration, currentTimeline, currentTime, type) {\n    // Always use VOD sync point for VOD\n    if (duration !== Infinity) {\n      const vodSyncPointStrategy = syncPointStrategies.find(({\n        name\n      }) => name === 'VOD');\n      return vodSyncPointStrategy.run(this, playlist, duration);\n    }\n    const syncPoints = this.runStrategies_(playlist, duration, currentTimeline, currentTime, type);\n    if (!syncPoints.length) {\n      // Signal that we need to attempt to get a sync-point manually\n      // by fetching a segment in the playlist and constructing\n      // a sync-point from that information\n      return null;\n    } // If we have exact match just return it instead of finding the nearest distance\n\n    for (const syncPointInfo of syncPoints) {\n      const {\n        syncPoint,\n        strategy\n      } = syncPointInfo;\n      const {\n        segmentIndex,\n        time\n      } = syncPoint;\n      if (segmentIndex < 0) {\n        continue;\n      }\n      const selectedSegment = playlist.segments[segmentIndex];\n      const start = time;\n      const end = start + selectedSegment.duration;\n      this.logger_(`Strategy: ${strategy}. Current time: ${currentTime}. selected segment: ${segmentIndex}. Time: [${start} -> ${end}]}`);\n      if (currentTime >= start && currentTime < end) {\n        this.logger_('Found sync point with exact match: ', syncPoint);\n        return syncPoint;\n      }\n    } // Now find the sync-point that is closest to the currentTime because\n    // that should result in the most accurate guess about which segment\n    // to fetch\n\n    return this.selectSyncPoint_(syncPoints, {\n      key: 'time',\n      value: currentTime\n    });\n  }\n  /**\n   * Calculate the amount of time that has expired off the playlist during playback\n   *\n   * @param {Playlist} playlist\n   *        Playlist object to calculate expired from\n   * @param {number} duration\n   *        Duration of the MediaSource (Infinity if playling a live source)\n   * @return {number|null}\n   *          The amount of time that has expired off the playlist during playback. Null\n   *          if no sync-points for the playlist can be found.\n   */\n\n  getExpiredTime(playlist, duration) {\n    if (!playlist || !playlist.segments) {\n      return null;\n    }\n    const syncPoints = this.runStrategies_(playlist, duration, playlist.discontinuitySequence, 0, 'main'); // Without sync-points, there is not enough information to determine the expired time\n\n    if (!syncPoints.length) {\n      return null;\n    }\n    const syncPoint = this.selectSyncPoint_(syncPoints, {\n      key: 'segmentIndex',\n      value: 0\n    }); // If the sync-point is beyond the start of the playlist, we want to subtract the\n    // duration from index 0 to syncPoint.segmentIndex instead of adding.\n\n    if (syncPoint.segmentIndex > 0) {\n      syncPoint.time *= -1;\n    }\n    return Math.abs(syncPoint.time + sumDurations({\n      defaultDuration: playlist.targetDuration,\n      durationList: playlist.segments,\n      startIndex: syncPoint.segmentIndex,\n      endIndex: 0\n    }));\n  }\n  /**\n   * Runs each sync-point strategy and returns a list of sync-points returned by the\n   * strategies\n   *\n   * @private\n   * @param {Playlist} playlist\n   *        The playlist that needs a sync-point\n   * @param {number} duration\n   *        Duration of the MediaSource (Infinity if playing a live source)\n   * @param {number} currentTimeline\n   *        The last timeline from which a segment was loaded\n   * @param {number} currentTime\n   *        Current player's time\n   * @param {string} type\n   *        Segment loader type\n   * @return {Array}\n   *          A list of sync-point objects\n   */\n\n  runStrategies_(playlist, duration, currentTimeline, currentTime, type) {\n    const syncPoints = []; // Try to find a sync-point in by utilizing various strategies...\n\n    for (let i = 0; i < syncPointStrategies.length; i++) {\n      const strategy = syncPointStrategies[i];\n      const syncPoint = strategy.run(this, playlist, duration, currentTimeline, currentTime, type);\n      if (syncPoint) {\n        syncPoint.strategy = strategy.name;\n        syncPoints.push({\n          strategy: strategy.name,\n          syncPoint\n        });\n      }\n    }\n    return syncPoints;\n  }\n  /**\n   * Selects the sync-point nearest the specified target\n   *\n   * @private\n   * @param {Array} syncPoints\n   *        List of sync-points to select from\n   * @param {Object} target\n   *        Object specifying the property and value we are targeting\n   * @param {string} target.key\n   *        Specifies the property to target. Must be either 'time' or 'segmentIndex'\n   * @param {number} target.value\n   *        The value to target for the specified key.\n   * @return {Object}\n   *          The sync-point nearest the target\n   */\n\n  selectSyncPoint_(syncPoints, target) {\n    let bestSyncPoint = syncPoints[0].syncPoint;\n    let bestDistance = Math.abs(syncPoints[0].syncPoint[target.key] - target.value);\n    let bestStrategy = syncPoints[0].strategy;\n    for (let i = 1; i < syncPoints.length; i++) {\n      const newDistance = Math.abs(syncPoints[i].syncPoint[target.key] - target.value);\n      if (newDistance < bestDistance) {\n        bestDistance = newDistance;\n        bestSyncPoint = syncPoints[i].syncPoint;\n        bestStrategy = syncPoints[i].strategy;\n      }\n    }\n    this.logger_(`syncPoint for [${target.key}: ${target.value}] chosen with strategy` + ` [${bestStrategy}]: [time:${bestSyncPoint.time},` + ` segmentIndex:${bestSyncPoint.segmentIndex}` + (typeof bestSyncPoint.partIndex === 'number' ? `,partIndex:${bestSyncPoint.partIndex}` : '') + ']');\n    return bestSyncPoint;\n  }\n  /**\n   * Save any meta-data present on the segments when segments leave\n   * the live window to the playlist to allow for synchronization at the\n   * playlist level later.\n   *\n   * @param {Playlist} oldPlaylist - The previous active playlist\n   * @param {Playlist} newPlaylist - The updated and most current playlist\n   */\n\n  saveExpiredSegmentInfo(oldPlaylist, newPlaylist) {\n    const mediaSequenceDiff = newPlaylist.mediaSequence - oldPlaylist.mediaSequence; // Ignore large media sequence gaps\n\n    if (mediaSequenceDiff > MAX_MEDIA_SEQUENCE_DIFF_FOR_SYNC) {\n      videojs.log.warn(`Not saving expired segment info. Media sequence gap ${mediaSequenceDiff} is too large.`);\n      return;\n    } // When a segment expires from the playlist and it has a start time\n    // save that information as a possible sync-point reference in future\n\n    for (let i = mediaSequenceDiff - 1; i >= 0; i--) {\n      const lastRemovedSegment = oldPlaylist.segments[i];\n      if (lastRemovedSegment && typeof lastRemovedSegment.start !== 'undefined') {\n        newPlaylist.syncInfo = {\n          mediaSequence: oldPlaylist.mediaSequence + i,\n          time: lastRemovedSegment.start\n        };\n        this.logger_(`playlist refresh sync: [time:${newPlaylist.syncInfo.time},` + ` mediaSequence: ${newPlaylist.syncInfo.mediaSequence}]`);\n        this.trigger('syncinfoupdate');\n        break;\n      }\n    }\n  }\n  /**\n   * Save the mapping from playlist's ProgramDateTime to display. This should only happen\n   * before segments start to load.\n   *\n   * @param {Playlist} playlist - The currently active playlist\n   */\n\n  setDateTimeMappingForStart(playlist) {\n    // It's possible for the playlist to be updated before playback starts, meaning time\n    // zero is not yet set. If, during these playlist refreshes, a discontinuity is\n    // crossed, then the old time zero mapping (for the prior timeline) would be retained\n    // unless the mappings are cleared.\n    this.timelineToDatetimeMappings = {};\n    if (playlist.segments && playlist.segments.length && playlist.segments[0].dateTimeObject) {\n      const firstSegment = playlist.segments[0];\n      const playlistTimestamp = firstSegment.dateTimeObject.getTime() / 1000;\n      this.timelineToDatetimeMappings[firstSegment.timeline] = -playlistTimestamp;\n    }\n  }\n  /**\n   * Calculates and saves timeline mappings, playlist sync info, and segment timing values\n   * based on the latest timing information.\n   *\n   * @param {Object} options\n   *        Options object\n   * @param {SegmentInfo} options.segmentInfo\n   *        The current active request information\n   * @param {boolean} options.shouldSaveTimelineMapping\n   *        If there's a timeline change, determines if the timeline mapping should be\n   *        saved for timeline mapping and program date time mappings.\n   */\n\n  saveSegmentTimingInfo({\n    segmentInfo,\n    shouldSaveTimelineMapping\n  }) {\n    const didCalculateSegmentTimeMapping = this.calculateSegmentTimeMapping_(segmentInfo, segmentInfo.timingInfo, shouldSaveTimelineMapping);\n    const segment = segmentInfo.segment;\n    if (didCalculateSegmentTimeMapping) {\n      this.saveDiscontinuitySyncInfo_(segmentInfo); // If the playlist does not have sync information yet, record that information\n      // now with segment timing information\n\n      if (!segmentInfo.playlist.syncInfo) {\n        segmentInfo.playlist.syncInfo = {\n          mediaSequence: segmentInfo.playlist.mediaSequence + segmentInfo.mediaIndex,\n          time: segment.start\n        };\n      }\n    }\n    const dateTime = segment.dateTimeObject;\n    if (segment.discontinuity && shouldSaveTimelineMapping && dateTime) {\n      this.timelineToDatetimeMappings[segment.timeline] = -(dateTime.getTime() / 1000);\n    }\n  }\n  timestampOffsetForTimeline(timeline) {\n    if (typeof this.timelines[timeline] === 'undefined') {\n      return null;\n    }\n    return this.timelines[timeline].time;\n  }\n  mappingForTimeline(timeline) {\n    if (typeof this.timelines[timeline] === 'undefined') {\n      return null;\n    }\n    return this.timelines[timeline].mapping;\n  }\n  /**\n   * Use the \"media time\" for a segment to generate a mapping to \"display time\" and\n   * save that display time to the segment.\n   *\n   * @private\n   * @param {SegmentInfo} segmentInfo\n   *        The current active request information\n   * @param {Object} timingInfo\n   *        The start and end time of the current segment in \"media time\"\n   * @param {boolean} shouldSaveTimelineMapping\n   *        If there's a timeline change, determines if the timeline mapping should be\n   *        saved in timelines.\n   * @return {boolean}\n   *          Returns false if segment time mapping could not be calculated\n   */\n\n  calculateSegmentTimeMapping_(segmentInfo, timingInfo, shouldSaveTimelineMapping) {\n    // TODO: remove side effects\n    const segment = segmentInfo.segment;\n    const part = segmentInfo.part;\n    let mappingObj = this.timelines[segmentInfo.timeline];\n    let start;\n    let end;\n    if (typeof segmentInfo.timestampOffset === 'number') {\n      mappingObj = {\n        time: segmentInfo.startOfSegment,\n        mapping: segmentInfo.startOfSegment - timingInfo.start\n      };\n      if (shouldSaveTimelineMapping) {\n        this.timelines[segmentInfo.timeline] = mappingObj;\n        this.trigger('timestampoffset');\n        this.logger_(`time mapping for timeline ${segmentInfo.timeline}: ` + `[time: ${mappingObj.time}] [mapping: ${mappingObj.mapping}]`);\n      }\n      start = segmentInfo.startOfSegment;\n      end = timingInfo.end + mappingObj.mapping;\n    } else if (mappingObj) {\n      start = timingInfo.start + mappingObj.mapping;\n      end = timingInfo.end + mappingObj.mapping;\n    } else {\n      return false;\n    }\n    if (part) {\n      part.start = start;\n      part.end = end;\n    } // If we don't have a segment start yet or the start value we got\n    // is less than our current segment.start value, save a new start value.\n    // We have to do this because parts will have segment timing info saved\n    // multiple times and we want segment start to be the earliest part start\n    // value for that segment.\n\n    if (!segment.start || start < segment.start) {\n      segment.start = start;\n    }\n    segment.end = end;\n    return true;\n  }\n  /**\n   * Each time we have discontinuity in the playlist, attempt to calculate the location\n   * in display of the start of the discontinuity and save that. We also save an accuracy\n   * value so that we save values with the most accuracy (closest to 0.)\n   *\n   * @private\n   * @param {SegmentInfo} segmentInfo - The current active request information\n   */\n\n  saveDiscontinuitySyncInfo_(segmentInfo) {\n    const playlist = segmentInfo.playlist;\n    const segment = segmentInfo.segment; // If the current segment is a discontinuity then we know exactly where\n    // the start of the range and it's accuracy is 0 (greater accuracy values\n    // mean more approximation)\n\n    if (segment.discontinuity) {\n      this.discontinuities[segment.timeline] = {\n        time: segment.start,\n        accuracy: 0\n      };\n    } else if (playlist.discontinuityStarts && playlist.discontinuityStarts.length) {\n      // Search for future discontinuities that we can provide better timing\n      // information for and save that information for sync purposes\n      for (let i = 0; i < playlist.discontinuityStarts.length; i++) {\n        const segmentIndex = playlist.discontinuityStarts[i];\n        const discontinuity = playlist.discontinuitySequence + i + 1;\n        const mediaIndexDiff = segmentIndex - segmentInfo.mediaIndex;\n        const accuracy = Math.abs(mediaIndexDiff);\n        if (!this.discontinuities[discontinuity] || this.discontinuities[discontinuity].accuracy > accuracy) {\n          let time;\n          if (mediaIndexDiff < 0) {\n            time = segment.start - sumDurations({\n              defaultDuration: playlist.targetDuration,\n              durationList: playlist.segments,\n              startIndex: segmentInfo.mediaIndex,\n              endIndex: segmentIndex\n            });\n          } else {\n            time = segment.end + sumDurations({\n              defaultDuration: playlist.targetDuration,\n              durationList: playlist.segments,\n              startIndex: segmentInfo.mediaIndex + 1,\n              endIndex: segmentIndex\n            });\n          }\n          this.discontinuities[discontinuity] = {\n            time,\n            accuracy\n          };\n        }\n      }\n    }\n  }\n  dispose() {\n    this.trigger('dispose');\n    this.off();\n  }\n}\n\n/**\n * The TimelineChangeController acts as a source for segment loaders to listen for and\n * keep track of latest and pending timeline changes. This is useful to ensure proper\n * sync, as each loader may need to make a consideration for what timeline the other\n * loader is on before making changes which could impact the other loader's media.\n *\n * @class TimelineChangeController\n * @extends videojs.EventTarget\n */\n\nclass TimelineChangeController extends videojs.EventTarget {\n  constructor() {\n    super();\n    this.pendingTimelineChanges_ = {};\n    this.lastTimelineChanges_ = {};\n  }\n  clearPendingTimelineChange(type) {\n    this.pendingTimelineChanges_[type] = null;\n    this.trigger('pendingtimelinechange');\n  }\n  pendingTimelineChange({\n    type,\n    from,\n    to\n  }) {\n    if (typeof from === 'number' && typeof to === 'number') {\n      this.pendingTimelineChanges_[type] = {\n        type,\n        from,\n        to\n      };\n      this.trigger('pendingtimelinechange');\n    }\n    return this.pendingTimelineChanges_[type];\n  }\n  lastTimelineChange({\n    type,\n    from,\n    to\n  }) {\n    if (typeof from === 'number' && typeof to === 'number') {\n      this.lastTimelineChanges_[type] = {\n        type,\n        from,\n        to\n      };\n      delete this.pendingTimelineChanges_[type];\n      this.trigger('timelinechange');\n    }\n    return this.lastTimelineChanges_[type];\n  }\n  dispose() {\n    this.trigger('dispose');\n    this.pendingTimelineChanges_ = {};\n    this.lastTimelineChanges_ = {};\n    this.off();\n  }\n}\n\n/* rollup-plugin-worker-factory start for worker!/home/runner/work/http-streaming/http-streaming/src/decrypter-worker.js */\nconst workerCode = transform(getWorkerString(function () {\n  /**\n   * @file stream.js\n   */\n\n  /**\n   * A lightweight readable stream implemention that handles event dispatching.\n   *\n   * @class Stream\n   */\n\n  var Stream = /*#__PURE__*/function () {\n    function Stream() {\n      this.listeners = {};\n    }\n    /**\n     * Add a listener for a specified event type.\n     *\n     * @param {string} type the event name\n     * @param {Function} listener the callback to be invoked when an event of\n     * the specified type occurs\n     */\n\n    var _proto = Stream.prototype;\n    _proto.on = function on(type, listener) {\n      if (!this.listeners[type]) {\n        this.listeners[type] = [];\n      }\n      this.listeners[type].push(listener);\n    }\n    /**\n     * Remove a listener for a specified event type.\n     *\n     * @param {string} type the event name\n     * @param {Function} listener  a function previously registered for this\n     * type of event through `on`\n     * @return {boolean} if we could turn it off or not\n     */;\n\n    _proto.off = function off(type, listener) {\n      if (!this.listeners[type]) {\n        return false;\n      }\n      var index = this.listeners[type].indexOf(listener); // TODO: which is better?\n      // In Video.js we slice listener functions\n      // on trigger so that it does not mess up the order\n      // while we loop through.\n      //\n      // Here we slice on off so that the loop in trigger\n      // can continue using it's old reference to loop without\n      // messing up the order.\n\n      this.listeners[type] = this.listeners[type].slice(0);\n      this.listeners[type].splice(index, 1);\n      return index > -1;\n    }\n    /**\n     * Trigger an event of the specified type on this stream. Any additional\n     * arguments to this function are passed as parameters to event listeners.\n     *\n     * @param {string} type the event name\n     */;\n\n    _proto.trigger = function trigger(type) {\n      var callbacks = this.listeners[type];\n      if (!callbacks) {\n        return;\n      } // Slicing the arguments on every invocation of this method\n      // can add a significant amount of overhead. Avoid the\n      // intermediate object creation for the common case of a\n      // single callback argument\n\n      if (arguments.length === 2) {\n        var length = callbacks.length;\n        for (var i = 0; i < length; ++i) {\n          callbacks[i].call(this, arguments[1]);\n        }\n      } else {\n        var args = Array.prototype.slice.call(arguments, 1);\n        var _length = callbacks.length;\n        for (var _i = 0; _i < _length; ++_i) {\n          callbacks[_i].apply(this, args);\n        }\n      }\n    }\n    /**\n     * Destroys the stream and cleans up.\n     */;\n\n    _proto.dispose = function dispose() {\n      this.listeners = {};\n    }\n    /**\n     * Forwards all `data` events on this stream to the destination stream. The\n     * destination stream should provide a method `push` to receive the data\n     * events as they arrive.\n     *\n     * @param {Stream} destination the stream that will receive all `data` events\n     * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options\n     */;\n\n    _proto.pipe = function pipe(destination) {\n      this.on('data', function (data) {\n        destination.push(data);\n      });\n    };\n    return Stream;\n  }();\n  /*! @name pkcs7 @version 1.0.4 @license Apache-2.0 */\n\n  /**\n   * Returns the subarray of a Uint8Array without PKCS#7 padding.\n   *\n   * @param padded {Uint8Array} unencrypted bytes that have been padded\n   * @return {Uint8Array} the unpadded bytes\n   * @see http://tools.ietf.org/html/rfc5652\n   */\n\n  function unpad(padded) {\n    return padded.subarray(0, padded.byteLength - padded[padded.byteLength - 1]);\n  }\n  /*! @name aes-decrypter @version 4.0.1 @license Apache-2.0 */\n\n  /**\n   * @file aes.js\n   *\n   * This file contains an adaptation of the AES decryption algorithm\n   * from the Standford Javascript Cryptography Library. That work is\n   * covered by the following copyright and permissions notice:\n   *\n   * Copyright 2009-2010 Emily Stark, Mike Hamburg, Dan Boneh.\n   * All rights reserved.\n   *\n   * Redistribution and use in source and binary forms, with or without\n   * modification, are permitted provided that the following conditions are\n   * met:\n   *\n   * 1. Redistributions of source code must retain the above copyright\n   *    notice, this list of conditions and the following disclaimer.\n   *\n   * 2. Redistributions in binary form must reproduce the above\n   *    copyright notice, this list of conditions and the following\n   *    disclaimer in the documentation and/or other materials provided\n   *    with the distribution.\n   *\n   * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR\n   * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n   * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   * DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> OR CONTRIBUTORS BE\n   * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n   * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n   * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR\n   * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n   * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE\n   * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN\n   * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n   *\n   * The views and conclusions contained in the software and documentation\n   * are those of the authors and should not be interpreted as representing\n   * official policies, either expressed or implied, of the authors.\n   */\n\n  /**\n   * Expand the S-box tables.\n   *\n   * @private\n   */\n\n  const precompute = function () {\n    const tables = [[[], [], [], [], []], [[], [], [], [], []]];\n    const encTable = tables[0];\n    const decTable = tables[1];\n    const sbox = encTable[4];\n    const sboxInv = decTable[4];\n    let i;\n    let x;\n    let xInv;\n    const d = [];\n    const th = [];\n    let x2;\n    let x4;\n    let x8;\n    let s;\n    let tEnc;\n    let tDec; // Compute double and third tables\n\n    for (i = 0; i < 256; i++) {\n      th[(d[i] = i << 1 ^ (i >> 7) * 283) ^ i] = i;\n    }\n    for (x = xInv = 0; !sbox[x]; x ^= x2 || 1, xInv = th[xInv] || 1) {\n      // Compute sbox\n      s = xInv ^ xInv << 1 ^ xInv << 2 ^ xInv << 3 ^ xInv << 4;\n      s = s >> 8 ^ s & 255 ^ 99;\n      sbox[x] = s;\n      sboxInv[s] = x; // Compute MixColumns\n\n      x8 = d[x4 = d[x2 = d[x]]];\n      tDec = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;\n      tEnc = d[s] * 0x101 ^ s * 0x1010100;\n      for (i = 0; i < 4; i++) {\n        encTable[i][x] = tEnc = tEnc << 24 ^ tEnc >>> 8;\n        decTable[i][s] = tDec = tDec << 24 ^ tDec >>> 8;\n      }\n    } // Compactify. Considerable speedup on Firefox.\n\n    for (i = 0; i < 5; i++) {\n      encTable[i] = encTable[i].slice(0);\n      decTable[i] = decTable[i].slice(0);\n    }\n    return tables;\n  };\n  let aesTables = null;\n  /**\n   * Schedule out an AES key for both encryption and decryption. This\n   * is a low-level class. Use a cipher mode to do bulk encryption.\n   *\n   * @class AES\n   * @param key {Array} The key as an array of 4, 6 or 8 words.\n   */\n\n  class AES {\n    constructor(key) {\n      /**\n      * The expanded S-box and inverse S-box tables. These will be computed\n      * on the client so that we don't have to send them down the wire.\n      *\n      * There are two tables, _tables[0] is for encryption and\n      * _tables[1] is for decryption.\n      *\n      * The first 4 sub-tables are the expanded S-box with MixColumns. The\n      * last (_tables[01][4]) is the S-box itself.\n      *\n      * @private\n      */\n      // if we have yet to precompute the S-box tables\n      // do so now\n      if (!aesTables) {\n        aesTables = precompute();\n      } // then make a copy of that object for use\n\n      this._tables = [[aesTables[0][0].slice(), aesTables[0][1].slice(), aesTables[0][2].slice(), aesTables[0][3].slice(), aesTables[0][4].slice()], [aesTables[1][0].slice(), aesTables[1][1].slice(), aesTables[1][2].slice(), aesTables[1][3].slice(), aesTables[1][4].slice()]];\n      let i;\n      let j;\n      let tmp;\n      const sbox = this._tables[0][4];\n      const decTable = this._tables[1];\n      const keyLen = key.length;\n      let rcon = 1;\n      if (keyLen !== 4 && keyLen !== 6 && keyLen !== 8) {\n        throw new Error('Invalid aes key size');\n      }\n      const encKey = key.slice(0);\n      const decKey = [];\n      this._key = [encKey, decKey]; // schedule encryption keys\n\n      for (i = keyLen; i < 4 * keyLen + 28; i++) {\n        tmp = encKey[i - 1]; // apply sbox\n\n        if (i % keyLen === 0 || keyLen === 8 && i % keyLen === 4) {\n          tmp = sbox[tmp >>> 24] << 24 ^ sbox[tmp >> 16 & 255] << 16 ^ sbox[tmp >> 8 & 255] << 8 ^ sbox[tmp & 255]; // shift rows and add rcon\n\n          if (i % keyLen === 0) {\n            tmp = tmp << 8 ^ tmp >>> 24 ^ rcon << 24;\n            rcon = rcon << 1 ^ (rcon >> 7) * 283;\n          }\n        }\n        encKey[i] = encKey[i - keyLen] ^ tmp;\n      } // schedule decryption keys\n\n      for (j = 0; i; j++, i--) {\n        tmp = encKey[j & 3 ? i : i - 4];\n        if (i <= 4 || j < 4) {\n          decKey[j] = tmp;\n        } else {\n          decKey[j] = decTable[0][sbox[tmp >>> 24]] ^ decTable[1][sbox[tmp >> 16 & 255]] ^ decTable[2][sbox[tmp >> 8 & 255]] ^ decTable[3][sbox[tmp & 255]];\n        }\n      }\n    }\n    /**\n     * Decrypt 16 bytes, specified as four 32-bit words.\n     *\n     * @param {number} encrypted0 the first word to decrypt\n     * @param {number} encrypted1 the second word to decrypt\n     * @param {number} encrypted2 the third word to decrypt\n     * @param {number} encrypted3 the fourth word to decrypt\n     * @param {Int32Array} out the array to write the decrypted words\n     * into\n     * @param {number} offset the offset into the output array to start\n     * writing results\n     * @return {Array} The plaintext.\n     */\n\n    decrypt(encrypted0, encrypted1, encrypted2, encrypted3, out, offset) {\n      const key = this._key[1]; // state variables a,b,c,d are loaded with pre-whitened data\n\n      let a = encrypted0 ^ key[0];\n      let b = encrypted3 ^ key[1];\n      let c = encrypted2 ^ key[2];\n      let d = encrypted1 ^ key[3];\n      let a2;\n      let b2;\n      let c2; // key.length === 2 ?\n\n      const nInnerRounds = key.length / 4 - 2;\n      let i;\n      let kIndex = 4;\n      const table = this._tables[1]; // load up the tables\n\n      const table0 = table[0];\n      const table1 = table[1];\n      const table2 = table[2];\n      const table3 = table[3];\n      const sbox = table[4]; // Inner rounds. Cribbed from OpenSSL.\n\n      for (i = 0; i < nInnerRounds; i++) {\n        a2 = table0[a >>> 24] ^ table1[b >> 16 & 255] ^ table2[c >> 8 & 255] ^ table3[d & 255] ^ key[kIndex];\n        b2 = table0[b >>> 24] ^ table1[c >> 16 & 255] ^ table2[d >> 8 & 255] ^ table3[a & 255] ^ key[kIndex + 1];\n        c2 = table0[c >>> 24] ^ table1[d >> 16 & 255] ^ table2[a >> 8 & 255] ^ table3[b & 255] ^ key[kIndex + 2];\n        d = table0[d >>> 24] ^ table1[a >> 16 & 255] ^ table2[b >> 8 & 255] ^ table3[c & 255] ^ key[kIndex + 3];\n        kIndex += 4;\n        a = a2;\n        b = b2;\n        c = c2;\n      } // Last round.\n\n      for (i = 0; i < 4; i++) {\n        out[(3 & -i) + offset] = sbox[a >>> 24] << 24 ^ sbox[b >> 16 & 255] << 16 ^ sbox[c >> 8 & 255] << 8 ^ sbox[d & 255] ^ key[kIndex++];\n        a2 = a;\n        a = b;\n        b = c;\n        c = d;\n        d = a2;\n      }\n    }\n  }\n  /**\n   * @file async-stream.js\n   */\n\n  /**\n   * A wrapper around the Stream class to use setTimeout\n   * and run stream \"jobs\" Asynchronously\n   *\n   * @class AsyncStream\n   * @extends Stream\n   */\n\n  class AsyncStream extends Stream {\n    constructor() {\n      super(Stream);\n      this.jobs = [];\n      this.delay = 1;\n      this.timeout_ = null;\n    }\n    /**\n     * process an async job\n     *\n     * @private\n     */\n\n    processJob_() {\n      this.jobs.shift()();\n      if (this.jobs.length) {\n        this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay);\n      } else {\n        this.timeout_ = null;\n      }\n    }\n    /**\n     * push a job into the stream\n     *\n     * @param {Function} job the job to push into the stream\n     */\n\n    push(job) {\n      this.jobs.push(job);\n      if (!this.timeout_) {\n        this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay);\n      }\n    }\n  }\n  /**\n   * @file decrypter.js\n   *\n   * An asynchronous implementation of AES-128 CBC decryption with\n   * PKCS#7 padding.\n   */\n\n  /**\n   * Convert network-order (big-endian) bytes into their little-endian\n   * representation.\n   */\n\n  const ntoh = function (word) {\n    return word << 24 | (word & 0xff00) << 8 | (word & 0xff0000) >> 8 | word >>> 24;\n  };\n  /**\n   * Decrypt bytes using AES-128 with CBC and PKCS#7 padding.\n   *\n   * @param {Uint8Array} encrypted the encrypted bytes\n   * @param {Uint32Array} key the bytes of the decryption key\n   * @param {Uint32Array} initVector the initialization vector (IV) to\n   * use for the first round of CBC.\n   * @return {Uint8Array} the decrypted bytes\n   *\n   * @see http://en.wikipedia.org/wiki/Advanced_Encryption_Standard\n   * @see http://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_Block_Chaining_.28CBC.29\n   * @see https://tools.ietf.org/html/rfc2315\n   */\n\n  const decrypt = function (encrypted, key, initVector) {\n    // word-level access to the encrypted bytes\n    const encrypted32 = new Int32Array(encrypted.buffer, encrypted.byteOffset, encrypted.byteLength >> 2);\n    const decipher = new AES(Array.prototype.slice.call(key)); // byte and word-level access for the decrypted output\n\n    const decrypted = new Uint8Array(encrypted.byteLength);\n    const decrypted32 = new Int32Array(decrypted.buffer); // temporary variables for working with the IV, encrypted, and\n    // decrypted data\n\n    let init0;\n    let init1;\n    let init2;\n    let init3;\n    let encrypted0;\n    let encrypted1;\n    let encrypted2;\n    let encrypted3; // iteration variable\n\n    let wordIx; // pull out the words of the IV to ensure we don't modify the\n    // passed-in reference and easier access\n\n    init0 = initVector[0];\n    init1 = initVector[1];\n    init2 = initVector[2];\n    init3 = initVector[3]; // decrypt four word sequences, applying cipher-block chaining (CBC)\n    // to each decrypted block\n\n    for (wordIx = 0; wordIx < encrypted32.length; wordIx += 4) {\n      // convert big-endian (network order) words into little-endian\n      // (javascript order)\n      encrypted0 = ntoh(encrypted32[wordIx]);\n      encrypted1 = ntoh(encrypted32[wordIx + 1]);\n      encrypted2 = ntoh(encrypted32[wordIx + 2]);\n      encrypted3 = ntoh(encrypted32[wordIx + 3]); // decrypt the block\n\n      decipher.decrypt(encrypted0, encrypted1, encrypted2, encrypted3, decrypted32, wordIx); // XOR with the IV, and restore network byte-order to obtain the\n      // plaintext\n\n      decrypted32[wordIx] = ntoh(decrypted32[wordIx] ^ init0);\n      decrypted32[wordIx + 1] = ntoh(decrypted32[wordIx + 1] ^ init1);\n      decrypted32[wordIx + 2] = ntoh(decrypted32[wordIx + 2] ^ init2);\n      decrypted32[wordIx + 3] = ntoh(decrypted32[wordIx + 3] ^ init3); // setup the IV for the next round\n\n      init0 = encrypted0;\n      init1 = encrypted1;\n      init2 = encrypted2;\n      init3 = encrypted3;\n    }\n    return decrypted;\n  };\n  /**\n   * The `Decrypter` class that manages decryption of AES\n   * data through `AsyncStream` objects and the `decrypt`\n   * function\n   *\n   * @param {Uint8Array} encrypted the encrypted bytes\n   * @param {Uint32Array} key the bytes of the decryption key\n   * @param {Uint32Array} initVector the initialization vector (IV) to\n   * @param {Function} done the function to run when done\n   * @class Decrypter\n   */\n\n  class Decrypter {\n    constructor(encrypted, key, initVector, done) {\n      const step = Decrypter.STEP;\n      const encrypted32 = new Int32Array(encrypted.buffer);\n      const decrypted = new Uint8Array(encrypted.byteLength);\n      let i = 0;\n      this.asyncStream_ = new AsyncStream(); // split up the encryption job and do the individual chunks asynchronously\n\n      this.asyncStream_.push(this.decryptChunk_(encrypted32.subarray(i, i + step), key, initVector, decrypted));\n      for (i = step; i < encrypted32.length; i += step) {\n        initVector = new Uint32Array([ntoh(encrypted32[i - 4]), ntoh(encrypted32[i - 3]), ntoh(encrypted32[i - 2]), ntoh(encrypted32[i - 1])]);\n        this.asyncStream_.push(this.decryptChunk_(encrypted32.subarray(i, i + step), key, initVector, decrypted));\n      } // invoke the done() callback when everything is finished\n\n      this.asyncStream_.push(function () {\n        // remove pkcs#7 padding from the decrypted bytes\n        done(null, unpad(decrypted));\n      });\n    }\n    /**\n     * a getter for step the maximum number of bytes to process at one time\n     *\n     * @return {number} the value of step 32000\n     */\n\n    static get STEP() {\n      // 4 * 8000;\n      return 32000;\n    }\n    /**\n     * @private\n     */\n\n    decryptChunk_(encrypted, key, initVector, decrypted) {\n      return function () {\n        const bytes = decrypt(encrypted, key, initVector);\n        decrypted.set(bytes, encrypted.byteOffset);\n      };\n    }\n  }\n  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n  var win;\n  if (typeof window !== \"undefined\") {\n    win = window;\n  } else if (typeof commonjsGlobal !== \"undefined\") {\n    win = commonjsGlobal;\n  } else if (typeof self !== \"undefined\") {\n    win = self;\n  } else {\n    win = {};\n  }\n  var window_1 = win;\n  var isArrayBufferView = function isArrayBufferView(obj) {\n    if (ArrayBuffer.isView === 'function') {\n      return ArrayBuffer.isView(obj);\n    }\n    return obj && obj.buffer instanceof ArrayBuffer;\n  };\n  var BigInt = window_1.BigInt || Number;\n  [BigInt('0x1'), BigInt('0x100'), BigInt('0x10000'), BigInt('0x1000000'), BigInt('0x100000000'), BigInt('0x10000000000'), BigInt('0x1000000000000'), BigInt('0x100000000000000'), BigInt('0x10000000000000000')];\n  (function () {\n    var a = new Uint16Array([0xFFCC]);\n    var b = new Uint8Array(a.buffer, a.byteOffset, a.byteLength);\n    if (b[0] === 0xFF) {\n      return 'big';\n    }\n    if (b[0] === 0xCC) {\n      return 'little';\n    }\n    return 'unknown';\n  })();\n  /**\n   * Creates an object for sending to a web worker modifying properties that are TypedArrays\n   * into a new object with seperated properties for the buffer, byteOffset, and byteLength.\n   *\n   * @param {Object} message\n   *        Object of properties and values to send to the web worker\n   * @return {Object}\n   *         Modified message with TypedArray values expanded\n   * @function createTransferableMessage\n   */\n\n  const createTransferableMessage = function (message) {\n    const transferable = {};\n    Object.keys(message).forEach(key => {\n      const value = message[key];\n      if (isArrayBufferView(value)) {\n        transferable[key] = {\n          bytes: value.buffer,\n          byteOffset: value.byteOffset,\n          byteLength: value.byteLength\n        };\n      } else {\n        transferable[key] = value;\n      }\n    });\n    return transferable;\n  };\n  /* global self */\n\n  /**\n   * Our web worker interface so that things can talk to aes-decrypter\n   * that will be running in a web worker. the scope is passed to this by\n   * webworkify.\n   */\n\n  self.onmessage = function (event) {\n    const data = event.data;\n    const encrypted = new Uint8Array(data.encrypted.bytes, data.encrypted.byteOffset, data.encrypted.byteLength);\n    const key = new Uint32Array(data.key.bytes, data.key.byteOffset, data.key.byteLength / 4);\n    const iv = new Uint32Array(data.iv.bytes, data.iv.byteOffset, data.iv.byteLength / 4);\n    /* eslint-disable no-new, handle-callback-err */\n\n    new Decrypter(encrypted, key, iv, function (err, bytes) {\n      self.postMessage(createTransferableMessage({\n        source: data.source,\n        decrypted: bytes\n      }), [bytes.buffer]);\n    });\n    /* eslint-enable */\n  };\n}));\n\nvar Decrypter = factory(workerCode);\n/* rollup-plugin-worker-factory end for worker!/home/runner/work/http-streaming/http-streaming/src/decrypter-worker.js */\n\n/**\n * Convert the properties of an HLS track into an audioTrackKind.\n *\n * @private\n */\n\nconst audioTrackKind_ = properties => {\n  let kind = properties.default ? 'main' : 'alternative';\n  if (properties.characteristics && properties.characteristics.indexOf('public.accessibility.describes-video') >= 0) {\n    kind = 'main-desc';\n  }\n  return kind;\n};\n/**\n * Pause provided segment loader and playlist loader if active\n *\n * @param {SegmentLoader} segmentLoader\n *        SegmentLoader to pause\n * @param {Object} mediaType\n *        Active media type\n * @function stopLoaders\n */\n\nconst stopLoaders = (segmentLoader, mediaType) => {\n  segmentLoader.abort();\n  segmentLoader.pause();\n  if (mediaType && mediaType.activePlaylistLoader) {\n    mediaType.activePlaylistLoader.pause();\n    mediaType.activePlaylistLoader = null;\n  }\n};\n/**\n * Start loading provided segment loader and playlist loader\n *\n * @param {PlaylistLoader} playlistLoader\n *        PlaylistLoader to start loading\n * @param {Object} mediaType\n *        Active media type\n * @function startLoaders\n */\n\nconst startLoaders = (playlistLoader, mediaType) => {\n  // Segment loader will be started after `loadedmetadata` or `loadedplaylist` from the\n  // playlist loader\n  mediaType.activePlaylistLoader = playlistLoader;\n  playlistLoader.load();\n};\n/**\n * Returns a function to be called when the media group changes. It performs a\n * non-destructive (preserve the buffer) resync of the SegmentLoader. This is because a\n * change of group is merely a rendition switch of the same content at another encoding,\n * rather than a change of content, such as switching audio from English to Spanish.\n *\n * @param {string} type\n *        MediaGroup type\n * @param {Object} settings\n *        Object containing required information for media groups\n * @return {Function}\n *         Handler for a non-destructive resync of SegmentLoader when the active media\n *         group changes.\n * @function onGroupChanged\n */\n\nconst onGroupChanged = (type, settings) => () => {\n  const {\n    segmentLoaders: {\n      [type]: segmentLoader,\n      main: mainSegmentLoader\n    },\n    mediaTypes: {\n      [type]: mediaType\n    }\n  } = settings;\n  const activeTrack = mediaType.activeTrack();\n  const activeGroup = mediaType.getActiveGroup();\n  const previousActiveLoader = mediaType.activePlaylistLoader;\n  const lastGroup = mediaType.lastGroup_; // the group did not change do nothing\n\n  if (activeGroup && lastGroup && activeGroup.id === lastGroup.id) {\n    return;\n  }\n  mediaType.lastGroup_ = activeGroup;\n  mediaType.lastTrack_ = activeTrack;\n  stopLoaders(segmentLoader, mediaType);\n  if (!activeGroup || activeGroup.isMainPlaylist) {\n    // there is no group active or active group is a main playlist and won't change\n    return;\n  }\n  if (!activeGroup.playlistLoader) {\n    if (previousActiveLoader) {\n      // The previous group had a playlist loader but the new active group does not\n      // this means we are switching from demuxed to muxed audio. In this case we want to\n      // do a destructive reset of the main segment loader and not restart the audio\n      // loaders.\n      mainSegmentLoader.resetEverything();\n    }\n    return;\n  } // Non-destructive resync\n\n  segmentLoader.resyncLoader();\n  startLoaders(activeGroup.playlistLoader, mediaType);\n};\nconst onGroupChanging = (type, settings) => () => {\n  const {\n    segmentLoaders: {\n      [type]: segmentLoader\n    },\n    mediaTypes: {\n      [type]: mediaType\n    }\n  } = settings;\n  mediaType.lastGroup_ = null;\n  segmentLoader.abort();\n  segmentLoader.pause();\n};\n/**\n * Returns a function to be called when the media track changes. It performs a\n * destructive reset of the SegmentLoader to ensure we start loading as close to\n * currentTime as possible.\n *\n * @param {string} type\n *        MediaGroup type\n * @param {Object} settings\n *        Object containing required information for media groups\n * @return {Function}\n *         Handler for a destructive reset of SegmentLoader when the active media\n *         track changes.\n * @function onTrackChanged\n */\n\nconst onTrackChanged = (type, settings) => () => {\n  const {\n    mainPlaylistLoader,\n    segmentLoaders: {\n      [type]: segmentLoader,\n      main: mainSegmentLoader\n    },\n    mediaTypes: {\n      [type]: mediaType\n    }\n  } = settings;\n  const activeTrack = mediaType.activeTrack();\n  const activeGroup = mediaType.getActiveGroup();\n  const previousActiveLoader = mediaType.activePlaylistLoader;\n  const lastTrack = mediaType.lastTrack_; // track did not change, do nothing\n\n  if (lastTrack && activeTrack && lastTrack.id === activeTrack.id) {\n    return;\n  }\n  mediaType.lastGroup_ = activeGroup;\n  mediaType.lastTrack_ = activeTrack;\n  stopLoaders(segmentLoader, mediaType);\n  if (!activeGroup) {\n    // there is no group active so we do not want to restart loaders\n    return;\n  }\n  if (activeGroup.isMainPlaylist) {\n    // track did not change, do nothing\n    if (!activeTrack || !lastTrack || activeTrack.id === lastTrack.id) {\n      return;\n    }\n    const pc = settings.vhs.playlistController_;\n    const newPlaylist = pc.selectPlaylist(); // media will not change do nothing\n\n    if (pc.media() === newPlaylist) {\n      return;\n    }\n    mediaType.logger_(`track change. Switching main audio from ${lastTrack.id} to ${activeTrack.id}`);\n    mainPlaylistLoader.pause();\n    mainSegmentLoader.resetEverything();\n    pc.fastQualityChange_(newPlaylist);\n    return;\n  }\n  if (type === 'AUDIO') {\n    if (!activeGroup.playlistLoader) {\n      // when switching from demuxed audio/video to muxed audio/video (noted by no\n      // playlist loader for the audio group), we want to do a destructive reset of the\n      // main segment loader and not restart the audio loaders\n      mainSegmentLoader.setAudio(true); // don't have to worry about disabling the audio of the audio segment loader since\n      // it should be stopped\n\n      mainSegmentLoader.resetEverything();\n      return;\n    } // although the segment loader is an audio segment loader, call the setAudio\n    // function to ensure it is prepared to re-append the init segment (or handle other\n    // config changes)\n\n    segmentLoader.setAudio(true);\n    mainSegmentLoader.setAudio(false);\n  }\n  if (previousActiveLoader === activeGroup.playlistLoader) {\n    // Nothing has actually changed. This can happen because track change events can fire\n    // multiple times for a \"single\" change. One for enabling the new active track, and\n    // one for disabling the track that was active\n    startLoaders(activeGroup.playlistLoader, mediaType);\n    return;\n  }\n  if (segmentLoader.track) {\n    // For WebVTT, set the new text track in the segmentloader\n    segmentLoader.track(activeTrack);\n  } // destructive reset\n\n  segmentLoader.resetEverything();\n  startLoaders(activeGroup.playlistLoader, mediaType);\n};\nconst onError = {\n  /**\n   * Returns a function to be called when a SegmentLoader or PlaylistLoader encounters\n   * an error.\n   *\n   * @param {string} type\n   *        MediaGroup type\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @return {Function}\n   *         Error handler. Logs warning (or error if the playlist is excluded) to\n   *         console and switches back to default audio track.\n   * @function onError.AUDIO\n   */\n  AUDIO: (type, settings) => () => {\n    const {\n      mediaTypes: {\n        [type]: mediaType\n      },\n      excludePlaylist\n    } = settings; // switch back to default audio track\n\n    const activeTrack = mediaType.activeTrack();\n    const activeGroup = mediaType.activeGroup();\n    const id = (activeGroup.filter(group => group.default)[0] || activeGroup[0]).id;\n    const defaultTrack = mediaType.tracks[id];\n    if (activeTrack === defaultTrack) {\n      // Default track encountered an error. All we can do now is exclude the current\n      // rendition and hope another will switch audio groups\n      excludePlaylist({\n        error: {\n          message: 'Problem encountered loading the default audio track.'\n        }\n      });\n      return;\n    }\n    videojs.log.warn('Problem encountered loading the alternate audio track.' + 'Switching back to default.');\n    for (const trackId in mediaType.tracks) {\n      mediaType.tracks[trackId].enabled = mediaType.tracks[trackId] === defaultTrack;\n    }\n    mediaType.onTrackChanged();\n  },\n  /**\n   * Returns a function to be called when a SegmentLoader or PlaylistLoader encounters\n   * an error.\n   *\n   * @param {string} type\n   *        MediaGroup type\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @return {Function}\n   *         Error handler. Logs warning to console and disables the active subtitle track\n   * @function onError.SUBTITLES\n   */\n  SUBTITLES: (type, settings) => () => {\n    const {\n      mediaTypes: {\n        [type]: mediaType\n      }\n    } = settings;\n    videojs.log.warn('Problem encountered loading the subtitle track.' + 'Disabling subtitle track.');\n    const track = mediaType.activeTrack();\n    if (track) {\n      track.mode = 'disabled';\n    }\n    mediaType.onTrackChanged();\n  }\n};\nconst setupListeners = {\n  /**\n   * Setup event listeners for audio playlist loader\n   *\n   * @param {string} type\n   *        MediaGroup type\n   * @param {PlaylistLoader|null} playlistLoader\n   *        PlaylistLoader to register listeners on\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @function setupListeners.AUDIO\n   */\n  AUDIO: (type, playlistLoader, settings) => {\n    if (!playlistLoader) {\n      // no playlist loader means audio will be muxed with the video\n      return;\n    }\n    const {\n      tech,\n      requestOptions,\n      segmentLoaders: {\n        [type]: segmentLoader\n      }\n    } = settings;\n    playlistLoader.on('loadedmetadata', () => {\n      const media = playlistLoader.media();\n      segmentLoader.playlist(media, requestOptions); // if the video is already playing, or if this isn't a live video and preload\n      // permits, start downloading segments\n\n      if (!tech.paused() || media.endList && tech.preload() !== 'none') {\n        segmentLoader.load();\n      }\n    });\n    playlistLoader.on('loadedplaylist', () => {\n      segmentLoader.playlist(playlistLoader.media(), requestOptions); // If the player isn't paused, ensure that the segment loader is running\n\n      if (!tech.paused()) {\n        segmentLoader.load();\n      }\n    });\n    playlistLoader.on('error', onError[type](type, settings));\n  },\n  /**\n   * Setup event listeners for subtitle playlist loader\n   *\n   * @param {string} type\n   *        MediaGroup type\n   * @param {PlaylistLoader|null} playlistLoader\n   *        PlaylistLoader to register listeners on\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @function setupListeners.SUBTITLES\n   */\n  SUBTITLES: (type, playlistLoader, settings) => {\n    const {\n      tech,\n      requestOptions,\n      segmentLoaders: {\n        [type]: segmentLoader\n      },\n      mediaTypes: {\n        [type]: mediaType\n      }\n    } = settings;\n    playlistLoader.on('loadedmetadata', () => {\n      const media = playlistLoader.media();\n      segmentLoader.playlist(media, requestOptions);\n      segmentLoader.track(mediaType.activeTrack()); // if the video is already playing, or if this isn't a live video and preload\n      // permits, start downloading segments\n\n      if (!tech.paused() || media.endList && tech.preload() !== 'none') {\n        segmentLoader.load();\n      }\n    });\n    playlistLoader.on('loadedplaylist', () => {\n      segmentLoader.playlist(playlistLoader.media(), requestOptions); // If the player isn't paused, ensure that the segment loader is running\n\n      if (!tech.paused()) {\n        segmentLoader.load();\n      }\n    });\n    playlistLoader.on('error', onError[type](type, settings));\n  }\n};\nconst initialize = {\n  /**\n   * Setup PlaylistLoaders and AudioTracks for the audio groups\n   *\n   * @param {string} type\n   *        MediaGroup type\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @function initialize.AUDIO\n   */\n  'AUDIO': (type, settings) => {\n    const {\n      vhs,\n      sourceType,\n      segmentLoaders: {\n        [type]: segmentLoader\n      },\n      requestOptions,\n      main: {\n        mediaGroups\n      },\n      mediaTypes: {\n        [type]: {\n          groups,\n          tracks,\n          logger_\n        }\n      },\n      mainPlaylistLoader\n    } = settings;\n    const audioOnlyMain = isAudioOnly(mainPlaylistLoader.main); // force a default if we have none\n\n    if (!mediaGroups[type] || Object.keys(mediaGroups[type]).length === 0) {\n      mediaGroups[type] = {\n        main: {\n          default: {\n            default: true\n          }\n        }\n      };\n      if (audioOnlyMain) {\n        mediaGroups[type].main.default.playlists = mainPlaylistLoader.main.playlists;\n      }\n    }\n    for (const groupId in mediaGroups[type]) {\n      if (!groups[groupId]) {\n        groups[groupId] = [];\n      }\n      for (const variantLabel in mediaGroups[type][groupId]) {\n        let properties = mediaGroups[type][groupId][variantLabel];\n        let playlistLoader;\n        if (audioOnlyMain) {\n          logger_(`AUDIO group '${groupId}' label '${variantLabel}' is a main playlist`);\n          properties.isMainPlaylist = true;\n          playlistLoader = null; // if vhs-json was provided as the source, and the media playlist was resolved,\n          // use the resolved media playlist object\n        } else if (sourceType === 'vhs-json' && properties.playlists) {\n          playlistLoader = new PlaylistLoader(properties.playlists[0], vhs, requestOptions);\n        } else if (properties.resolvedUri) {\n          playlistLoader = new PlaylistLoader(properties.resolvedUri, vhs, requestOptions); // TODO: dash isn't the only type with properties.playlists\n          // should we even have properties.playlists in this check.\n        } else if (properties.playlists && sourceType === 'dash') {\n          playlistLoader = new DashPlaylistLoader(properties.playlists[0], vhs, requestOptions, mainPlaylistLoader);\n        } else {\n          // no resolvedUri means the audio is muxed with the video when using this\n          // audio track\n          playlistLoader = null;\n        }\n        properties = merge({\n          id: variantLabel,\n          playlistLoader\n        }, properties);\n        setupListeners[type](type, properties.playlistLoader, settings);\n        groups[groupId].push(properties);\n        if (typeof tracks[variantLabel] === 'undefined') {\n          const track = new videojs.AudioTrack({\n            id: variantLabel,\n            kind: audioTrackKind_(properties),\n            enabled: false,\n            language: properties.language,\n            default: properties.default,\n            label: variantLabel\n          });\n          tracks[variantLabel] = track;\n        }\n      }\n    } // setup single error event handler for the segment loader\n\n    segmentLoader.on('error', onError[type](type, settings));\n  },\n  /**\n   * Setup PlaylistLoaders and TextTracks for the subtitle groups\n   *\n   * @param {string} type\n   *        MediaGroup type\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @function initialize.SUBTITLES\n   */\n  'SUBTITLES': (type, settings) => {\n    const {\n      tech,\n      vhs,\n      sourceType,\n      segmentLoaders: {\n        [type]: segmentLoader\n      },\n      requestOptions,\n      main: {\n        mediaGroups\n      },\n      mediaTypes: {\n        [type]: {\n          groups,\n          tracks\n        }\n      },\n      mainPlaylistLoader\n    } = settings;\n    for (const groupId in mediaGroups[type]) {\n      if (!groups[groupId]) {\n        groups[groupId] = [];\n      }\n      for (const variantLabel in mediaGroups[type][groupId]) {\n        if (!vhs.options_.useForcedSubtitles && mediaGroups[type][groupId][variantLabel].forced) {\n          // Subtitle playlists with the forced attribute are not selectable in Safari.\n          // According to Apple's HLS Authoring Specification:\n          //   If content has forced subtitles and regular subtitles in a given language,\n          //   the regular subtitles track in that language MUST contain both the forced\n          //   subtitles and the regular subtitles for that language.\n          // Because of this requirement and that Safari does not add forced subtitles,\n          // forced subtitles are skipped here to maintain consistent experience across\n          // all platforms\n          continue;\n        }\n        let properties = mediaGroups[type][groupId][variantLabel];\n        let playlistLoader;\n        if (sourceType === 'hls') {\n          playlistLoader = new PlaylistLoader(properties.resolvedUri, vhs, requestOptions);\n        } else if (sourceType === 'dash') {\n          const playlists = properties.playlists.filter(p => p.excludeUntil !== Infinity);\n          if (!playlists.length) {\n            return;\n          }\n          playlistLoader = new DashPlaylistLoader(properties.playlists[0], vhs, requestOptions, mainPlaylistLoader);\n        } else if (sourceType === 'vhs-json') {\n          playlistLoader = new PlaylistLoader(\n          // if the vhs-json object included the media playlist, use the media playlist\n          // as provided, otherwise use the resolved URI to load the playlist\n          properties.playlists ? properties.playlists[0] : properties.resolvedUri, vhs, requestOptions);\n        }\n        properties = merge({\n          id: variantLabel,\n          playlistLoader\n        }, properties);\n        setupListeners[type](type, properties.playlistLoader, settings);\n        groups[groupId].push(properties);\n        if (typeof tracks[variantLabel] === 'undefined') {\n          const track = tech.addRemoteTextTrack({\n            id: variantLabel,\n            kind: 'subtitles',\n            default: properties.default && properties.autoselect,\n            language: properties.language,\n            label: variantLabel\n          }, false).track;\n          tracks[variantLabel] = track;\n        }\n      }\n    } // setup single error event handler for the segment loader\n\n    segmentLoader.on('error', onError[type](type, settings));\n  },\n  /**\n   * Setup TextTracks for the closed-caption groups\n   *\n   * @param {String} type\n   *        MediaGroup type\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @function initialize['CLOSED-CAPTIONS']\n   */\n  'CLOSED-CAPTIONS': (type, settings) => {\n    const {\n      tech,\n      main: {\n        mediaGroups\n      },\n      mediaTypes: {\n        [type]: {\n          groups,\n          tracks\n        }\n      }\n    } = settings;\n    for (const groupId in mediaGroups[type]) {\n      if (!groups[groupId]) {\n        groups[groupId] = [];\n      }\n      for (const variantLabel in mediaGroups[type][groupId]) {\n        const properties = mediaGroups[type][groupId][variantLabel]; // Look for either 608 (CCn) or 708 (SERVICEn) caption services\n\n        if (!/^(?:CC|SERVICE)/.test(properties.instreamId)) {\n          continue;\n        }\n        const captionServices = tech.options_.vhs && tech.options_.vhs.captionServices || {};\n        let newProps = {\n          label: variantLabel,\n          language: properties.language,\n          instreamId: properties.instreamId,\n          default: properties.default && properties.autoselect\n        };\n        if (captionServices[newProps.instreamId]) {\n          newProps = merge(newProps, captionServices[newProps.instreamId]);\n        }\n        if (newProps.default === undefined) {\n          delete newProps.default;\n        } // No PlaylistLoader is required for Closed-Captions because the captions are\n        // embedded within the video stream\n\n        groups[groupId].push(merge({\n          id: variantLabel\n        }, properties));\n        if (typeof tracks[variantLabel] === 'undefined') {\n          const track = tech.addRemoteTextTrack({\n            id: newProps.instreamId,\n            kind: 'captions',\n            default: newProps.default,\n            language: newProps.language,\n            label: newProps.label\n          }, false).track;\n          tracks[variantLabel] = track;\n        }\n      }\n    }\n  }\n};\nconst groupMatch = (list, media) => {\n  for (let i = 0; i < list.length; i++) {\n    if (playlistMatch(media, list[i])) {\n      return true;\n    }\n    if (list[i].playlists && groupMatch(list[i].playlists, media)) {\n      return true;\n    }\n  }\n  return false;\n};\n/**\n * Returns a function used to get the active group of the provided type\n *\n * @param {string} type\n *        MediaGroup type\n * @param {Object} settings\n *        Object containing required information for media groups\n * @return {Function}\n *         Function that returns the active media group for the provided type. Takes an\n *         optional parameter {TextTrack} track. If no track is provided, a list of all\n *         variants in the group, otherwise the variant corresponding to the provided\n *         track is returned.\n * @function activeGroup\n */\n\nconst activeGroup = (type, settings) => track => {\n  const {\n    mainPlaylistLoader,\n    mediaTypes: {\n      [type]: {\n        groups\n      }\n    }\n  } = settings;\n  const media = mainPlaylistLoader.media();\n  if (!media) {\n    return null;\n  }\n  let variants = null; // set to variants to main media active group\n\n  if (media.attributes[type]) {\n    variants = groups[media.attributes[type]];\n  }\n  const groupKeys = Object.keys(groups);\n  if (!variants) {\n    // find the mainPlaylistLoader media\n    // that is in a media group if we are dealing\n    // with audio only\n    if (type === 'AUDIO' && groupKeys.length > 1 && isAudioOnly(settings.main)) {\n      for (let i = 0; i < groupKeys.length; i++) {\n        const groupPropertyList = groups[groupKeys[i]];\n        if (groupMatch(groupPropertyList, media)) {\n          variants = groupPropertyList;\n          break;\n        }\n      } // use the main group if it exists\n    } else if (groups.main) {\n      variants = groups.main; // only one group, use that one\n    } else if (groupKeys.length === 1) {\n      variants = groups[groupKeys[0]];\n    }\n  }\n  if (typeof track === 'undefined') {\n    return variants;\n  }\n  if (track === null || !variants) {\n    // An active track was specified so a corresponding group is expected. track === null\n    // means no track is currently active so there is no corresponding group\n    return null;\n  }\n  return variants.filter(props => props.id === track.id)[0] || null;\n};\nconst activeTrack = {\n  /**\n   * Returns a function used to get the active track of type provided\n   *\n   * @param {string} type\n   *        MediaGroup type\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @return {Function}\n   *         Function that returns the active media track for the provided type. Returns\n   *         null if no track is active\n   * @function activeTrack.AUDIO\n   */\n  AUDIO: (type, settings) => () => {\n    const {\n      mediaTypes: {\n        [type]: {\n          tracks\n        }\n      }\n    } = settings;\n    for (const id in tracks) {\n      if (tracks[id].enabled) {\n        return tracks[id];\n      }\n    }\n    return null;\n  },\n  /**\n   * Returns a function used to get the active track of type provided\n   *\n   * @param {string} type\n   *        MediaGroup type\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @return {Function}\n   *         Function that returns the active media track for the provided type. Returns\n   *         null if no track is active\n   * @function activeTrack.SUBTITLES\n   */\n  SUBTITLES: (type, settings) => () => {\n    const {\n      mediaTypes: {\n        [type]: {\n          tracks\n        }\n      }\n    } = settings;\n    for (const id in tracks) {\n      if (tracks[id].mode === 'showing' || tracks[id].mode === 'hidden') {\n        return tracks[id];\n      }\n    }\n    return null;\n  }\n};\nconst getActiveGroup = (type, {\n  mediaTypes\n}) => () => {\n  const activeTrack_ = mediaTypes[type].activeTrack();\n  if (!activeTrack_) {\n    return null;\n  }\n  return mediaTypes[type].activeGroup(activeTrack_);\n};\n/**\n * Setup PlaylistLoaders and Tracks for media groups (Audio, Subtitles,\n * Closed-Captions) specified in the main manifest.\n *\n * @param {Object} settings\n *        Object containing required information for setting up the media groups\n * @param {Tech} settings.tech\n *        The tech of the player\n * @param {Object} settings.requestOptions\n *        XHR request options used by the segment loaders\n * @param {PlaylistLoader} settings.mainPlaylistLoader\n *        PlaylistLoader for the main source\n * @param {VhsHandler} settings.vhs\n *        VHS SourceHandler\n * @param {Object} settings.main\n *        The parsed main manifest\n * @param {Object} settings.mediaTypes\n *        Object to store the loaders, tracks, and utility methods for each media type\n * @param {Function} settings.excludePlaylist\n *        Excludes the current rendition and forces a rendition switch.\n * @function setupMediaGroups\n */\n\nconst setupMediaGroups = settings => {\n  ['AUDIO', 'SUBTITLES', 'CLOSED-CAPTIONS'].forEach(type => {\n    initialize[type](type, settings);\n  });\n  const {\n    mediaTypes,\n    mainPlaylistLoader,\n    tech,\n    vhs,\n    segmentLoaders: {\n      ['AUDIO']: audioSegmentLoader,\n      main: mainSegmentLoader\n    }\n  } = settings; // setup active group and track getters and change event handlers\n\n  ['AUDIO', 'SUBTITLES'].forEach(type => {\n    mediaTypes[type].activeGroup = activeGroup(type, settings);\n    mediaTypes[type].activeTrack = activeTrack[type](type, settings);\n    mediaTypes[type].onGroupChanged = onGroupChanged(type, settings);\n    mediaTypes[type].onGroupChanging = onGroupChanging(type, settings);\n    mediaTypes[type].onTrackChanged = onTrackChanged(type, settings);\n    mediaTypes[type].getActiveGroup = getActiveGroup(type, settings);\n  }); // DO NOT enable the default subtitle or caption track.\n  // DO enable the default audio track\n\n  const audioGroup = mediaTypes.AUDIO.activeGroup();\n  if (audioGroup) {\n    const groupId = (audioGroup.filter(group => group.default)[0] || audioGroup[0]).id;\n    mediaTypes.AUDIO.tracks[groupId].enabled = true;\n    mediaTypes.AUDIO.onGroupChanged();\n    mediaTypes.AUDIO.onTrackChanged();\n    const activeAudioGroup = mediaTypes.AUDIO.getActiveGroup(); // a similar check for handling setAudio on each loader is run again each time the\n    // track is changed, but needs to be handled here since the track may not be considered\n    // changed on the first call to onTrackChanged\n\n    if (!activeAudioGroup.playlistLoader) {\n      // either audio is muxed with video or the stream is audio only\n      mainSegmentLoader.setAudio(true);\n    } else {\n      // audio is demuxed\n      mainSegmentLoader.setAudio(false);\n      audioSegmentLoader.setAudio(true);\n    }\n  }\n  mainPlaylistLoader.on('mediachange', () => {\n    ['AUDIO', 'SUBTITLES'].forEach(type => mediaTypes[type].onGroupChanged());\n  });\n  mainPlaylistLoader.on('mediachanging', () => {\n    ['AUDIO', 'SUBTITLES'].forEach(type => mediaTypes[type].onGroupChanging());\n  }); // custom audio track change event handler for usage event\n\n  const onAudioTrackChanged = () => {\n    mediaTypes.AUDIO.onTrackChanged();\n    tech.trigger({\n      type: 'usage',\n      name: 'vhs-audio-change'\n    });\n  };\n  tech.audioTracks().addEventListener('change', onAudioTrackChanged);\n  tech.remoteTextTracks().addEventListener('change', mediaTypes.SUBTITLES.onTrackChanged);\n  vhs.on('dispose', () => {\n    tech.audioTracks().removeEventListener('change', onAudioTrackChanged);\n    tech.remoteTextTracks().removeEventListener('change', mediaTypes.SUBTITLES.onTrackChanged);\n  }); // clear existing audio tracks and add the ones we just created\n\n  tech.clearTracks('audio');\n  for (const id in mediaTypes.AUDIO.tracks) {\n    tech.audioTracks().addTrack(mediaTypes.AUDIO.tracks[id]);\n  }\n};\n/**\n * Creates skeleton object used to store the loaders, tracks, and utility methods for each\n * media type\n *\n * @return {Object}\n *         Object to store the loaders, tracks, and utility methods for each media type\n * @function createMediaTypes\n */\n\nconst createMediaTypes = () => {\n  const mediaTypes = {};\n  ['AUDIO', 'SUBTITLES', 'CLOSED-CAPTIONS'].forEach(type => {\n    mediaTypes[type] = {\n      groups: {},\n      tracks: {},\n      activePlaylistLoader: null,\n      activeGroup: noop,\n      activeTrack: noop,\n      getActiveGroup: noop,\n      onGroupChanged: noop,\n      onTrackChanged: noop,\n      lastTrack_: null,\n      logger_: logger(`MediaGroups[${type}]`)\n    };\n  });\n  return mediaTypes;\n};\n\n/**\n * A utility class for setting properties and maintaining the state of the content steering manifest.\n *\n * Content Steering manifest format:\n * VERSION: number (required) currently only version 1 is supported.\n * TTL: number in seconds (optional) until the next content steering manifest reload.\n * RELOAD-URI: string (optional) uri to fetch the next content steering manifest.\n * SERVICE-LOCATION-PRIORITY or PATHWAY-PRIORITY a non empty array of unique string values.\n * PATHWAY-CLONES: array (optional) (HLS only) pathway clone objects to copy from other playlists.\n */\n\nclass SteeringManifest {\n  constructor() {\n    this.priority_ = [];\n    this.pathwayClones_ = new Map();\n  }\n  set version(number) {\n    // Only version 1 is currently supported for both DASH and HLS.\n    if (number === 1) {\n      this.version_ = number;\n    }\n  }\n  set ttl(seconds) {\n    // TTL = time-to-live, default = 300 seconds.\n    this.ttl_ = seconds || 300;\n  }\n  set reloadUri(uri) {\n    if (uri) {\n      // reload URI can be relative to the previous reloadUri.\n      this.reloadUri_ = resolveUrl(this.reloadUri_, uri);\n    }\n  }\n  set priority(array) {\n    // priority must be non-empty and unique values.\n    if (array && array.length) {\n      this.priority_ = array;\n    }\n  }\n  set pathwayClones(array) {\n    // pathwayClones must be non-empty.\n    if (array && array.length) {\n      this.pathwayClones_ = new Map(array.map(clone => [clone.ID, clone]));\n    }\n  }\n  get version() {\n    return this.version_;\n  }\n  get ttl() {\n    return this.ttl_;\n  }\n  get reloadUri() {\n    return this.reloadUri_;\n  }\n  get priority() {\n    return this.priority_;\n  }\n  get pathwayClones() {\n    return this.pathwayClones_;\n  }\n}\n/**\n * This class represents a content steering manifest and associated state. See both HLS and DASH specifications.\n * HLS: https://developer.apple.com/streaming/HLSContentSteeringSpecification.pdf and\n * https://datatracker.ietf.org/doc/draft-pantos-hls-rfc8216bis/ section 4.4.6.6.\n * DASH: https://dashif.org/docs/DASH-IF-CTS-00XX-Content-Steering-Community-Review.pdf\n *\n * @param {function} xhr for making a network request from the browser.\n * @param {function} bandwidth for fetching the current bandwidth from the main segment loader.\n */\n\nclass ContentSteeringController extends videojs.EventTarget {\n  constructor(xhr, bandwidth) {\n    super();\n    this.currentPathway = null;\n    this.defaultPathway = null;\n    this.queryBeforeStart = false;\n    this.availablePathways_ = new Set();\n    this.steeringManifest = new SteeringManifest();\n    this.proxyServerUrl_ = null;\n    this.manifestType_ = null;\n    this.ttlTimeout_ = null;\n    this.request_ = null;\n    this.currentPathwayClones = new Map();\n    this.nextPathwayClones = new Map();\n    this.excludedSteeringManifestURLs = new Set();\n    this.logger_ = logger('Content Steering');\n    this.xhr_ = xhr;\n    this.getBandwidth_ = bandwidth;\n  }\n  /**\n   * Assigns the content steering tag properties to the steering controller\n   *\n   * @param {string} baseUrl the baseURL from the main manifest for resolving the steering manifest url\n   * @param {Object} steeringTag the content steering tag from the main manifest\n   */\n\n  assignTagProperties(baseUrl, steeringTag) {\n    this.manifestType_ = steeringTag.serverUri ? 'HLS' : 'DASH'; // serverUri is HLS serverURL is DASH\n\n    const steeringUri = steeringTag.serverUri || steeringTag.serverURL;\n    if (!steeringUri) {\n      this.logger_(`steering manifest URL is ${steeringUri}, cannot request steering manifest.`);\n      this.trigger('error');\n      return;\n    } // Content steering manifests can be encoded as a data URI. We can decode, parse and return early if that's the case.\n\n    if (steeringUri.startsWith('data:')) {\n      this.decodeDataUriManifest_(steeringUri.substring(steeringUri.indexOf(',') + 1));\n      return;\n    } // reloadUri is the resolution of the main manifest URL and steering URL.\n\n    this.steeringManifest.reloadUri = resolveUrl(baseUrl, steeringUri); // pathwayId is HLS defaultServiceLocation is DASH\n\n    this.defaultPathway = steeringTag.pathwayId || steeringTag.defaultServiceLocation; // currently only DASH supports the following properties on <ContentSteering> tags.\n\n    this.queryBeforeStart = steeringTag.queryBeforeStart;\n    this.proxyServerUrl_ = steeringTag.proxyServerURL; // trigger a steering event if we have a pathway from the content steering tag.\n    // this tells VHS which segment pathway to start with.\n    // If queryBeforeStart is true we need to wait for the steering manifest response.\n\n    if (this.defaultPathway && !this.queryBeforeStart) {\n      this.trigger('content-steering');\n    }\n  }\n  /**\n   * Requests the content steering manifest and parse the response. This should only be called after\n   * assignTagProperties was called with a content steering tag.\n   *\n   * @param {string} initialUri The optional uri to make the request with.\n   *    If set, the request should be made with exactly what is passed in this variable.\n   *    This scenario should only happen once on initalization.\n   */\n\n  requestSteeringManifest(initial) {\n    const reloadUri = this.steeringManifest.reloadUri;\n    if (!reloadUri) {\n      return;\n    } // We currently don't support passing MPD query parameters directly to the content steering URL as this requires\n    // ExtUrlQueryInfo tag support. See the DASH content steering spec section 8.1.\n    // This request URI accounts for manifest URIs that have been excluded.\n\n    const uri = initial ? reloadUri : this.getRequestURI(reloadUri); // If there are no valid manifest URIs, we should stop content steering.\n\n    if (!uri) {\n      this.logger_('No valid content steering manifest URIs. Stopping content steering.');\n      this.trigger('error');\n      this.dispose();\n      return;\n    }\n    this.request_ = this.xhr_({\n      uri\n    }, (error, errorInfo) => {\n      if (error) {\n        // If the client receives HTTP 410 Gone in response to a manifest request,\n        // it MUST NOT issue another request for that URI for the remainder of the\n        // playback session. It MAY continue to use the most-recently obtained set\n        // of Pathways.\n        if (errorInfo.status === 410) {\n          this.logger_(`manifest request 410 ${error}.`);\n          this.logger_(`There will be no more content steering requests to ${uri} this session.`);\n          this.excludedSteeringManifestURLs.add(uri);\n          return;\n        } // If the client receives HTTP 429 Too Many Requests with a Retry-After\n        // header in response to a manifest request, it SHOULD wait until the time\n        // specified by the Retry-After header to reissue the request.\n\n        if (errorInfo.status === 429) {\n          const retrySeconds = errorInfo.responseHeaders['retry-after'];\n          this.logger_(`manifest request 429 ${error}.`);\n          this.logger_(`content steering will retry in ${retrySeconds} seconds.`);\n          this.startTTLTimeout_(parseInt(retrySeconds, 10));\n          return;\n        } // If the Steering Manifest cannot be loaded and parsed correctly, the\n        // client SHOULD continue to use the previous values and attempt to reload\n        // it after waiting for the previously-specified TTL (or 5 minutes if\n        // none).\n\n        this.logger_(`manifest failed to load ${error}.`);\n        this.startTTLTimeout_();\n        return;\n      }\n      const steeringManifestJson = JSON.parse(this.request_.responseText);\n      this.assignSteeringProperties_(steeringManifestJson);\n      this.startTTLTimeout_();\n    });\n  }\n  /**\n   * Set the proxy server URL and add the steering manifest url as a URI encoded parameter.\n   *\n   * @param {string} steeringUrl the steering manifest url\n   * @return the steering manifest url to a proxy server with all parameters set\n   */\n\n  setProxyServerUrl_(steeringUrl) {\n    const steeringUrlObject = new window$1.URL(steeringUrl);\n    const proxyServerUrlObject = new window$1.URL(this.proxyServerUrl_);\n    proxyServerUrlObject.searchParams.set('url', encodeURI(steeringUrlObject.toString()));\n    return this.setSteeringParams_(proxyServerUrlObject.toString());\n  }\n  /**\n   * Decodes and parses the data uri encoded steering manifest\n   *\n   * @param {string} dataUri the data uri to be decoded and parsed.\n   */\n\n  decodeDataUriManifest_(dataUri) {\n    const steeringManifestJson = JSON.parse(window$1.atob(dataUri));\n    this.assignSteeringProperties_(steeringManifestJson);\n  }\n  /**\n   * Set the HLS or DASH content steering manifest request query parameters. For example:\n   * _HLS_pathway=\"<CURRENT-PATHWAY-ID>\" and _HLS_throughput=<THROUGHPUT>\n   * _DASH_pathway and _DASH_throughput\n   *\n   * @param {string} uri to add content steering server parameters to.\n   * @return a new uri as a string with the added steering query parameters.\n   */\n\n  setSteeringParams_(url) {\n    const urlObject = new window$1.URL(url);\n    const path = this.getPathway();\n    const networkThroughput = this.getBandwidth_();\n    if (path) {\n      const pathwayKey = `_${this.manifestType_}_pathway`;\n      urlObject.searchParams.set(pathwayKey, path);\n    }\n    if (networkThroughput) {\n      const throughputKey = `_${this.manifestType_}_throughput`;\n      urlObject.searchParams.set(throughputKey, networkThroughput);\n    }\n    return urlObject.toString();\n  }\n  /**\n   * Assigns the current steering manifest properties and to the SteeringManifest object\n   *\n   * @param {Object} steeringJson the raw JSON steering manifest\n   */\n\n  assignSteeringProperties_(steeringJson) {\n    this.steeringManifest.version = steeringJson.VERSION;\n    if (!this.steeringManifest.version) {\n      this.logger_(`manifest version is ${steeringJson.VERSION}, which is not supported.`);\n      this.trigger('error');\n      return;\n    }\n    this.steeringManifest.ttl = steeringJson.TTL;\n    this.steeringManifest.reloadUri = steeringJson['RELOAD-URI']; // HLS = PATHWAY-PRIORITY required. DASH = SERVICE-LOCATION-PRIORITY optional\n\n    this.steeringManifest.priority = steeringJson['PATHWAY-PRIORITY'] || steeringJson['SERVICE-LOCATION-PRIORITY']; // Pathway clones to be created/updated in HLS.\n    // See section 7.2 https://datatracker.ietf.org/doc/draft-pantos-hls-rfc8216bis/\n\n    this.steeringManifest.pathwayClones = steeringJson['PATHWAY-CLONES'];\n    this.nextPathwayClones = this.steeringManifest.pathwayClones; // 1. apply first pathway from the array.\n    // 2. if first pathway doesn't exist in manifest, try next pathway.\n    //    a. if all pathways are exhausted, ignore the steering manifest priority.\n    // 3. if segments fail from an established pathway, try all variants/renditions, then exclude the failed pathway.\n    //    a. exclude a pathway for a minimum of the last TTL duration. Meaning, from the next steering response,\n    //       the excluded pathway will be ignored.\n    //       See excludePathway usage in excludePlaylist().\n    // If there are no available pathways, we need to stop content steering.\n\n    if (!this.availablePathways_.size) {\n      this.logger_('There are no available pathways for content steering. Ending content steering.');\n      this.trigger('error');\n      this.dispose();\n    }\n    const chooseNextPathway = pathwaysByPriority => {\n      for (const path of pathwaysByPriority) {\n        if (this.availablePathways_.has(path)) {\n          return path;\n        }\n      } // If no pathway matches, ignore the manifest and choose the first available.\n\n      return [...this.availablePathways_][0];\n    };\n    const nextPathway = chooseNextPathway(this.steeringManifest.priority);\n    if (this.currentPathway !== nextPathway) {\n      this.currentPathway = nextPathway;\n      this.trigger('content-steering');\n    }\n  }\n  /**\n   * Returns the pathway to use for steering decisions\n   *\n   * @return {string} returns the current pathway or the default\n   */\n\n  getPathway() {\n    return this.currentPathway || this.defaultPathway;\n  }\n  /**\n   * Chooses the manifest request URI based on proxy URIs and server URLs.\n   * Also accounts for exclusion on certain manifest URIs.\n   *\n   * @param {string} reloadUri the base uri before parameters\n   *\n   * @return {string} the final URI for the request to the manifest server.\n   */\n\n  getRequestURI(reloadUri) {\n    if (!reloadUri) {\n      return null;\n    }\n    const isExcluded = uri => this.excludedSteeringManifestURLs.has(uri);\n    if (this.proxyServerUrl_) {\n      const proxyURI = this.setProxyServerUrl_(reloadUri);\n      if (!isExcluded(proxyURI)) {\n        return proxyURI;\n      }\n    }\n    const steeringURI = this.setSteeringParams_(reloadUri);\n    if (!isExcluded(steeringURI)) {\n      return steeringURI;\n    } // Return nothing if all valid manifest URIs are excluded.\n\n    return null;\n  }\n  /**\n   * Start the timeout for re-requesting the steering manifest at the TTL interval.\n   *\n   * @param {number} ttl time in seconds of the timeout. Defaults to the\n   *        ttl interval in the steering manifest\n   */\n\n  startTTLTimeout_(ttl = this.steeringManifest.ttl) {\n    // 300 (5 minutes) is the default value.\n    const ttlMS = ttl * 1000;\n    this.ttlTimeout_ = window$1.setTimeout(() => {\n      this.requestSteeringManifest();\n    }, ttlMS);\n  }\n  /**\n   * Clear the TTL timeout if necessary.\n   */\n\n  clearTTLTimeout_() {\n    window$1.clearTimeout(this.ttlTimeout_);\n    this.ttlTimeout_ = null;\n  }\n  /**\n   * aborts any current steering xhr and sets the current request object to null\n   */\n\n  abort() {\n    if (this.request_) {\n      this.request_.abort();\n    }\n    this.request_ = null;\n  }\n  /**\n   * aborts steering requests clears the ttl timeout and resets all properties.\n   */\n\n  dispose() {\n    this.off('content-steering');\n    this.off('error');\n    this.abort();\n    this.clearTTLTimeout_();\n    this.currentPathway = null;\n    this.defaultPathway = null;\n    this.queryBeforeStart = null;\n    this.proxyServerUrl_ = null;\n    this.manifestType_ = null;\n    this.ttlTimeout_ = null;\n    this.request_ = null;\n    this.excludedSteeringManifestURLs = new Set();\n    this.availablePathways_ = new Set();\n    this.steeringManifest = new SteeringManifest();\n  }\n  /**\n   * adds a pathway to the available pathways set\n   *\n   * @param {string} pathway the pathway string to add\n   */\n\n  addAvailablePathway(pathway) {\n    if (pathway) {\n      this.availablePathways_.add(pathway);\n    }\n  }\n  /**\n   * Clears all pathways from the available pathways set\n   */\n\n  clearAvailablePathways() {\n    this.availablePathways_.clear();\n  }\n  /**\n   * Removes a pathway from the available pathways set.\n   */\n\n  excludePathway(pathway) {\n    return this.availablePathways_.delete(pathway);\n  }\n  /**\n   * Checks the refreshed DASH manifest content steering tag for changes.\n   *\n   * @param {string} baseURL new steering tag on DASH manifest refresh\n   * @param {Object} newTag the new tag to check for changes\n   * @return a true or false whether the new tag has different values\n   */\n\n  didDASHTagChange(baseURL, newTag) {\n    return !newTag && this.steeringManifest.reloadUri || newTag && (resolveUrl(baseURL, newTag.serverURL) !== this.steeringManifest.reloadUri || newTag.defaultServiceLocation !== this.defaultPathway || newTag.queryBeforeStart !== this.queryBeforeStart || newTag.proxyServerURL !== this.proxyServerUrl_);\n  }\n  getAvailablePathways() {\n    return this.availablePathways_;\n  }\n}\n\n/**\n * @file playlist-controller.js\n */\nconst ABORT_EARLY_EXCLUSION_SECONDS = 10;\nlet Vhs$1; // SegmentLoader stats that need to have each loader's\n// values summed to calculate the final value\n\nconst loaderStats = ['mediaRequests', 'mediaRequestsAborted', 'mediaRequestsTimedout', 'mediaRequestsErrored', 'mediaTransferDuration', 'mediaBytesTransferred', 'mediaAppends'];\nconst sumLoaderStat = function (stat) {\n  return this.audioSegmentLoader_[stat] + this.mainSegmentLoader_[stat];\n};\nconst shouldSwitchToMedia = function ({\n  currentPlaylist,\n  buffered,\n  currentTime,\n  nextPlaylist,\n  bufferLowWaterLine,\n  bufferHighWaterLine,\n  duration,\n  bufferBasedABR,\n  log\n}) {\n  // we have no other playlist to switch to\n  if (!nextPlaylist) {\n    videojs.log.warn('We received no playlist to switch to. Please check your stream.');\n    return false;\n  }\n  const sharedLogLine = `allowing switch ${currentPlaylist && currentPlaylist.id || 'null'} -> ${nextPlaylist.id}`;\n  if (!currentPlaylist) {\n    log(`${sharedLogLine} as current playlist is not set`);\n    return true;\n  } // no need to switch if playlist is the same\n\n  if (nextPlaylist.id === currentPlaylist.id) {\n    return false;\n  } // determine if current time is in a buffered range.\n\n  const isBuffered = Boolean(findRange(buffered, currentTime).length); // If the playlist is live, then we want to not take low water line into account.\n  // This is because in LIVE, the player plays 3 segments from the end of the\n  // playlist, and if `BUFFER_LOW_WATER_LINE` is greater than the duration availble\n  // in those segments, a viewer will never experience a rendition upswitch.\n\n  if (!currentPlaylist.endList) {\n    // For LLHLS live streams, don't switch renditions before playback has started, as it almost\n    // doubles the time to first playback.\n    if (!isBuffered && typeof currentPlaylist.partTargetDuration === 'number') {\n      log(`not ${sharedLogLine} as current playlist is live llhls, but currentTime isn't in buffered.`);\n      return false;\n    }\n    log(`${sharedLogLine} as current playlist is live`);\n    return true;\n  }\n  const forwardBuffer = timeAheadOf(buffered, currentTime);\n  const maxBufferLowWaterLine = bufferBasedABR ? Config.EXPERIMENTAL_MAX_BUFFER_LOW_WATER_LINE : Config.MAX_BUFFER_LOW_WATER_LINE; // For the same reason as LIVE, we ignore the low water line when the VOD\n  // duration is below the max potential low water line\n\n  if (duration < maxBufferLowWaterLine) {\n    log(`${sharedLogLine} as duration < max low water line (${duration} < ${maxBufferLowWaterLine})`);\n    return true;\n  }\n  const nextBandwidth = nextPlaylist.attributes.BANDWIDTH;\n  const currBandwidth = currentPlaylist.attributes.BANDWIDTH; // when switching down, if our buffer is lower than the high water line,\n  // we can switch down\n\n  if (nextBandwidth < currBandwidth && (!bufferBasedABR || forwardBuffer < bufferHighWaterLine)) {\n    let logLine = `${sharedLogLine} as next bandwidth < current bandwidth (${nextBandwidth} < ${currBandwidth})`;\n    if (bufferBasedABR) {\n      logLine += ` and forwardBuffer < bufferHighWaterLine (${forwardBuffer} < ${bufferHighWaterLine})`;\n    }\n    log(logLine);\n    return true;\n  } // and if our buffer is higher than the low water line,\n  // we can switch up\n\n  if ((!bufferBasedABR || nextBandwidth > currBandwidth) && forwardBuffer >= bufferLowWaterLine) {\n    let logLine = `${sharedLogLine} as forwardBuffer >= bufferLowWaterLine (${forwardBuffer} >= ${bufferLowWaterLine})`;\n    if (bufferBasedABR) {\n      logLine += ` and next bandwidth > current bandwidth (${nextBandwidth} > ${currBandwidth})`;\n    }\n    log(logLine);\n    return true;\n  }\n  log(`not ${sharedLogLine} as no switching criteria met`);\n  return false;\n};\n/**\n * the main playlist controller controller all interactons\n * between playlists and segmentloaders. At this time this mainly\n * involves a main playlist and a series of audio playlists\n * if they are available\n *\n * @class PlaylistController\n * @extends videojs.EventTarget\n */\n\nclass PlaylistController extends videojs.EventTarget {\n  constructor(options) {\n    super();\n    const {\n      src,\n      withCredentials,\n      tech,\n      bandwidth,\n      externVhs,\n      useCueTags,\n      playlistExclusionDuration,\n      enableLowInitialPlaylist,\n      sourceType,\n      cacheEncryptionKeys,\n      bufferBasedABR,\n      leastPixelDiffSelector,\n      captionServices\n    } = options;\n    if (!src) {\n      throw new Error('A non-empty playlist URL or JSON manifest string is required');\n    }\n    let {\n      maxPlaylistRetries\n    } = options;\n    if (maxPlaylistRetries === null || typeof maxPlaylistRetries === 'undefined') {\n      maxPlaylistRetries = Infinity;\n    }\n    Vhs$1 = externVhs;\n    this.bufferBasedABR = Boolean(bufferBasedABR);\n    this.leastPixelDiffSelector = Boolean(leastPixelDiffSelector);\n    this.withCredentials = withCredentials;\n    this.tech_ = tech;\n    this.vhs_ = tech.vhs;\n    this.sourceType_ = sourceType;\n    this.useCueTags_ = useCueTags;\n    this.playlistExclusionDuration = playlistExclusionDuration;\n    this.maxPlaylistRetries = maxPlaylistRetries;\n    this.enableLowInitialPlaylist = enableLowInitialPlaylist;\n    if (this.useCueTags_) {\n      this.cueTagsTrack_ = this.tech_.addTextTrack('metadata', 'ad-cues');\n      this.cueTagsTrack_.inBandMetadataTrackDispatchType = '';\n    }\n    this.requestOptions_ = {\n      withCredentials,\n      maxPlaylistRetries,\n      timeout: null\n    };\n    this.on('error', this.pauseLoading);\n    this.mediaTypes_ = createMediaTypes();\n    this.mediaSource = new window$1.MediaSource();\n    this.handleDurationChange_ = this.handleDurationChange_.bind(this);\n    this.handleSourceOpen_ = this.handleSourceOpen_.bind(this);\n    this.handleSourceEnded_ = this.handleSourceEnded_.bind(this);\n    this.mediaSource.addEventListener('durationchange', this.handleDurationChange_); // load the media source into the player\n\n    this.mediaSource.addEventListener('sourceopen', this.handleSourceOpen_);\n    this.mediaSource.addEventListener('sourceended', this.handleSourceEnded_); // we don't have to handle sourceclose since dispose will handle termination of\n    // everything, and the MediaSource should not be detached without a proper disposal\n\n    this.seekable_ = createTimeRanges();\n    this.hasPlayed_ = false;\n    this.syncController_ = new SyncController(options);\n    this.segmentMetadataTrack_ = tech.addRemoteTextTrack({\n      kind: 'metadata',\n      label: 'segment-metadata'\n    }, false).track;\n    this.decrypter_ = new Decrypter();\n    this.sourceUpdater_ = new SourceUpdater(this.mediaSource);\n    this.inbandTextTracks_ = {};\n    this.timelineChangeController_ = new TimelineChangeController();\n    this.keyStatusMap_ = new Map();\n    const segmentLoaderSettings = {\n      vhs: this.vhs_,\n      parse708captions: options.parse708captions,\n      useDtsForTimestampOffset: options.useDtsForTimestampOffset,\n      captionServices,\n      mediaSource: this.mediaSource,\n      currentTime: this.tech_.currentTime.bind(this.tech_),\n      seekable: () => this.seekable(),\n      seeking: () => this.tech_.seeking(),\n      duration: () => this.duration(),\n      hasPlayed: () => this.hasPlayed_,\n      goalBufferLength: () => this.goalBufferLength(),\n      bandwidth,\n      syncController: this.syncController_,\n      decrypter: this.decrypter_,\n      sourceType: this.sourceType_,\n      inbandTextTracks: this.inbandTextTracks_,\n      cacheEncryptionKeys,\n      sourceUpdater: this.sourceUpdater_,\n      timelineChangeController: this.timelineChangeController_,\n      exactManifestTimings: options.exactManifestTimings,\n      addMetadataToTextTrack: this.addMetadataToTextTrack.bind(this)\n    }; // The source type check not only determines whether a special DASH playlist loader\n    // should be used, but also covers the case where the provided src is a vhs-json\n    // manifest object (instead of a URL). In the case of vhs-json, the default\n    // PlaylistLoader should be used.\n\n    this.mainPlaylistLoader_ = this.sourceType_ === 'dash' ? new DashPlaylistLoader(src, this.vhs_, merge(this.requestOptions_, {\n      addMetadataToTextTrack: this.addMetadataToTextTrack.bind(this)\n    })) : new PlaylistLoader(src, this.vhs_, merge(this.requestOptions_, {\n      addDateRangesToTextTrack: this.addDateRangesToTextTrack_.bind(this)\n    }));\n    this.setupMainPlaylistLoaderListeners_(); // setup segment loaders\n    // combined audio/video or just video when alternate audio track is selected\n\n    this.mainSegmentLoader_ = new SegmentLoader(merge(segmentLoaderSettings, {\n      segmentMetadataTrack: this.segmentMetadataTrack_,\n      loaderType: 'main'\n    }), options); // alternate audio track\n\n    this.audioSegmentLoader_ = new SegmentLoader(merge(segmentLoaderSettings, {\n      loaderType: 'audio'\n    }), options);\n    this.subtitleSegmentLoader_ = new VTTSegmentLoader(merge(segmentLoaderSettings, {\n      loaderType: 'vtt',\n      featuresNativeTextTracks: this.tech_.featuresNativeTextTracks,\n      loadVttJs: () => new Promise((resolve, reject) => {\n        function onLoad() {\n          tech.off('vttjserror', onError);\n          resolve();\n        }\n        function onError() {\n          tech.off('vttjsloaded', onLoad);\n          reject();\n        }\n        tech.one('vttjsloaded', onLoad);\n        tech.one('vttjserror', onError); // safe to call multiple times, script will be loaded only once:\n\n        tech.addWebVttScript_();\n      })\n    }), options);\n    const getBandwidth = () => {\n      return this.mainSegmentLoader_.bandwidth;\n    };\n    this.contentSteeringController_ = new ContentSteeringController(this.vhs_.xhr, getBandwidth);\n    this.setupSegmentLoaderListeners_();\n    if (this.bufferBasedABR) {\n      this.mainPlaylistLoader_.one('loadedplaylist', () => this.startABRTimer_());\n      this.tech_.on('pause', () => this.stopABRTimer_());\n      this.tech_.on('play', () => this.startABRTimer_());\n    } // Create SegmentLoader stat-getters\n    // mediaRequests_\n    // mediaRequestsAborted_\n    // mediaRequestsTimedout_\n    // mediaRequestsErrored_\n    // mediaTransferDuration_\n    // mediaBytesTransferred_\n    // mediaAppends_\n\n    loaderStats.forEach(stat => {\n      this[stat + '_'] = sumLoaderStat.bind(this, stat);\n    });\n    this.logger_ = logger('pc');\n    this.triggeredFmp4Usage = false;\n    if (this.tech_.preload() === 'none') {\n      this.loadOnPlay_ = () => {\n        this.loadOnPlay_ = null;\n        this.mainPlaylistLoader_.load();\n      };\n      this.tech_.one('play', this.loadOnPlay_);\n    } else {\n      this.mainPlaylistLoader_.load();\n    }\n    this.timeToLoadedData__ = -1;\n    this.mainAppendsToLoadedData__ = -1;\n    this.audioAppendsToLoadedData__ = -1;\n    const event = this.tech_.preload() === 'none' ? 'play' : 'loadstart'; // start the first frame timer on loadstart or play (for preload none)\n\n    this.tech_.one(event, () => {\n      const timeToLoadedDataStart = Date.now();\n      this.tech_.one('loadeddata', () => {\n        this.timeToLoadedData__ = Date.now() - timeToLoadedDataStart;\n        this.mainAppendsToLoadedData__ = this.mainSegmentLoader_.mediaAppends;\n        this.audioAppendsToLoadedData__ = this.audioSegmentLoader_.mediaAppends;\n      });\n    });\n  }\n  mainAppendsToLoadedData_() {\n    return this.mainAppendsToLoadedData__;\n  }\n  audioAppendsToLoadedData_() {\n    return this.audioAppendsToLoadedData__;\n  }\n  appendsToLoadedData_() {\n    const main = this.mainAppendsToLoadedData_();\n    const audio = this.audioAppendsToLoadedData_();\n    if (main === -1 || audio === -1) {\n      return -1;\n    }\n    return main + audio;\n  }\n  timeToLoadedData_() {\n    return this.timeToLoadedData__;\n  }\n  /**\n   * Run selectPlaylist and switch to the new playlist if we should\n   *\n   * @param {string} [reason=abr] a reason for why the ABR check is made\n   * @private\n   */\n\n  checkABR_(reason = 'abr') {\n    const nextPlaylist = this.selectPlaylist();\n    if (nextPlaylist && this.shouldSwitchToMedia_(nextPlaylist)) {\n      this.switchMedia_(nextPlaylist, reason);\n    }\n  }\n  switchMedia_(playlist, cause, delay) {\n    const oldMedia = this.media();\n    const oldId = oldMedia && (oldMedia.id || oldMedia.uri);\n    const newId = playlist && (playlist.id || playlist.uri);\n    if (oldId && oldId !== newId) {\n      this.logger_(`switch media ${oldId} -> ${newId} from ${cause}`);\n      this.tech_.trigger({\n        type: 'usage',\n        name: `vhs-rendition-change-${cause}`\n      });\n    }\n    this.mainPlaylistLoader_.media(playlist, delay);\n  }\n  /**\n   * A function that ensures we switch our playlists inside of `mediaTypes`\n   * to match the current `serviceLocation` provided by the contentSteering controller.\n   * We want to check media types of `AUDIO`, `SUBTITLES`, and `CLOSED-CAPTIONS`.\n   *\n   * This should only be called on a DASH playback scenario while using content steering.\n   * This is necessary due to differences in how media in HLS manifests are generally tied to\n   * a video playlist, where in DASH that is not always the case.\n   */\n\n  switchMediaForDASHContentSteering_() {\n    ['AUDIO', 'SUBTITLES', 'CLOSED-CAPTIONS'].forEach(type => {\n      const mediaType = this.mediaTypes_[type];\n      const activeGroup = mediaType ? mediaType.activeGroup() : null;\n      const pathway = this.contentSteeringController_.getPathway();\n      if (activeGroup && pathway) {\n        // activeGroup can be an array or a single group\n        const mediaPlaylists = activeGroup.length ? activeGroup[0].playlists : activeGroup.playlists;\n        const dashMediaPlaylists = mediaPlaylists.filter(p => p.attributes.serviceLocation === pathway); // Switch the current active playlist to the correct CDN\n\n        if (dashMediaPlaylists.length) {\n          this.mediaTypes_[type].activePlaylistLoader.media(dashMediaPlaylists[0]);\n        }\n      }\n    });\n  }\n  /**\n   * Start a timer that periodically calls checkABR_\n   *\n   * @private\n   */\n\n  startABRTimer_() {\n    this.stopABRTimer_();\n    this.abrTimer_ = window$1.setInterval(() => this.checkABR_(), 250);\n  }\n  /**\n   * Stop the timer that periodically calls checkABR_\n   *\n   * @private\n   */\n\n  stopABRTimer_() {\n    // if we're scrubbing, we don't need to pause.\n    // This getter will be added to Video.js in version 7.11.\n    if (this.tech_.scrubbing && this.tech_.scrubbing()) {\n      return;\n    }\n    window$1.clearInterval(this.abrTimer_);\n    this.abrTimer_ = null;\n  }\n  /**\n   * Get a list of playlists for the currently selected audio playlist\n   *\n   * @return {Array} the array of audio playlists\n   */\n\n  getAudioTrackPlaylists_() {\n    const main = this.main();\n    const defaultPlaylists = main && main.playlists || []; // if we don't have any audio groups then we can only\n    // assume that the audio tracks are contained in main\n    // playlist array, use that or an empty array.\n\n    if (!main || !main.mediaGroups || !main.mediaGroups.AUDIO) {\n      return defaultPlaylists;\n    }\n    const AUDIO = main.mediaGroups.AUDIO;\n    const groupKeys = Object.keys(AUDIO);\n    let track; // get the current active track\n\n    if (Object.keys(this.mediaTypes_.AUDIO.groups).length) {\n      track = this.mediaTypes_.AUDIO.activeTrack(); // or get the default track from main if mediaTypes_ isn't setup yet\n    } else {\n      // default group is `main` or just the first group.\n      const defaultGroup = AUDIO.main || groupKeys.length && AUDIO[groupKeys[0]];\n      for (const label in defaultGroup) {\n        if (defaultGroup[label].default) {\n          track = {\n            label\n          };\n          break;\n        }\n      }\n    } // no active track no playlists.\n\n    if (!track) {\n      return defaultPlaylists;\n    }\n    const playlists = []; // get all of the playlists that are possible for the\n    // active track.\n\n    for (const group in AUDIO) {\n      if (AUDIO[group][track.label]) {\n        const properties = AUDIO[group][track.label];\n        if (properties.playlists && properties.playlists.length) {\n          playlists.push.apply(playlists, properties.playlists);\n        } else if (properties.uri) {\n          playlists.push(properties);\n        } else if (main.playlists.length) {\n          // if an audio group does not have a uri\n          // see if we have main playlists that use it as a group.\n          // if we do then add those to the playlists list.\n          for (let i = 0; i < main.playlists.length; i++) {\n            const playlist = main.playlists[i];\n            if (playlist.attributes && playlist.attributes.AUDIO && playlist.attributes.AUDIO === group) {\n              playlists.push(playlist);\n            }\n          }\n        }\n      }\n    }\n    if (!playlists.length) {\n      return defaultPlaylists;\n    }\n    return playlists;\n  }\n  /**\n   * Register event handlers on the main playlist loader. A helper\n   * function for construction time.\n   *\n   * @private\n   */\n\n  setupMainPlaylistLoaderListeners_() {\n    this.mainPlaylistLoader_.on('loadedmetadata', () => {\n      const media = this.mainPlaylistLoader_.media();\n      const requestTimeout = media.targetDuration * 1.5 * 1000; // If we don't have any more available playlists, we don't want to\n      // timeout the request.\n\n      if (isLowestEnabledRendition(this.mainPlaylistLoader_.main, this.mainPlaylistLoader_.media())) {\n        this.requestOptions_.timeout = 0;\n      } else {\n        this.requestOptions_.timeout = requestTimeout;\n      } // if this isn't a live video and preload permits, start\n      // downloading segments\n\n      if (media.endList && this.tech_.preload() !== 'none') {\n        this.mainSegmentLoader_.playlist(media, this.requestOptions_);\n        this.mainSegmentLoader_.load();\n      }\n      setupMediaGroups({\n        sourceType: this.sourceType_,\n        segmentLoaders: {\n          AUDIO: this.audioSegmentLoader_,\n          SUBTITLES: this.subtitleSegmentLoader_,\n          main: this.mainSegmentLoader_\n        },\n        tech: this.tech_,\n        requestOptions: this.requestOptions_,\n        mainPlaylistLoader: this.mainPlaylistLoader_,\n        vhs: this.vhs_,\n        main: this.main(),\n        mediaTypes: this.mediaTypes_,\n        excludePlaylist: this.excludePlaylist.bind(this)\n      });\n      this.triggerPresenceUsage_(this.main(), media);\n      this.setupFirstPlay();\n      if (!this.mediaTypes_.AUDIO.activePlaylistLoader || this.mediaTypes_.AUDIO.activePlaylistLoader.media()) {\n        this.trigger('selectedinitialmedia');\n      } else {\n        // We must wait for the active audio playlist loader to\n        // finish setting up before triggering this event so the\n        // representations API and EME setup is correct\n        this.mediaTypes_.AUDIO.activePlaylistLoader.one('loadedmetadata', () => {\n          this.trigger('selectedinitialmedia');\n        });\n      }\n    });\n    this.mainPlaylistLoader_.on('loadedplaylist', () => {\n      if (this.loadOnPlay_) {\n        this.tech_.off('play', this.loadOnPlay_);\n      }\n      let updatedPlaylist = this.mainPlaylistLoader_.media();\n      if (!updatedPlaylist) {\n        // Add content steering listeners on first load and init.\n        this.attachContentSteeringListeners_();\n        this.initContentSteeringController_(); // exclude any variants that are not supported by the browser before selecting\n        // an initial media as the playlist selectors do not consider browser support\n\n        this.excludeUnsupportedVariants_();\n        let selectedMedia;\n        if (this.enableLowInitialPlaylist) {\n          selectedMedia = this.selectInitialPlaylist();\n        }\n        if (!selectedMedia) {\n          selectedMedia = this.selectPlaylist();\n        }\n        if (!selectedMedia || !this.shouldSwitchToMedia_(selectedMedia)) {\n          return;\n        }\n        this.initialMedia_ = selectedMedia;\n        this.switchMedia_(this.initialMedia_, 'initial'); // Under the standard case where a source URL is provided, loadedplaylist will\n        // fire again since the playlist will be requested. In the case of vhs-json\n        // (where the manifest object is provided as the source), when the media\n        // playlist's `segments` list is already available, a media playlist won't be\n        // requested, and loadedplaylist won't fire again, so the playlist handler must be\n        // called on its own here.\n\n        const haveJsonSource = this.sourceType_ === 'vhs-json' && this.initialMedia_.segments;\n        if (!haveJsonSource) {\n          return;\n        }\n        updatedPlaylist = this.initialMedia_;\n      }\n      this.handleUpdatedMediaPlaylist(updatedPlaylist);\n    });\n    this.mainPlaylistLoader_.on('error', () => {\n      const error = this.mainPlaylistLoader_.error;\n      this.excludePlaylist({\n        playlistToExclude: error.playlist,\n        error\n      });\n    });\n    this.mainPlaylistLoader_.on('mediachanging', () => {\n      this.mainSegmentLoader_.abort();\n      this.mainSegmentLoader_.pause();\n    });\n    this.mainPlaylistLoader_.on('mediachange', () => {\n      const media = this.mainPlaylistLoader_.media();\n      const requestTimeout = media.targetDuration * 1.5 * 1000; // If we don't have any more available playlists, we don't want to\n      // timeout the request.\n\n      if (isLowestEnabledRendition(this.mainPlaylistLoader_.main, this.mainPlaylistLoader_.media())) {\n        this.requestOptions_.timeout = 0;\n      } else {\n        this.requestOptions_.timeout = requestTimeout;\n      }\n      if (this.sourceType_ === 'dash') {\n        // we don't want to re-request the same hls playlist right after it was changed\n        this.mainPlaylistLoader_.load();\n      } // TODO: Create a new event on the PlaylistLoader that signals\n      // that the segments have changed in some way and use that to\n      // update the SegmentLoader instead of doing it twice here and\n      // on `loadedplaylist`\n\n      this.mainSegmentLoader_.pause();\n      this.mainSegmentLoader_.playlist(media, this.requestOptions_);\n      if (this.waitingForFastQualityPlaylistReceived_) {\n        this.runFastQualitySwitch_();\n      } else {\n        this.mainSegmentLoader_.load();\n      }\n      this.tech_.trigger({\n        type: 'mediachange',\n        bubbles: true\n      });\n    });\n    this.mainPlaylistLoader_.on('playlistunchanged', () => {\n      const updatedPlaylist = this.mainPlaylistLoader_.media(); // ignore unchanged playlists that have already been\n      // excluded for not-changing. We likely just have a really slowly updating\n      // playlist.\n\n      if (updatedPlaylist.lastExcludeReason_ === 'playlist-unchanged') {\n        return;\n      }\n      const playlistOutdated = this.stuckAtPlaylistEnd_(updatedPlaylist);\n      if (playlistOutdated) {\n        // Playlist has stopped updating and we're stuck at its end. Try to\n        // exclude it and switch to another playlist in the hope that that\n        // one is updating (and give the player a chance to re-adjust to the\n        // safe live point).\n        this.excludePlaylist({\n          error: {\n            message: 'Playlist no longer updating.',\n            reason: 'playlist-unchanged'\n          }\n        }); // useful for monitoring QoS\n\n        this.tech_.trigger('playliststuck');\n      }\n    });\n    this.mainPlaylistLoader_.on('renditiondisabled', () => {\n      this.tech_.trigger({\n        type: 'usage',\n        name: 'vhs-rendition-disabled'\n      });\n    });\n    this.mainPlaylistLoader_.on('renditionenabled', () => {\n      this.tech_.trigger({\n        type: 'usage',\n        name: 'vhs-rendition-enabled'\n      });\n    });\n  }\n  /**\n   * Given an updated media playlist (whether it was loaded for the first time, or\n   * refreshed for live playlists), update any relevant properties and state to reflect\n   * changes in the media that should be accounted for (e.g., cues and duration).\n   *\n   * @param {Object} updatedPlaylist the updated media playlist object\n   *\n   * @private\n   */\n\n  handleUpdatedMediaPlaylist(updatedPlaylist) {\n    if (this.useCueTags_) {\n      this.updateAdCues_(updatedPlaylist);\n    } // TODO: Create a new event on the PlaylistLoader that signals\n    // that the segments have changed in some way and use that to\n    // update the SegmentLoader instead of doing it twice here and\n    // on `mediachange`\n\n    this.mainSegmentLoader_.pause();\n    this.mainSegmentLoader_.playlist(updatedPlaylist, this.requestOptions_);\n    if (this.waitingForFastQualityPlaylistReceived_) {\n      this.runFastQualitySwitch_();\n    }\n    this.updateDuration(!updatedPlaylist.endList); // If the player isn't paused, ensure that the segment loader is running,\n    // as it is possible that it was temporarily stopped while waiting for\n    // a playlist (e.g., in case the playlist errored and we re-requested it).\n\n    if (!this.tech_.paused()) {\n      this.mainSegmentLoader_.load();\n      if (this.audioSegmentLoader_) {\n        this.audioSegmentLoader_.load();\n      }\n    }\n  }\n  /**\n   * A helper function for triggerring presence usage events once per source\n   *\n   * @private\n   */\n\n  triggerPresenceUsage_(main, media) {\n    const mediaGroups = main.mediaGroups || {};\n    let defaultDemuxed = true;\n    const audioGroupKeys = Object.keys(mediaGroups.AUDIO);\n    for (const mediaGroup in mediaGroups.AUDIO) {\n      for (const label in mediaGroups.AUDIO[mediaGroup]) {\n        const properties = mediaGroups.AUDIO[mediaGroup][label];\n        if (!properties.uri) {\n          defaultDemuxed = false;\n        }\n      }\n    }\n    if (defaultDemuxed) {\n      this.tech_.trigger({\n        type: 'usage',\n        name: 'vhs-demuxed'\n      });\n    }\n    if (Object.keys(mediaGroups.SUBTITLES).length) {\n      this.tech_.trigger({\n        type: 'usage',\n        name: 'vhs-webvtt'\n      });\n    }\n    if (Vhs$1.Playlist.isAes(media)) {\n      this.tech_.trigger({\n        type: 'usage',\n        name: 'vhs-aes'\n      });\n    }\n    if (audioGroupKeys.length && Object.keys(mediaGroups.AUDIO[audioGroupKeys[0]]).length > 1) {\n      this.tech_.trigger({\n        type: 'usage',\n        name: 'vhs-alternate-audio'\n      });\n    }\n    if (this.useCueTags_) {\n      this.tech_.trigger({\n        type: 'usage',\n        name: 'vhs-playlist-cue-tags'\n      });\n    }\n  }\n  shouldSwitchToMedia_(nextPlaylist) {\n    const currentPlaylist = this.mainPlaylistLoader_.media() || this.mainPlaylistLoader_.pendingMedia_;\n    const currentTime = this.tech_.currentTime();\n    const bufferLowWaterLine = this.bufferLowWaterLine();\n    const bufferHighWaterLine = this.bufferHighWaterLine();\n    const buffered = this.tech_.buffered();\n    return shouldSwitchToMedia({\n      buffered,\n      currentTime,\n      currentPlaylist,\n      nextPlaylist,\n      bufferLowWaterLine,\n      bufferHighWaterLine,\n      duration: this.duration(),\n      bufferBasedABR: this.bufferBasedABR,\n      log: this.logger_\n    });\n  }\n  /**\n   * Register event handlers on the segment loaders. A helper function\n   * for construction time.\n   *\n   * @private\n   */\n\n  setupSegmentLoaderListeners_() {\n    this.mainSegmentLoader_.on('bandwidthupdate', () => {\n      // Whether or not buffer based ABR or another ABR is used, on a bandwidth change it's\n      // useful to check to see if a rendition switch should be made.\n      this.checkABR_('bandwidthupdate');\n      this.tech_.trigger('bandwidthupdate');\n    });\n    this.mainSegmentLoader_.on('timeout', () => {\n      if (this.bufferBasedABR) {\n        // If a rendition change is needed, then it would've be done on `bandwidthupdate`.\n        // Here the only consideration is that for buffer based ABR there's no guarantee\n        // of an immediate switch (since the bandwidth is averaged with a timeout\n        // bandwidth value of 1), so force a load on the segment loader to keep it going.\n        this.mainSegmentLoader_.load();\n      }\n    }); // `progress` events are not reliable enough of a bandwidth measure to trigger buffer\n    // based ABR.\n\n    if (!this.bufferBasedABR) {\n      this.mainSegmentLoader_.on('progress', () => {\n        this.trigger('progress');\n      });\n    }\n    this.mainSegmentLoader_.on('error', () => {\n      const error = this.mainSegmentLoader_.error();\n      this.excludePlaylist({\n        playlistToExclude: error.playlist,\n        error\n      });\n    });\n    this.mainSegmentLoader_.on('appenderror', () => {\n      this.error = this.mainSegmentLoader_.error_;\n      this.trigger('error');\n    });\n    this.mainSegmentLoader_.on('syncinfoupdate', () => {\n      this.onSyncInfoUpdate_();\n    });\n    this.mainSegmentLoader_.on('timestampoffset', () => {\n      this.tech_.trigger({\n        type: 'usage',\n        name: 'vhs-timestamp-offset'\n      });\n    });\n    this.audioSegmentLoader_.on('syncinfoupdate', () => {\n      this.onSyncInfoUpdate_();\n    });\n    this.audioSegmentLoader_.on('appenderror', () => {\n      this.error = this.audioSegmentLoader_.error_;\n      this.trigger('error');\n    });\n    this.mainSegmentLoader_.on('ended', () => {\n      this.logger_('main segment loader ended');\n      this.onEndOfStream();\n    });\n    this.mainSegmentLoader_.on('earlyabort', event => {\n      // never try to early abort with the new ABR algorithm\n      if (this.bufferBasedABR) {\n        return;\n      }\n      this.delegateLoaders_('all', ['abort']);\n      this.excludePlaylist({\n        error: {\n          message: 'Aborted early because there isn\\'t enough bandwidth to complete ' + 'the request without rebuffering.'\n        },\n        playlistExclusionDuration: ABORT_EARLY_EXCLUSION_SECONDS\n      });\n    });\n    const updateCodecs = () => {\n      if (!this.sourceUpdater_.hasCreatedSourceBuffers()) {\n        return this.tryToCreateSourceBuffers_();\n      }\n      const codecs = this.getCodecsOrExclude_(); // no codecs means that the playlist was excluded\n\n      if (!codecs) {\n        return;\n      }\n      this.sourceUpdater_.addOrChangeSourceBuffers(codecs);\n    };\n    this.mainSegmentLoader_.on('trackinfo', updateCodecs);\n    this.audioSegmentLoader_.on('trackinfo', updateCodecs);\n    this.mainSegmentLoader_.on('fmp4', () => {\n      if (!this.triggeredFmp4Usage) {\n        this.tech_.trigger({\n          type: 'usage',\n          name: 'vhs-fmp4'\n        });\n        this.triggeredFmp4Usage = true;\n      }\n    });\n    this.audioSegmentLoader_.on('fmp4', () => {\n      if (!this.triggeredFmp4Usage) {\n        this.tech_.trigger({\n          type: 'usage',\n          name: 'vhs-fmp4'\n        });\n        this.triggeredFmp4Usage = true;\n      }\n    });\n    this.audioSegmentLoader_.on('ended', () => {\n      this.logger_('audioSegmentLoader ended');\n      this.onEndOfStream();\n    });\n  }\n  mediaSecondsLoaded_() {\n    return Math.max(this.audioSegmentLoader_.mediaSecondsLoaded + this.mainSegmentLoader_.mediaSecondsLoaded);\n  }\n  /**\n   * Call load on our SegmentLoaders\n   */\n\n  load() {\n    this.mainSegmentLoader_.load();\n    if (this.mediaTypes_.AUDIO.activePlaylistLoader) {\n      this.audioSegmentLoader_.load();\n    }\n    if (this.mediaTypes_.SUBTITLES.activePlaylistLoader) {\n      this.subtitleSegmentLoader_.load();\n    }\n  }\n  /**\n   * Re-tune playback quality level for the current player\n   * conditions. This method will perform destructive actions like removing\n   * already buffered content in order to readjust the currently active\n   * playlist quickly. This is good for manual quality changes\n   *\n   * @private\n   */\n\n  fastQualityChange_(media = this.selectPlaylist()) {\n    if (media && media === this.mainPlaylistLoader_.media()) {\n      this.logger_('skipping fastQualityChange because new media is same as old');\n      return;\n    }\n    this.switchMedia_(media, 'fast-quality'); // we would like to avoid race condition when we call fastQuality,\n    // reset everything and start loading segments from prev segments instead of new because new playlist is not received yet\n\n    this.waitingForFastQualityPlaylistReceived_ = true;\n  }\n  runFastQualitySwitch_() {\n    this.waitingForFastQualityPlaylistReceived_ = false; // Delete all buffered data to allow an immediate quality switch, then seek to give\n    // the browser a kick to remove any cached frames from the previous rendtion (.04 seconds\n    // ahead was roughly the minimum that will accomplish this across a variety of content\n    // in IE and Edge, but seeking in place is sufficient on all other browsers)\n    // Edge/IE bug: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/14600375/\n    // Chrome bug: https://bugs.chromium.org/p/chromium/issues/detail?id=651904\n\n    this.mainSegmentLoader_.pause();\n    this.mainSegmentLoader_.resetEverything(() => {\n      this.tech_.setCurrentTime(this.tech_.currentTime());\n    }); // don't need to reset audio as it is reset when media changes\n  }\n  /**\n   * Begin playback.\n   */\n\n  play() {\n    if (this.setupFirstPlay()) {\n      return;\n    }\n    if (this.tech_.ended()) {\n      this.tech_.setCurrentTime(0);\n    }\n    if (this.hasPlayed_) {\n      this.load();\n    }\n    const seekable = this.tech_.seekable(); // if the viewer has paused and we fell out of the live window,\n    // seek forward to the live point\n\n    if (this.tech_.duration() === Infinity) {\n      if (this.tech_.currentTime() < seekable.start(0)) {\n        return this.tech_.setCurrentTime(seekable.end(seekable.length - 1));\n      }\n    }\n  }\n  /**\n   * Seek to the latest media position if this is a live video and the\n   * player and video are loaded and initialized.\n   */\n\n  setupFirstPlay() {\n    const media = this.mainPlaylistLoader_.media(); // Check that everything is ready to begin buffering for the first call to play\n    //  If 1) there is no active media\n    //     2) the player is paused\n    //     3) the first play has already been setup\n    // then exit early\n\n    if (!media || this.tech_.paused() || this.hasPlayed_) {\n      return false;\n    } // when the video is a live stream and/or has a start time\n\n    if (!media.endList || media.start) {\n      const seekable = this.seekable();\n      if (!seekable.length) {\n        // without a seekable range, the player cannot seek to begin buffering at the\n        // live or start point\n        return false;\n      }\n      const seekableEnd = seekable.end(0);\n      let startPoint = seekableEnd;\n      if (media.start) {\n        const offset = media.start.timeOffset;\n        if (offset < 0) {\n          startPoint = Math.max(seekableEnd + offset, seekable.start(0));\n        } else {\n          startPoint = Math.min(seekableEnd, offset);\n        }\n      } // trigger firstplay to inform the source handler to ignore the next seek event\n\n      this.trigger('firstplay'); // seek to the live point\n\n      this.tech_.setCurrentTime(startPoint);\n    }\n    this.hasPlayed_ = true; // we can begin loading now that everything is ready\n\n    this.load();\n    return true;\n  }\n  /**\n   * handle the sourceopen event on the MediaSource\n   *\n   * @private\n   */\n\n  handleSourceOpen_() {\n    // Only attempt to create the source buffer if none already exist.\n    // handleSourceOpen is also called when we are \"re-opening\" a source buffer\n    // after `endOfStream` has been called (in response to a seek for instance)\n    this.tryToCreateSourceBuffers_(); // if autoplay is enabled, begin playback. This is duplicative of\n    // code in video.js but is required because play() must be invoked\n    // *after* the media source has opened.\n\n    if (this.tech_.autoplay()) {\n      const playPromise = this.tech_.play(); // Catch/silence error when a pause interrupts a play request\n      // on browsers which return a promise\n\n      if (typeof playPromise !== 'undefined' && typeof playPromise.then === 'function') {\n        playPromise.then(null, e => {});\n      }\n    }\n    this.trigger('sourceopen');\n  }\n  /**\n   * handle the sourceended event on the MediaSource\n   *\n   * @private\n   */\n\n  handleSourceEnded_() {\n    if (!this.inbandTextTracks_.metadataTrack_) {\n      return;\n    }\n    const cues = this.inbandTextTracks_.metadataTrack_.cues;\n    if (!cues || !cues.length) {\n      return;\n    }\n    const duration = this.duration();\n    cues[cues.length - 1].endTime = isNaN(duration) || Math.abs(duration) === Infinity ? Number.MAX_VALUE : duration;\n  }\n  /**\n   * handle the durationchange event on the MediaSource\n   *\n   * @private\n   */\n\n  handleDurationChange_() {\n    this.tech_.trigger('durationchange');\n  }\n  /**\n   * Calls endOfStream on the media source when all active stream types have called\n   * endOfStream\n   *\n   * @param {string} streamType\n   *        Stream type of the segment loader that called endOfStream\n   * @private\n   */\n\n  onEndOfStream() {\n    let isEndOfStream = this.mainSegmentLoader_.ended_;\n    if (this.mediaTypes_.AUDIO.activePlaylistLoader) {\n      const mainMediaInfo = this.mainSegmentLoader_.getCurrentMediaInfo_(); // if the audio playlist loader exists, then alternate audio is active\n\n      if (!mainMediaInfo || mainMediaInfo.hasVideo) {\n        // if we do not know if the main segment loader contains video yet or if we\n        // definitively know the main segment loader contains video, then we need to wait\n        // for both main and audio segment loaders to call endOfStream\n        isEndOfStream = isEndOfStream && this.audioSegmentLoader_.ended_;\n      } else {\n        // otherwise just rely on the audio loader\n        isEndOfStream = this.audioSegmentLoader_.ended_;\n      }\n    }\n    if (!isEndOfStream) {\n      return;\n    }\n    this.stopABRTimer_();\n    this.sourceUpdater_.endOfStream();\n  }\n  /**\n   * Check if a playlist has stopped being updated\n   *\n   * @param {Object} playlist the media playlist object\n   * @return {boolean} whether the playlist has stopped being updated or not\n   */\n\n  stuckAtPlaylistEnd_(playlist) {\n    const seekable = this.seekable();\n    if (!seekable.length) {\n      // playlist doesn't have enough information to determine whether we are stuck\n      return false;\n    }\n    const expired = this.syncController_.getExpiredTime(playlist, this.duration());\n    if (expired === null) {\n      return false;\n    } // does not use the safe live end to calculate playlist end, since we\n    // don't want to say we are stuck while there is still content\n\n    const absolutePlaylistEnd = Vhs$1.Playlist.playlistEnd(playlist, expired);\n    const currentTime = this.tech_.currentTime();\n    const buffered = this.tech_.buffered();\n    if (!buffered.length) {\n      // return true if the playhead reached the absolute end of the playlist\n      return absolutePlaylistEnd - currentTime <= SAFE_TIME_DELTA;\n    }\n    const bufferedEnd = buffered.end(buffered.length - 1); // return true if there is too little buffer left and buffer has reached absolute\n    // end of playlist\n\n    return bufferedEnd - currentTime <= SAFE_TIME_DELTA && absolutePlaylistEnd - bufferedEnd <= SAFE_TIME_DELTA;\n  }\n  /**\n   * Exclude a playlist for a set amount of time, making it unavailable for selection by\n   * the rendition selection algorithm, then force a new playlist (rendition) selection.\n   *\n   * @param {Object=} playlistToExclude\n   *                  the playlist to exclude, defaults to the currently selected playlist\n   * @param {Object=} error\n   *                  an optional error\n   * @param {number=} playlistExclusionDuration\n   *                  an optional number of seconds to exclude the playlist\n   */\n\n  excludePlaylist({\n    playlistToExclude = this.mainPlaylistLoader_.media(),\n    error = {},\n    playlistExclusionDuration\n  }) {\n    // If the `error` was generated by the playlist loader, it will contain\n    // the playlist we were trying to load (but failed) and that should be\n    // excluded instead of the currently selected playlist which is likely\n    // out-of-date in this scenario\n    playlistToExclude = playlistToExclude || this.mainPlaylistLoader_.media();\n    playlistExclusionDuration = playlistExclusionDuration || error.playlistExclusionDuration || this.playlistExclusionDuration; // If there is no current playlist, then an error occurred while we were\n    // trying to load the main OR while we were disposing of the tech\n\n    if (!playlistToExclude) {\n      this.error = error;\n      if (this.mediaSource.readyState !== 'open') {\n        this.trigger('error');\n      } else {\n        this.sourceUpdater_.endOfStream('network');\n      }\n      return;\n    }\n    playlistToExclude.playlistErrors_++;\n    const playlists = this.mainPlaylistLoader_.main.playlists;\n    const enabledPlaylists = playlists.filter(isEnabled);\n    const isFinalRendition = enabledPlaylists.length === 1 && enabledPlaylists[0] === playlistToExclude; // Don't exclude the only playlist unless it was excluded\n    // forever\n\n    if (playlists.length === 1 && playlistExclusionDuration !== Infinity) {\n      videojs.log.warn(`Problem encountered with playlist ${playlistToExclude.id}. ` + 'Trying again since it is the only playlist.');\n      this.tech_.trigger('retryplaylist'); // if this is a final rendition, we should delay\n\n      return this.mainPlaylistLoader_.load(isFinalRendition);\n    }\n    if (isFinalRendition) {\n      // If we're content steering, try other pathways.\n      if (this.main().contentSteering) {\n        const pathway = this.pathwayAttribute_(playlistToExclude); // Ignore at least 1 steering manifest refresh.\n\n        const reIncludeDelay = this.contentSteeringController_.steeringManifest.ttl * 1000;\n        this.contentSteeringController_.excludePathway(pathway);\n        this.excludeThenChangePathway_();\n        setTimeout(() => {\n          this.contentSteeringController_.addAvailablePathway(pathway);\n        }, reIncludeDelay);\n        return;\n      } // Since we're on the final non-excluded playlist, and we're about to exclude\n      // it, instead of erring the player or retrying this playlist, clear out the current\n      // exclusion list. This allows other playlists to be attempted in case any have been\n      // fixed.\n\n      let reincluded = false;\n      playlists.forEach(playlist => {\n        // skip current playlist which is about to be excluded\n        if (playlist === playlistToExclude) {\n          return;\n        }\n        const excludeUntil = playlist.excludeUntil; // a playlist cannot be reincluded if it wasn't excluded to begin with.\n\n        if (typeof excludeUntil !== 'undefined' && excludeUntil !== Infinity) {\n          reincluded = true;\n          delete playlist.excludeUntil;\n        }\n      });\n      if (reincluded) {\n        videojs.log.warn('Removing other playlists from the exclusion list because the last ' + 'rendition is about to be excluded.'); // Technically we are retrying a playlist, in that we are simply retrying a previous\n        // playlist. This is needed for users relying on the retryplaylist event to catch a\n        // case where the player might be stuck and looping through \"dead\" playlists.\n\n        this.tech_.trigger('retryplaylist');\n      }\n    } // Exclude this playlist\n\n    let excludeUntil;\n    if (playlistToExclude.playlistErrors_ > this.maxPlaylistRetries) {\n      excludeUntil = Infinity;\n    } else {\n      excludeUntil = Date.now() + playlistExclusionDuration * 1000;\n    }\n    playlistToExclude.excludeUntil = excludeUntil;\n    if (error.reason) {\n      playlistToExclude.lastExcludeReason_ = error.reason;\n    }\n    this.tech_.trigger('excludeplaylist');\n    this.tech_.trigger({\n      type: 'usage',\n      name: 'vhs-rendition-excluded'\n    }); // TODO: only load a new playlist if we're excluding the current playlist\n    // If this function was called with a playlist that's not the current active playlist\n    // (e.g., media().id !== playlistToExclude.id),\n    // then a new playlist should not be selected and loaded, as there's nothing wrong with the current playlist.\n\n    const nextPlaylist = this.selectPlaylist();\n    if (!nextPlaylist) {\n      this.error = 'Playback cannot continue. No available working or supported playlists.';\n      this.trigger('error');\n      return;\n    }\n    const logFn = error.internal ? this.logger_ : videojs.log.warn;\n    const errorMessage = error.message ? ' ' + error.message : '';\n    logFn(`${error.internal ? 'Internal problem' : 'Problem'} encountered with playlist ${playlistToExclude.id}.` + `${errorMessage} Switching to playlist ${nextPlaylist.id}.`); // if audio group changed reset audio loaders\n\n    if (nextPlaylist.attributes.AUDIO !== playlistToExclude.attributes.AUDIO) {\n      this.delegateLoaders_('audio', ['abort', 'pause']);\n    } // if subtitle group changed reset subtitle loaders\n\n    if (nextPlaylist.attributes.SUBTITLES !== playlistToExclude.attributes.SUBTITLES) {\n      this.delegateLoaders_('subtitle', ['abort', 'pause']);\n    }\n    this.delegateLoaders_('main', ['abort', 'pause']);\n    const delayDuration = nextPlaylist.targetDuration / 2 * 1000 || 5 * 1000;\n    const shouldDelay = typeof nextPlaylist.lastRequest === 'number' && Date.now() - nextPlaylist.lastRequest <= delayDuration; // delay if it's a final rendition or if the last refresh is sooner than half targetDuration\n\n    return this.switchMedia_(nextPlaylist, 'exclude', isFinalRendition || shouldDelay);\n  }\n  /**\n   * Pause all segment/playlist loaders\n   */\n\n  pauseLoading() {\n    this.delegateLoaders_('all', ['abort', 'pause']);\n    this.stopABRTimer_();\n  }\n  /**\n   * Call a set of functions in order on playlist loaders, segment loaders,\n   * or both types of loaders.\n   *\n   * @param {string} filter\n   *        Filter loaders that should call fnNames using a string. Can be:\n   *        * all - run on all loaders\n   *        * audio - run on all audio loaders\n   *        * subtitle - run on all subtitle loaders\n   *        * main - run on the main loaders\n   *\n   * @param {Array|string} fnNames\n   *        A string or array of function names to call.\n   */\n\n  delegateLoaders_(filter, fnNames) {\n    const loaders = [];\n    const dontFilterPlaylist = filter === 'all';\n    if (dontFilterPlaylist || filter === 'main') {\n      loaders.push(this.mainPlaylistLoader_);\n    }\n    const mediaTypes = [];\n    if (dontFilterPlaylist || filter === 'audio') {\n      mediaTypes.push('AUDIO');\n    }\n    if (dontFilterPlaylist || filter === 'subtitle') {\n      mediaTypes.push('CLOSED-CAPTIONS');\n      mediaTypes.push('SUBTITLES');\n    }\n    mediaTypes.forEach(mediaType => {\n      const loader = this.mediaTypes_[mediaType] && this.mediaTypes_[mediaType].activePlaylistLoader;\n      if (loader) {\n        loaders.push(loader);\n      }\n    });\n    ['main', 'audio', 'subtitle'].forEach(name => {\n      const loader = this[`${name}SegmentLoader_`];\n      if (loader && (filter === name || filter === 'all')) {\n        loaders.push(loader);\n      }\n    });\n    loaders.forEach(loader => fnNames.forEach(fnName => {\n      if (typeof loader[fnName] === 'function') {\n        loader[fnName]();\n      }\n    }));\n  }\n  /**\n   * set the current time on all segment loaders\n   *\n   * @param {TimeRange} currentTime the current time to set\n   * @return {TimeRange} the current time\n   */\n\n  setCurrentTime(currentTime) {\n    const buffered = findRange(this.tech_.buffered(), currentTime);\n    if (!(this.mainPlaylistLoader_ && this.mainPlaylistLoader_.media())) {\n      // return immediately if the metadata is not ready yet\n      return 0;\n    } // it's clearly an edge-case but don't thrown an error if asked to\n    // seek within an empty playlist\n\n    if (!this.mainPlaylistLoader_.media().segments) {\n      return 0;\n    } // if the seek location is already buffered, continue buffering as usual\n\n    if (buffered && buffered.length) {\n      return currentTime;\n    } // cancel outstanding requests so we begin buffering at the new\n    // location\n\n    this.mainSegmentLoader_.pause();\n    this.mainSegmentLoader_.resetEverything();\n    if (this.mediaTypes_.AUDIO.activePlaylistLoader) {\n      this.audioSegmentLoader_.pause();\n      this.audioSegmentLoader_.resetEverything();\n    }\n    if (this.mediaTypes_.SUBTITLES.activePlaylistLoader) {\n      this.subtitleSegmentLoader_.pause();\n      this.subtitleSegmentLoader_.resetEverything();\n    } // start segment loader loading in case they are paused\n\n    this.load();\n  }\n  /**\n   * get the current duration\n   *\n   * @return {TimeRange} the duration\n   */\n\n  duration() {\n    if (!this.mainPlaylistLoader_) {\n      return 0;\n    }\n    const media = this.mainPlaylistLoader_.media();\n    if (!media) {\n      // no playlists loaded yet, so can't determine a duration\n      return 0;\n    } // Don't rely on the media source for duration in the case of a live playlist since\n    // setting the native MediaSource's duration to infinity ends up with consequences to\n    // seekable behavior. See https://github.com/w3c/media-source/issues/5 for details.\n    //\n    // This is resolved in the spec by https://github.com/w3c/media-source/pull/92,\n    // however, few browsers have support for setLiveSeekableRange()\n    // https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/setLiveSeekableRange\n    //\n    // Until a time when the duration of the media source can be set to infinity, and a\n    // seekable range specified across browsers, just return Infinity.\n\n    if (!media.endList) {\n      return Infinity;\n    } // Since this is a VOD video, it is safe to rely on the media source's duration (if\n    // available). If it's not available, fall back to a playlist-calculated estimate.\n\n    if (this.mediaSource) {\n      return this.mediaSource.duration;\n    }\n    return Vhs$1.Playlist.duration(media);\n  }\n  /**\n   * check the seekable range\n   *\n   * @return {TimeRange} the seekable range\n   */\n\n  seekable() {\n    return this.seekable_;\n  }\n  onSyncInfoUpdate_() {\n    let audioSeekable; // TODO check for creation of both source buffers before updating seekable\n    //\n    // A fix was made to this function where a check for\n    // this.sourceUpdater_.hasCreatedSourceBuffers\n    // was added to ensure that both source buffers were created before seekable was\n    // updated. However, it originally had a bug where it was checking for a true and\n    // returning early instead of checking for false. Setting it to check for false to\n    // return early though created other issues. A call to play() would check for seekable\n    // end without verifying that a seekable range was present. In addition, even checking\n    // for that didn't solve some issues, as handleFirstPlay is sometimes worked around\n    // due to a media update calling load on the segment loaders, skipping a seek to live,\n    // thereby starting live streams at the beginning of the stream rather than at the end.\n    //\n    // This conditional should be fixed to wait for the creation of two source buffers at\n    // the same time as the other sections of code are fixed to properly seek to live and\n    // not throw an error due to checking for a seekable end when no seekable range exists.\n    //\n    // For now, fall back to the older behavior, with the understanding that the seekable\n    // range may not be completely correct, leading to a suboptimal initial live point.\n\n    if (!this.mainPlaylistLoader_) {\n      return;\n    }\n    let media = this.mainPlaylistLoader_.media();\n    if (!media) {\n      return;\n    }\n    let expired = this.syncController_.getExpiredTime(media, this.duration());\n    if (expired === null) {\n      // not enough information to update seekable\n      return;\n    }\n    const main = this.mainPlaylistLoader_.main;\n    const mainSeekable = Vhs$1.Playlist.seekable(media, expired, Vhs$1.Playlist.liveEdgeDelay(main, media));\n    if (mainSeekable.length === 0) {\n      return;\n    }\n    if (this.mediaTypes_.AUDIO.activePlaylistLoader) {\n      media = this.mediaTypes_.AUDIO.activePlaylistLoader.media();\n      expired = this.syncController_.getExpiredTime(media, this.duration());\n      if (expired === null) {\n        return;\n      }\n      audioSeekable = Vhs$1.Playlist.seekable(media, expired, Vhs$1.Playlist.liveEdgeDelay(main, media));\n      if (audioSeekable.length === 0) {\n        return;\n      }\n    }\n    let oldEnd;\n    let oldStart;\n    if (this.seekable_ && this.seekable_.length) {\n      oldEnd = this.seekable_.end(0);\n      oldStart = this.seekable_.start(0);\n    }\n    if (!audioSeekable) {\n      // seekable has been calculated based on buffering video data so it\n      // can be returned directly\n      this.seekable_ = mainSeekable;\n    } else if (audioSeekable.start(0) > mainSeekable.end(0) || mainSeekable.start(0) > audioSeekable.end(0)) {\n      // seekables are pretty far off, rely on main\n      this.seekable_ = mainSeekable;\n    } else {\n      this.seekable_ = createTimeRanges([[audioSeekable.start(0) > mainSeekable.start(0) ? audioSeekable.start(0) : mainSeekable.start(0), audioSeekable.end(0) < mainSeekable.end(0) ? audioSeekable.end(0) : mainSeekable.end(0)]]);\n    } // seekable is the same as last time\n\n    if (this.seekable_ && this.seekable_.length) {\n      if (this.seekable_.end(0) === oldEnd && this.seekable_.start(0) === oldStart) {\n        return;\n      }\n    }\n    this.logger_(`seekable updated [${printableRange(this.seekable_)}]`);\n    this.tech_.trigger('seekablechanged');\n  }\n  /**\n   * Update the player duration\n   */\n\n  updateDuration(isLive) {\n    if (this.updateDuration_) {\n      this.mediaSource.removeEventListener('sourceopen', this.updateDuration_);\n      this.updateDuration_ = null;\n    }\n    if (this.mediaSource.readyState !== 'open') {\n      this.updateDuration_ = this.updateDuration.bind(this, isLive);\n      this.mediaSource.addEventListener('sourceopen', this.updateDuration_);\n      return;\n    }\n    if (isLive) {\n      const seekable = this.seekable();\n      if (!seekable.length) {\n        return;\n      } // Even in the case of a live playlist, the native MediaSource's duration should not\n      // be set to Infinity (even though this would be expected for a live playlist), since\n      // setting the native MediaSource's duration to infinity ends up with consequences to\n      // seekable behavior. See https://github.com/w3c/media-source/issues/5 for details.\n      //\n      // This is resolved in the spec by https://github.com/w3c/media-source/pull/92,\n      // however, few browsers have support for setLiveSeekableRange()\n      // https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/setLiveSeekableRange\n      //\n      // Until a time when the duration of the media source can be set to infinity, and a\n      // seekable range specified across browsers, the duration should be greater than or\n      // equal to the last possible seekable value.\n      // MediaSource duration starts as NaN\n      // It is possible (and probable) that this case will never be reached for many\n      // sources, since the MediaSource reports duration as the highest value without\n      // accounting for timestamp offset. For example, if the timestamp offset is -100 and\n      // we buffered times 0 to 100 with real times of 100 to 200, even though current\n      // time will be between 0 and 100, the native media source may report the duration\n      // as 200. However, since we report duration separate from the media source (as\n      // Infinity), and as long as the native media source duration value is greater than\n      // our reported seekable range, seeks will work as expected. The large number as\n      // duration for live is actually a strategy used by some players to work around the\n      // issue of live seekable ranges cited above.\n\n      if (isNaN(this.mediaSource.duration) || this.mediaSource.duration < seekable.end(seekable.length - 1)) {\n        this.sourceUpdater_.setDuration(seekable.end(seekable.length - 1));\n      }\n      return;\n    }\n    const buffered = this.tech_.buffered();\n    let duration = Vhs$1.Playlist.duration(this.mainPlaylistLoader_.media());\n    if (buffered.length > 0) {\n      duration = Math.max(duration, buffered.end(buffered.length - 1));\n    }\n    if (this.mediaSource.duration !== duration) {\n      this.sourceUpdater_.setDuration(duration);\n    }\n  }\n  /**\n   * dispose of the PlaylistController and everything\n   * that it controls\n   */\n\n  dispose() {\n    this.trigger('dispose');\n    this.decrypter_.terminate();\n    this.mainPlaylistLoader_.dispose();\n    this.mainSegmentLoader_.dispose();\n    this.contentSteeringController_.dispose();\n    this.keyStatusMap_.clear();\n    if (this.loadOnPlay_) {\n      this.tech_.off('play', this.loadOnPlay_);\n    }\n    ['AUDIO', 'SUBTITLES'].forEach(type => {\n      const groups = this.mediaTypes_[type].groups;\n      for (const id in groups) {\n        groups[id].forEach(group => {\n          if (group.playlistLoader) {\n            group.playlistLoader.dispose();\n          }\n        });\n      }\n    });\n    this.audioSegmentLoader_.dispose();\n    this.subtitleSegmentLoader_.dispose();\n    this.sourceUpdater_.dispose();\n    this.timelineChangeController_.dispose();\n    this.stopABRTimer_();\n    if (this.updateDuration_) {\n      this.mediaSource.removeEventListener('sourceopen', this.updateDuration_);\n    }\n    this.mediaSource.removeEventListener('durationchange', this.handleDurationChange_); // load the media source into the player\n\n    this.mediaSource.removeEventListener('sourceopen', this.handleSourceOpen_);\n    this.mediaSource.removeEventListener('sourceended', this.handleSourceEnded_);\n    this.off();\n  }\n  /**\n   * return the main playlist object if we have one\n   *\n   * @return {Object} the main playlist object that we parsed\n   */\n\n  main() {\n    return this.mainPlaylistLoader_.main;\n  }\n  /**\n   * return the currently selected playlist\n   *\n   * @return {Object} the currently selected playlist object that we parsed\n   */\n\n  media() {\n    // playlist loader will not return media if it has not been fully loaded\n    return this.mainPlaylistLoader_.media() || this.initialMedia_;\n  }\n  areMediaTypesKnown_() {\n    const usingAudioLoader = !!this.mediaTypes_.AUDIO.activePlaylistLoader;\n    const hasMainMediaInfo = !!this.mainSegmentLoader_.getCurrentMediaInfo_(); // if we are not using an audio loader, then we have audio media info\n    // otherwise check on the segment loader.\n\n    const hasAudioMediaInfo = !usingAudioLoader ? true : !!this.audioSegmentLoader_.getCurrentMediaInfo_(); // one or both loaders has not loaded sufficently to get codecs\n\n    if (!hasMainMediaInfo || !hasAudioMediaInfo) {\n      return false;\n    }\n    return true;\n  }\n  getCodecsOrExclude_() {\n    const media = {\n      main: this.mainSegmentLoader_.getCurrentMediaInfo_() || {},\n      audio: this.audioSegmentLoader_.getCurrentMediaInfo_() || {}\n    };\n    const playlist = this.mainSegmentLoader_.getPendingSegmentPlaylist() || this.media(); // set \"main\" media equal to video\n\n    media.video = media.main;\n    const playlistCodecs = codecsForPlaylist(this.main(), playlist);\n    const codecs = {};\n    const usingAudioLoader = !!this.mediaTypes_.AUDIO.activePlaylistLoader;\n    if (media.main.hasVideo) {\n      codecs.video = playlistCodecs.video || media.main.videoCodec || DEFAULT_VIDEO_CODEC;\n    }\n    if (media.main.isMuxed) {\n      codecs.video += `,${playlistCodecs.audio || media.main.audioCodec || DEFAULT_AUDIO_CODEC}`;\n    }\n    if (media.main.hasAudio && !media.main.isMuxed || media.audio.hasAudio || usingAudioLoader) {\n      codecs.audio = playlistCodecs.audio || media.main.audioCodec || media.audio.audioCodec || DEFAULT_AUDIO_CODEC; // set audio isFmp4 so we use the correct \"supports\" function below\n\n      media.audio.isFmp4 = media.main.hasAudio && !media.main.isMuxed ? media.main.isFmp4 : media.audio.isFmp4;\n    } // no codecs, no playback.\n\n    if (!codecs.audio && !codecs.video) {\n      this.excludePlaylist({\n        playlistToExclude: playlist,\n        error: {\n          message: 'Could not determine codecs for playlist.'\n        },\n        playlistExclusionDuration: Infinity\n      });\n      return;\n    } // fmp4 relies on browser support, while ts relies on muxer support\n\n    const supportFunction = (isFmp4, codec) => isFmp4 ? browserSupportsCodec(codec) : muxerSupportsCodec(codec);\n    const unsupportedCodecs = {};\n    let unsupportedAudio;\n    ['video', 'audio'].forEach(function (type) {\n      if (codecs.hasOwnProperty(type) && !supportFunction(media[type].isFmp4, codecs[type])) {\n        const supporter = media[type].isFmp4 ? 'browser' : 'muxer';\n        unsupportedCodecs[supporter] = unsupportedCodecs[supporter] || [];\n        unsupportedCodecs[supporter].push(codecs[type]);\n        if (type === 'audio') {\n          unsupportedAudio = supporter;\n        }\n      }\n    });\n    if (usingAudioLoader && unsupportedAudio && playlist.attributes.AUDIO) {\n      const audioGroup = playlist.attributes.AUDIO;\n      this.main().playlists.forEach(variant => {\n        const variantAudioGroup = variant.attributes && variant.attributes.AUDIO;\n        if (variantAudioGroup === audioGroup && variant !== playlist) {\n          variant.excludeUntil = Infinity;\n        }\n      });\n      this.logger_(`excluding audio group ${audioGroup} as ${unsupportedAudio} does not support codec(s): \"${codecs.audio}\"`);\n    } // if we have any unsupported codecs exclude this playlist.\n\n    if (Object.keys(unsupportedCodecs).length) {\n      const message = Object.keys(unsupportedCodecs).reduce((acc, supporter) => {\n        if (acc) {\n          acc += ', ';\n        }\n        acc += `${supporter} does not support codec(s): \"${unsupportedCodecs[supporter].join(',')}\"`;\n        return acc;\n      }, '') + '.';\n      this.excludePlaylist({\n        playlistToExclude: playlist,\n        error: {\n          internal: true,\n          message\n        },\n        playlistExclusionDuration: Infinity\n      });\n      return;\n    } // check if codec switching is happening\n\n    if (this.sourceUpdater_.hasCreatedSourceBuffers() && !this.sourceUpdater_.canChangeType()) {\n      const switchMessages = [];\n      ['video', 'audio'].forEach(type => {\n        const newCodec = (parseCodecs(this.sourceUpdater_.codecs[type] || '')[0] || {}).type;\n        const oldCodec = (parseCodecs(codecs[type] || '')[0] || {}).type;\n        if (newCodec && oldCodec && newCodec.toLowerCase() !== oldCodec.toLowerCase()) {\n          switchMessages.push(`\"${this.sourceUpdater_.codecs[type]}\" -> \"${codecs[type]}\"`);\n        }\n      });\n      if (switchMessages.length) {\n        this.excludePlaylist({\n          playlistToExclude: playlist,\n          error: {\n            message: `Codec switching not supported: ${switchMessages.join(', ')}.`,\n            internal: true\n          },\n          playlistExclusionDuration: Infinity\n        });\n        return;\n      }\n    } // TODO: when using the muxer shouldn't we just return\n    // the codecs that the muxer outputs?\n\n    return codecs;\n  }\n  /**\n   * Create source buffers and exlude any incompatible renditions.\n   *\n   * @private\n   */\n\n  tryToCreateSourceBuffers_() {\n    // media source is not ready yet or sourceBuffers are already\n    // created.\n    if (this.mediaSource.readyState !== 'open' || this.sourceUpdater_.hasCreatedSourceBuffers()) {\n      return;\n    }\n    if (!this.areMediaTypesKnown_()) {\n      return;\n    }\n    const codecs = this.getCodecsOrExclude_(); // no codecs means that the playlist was excluded\n\n    if (!codecs) {\n      return;\n    }\n    this.sourceUpdater_.createSourceBuffers(codecs);\n    const codecString = [codecs.video, codecs.audio].filter(Boolean).join(',');\n    this.excludeIncompatibleVariants_(codecString);\n  }\n  /**\n   * Excludes playlists with codecs that are unsupported by the muxer and browser.\n   */\n\n  excludeUnsupportedVariants_() {\n    const playlists = this.main().playlists;\n    const ids = []; // TODO: why don't we have a property to loop through all\n    // playlist? Why did we ever mix indexes and keys?\n\n    Object.keys(playlists).forEach(key => {\n      const variant = playlists[key]; // check if we already processed this playlist.\n\n      if (ids.indexOf(variant.id) !== -1) {\n        return;\n      }\n      ids.push(variant.id);\n      const codecs = codecsForPlaylist(this.main, variant);\n      const unsupported = [];\n      if (codecs.audio && !muxerSupportsCodec(codecs.audio) && !browserSupportsCodec(codecs.audio)) {\n        unsupported.push(`audio codec ${codecs.audio}`);\n      }\n      if (codecs.video && !muxerSupportsCodec(codecs.video) && !browserSupportsCodec(codecs.video)) {\n        unsupported.push(`video codec ${codecs.video}`);\n      }\n      if (codecs.text && codecs.text === 'stpp.ttml.im1t') {\n        unsupported.push(`text codec ${codecs.text}`);\n      }\n      if (unsupported.length) {\n        variant.excludeUntil = Infinity;\n        this.logger_(`excluding ${variant.id} for unsupported: ${unsupported.join(', ')}`);\n      }\n    });\n  }\n  /**\n   * Exclude playlists that are known to be codec or\n   * stream-incompatible with the SourceBuffer configuration. For\n   * instance, Media Source Extensions would cause the video element to\n   * stall waiting for video data if you switched from a variant with\n   * video and audio to an audio-only one.\n   *\n   * @param {Object} media a media playlist compatible with the current\n   * set of SourceBuffers. Variants in the current main playlist that\n   * do not appear to have compatible codec or stream configurations\n   * will be excluded from the default playlist selection algorithm\n   * indefinitely.\n   * @private\n   */\n\n  excludeIncompatibleVariants_(codecString) {\n    const ids = [];\n    const playlists = this.main().playlists;\n    const codecs = unwrapCodecList(parseCodecs(codecString));\n    const codecCount_ = codecCount(codecs);\n    const videoDetails = codecs.video && parseCodecs(codecs.video)[0] || null;\n    const audioDetails = codecs.audio && parseCodecs(codecs.audio)[0] || null;\n    Object.keys(playlists).forEach(key => {\n      const variant = playlists[key]; // check if we already processed this playlist.\n      // or it if it is already excluded forever.\n\n      if (ids.indexOf(variant.id) !== -1 || variant.excludeUntil === Infinity) {\n        return;\n      }\n      ids.push(variant.id);\n      const exclusionReasons = []; // get codecs from the playlist for this variant\n\n      const variantCodecs = codecsForPlaylist(this.mainPlaylistLoader_.main, variant);\n      const variantCodecCount = codecCount(variantCodecs); // if no codecs are listed, we cannot determine that this\n      // variant is incompatible. Wait for mux.js to probe\n\n      if (!variantCodecs.audio && !variantCodecs.video) {\n        return;\n      } // TODO: we can support this by removing the\n      // old media source and creating a new one, but it will take some work.\n      // The number of streams cannot change\n\n      if (variantCodecCount !== codecCount_) {\n        exclusionReasons.push(`codec count \"${variantCodecCount}\" !== \"${codecCount_}\"`);\n      } // only exclude playlists by codec change, if codecs cannot switch\n      // during playback.\n\n      if (!this.sourceUpdater_.canChangeType()) {\n        const variantVideoDetails = variantCodecs.video && parseCodecs(variantCodecs.video)[0] || null;\n        const variantAudioDetails = variantCodecs.audio && parseCodecs(variantCodecs.audio)[0] || null; // the video codec cannot change\n\n        if (variantVideoDetails && videoDetails && variantVideoDetails.type.toLowerCase() !== videoDetails.type.toLowerCase()) {\n          exclusionReasons.push(`video codec \"${variantVideoDetails.type}\" !== \"${videoDetails.type}\"`);\n        } // the audio codec cannot change\n\n        if (variantAudioDetails && audioDetails && variantAudioDetails.type.toLowerCase() !== audioDetails.type.toLowerCase()) {\n          exclusionReasons.push(`audio codec \"${variantAudioDetails.type}\" !== \"${audioDetails.type}\"`);\n        }\n      }\n      if (exclusionReasons.length) {\n        variant.excludeUntil = Infinity;\n        this.logger_(`excluding ${variant.id}: ${exclusionReasons.join(' && ')}`);\n      }\n    });\n  }\n  updateAdCues_(media) {\n    let offset = 0;\n    const seekable = this.seekable();\n    if (seekable.length) {\n      offset = seekable.start(0);\n    }\n    updateAdCues(media, this.cueTagsTrack_, offset);\n  }\n  /**\n   * Calculates the desired forward buffer length based on current time\n   *\n   * @return {number} Desired forward buffer length in seconds\n   */\n\n  goalBufferLength() {\n    const currentTime = this.tech_.currentTime();\n    const initial = Config.GOAL_BUFFER_LENGTH;\n    const rate = Config.GOAL_BUFFER_LENGTH_RATE;\n    const max = Math.max(initial, Config.MAX_GOAL_BUFFER_LENGTH);\n    return Math.min(initial + currentTime * rate, max);\n  }\n  /**\n   * Calculates the desired buffer low water line based on current time\n   *\n   * @return {number} Desired buffer low water line in seconds\n   */\n\n  bufferLowWaterLine() {\n    const currentTime = this.tech_.currentTime();\n    const initial = Config.BUFFER_LOW_WATER_LINE;\n    const rate = Config.BUFFER_LOW_WATER_LINE_RATE;\n    const max = Math.max(initial, Config.MAX_BUFFER_LOW_WATER_LINE);\n    const newMax = Math.max(initial, Config.EXPERIMENTAL_MAX_BUFFER_LOW_WATER_LINE);\n    return Math.min(initial + currentTime * rate, this.bufferBasedABR ? newMax : max);\n  }\n  bufferHighWaterLine() {\n    return Config.BUFFER_HIGH_WATER_LINE;\n  }\n  addDateRangesToTextTrack_(dateRanges) {\n    createMetadataTrackIfNotExists(this.inbandTextTracks_, 'com.apple.streaming', this.tech_);\n    addDateRangeMetadata({\n      inbandTextTracks: this.inbandTextTracks_,\n      dateRanges\n    });\n  }\n  addMetadataToTextTrack(dispatchType, metadataArray, videoDuration) {\n    const timestampOffset = this.sourceUpdater_.videoBuffer ? this.sourceUpdater_.videoTimestampOffset() : this.sourceUpdater_.audioTimestampOffset(); // There's potentially an issue where we could double add metadata if there's a muxed\n    // audio/video source with a metadata track, and an alt audio with a metadata track.\n    // However, this probably won't happen, and if it does it can be handled then.\n\n    createMetadataTrackIfNotExists(this.inbandTextTracks_, dispatchType, this.tech_);\n    addMetadata({\n      inbandTextTracks: this.inbandTextTracks_,\n      metadataArray,\n      timestampOffset,\n      videoDuration\n    });\n  }\n  /**\n   * Utility for getting the pathway or service location from an HLS or DASH playlist.\n   *\n   * @param {Object} playlist for getting pathway from.\n   * @return the pathway attribute of a playlist\n   */\n\n  pathwayAttribute_(playlist) {\n    return playlist.attributes['PATHWAY-ID'] || playlist.attributes.serviceLocation;\n  }\n  /**\n   * Initialize available pathways and apply the tag properties.\n   */\n\n  initContentSteeringController_() {\n    const main = this.main();\n    if (!main.contentSteering) {\n      return;\n    }\n    for (const playlist of main.playlists) {\n      this.contentSteeringController_.addAvailablePathway(this.pathwayAttribute_(playlist));\n    }\n    this.contentSteeringController_.assignTagProperties(main.uri, main.contentSteering); // request the steering manifest immediately if queryBeforeStart is set.\n\n    if (this.contentSteeringController_.queryBeforeStart) {\n      // When queryBeforeStart is true, initial request should omit steering parameters.\n      this.contentSteeringController_.requestSteeringManifest(true);\n      return;\n    } // otherwise start content steering after playback starts\n\n    this.tech_.one('canplay', () => {\n      this.contentSteeringController_.requestSteeringManifest();\n    });\n  }\n  /**\n   * Reset the content steering controller and re-init.\n   */\n\n  resetContentSteeringController_() {\n    this.contentSteeringController_.clearAvailablePathways();\n    this.contentSteeringController_.dispose();\n    this.initContentSteeringController_();\n  }\n  /**\n   * Attaches the listeners for content steering.\n   */\n\n  attachContentSteeringListeners_() {\n    this.contentSteeringController_.on('content-steering', this.excludeThenChangePathway_.bind(this));\n    if (this.sourceType_ === 'dash') {\n      this.mainPlaylistLoader_.on('loadedplaylist', () => {\n        const main = this.main(); // check if steering tag or pathways changed.\n\n        const didDashTagChange = this.contentSteeringController_.didDASHTagChange(main.uri, main.contentSteering);\n        const didPathwaysChange = () => {\n          const availablePathways = this.contentSteeringController_.getAvailablePathways();\n          const newPathways = [];\n          for (const playlist of main.playlists) {\n            const serviceLocation = playlist.attributes.serviceLocation;\n            if (serviceLocation) {\n              newPathways.push(serviceLocation);\n              if (!availablePathways.has(serviceLocation)) {\n                return true;\n              }\n            }\n          } // If we have no new serviceLocations and previously had availablePathways\n\n          if (!newPathways.length && availablePathways.size) {\n            return true;\n          }\n          return false;\n        };\n        if (didDashTagChange || didPathwaysChange()) {\n          this.resetContentSteeringController_();\n        }\n      });\n    }\n  }\n  /**\n   * Simple exclude and change playlist logic for content steering.\n   */\n\n  excludeThenChangePathway_() {\n    const currentPathway = this.contentSteeringController_.getPathway();\n    if (!currentPathway) {\n      return;\n    }\n    this.handlePathwayClones_();\n    const main = this.main();\n    const playlists = main.playlists;\n    const ids = new Set();\n    let didEnablePlaylists = false;\n    Object.keys(playlists).forEach(key => {\n      const variant = playlists[key];\n      const pathwayId = this.pathwayAttribute_(variant);\n      const differentPathwayId = pathwayId && currentPathway !== pathwayId;\n      const steeringExclusion = variant.excludeUntil === Infinity && variant.lastExcludeReason_ === 'content-steering';\n      if (steeringExclusion && !differentPathwayId) {\n        delete variant.excludeUntil;\n        delete variant.lastExcludeReason_;\n        didEnablePlaylists = true;\n      }\n      const noExcludeUntil = !variant.excludeUntil && variant.excludeUntil !== Infinity;\n      const shouldExclude = !ids.has(variant.id) && differentPathwayId && noExcludeUntil;\n      if (!shouldExclude) {\n        return;\n      }\n      ids.add(variant.id);\n      variant.excludeUntil = Infinity;\n      variant.lastExcludeReason_ = 'content-steering'; // TODO: kind of spammy, maybe move this.\n\n      this.logger_(`excluding ${variant.id} for ${variant.lastExcludeReason_}`);\n    });\n    if (this.contentSteeringController_.manifestType_ === 'DASH') {\n      Object.keys(this.mediaTypes_).forEach(key => {\n        const type = this.mediaTypes_[key];\n        if (type.activePlaylistLoader) {\n          const currentPlaylist = type.activePlaylistLoader.media_; // Check if the current media playlist matches the current CDN\n\n          if (currentPlaylist && currentPlaylist.attributes.serviceLocation !== currentPathway) {\n            didEnablePlaylists = true;\n          }\n        }\n      });\n    }\n    if (didEnablePlaylists) {\n      this.changeSegmentPathway_();\n    }\n  }\n  /**\n   * Add, update, or delete playlists and media groups for\n   * the pathway clones for HLS Content Steering.\n   *\n   * See https://datatracker.ietf.org/doc/draft-pantos-hls-rfc8216bis/\n   *\n   * NOTE: Pathway cloning does not currently support the `PER_VARIANT_URIS` and\n   * `PER_RENDITION_URIS` as we do not handle `STABLE-VARIANT-ID` or\n   * `STABLE-RENDITION-ID` values.\n   */\n\n  handlePathwayClones_() {\n    const main = this.main();\n    const playlists = main.playlists;\n    const currentPathwayClones = this.contentSteeringController_.currentPathwayClones;\n    const nextPathwayClones = this.contentSteeringController_.nextPathwayClones;\n    const hasClones = currentPathwayClones && currentPathwayClones.size || nextPathwayClones && nextPathwayClones.size;\n    if (!hasClones) {\n      return;\n    }\n    for (const [id, clone] of currentPathwayClones.entries()) {\n      const newClone = nextPathwayClones.get(id); // Delete the old pathway clone.\n\n      if (!newClone) {\n        this.mainPlaylistLoader_.updateOrDeleteClone(clone);\n        this.contentSteeringController_.excludePathway(id);\n      }\n    }\n    for (const [id, clone] of nextPathwayClones.entries()) {\n      const oldClone = currentPathwayClones.get(id); // Create a new pathway if it is a new pathway clone object.\n\n      if (!oldClone) {\n        const playlistsToClone = playlists.filter(p => {\n          return p.attributes['PATHWAY-ID'] === clone['BASE-ID'];\n        });\n        playlistsToClone.forEach(p => {\n          this.mainPlaylistLoader_.addClonePathway(clone, p);\n        });\n        this.contentSteeringController_.addAvailablePathway(id);\n        continue;\n      } // There have not been changes to the pathway clone object, so skip.\n\n      if (this.equalPathwayClones_(oldClone, clone)) {\n        continue;\n      } // Update a preexisting cloned pathway.\n      // True is set for the update flag.\n\n      this.mainPlaylistLoader_.updateOrDeleteClone(clone, true);\n      this.contentSteeringController_.addAvailablePathway(id);\n    } // Deep copy contents of next to current pathways.\n\n    this.contentSteeringController_.currentPathwayClones = new Map(JSON.parse(JSON.stringify([...nextPathwayClones])));\n  }\n  /**\n   * Determines whether two pathway clone objects are equivalent.\n   *\n   * @param {Object} a The first pathway clone object.\n   * @param {Object} b The second pathway clone object.\n   * @return {boolean} True if the pathway clone objects are equal, false otherwise.\n   */\n\n  equalPathwayClones_(a, b) {\n    if (a['BASE-ID'] !== b['BASE-ID'] || a.ID !== b.ID || a['URI-REPLACEMENT'].HOST !== b['URI-REPLACEMENT'].HOST) {\n      return false;\n    }\n    const aParams = a['URI-REPLACEMENT'].PARAMS;\n    const bParams = b['URI-REPLACEMENT'].PARAMS; // We need to iterate through both lists of params because one could be\n    // missing a parameter that the other has.\n\n    for (const p in aParams) {\n      if (aParams[p] !== bParams[p]) {\n        return false;\n      }\n    }\n    for (const p in bParams) {\n      if (aParams[p] !== bParams[p]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  /**\n   * Changes the current playlists for audio, video and subtitles after a new pathway\n   * is chosen from content steering.\n   */\n\n  changeSegmentPathway_() {\n    const nextPlaylist = this.selectPlaylist();\n    this.pauseLoading(); // Switch audio and text track playlists if necessary in DASH\n\n    if (this.contentSteeringController_.manifestType_ === 'DASH') {\n      this.switchMediaForDASHContentSteering_();\n    }\n    this.switchMedia_(nextPlaylist, 'content-steering');\n  }\n  /**\n   * Iterates through playlists and check their keyId set and compare with the\n   * keyStatusMap, only enable playlists that have a usable key. If the playlist\n   * has no keyId leave it enabled by default.\n   */\n\n  excludeNonUsablePlaylistsByKeyId_() {\n    if (!this.mainPlaylistLoader_ || !this.mainPlaylistLoader_.main) {\n      return;\n    }\n    let nonUsableKeyStatusCount = 0;\n    const NON_USABLE = 'non-usable';\n    this.mainPlaylistLoader_.main.playlists.forEach(playlist => {\n      const keyIdSet = this.mainPlaylistLoader_.getKeyIdSet(playlist); // If the playlist doesn't have keyIDs lets not exclude it.\n\n      if (!keyIdSet || !keyIdSet.size) {\n        return;\n      }\n      keyIdSet.forEach(key => {\n        const USABLE = 'usable';\n        const hasUsableKeyStatus = this.keyStatusMap_.has(key) && this.keyStatusMap_.get(key) === USABLE;\n        const nonUsableExclusion = playlist.lastExcludeReason_ === NON_USABLE && playlist.excludeUntil === Infinity;\n        if (!hasUsableKeyStatus) {\n          // Only exclude playlists that haven't already been excluded as non-usable.\n          if (playlist.excludeUntil !== Infinity && playlist.lastExcludeReason_ !== NON_USABLE) {\n            playlist.excludeUntil = Infinity;\n            playlist.lastExcludeReason_ = NON_USABLE;\n            this.logger_(`excluding playlist ${playlist.id} because the key ID ${key} doesn't exist in the keyStatusMap or is not ${USABLE}`);\n          } // count all nonUsableKeyStatus\n\n          nonUsableKeyStatusCount++;\n        } else if (hasUsableKeyStatus && nonUsableExclusion) {\n          delete playlist.excludeUntil;\n          delete playlist.lastExcludeReason_;\n          this.logger_(`enabling playlist ${playlist.id} because key ID ${key} is ${USABLE}`);\n        }\n      });\n    }); // If for whatever reason every playlist has a non usable key status. Lets try re-including the SD renditions as a failsafe.\n\n    if (nonUsableKeyStatusCount >= this.mainPlaylistLoader_.main.playlists.length) {\n      this.mainPlaylistLoader_.main.playlists.forEach(playlist => {\n        const isNonHD = playlist && playlist.attributes && playlist.attributes.RESOLUTION && playlist.attributes.RESOLUTION.height < 720;\n        const excludedForNonUsableKey = playlist.excludeUntil === Infinity && playlist.lastExcludeReason_ === NON_USABLE;\n        if (isNonHD && excludedForNonUsableKey) {\n          // Only delete the excludeUntil so we don't try and re-exclude these playlists.\n          delete playlist.excludeUntil;\n          videojs.log.warn(`enabling non-HD playlist ${playlist.id} because all playlists were excluded due to ${NON_USABLE} key IDs`);\n        }\n      });\n    }\n  }\n  /**\n   * Adds a keystatus to the keystatus map, tries to convert to string if necessary.\n   *\n   * @param {any} keyId the keyId to add a status for\n   * @param {string} status the status of the keyId\n   */\n\n  addKeyStatus_(keyId, status) {\n    const isString = typeof keyId === 'string';\n    const keyIdHexString = isString ? keyId : bufferToHexString(keyId);\n    const formattedKeyIdString = keyIdHexString.slice(0, 32).toLowerCase();\n    this.logger_(`KeyStatus '${status}' with key ID ${formattedKeyIdString} added to the keyStatusMap`);\n    this.keyStatusMap_.set(formattedKeyIdString, status);\n  }\n  /**\n   * Utility function for adding key status to the keyStatusMap and filtering usable encrypted playlists.\n   *\n   * @param {any} keyId the keyId from the keystatuschange event\n   * @param {string} status the key status string\n   */\n\n  updatePlaylistByKeyStatus(keyId, status) {\n    this.addKeyStatus_(keyId, status);\n    if (!this.waitingForFastQualityPlaylistReceived_) {\n      this.excludeNonUsableThenChangePlaylist_();\n    } // Listen to loadedplaylist with a single listener and check for new contentProtection elements when a playlist is updated.\n\n    this.mainPlaylistLoader_.off('loadedplaylist', this.excludeNonUsableThenChangePlaylist_.bind(this));\n    this.mainPlaylistLoader_.on('loadedplaylist', this.excludeNonUsableThenChangePlaylist_.bind(this));\n  }\n  excludeNonUsableThenChangePlaylist_() {\n    this.excludeNonUsablePlaylistsByKeyId_();\n    this.fastQualityChange_();\n  }\n}\n\n/**\n * Returns a function that acts as the Enable/disable playlist function.\n *\n * @param {PlaylistLoader} loader - The main playlist loader\n * @param {string} playlistID - id of the playlist\n * @param {Function} changePlaylistFn - A function to be called after a\n * playlist's enabled-state has been changed. Will NOT be called if a\n * playlist's enabled-state is unchanged\n * @param {boolean=} enable - Value to set the playlist enabled-state to\n * or if undefined returns the current enabled-state for the playlist\n * @return {Function} Function for setting/getting enabled\n */\n\nconst enableFunction = (loader, playlistID, changePlaylistFn) => enable => {\n  const playlist = loader.main.playlists[playlistID];\n  const incompatible = isIncompatible(playlist);\n  const currentlyEnabled = isEnabled(playlist);\n  if (typeof enable === 'undefined') {\n    return currentlyEnabled;\n  }\n  if (enable) {\n    delete playlist.disabled;\n  } else {\n    playlist.disabled = true;\n  }\n  if (enable !== currentlyEnabled && !incompatible) {\n    // Ensure the outside world knows about our changes\n    changePlaylistFn();\n    if (enable) {\n      loader.trigger('renditionenabled');\n    } else {\n      loader.trigger('renditiondisabled');\n    }\n  }\n  return enable;\n};\n/**\n * The representation object encapsulates the publicly visible information\n * in a media playlist along with a setter/getter-type function (enabled)\n * for changing the enabled-state of a particular playlist entry\n *\n * @class Representation\n */\n\nclass Representation {\n  constructor(vhsHandler, playlist, id) {\n    const {\n      playlistController_: pc\n    } = vhsHandler;\n    const qualityChangeFunction = pc.fastQualityChange_.bind(pc); // some playlist attributes are optional\n\n    if (playlist.attributes) {\n      const resolution = playlist.attributes.RESOLUTION;\n      this.width = resolution && resolution.width;\n      this.height = resolution && resolution.height;\n      this.bandwidth = playlist.attributes.BANDWIDTH;\n      this.frameRate = playlist.attributes['FRAME-RATE'];\n    }\n    this.codecs = codecsForPlaylist(pc.main(), playlist);\n    this.playlist = playlist; // The id is simply the ordinality of the media playlist\n    // within the main playlist\n\n    this.id = id; // Partially-apply the enableFunction to create a playlist-\n    // specific variant\n\n    this.enabled = enableFunction(vhsHandler.playlists, playlist.id, qualityChangeFunction);\n  }\n}\n/**\n * A mixin function that adds the `representations` api to an instance\n * of the VhsHandler class\n *\n * @param {VhsHandler} vhsHandler - An instance of VhsHandler to add the\n * representation API into\n */\n\nconst renditionSelectionMixin = function (vhsHandler) {\n  // Add a single API-specific function to the VhsHandler instance\n  vhsHandler.representations = () => {\n    const main = vhsHandler.playlistController_.main();\n    const playlists = isAudioOnly(main) ? vhsHandler.playlistController_.getAudioTrackPlaylists_() : main.playlists;\n    if (!playlists) {\n      return [];\n    }\n    return playlists.filter(media => !isIncompatible(media)).map((e, i) => new Representation(vhsHandler, e, e.id));\n  };\n};\n\n/**\n * @file playback-watcher.js\n *\n * Playback starts, and now my watch begins. It shall not end until my death. I shall\n * take no wait, hold no uncleared timeouts, father no bad seeks. I shall wear no crowns\n * and win no glory. I shall live and die at my post. I am the corrector of the underflow.\n * I am the watcher of gaps. I am the shield that guards the realms of seekable. I pledge\n * my life and honor to the Playback Watch, for this Player and all the Players to come.\n */\n\nconst timerCancelEvents = ['seeking', 'seeked', 'pause', 'playing', 'error'];\n/**\n * @class PlaybackWatcher\n */\n\nclass PlaybackWatcher {\n  /**\n   * Represents an PlaybackWatcher object.\n   *\n   * @class\n   * @param {Object} options an object that includes the tech and settings\n   */\n  constructor(options) {\n    this.playlistController_ = options.playlistController;\n    this.tech_ = options.tech;\n    this.seekable = options.seekable;\n    this.allowSeeksWithinUnsafeLiveWindow = options.allowSeeksWithinUnsafeLiveWindow;\n    this.liveRangeSafeTimeDelta = options.liveRangeSafeTimeDelta;\n    this.media = options.media;\n    this.consecutiveUpdates = 0;\n    this.lastRecordedTime = null;\n    this.checkCurrentTimeTimeout_ = null;\n    this.logger_ = logger('PlaybackWatcher');\n    this.logger_('initialize');\n    const playHandler = () => this.monitorCurrentTime_();\n    const canPlayHandler = () => this.monitorCurrentTime_();\n    const waitingHandler = () => this.techWaiting_();\n    const cancelTimerHandler = () => this.resetTimeUpdate_();\n    const pc = this.playlistController_;\n    const loaderTypes = ['main', 'subtitle', 'audio'];\n    const loaderChecks = {};\n    loaderTypes.forEach(type => {\n      loaderChecks[type] = {\n        reset: () => this.resetSegmentDownloads_(type),\n        updateend: () => this.checkSegmentDownloads_(type)\n      };\n      pc[`${type}SegmentLoader_`].on('appendsdone', loaderChecks[type].updateend); // If a rendition switch happens during a playback stall where the buffer\n      // isn't changing we want to reset. We cannot assume that the new rendition\n      // will also be stalled, until after new appends.\n\n      pc[`${type}SegmentLoader_`].on('playlistupdate', loaderChecks[type].reset); // Playback stalls should not be detected right after seeking.\n      // This prevents one segment playlists (single vtt or single segment content)\n      // from being detected as stalling. As the buffer will not change in those cases, since\n      // the buffer is the entire video duration.\n\n      this.tech_.on(['seeked', 'seeking'], loaderChecks[type].reset);\n    });\n    /**\n     * We check if a seek was into a gap through the following steps:\n     * 1. We get a seeking event and we do not get a seeked event. This means that\n     *    a seek was attempted but not completed.\n     * 2. We run `fixesBadSeeks_` on segment loader appends. This means that we already\n     *    removed everything from our buffer and appended a segment, and should be ready\n     *    to check for gaps.\n     */\n\n    const setSeekingHandlers = fn => {\n      ['main', 'audio'].forEach(type => {\n        pc[`${type}SegmentLoader_`][fn]('appended', this.seekingAppendCheck_);\n      });\n    };\n    this.seekingAppendCheck_ = () => {\n      if (this.fixesBadSeeks_()) {\n        this.consecutiveUpdates = 0;\n        this.lastRecordedTime = this.tech_.currentTime();\n        setSeekingHandlers('off');\n      }\n    };\n    this.clearSeekingAppendCheck_ = () => setSeekingHandlers('off');\n    this.watchForBadSeeking_ = () => {\n      this.clearSeekingAppendCheck_();\n      setSeekingHandlers('on');\n    };\n    this.tech_.on('seeked', this.clearSeekingAppendCheck_);\n    this.tech_.on('seeking', this.watchForBadSeeking_);\n    this.tech_.on('waiting', waitingHandler);\n    this.tech_.on(timerCancelEvents, cancelTimerHandler);\n    this.tech_.on('canplay', canPlayHandler);\n    /*\n      An edge case exists that results in gaps not being skipped when they exist at the beginning of a stream. This case\n      is surfaced in one of two ways:\n       1)  The `waiting` event is fired before the player has buffered content, making it impossible\n          to find or skip the gap. The `waiting` event is followed by a `play` event. On first play\n          we can check if playback is stalled due to a gap, and skip the gap if necessary.\n      2)  A source with a gap at the beginning of the stream is loaded programatically while the player\n          is in a playing state. To catch this case, it's important that our one-time play listener is setup\n          even if the player is in a playing state\n    */\n\n    this.tech_.one('play', playHandler); // Define the dispose function to clean up our events\n\n    this.dispose = () => {\n      this.clearSeekingAppendCheck_();\n      this.logger_('dispose');\n      this.tech_.off('waiting', waitingHandler);\n      this.tech_.off(timerCancelEvents, cancelTimerHandler);\n      this.tech_.off('canplay', canPlayHandler);\n      this.tech_.off('play', playHandler);\n      this.tech_.off('seeking', this.watchForBadSeeking_);\n      this.tech_.off('seeked', this.clearSeekingAppendCheck_);\n      loaderTypes.forEach(type => {\n        pc[`${type}SegmentLoader_`].off('appendsdone', loaderChecks[type].updateend);\n        pc[`${type}SegmentLoader_`].off('playlistupdate', loaderChecks[type].reset);\n        this.tech_.off(['seeked', 'seeking'], loaderChecks[type].reset);\n      });\n      if (this.checkCurrentTimeTimeout_) {\n        window$1.clearTimeout(this.checkCurrentTimeTimeout_);\n      }\n      this.resetTimeUpdate_();\n    };\n  }\n  /**\n   * Periodically check current time to see if playback stopped\n   *\n   * @private\n   */\n\n  monitorCurrentTime_() {\n    this.checkCurrentTime_();\n    if (this.checkCurrentTimeTimeout_) {\n      window$1.clearTimeout(this.checkCurrentTimeTimeout_);\n    } // 42 = 24 fps // 250 is what Webkit uses // FF uses 15\n\n    this.checkCurrentTimeTimeout_ = window$1.setTimeout(this.monitorCurrentTime_.bind(this), 250);\n  }\n  /**\n   * Reset stalled download stats for a specific type of loader\n   *\n   * @param {string} type\n   *        The segment loader type to check.\n   *\n   * @listens SegmentLoader#playlistupdate\n   * @listens Tech#seeking\n   * @listens Tech#seeked\n   */\n\n  resetSegmentDownloads_(type) {\n    const loader = this.playlistController_[`${type}SegmentLoader_`];\n    if (this[`${type}StalledDownloads_`] > 0) {\n      this.logger_(`resetting possible stalled download count for ${type} loader`);\n    }\n    this[`${type}StalledDownloads_`] = 0;\n    this[`${type}Buffered_`] = loader.buffered_();\n  }\n  /**\n   * Checks on every segment `appendsdone` to see\n   * if segment appends are making progress. If they are not\n   * and we are still downloading bytes. We exclude the playlist.\n   *\n   * @param {string} type\n   *        The segment loader type to check.\n   *\n   * @listens SegmentLoader#appendsdone\n   */\n\n  checkSegmentDownloads_(type) {\n    const pc = this.playlistController_;\n    const loader = pc[`${type}SegmentLoader_`];\n    const buffered = loader.buffered_();\n    const isBufferedDifferent = isRangeDifferent(this[`${type}Buffered_`], buffered);\n    this[`${type}Buffered_`] = buffered; // if another watcher is going to fix the issue or\n    // the buffered value for this loader changed\n    // appends are working\n\n    if (isBufferedDifferent) {\n      this.resetSegmentDownloads_(type);\n      return;\n    }\n    this[`${type}StalledDownloads_`]++;\n    this.logger_(`found #${this[`${type}StalledDownloads_`]} ${type} appends that did not increase buffer (possible stalled download)`, {\n      playlistId: loader.playlist_ && loader.playlist_.id,\n      buffered: timeRangesToArray(buffered)\n    }); // after 10 possibly stalled appends with no reset, exclude\n\n    if (this[`${type}StalledDownloads_`] < 10) {\n      return;\n    }\n    this.logger_(`${type} loader stalled download exclusion`);\n    this.resetSegmentDownloads_(type);\n    this.tech_.trigger({\n      type: 'usage',\n      name: `vhs-${type}-download-exclusion`\n    });\n    if (type === 'subtitle') {\n      return;\n    } // TODO: should we exclude audio tracks rather than main tracks\n    // when type is audio?\n\n    pc.excludePlaylist({\n      error: {\n        message: `Excessive ${type} segment downloading detected.`\n      },\n      playlistExclusionDuration: Infinity\n    });\n  }\n  /**\n   * The purpose of this function is to emulate the \"waiting\" event on\n   * browsers that do not emit it when they are waiting for more\n   * data to continue playback\n   *\n   * @private\n   */\n\n  checkCurrentTime_() {\n    if (this.tech_.paused() || this.tech_.seeking()) {\n      return;\n    }\n    const currentTime = this.tech_.currentTime();\n    const buffered = this.tech_.buffered();\n    if (this.lastRecordedTime === currentTime && (!buffered.length || currentTime + SAFE_TIME_DELTA >= buffered.end(buffered.length - 1))) {\n      // If current time is at the end of the final buffered region, then any playback\n      // stall is most likely caused by buffering in a low bandwidth environment. The tech\n      // should fire a `waiting` event in this scenario, but due to browser and tech\n      // inconsistencies. Calling `techWaiting_` here allows us to simulate\n      // responding to a native `waiting` event when the tech fails to emit one.\n      return this.techWaiting_();\n    }\n    if (this.consecutiveUpdates >= 5 && currentTime === this.lastRecordedTime) {\n      this.consecutiveUpdates++;\n      this.waiting_();\n    } else if (currentTime === this.lastRecordedTime) {\n      this.consecutiveUpdates++;\n    } else {\n      this.consecutiveUpdates = 0;\n      this.lastRecordedTime = currentTime;\n    }\n  }\n  /**\n   * Resets the 'timeupdate' mechanism designed to detect that we are stalled\n   *\n   * @private\n   */\n\n  resetTimeUpdate_() {\n    this.consecutiveUpdates = 0;\n  }\n  /**\n   * Fixes situations where there's a bad seek\n   *\n   * @return {boolean} whether an action was taken to fix the seek\n   * @private\n   */\n\n  fixesBadSeeks_() {\n    const seeking = this.tech_.seeking();\n    if (!seeking) {\n      return false;\n    } // TODO: It's possible that these seekable checks should be moved out of this function\n    // and into a function that runs on seekablechange. It's also possible that we only need\n    // afterSeekableWindow as the buffered check at the bottom is good enough to handle before\n    // seekable range.\n\n    const seekable = this.seekable();\n    const currentTime = this.tech_.currentTime();\n    const isAfterSeekableRange = this.afterSeekableWindow_(seekable, currentTime, this.media(), this.allowSeeksWithinUnsafeLiveWindow);\n    let seekTo;\n    if (isAfterSeekableRange) {\n      const seekableEnd = seekable.end(seekable.length - 1); // sync to live point (if VOD, our seekable was updated and we're simply adjusting)\n\n      seekTo = seekableEnd;\n    }\n    if (this.beforeSeekableWindow_(seekable, currentTime)) {\n      const seekableStart = seekable.start(0); // sync to the beginning of the live window\n      // provide a buffer of .1 seconds to handle rounding/imprecise numbers\n\n      seekTo = seekableStart + (\n      // if the playlist is too short and the seekable range is an exact time (can\n      // happen in live with a 3 segment playlist), then don't use a time delta\n      seekableStart === seekable.end(0) ? 0 : SAFE_TIME_DELTA);\n    }\n    if (typeof seekTo !== 'undefined') {\n      this.logger_(`Trying to seek outside of seekable at time ${currentTime} with ` + `seekable range ${printableRange(seekable)}. Seeking to ` + `${seekTo}.`);\n      this.tech_.setCurrentTime(seekTo);\n      return true;\n    }\n    const sourceUpdater = this.playlistController_.sourceUpdater_;\n    const buffered = this.tech_.buffered();\n    const audioBuffered = sourceUpdater.audioBuffer ? sourceUpdater.audioBuffered() : null;\n    const videoBuffered = sourceUpdater.videoBuffer ? sourceUpdater.videoBuffered() : null;\n    const media = this.media(); // verify that at least two segment durations or one part duration have been\n    // appended before checking for a gap.\n\n    const minAppendedDuration = media.partTargetDuration ? media.partTargetDuration : (media.targetDuration - TIME_FUDGE_FACTOR) * 2; // verify that at least two segment durations have been\n    // appended before checking for a gap.\n\n    const bufferedToCheck = [audioBuffered, videoBuffered];\n    for (let i = 0; i < bufferedToCheck.length; i++) {\n      // skip null buffered\n      if (!bufferedToCheck[i]) {\n        continue;\n      }\n      const timeAhead = timeAheadOf(bufferedToCheck[i], currentTime); // if we are less than two video/audio segment durations or one part\n      // duration behind we haven't appended enough to call this a bad seek.\n\n      if (timeAhead < minAppendedDuration) {\n        return false;\n      }\n    }\n    const nextRange = findNextRange(buffered, currentTime); // we have appended enough content, but we don't have anything buffered\n    // to seek over the gap\n\n    if (nextRange.length === 0) {\n      return false;\n    }\n    seekTo = nextRange.start(0) + SAFE_TIME_DELTA;\n    this.logger_(`Buffered region starts (${nextRange.start(0)}) ` + ` just beyond seek point (${currentTime}). Seeking to ${seekTo}.`);\n    this.tech_.setCurrentTime(seekTo);\n    return true;\n  }\n  /**\n   * Handler for situations when we determine the player is waiting.\n   *\n   * @private\n   */\n\n  waiting_() {\n    if (this.techWaiting_()) {\n      return;\n    } // All tech waiting checks failed. Use last resort correction\n\n    const currentTime = this.tech_.currentTime();\n    const buffered = this.tech_.buffered();\n    const currentRange = findRange(buffered, currentTime); // Sometimes the player can stall for unknown reasons within a contiguous buffered\n    // region with no indication that anything is amiss (seen in Firefox). Seeking to\n    // currentTime is usually enough to kickstart the player. This checks that the player\n    // is currently within a buffered region before attempting a corrective seek.\n    // Chrome does not appear to continue `timeupdate` events after a `waiting` event\n    // until there is ~ 3 seconds of forward buffer available. PlaybackWatcher should also\n    // make sure there is ~3 seconds of forward buffer before taking any corrective action\n    // to avoid triggering an `unknownwaiting` event when the network is slow.\n\n    if (currentRange.length && currentTime + 3 <= currentRange.end(0)) {\n      this.resetTimeUpdate_();\n      this.tech_.setCurrentTime(currentTime);\n      this.logger_(`Stopped at ${currentTime} while inside a buffered region ` + `[${currentRange.start(0)} -> ${currentRange.end(0)}]. Attempting to resume ` + 'playback by seeking to the current time.'); // unknown waiting corrections may be useful for monitoring QoS\n\n      this.tech_.trigger({\n        type: 'usage',\n        name: 'vhs-unknown-waiting'\n      });\n      return;\n    }\n  }\n  /**\n   * Handler for situations when the tech fires a `waiting` event\n   *\n   * @return {boolean}\n   *         True if an action (or none) was needed to correct the waiting. False if no\n   *         checks passed\n   * @private\n   */\n\n  techWaiting_() {\n    const seekable = this.seekable();\n    const currentTime = this.tech_.currentTime();\n    if (this.tech_.seeking()) {\n      // Tech is seeking or already waiting on another action, no action needed\n      return true;\n    }\n    if (this.beforeSeekableWindow_(seekable, currentTime)) {\n      const livePoint = seekable.end(seekable.length - 1);\n      this.logger_(`Fell out of live window at time ${currentTime}. Seeking to ` + `live point (seekable end) ${livePoint}`);\n      this.resetTimeUpdate_();\n      this.tech_.setCurrentTime(livePoint); // live window resyncs may be useful for monitoring QoS\n\n      this.tech_.trigger({\n        type: 'usage',\n        name: 'vhs-live-resync'\n      });\n      return true;\n    }\n    const sourceUpdater = this.tech_.vhs.playlistController_.sourceUpdater_;\n    const buffered = this.tech_.buffered();\n    const videoUnderflow = this.videoUnderflow_({\n      audioBuffered: sourceUpdater.audioBuffered(),\n      videoBuffered: sourceUpdater.videoBuffered(),\n      currentTime\n    });\n    if (videoUnderflow) {\n      // Even though the video underflowed and was stuck in a gap, the audio overplayed\n      // the gap, leading currentTime into a buffered range. Seeking to currentTime\n      // allows the video to catch up to the audio position without losing any audio\n      // (only suffering ~3 seconds of frozen video and a pause in audio playback).\n      this.resetTimeUpdate_();\n      this.tech_.setCurrentTime(currentTime); // video underflow may be useful for monitoring QoS\n\n      this.tech_.trigger({\n        type: 'usage',\n        name: 'vhs-video-underflow'\n      });\n      return true;\n    }\n    const nextRange = findNextRange(buffered, currentTime); // check for gap\n\n    if (nextRange.length > 0) {\n      this.logger_(`Stopped at ${currentTime} and seeking to ${nextRange.start(0)}`);\n      this.resetTimeUpdate_();\n      this.skipTheGap_(currentTime);\n      return true;\n    } // All checks failed. Returning false to indicate failure to correct waiting\n\n    return false;\n  }\n  afterSeekableWindow_(seekable, currentTime, playlist, allowSeeksWithinUnsafeLiveWindow = false) {\n    if (!seekable.length) {\n      // we can't make a solid case if there's no seekable, default to false\n      return false;\n    }\n    let allowedEnd = seekable.end(seekable.length - 1) + SAFE_TIME_DELTA;\n    const isLive = !playlist.endList;\n    const isLLHLS = typeof playlist.partTargetDuration === 'number';\n    if (isLive && (isLLHLS || allowSeeksWithinUnsafeLiveWindow)) {\n      allowedEnd = seekable.end(seekable.length - 1) + playlist.targetDuration * 3;\n    }\n    if (currentTime > allowedEnd) {\n      return true;\n    }\n    return false;\n  }\n  beforeSeekableWindow_(seekable, currentTime) {\n    if (seekable.length &&\n    // can't fall before 0 and 0 seekable start identifies VOD stream\n    seekable.start(0) > 0 && currentTime < seekable.start(0) - this.liveRangeSafeTimeDelta) {\n      return true;\n    }\n    return false;\n  }\n  videoUnderflow_({\n    videoBuffered,\n    audioBuffered,\n    currentTime\n  }) {\n    // audio only content will not have video underflow :)\n    if (!videoBuffered) {\n      return;\n    }\n    let gap; // find a gap in demuxed content.\n\n    if (videoBuffered.length && audioBuffered.length) {\n      // in Chrome audio will continue to play for ~3s when we run out of video\n      // so we have to check that the video buffer did have some buffer in the\n      // past.\n      const lastVideoRange = findRange(videoBuffered, currentTime - 3);\n      const videoRange = findRange(videoBuffered, currentTime);\n      const audioRange = findRange(audioBuffered, currentTime);\n      if (audioRange.length && !videoRange.length && lastVideoRange.length) {\n        gap = {\n          start: lastVideoRange.end(0),\n          end: audioRange.end(0)\n        };\n      } // find a gap in muxed content.\n    } else {\n      const nextRange = findNextRange(videoBuffered, currentTime); // Even if there is no available next range, there is still a possibility we are\n      // stuck in a gap due to video underflow.\n\n      if (!nextRange.length) {\n        gap = this.gapFromVideoUnderflow_(videoBuffered, currentTime);\n      }\n    }\n    if (gap) {\n      this.logger_(`Encountered a gap in video from ${gap.start} to ${gap.end}. ` + `Seeking to current time ${currentTime}`);\n      return true;\n    }\n    return false;\n  }\n  /**\n   * Timer callback. If playback still has not proceeded, then we seek\n   * to the start of the next buffered region.\n   *\n   * @private\n   */\n\n  skipTheGap_(scheduledCurrentTime) {\n    const buffered = this.tech_.buffered();\n    const currentTime = this.tech_.currentTime();\n    const nextRange = findNextRange(buffered, currentTime);\n    this.resetTimeUpdate_();\n    if (nextRange.length === 0 || currentTime !== scheduledCurrentTime) {\n      return;\n    }\n    this.logger_('skipTheGap_:', 'currentTime:', currentTime, 'scheduled currentTime:', scheduledCurrentTime, 'nextRange start:', nextRange.start(0)); // only seek if we still have not played\n\n    this.tech_.setCurrentTime(nextRange.start(0) + TIME_FUDGE_FACTOR);\n    this.tech_.trigger({\n      type: 'usage',\n      name: 'vhs-gap-skip'\n    });\n  }\n  gapFromVideoUnderflow_(buffered, currentTime) {\n    // At least in Chrome, if there is a gap in the video buffer, the audio will continue\n    // playing for ~3 seconds after the video gap starts. This is done to account for\n    // video buffer underflow/underrun (note that this is not done when there is audio\n    // buffer underflow/underrun -- in that case the video will stop as soon as it\n    // encounters the gap, as audio stalls are more noticeable/jarring to a user than\n    // video stalls). The player's time will reflect the playthrough of audio, so the\n    // time will appear as if we are in a buffered region, even if we are stuck in a\n    // \"gap.\"\n    //\n    // Example:\n    // video buffer:   0 => 10.1, 10.2 => 20\n    // audio buffer:   0 => 20\n    // overall buffer: 0 => 10.1, 10.2 => 20\n    // current time: 13\n    //\n    // Chrome's video froze at 10 seconds, where the video buffer encountered the gap,\n    // however, the audio continued playing until it reached ~3 seconds past the gap\n    // (13 seconds), at which point it stops as well. Since current time is past the\n    // gap, findNextRange will return no ranges.\n    //\n    // To check for this issue, we see if there is a gap that starts somewhere within\n    // a 3 second range (3 seconds +/- 1 second) back from our current time.\n    const gaps = findGaps(buffered);\n    for (let i = 0; i < gaps.length; i++) {\n      const start = gaps.start(i);\n      const end = gaps.end(i); // gap is starts no more than 4 seconds back\n\n      if (currentTime - start < 4 && currentTime - start > 2) {\n        return {\n          start,\n          end\n        };\n      }\n    }\n    return null;\n  }\n}\nconst defaultOptions = {\n  errorInterval: 30,\n  getSource(next) {\n    const tech = this.tech({\n      IWillNotUseThisInPlugins: true\n    });\n    const sourceObj = tech.currentSource_ || this.currentSource();\n    return next(sourceObj);\n  }\n};\n/**\n * Main entry point for the plugin\n *\n * @param {Player} player a reference to a videojs Player instance\n * @param {Object} [options] an object with plugin options\n * @private\n */\n\nconst initPlugin = function (player, options) {\n  let lastCalled = 0;\n  let seekTo = 0;\n  const localOptions = merge(defaultOptions, options);\n  player.ready(() => {\n    player.trigger({\n      type: 'usage',\n      name: 'vhs-error-reload-initialized'\n    });\n  });\n  /**\n   * Player modifications to perform that must wait until `loadedmetadata`\n   * has been triggered\n   *\n   * @private\n   */\n\n  const loadedMetadataHandler = function () {\n    if (seekTo) {\n      player.currentTime(seekTo);\n    }\n  };\n  /**\n   * Set the source on the player element, play, and seek if necessary\n   *\n   * @param {Object} sourceObj An object specifying the source url and mime-type to play\n   * @private\n   */\n\n  const setSource = function (sourceObj) {\n    if (sourceObj === null || sourceObj === undefined) {\n      return;\n    }\n    seekTo = player.duration() !== Infinity && player.currentTime() || 0;\n    player.one('loadedmetadata', loadedMetadataHandler);\n    player.src(sourceObj);\n    player.trigger({\n      type: 'usage',\n      name: 'vhs-error-reload'\n    });\n    player.play();\n  };\n  /**\n   * Attempt to get a source from either the built-in getSource function\n   * or a custom function provided via the options\n   *\n   * @private\n   */\n\n  const errorHandler = function () {\n    // Do not attempt to reload the source if a source-reload occurred before\n    // 'errorInterval' time has elapsed since the last source-reload\n    if (Date.now() - lastCalled < localOptions.errorInterval * 1000) {\n      player.trigger({\n        type: 'usage',\n        name: 'vhs-error-reload-canceled'\n      });\n      return;\n    }\n    if (!localOptions.getSource || typeof localOptions.getSource !== 'function') {\n      videojs.log.error('ERROR: reloadSourceOnError - The option getSource must be a function!');\n      return;\n    }\n    lastCalled = Date.now();\n    return localOptions.getSource.call(player, setSource);\n  };\n  /**\n   * Unbind any event handlers that were bound by the plugin\n   *\n   * @private\n   */\n\n  const cleanupEvents = function () {\n    player.off('loadedmetadata', loadedMetadataHandler);\n    player.off('error', errorHandler);\n    player.off('dispose', cleanupEvents);\n  };\n  /**\n   * Cleanup before re-initializing the plugin\n   *\n   * @param {Object} [newOptions] an object with plugin options\n   * @private\n   */\n\n  const reinitPlugin = function (newOptions) {\n    cleanupEvents();\n    initPlugin(player, newOptions);\n  };\n  player.on('error', errorHandler);\n  player.on('dispose', cleanupEvents); // Overwrite the plugin function so that we can correctly cleanup before\n  // initializing the plugin\n\n  player.reloadSourceOnError = reinitPlugin;\n};\n/**\n * Reload the source when an error is detected as long as there\n * wasn't an error previously within the last 30 seconds\n *\n * @param {Object} [options] an object with plugin options\n */\n\nconst reloadSourceOnError = function (options) {\n  initPlugin(this, options);\n};\nvar version$4 = \"3.10.0\";\nvar version$3 = \"7.0.2\";\nvar version$2 = \"1.3.0\";\nvar version$1 = \"7.1.0\";\nvar version = \"4.0.1\";\n\n/**\n * @file videojs-http-streaming.js\n *\n * The main file for the VHS project.\n * License: https://github.com/videojs/videojs-http-streaming/blob/main/LICENSE\n */\nconst Vhs = {\n  PlaylistLoader,\n  Playlist,\n  utils,\n  STANDARD_PLAYLIST_SELECTOR: lastBandwidthSelector,\n  INITIAL_PLAYLIST_SELECTOR: lowestBitrateCompatibleVariantSelector,\n  lastBandwidthSelector,\n  movingAverageBandwidthSelector,\n  comparePlaylistBandwidth,\n  comparePlaylistResolution,\n  xhr: xhrFactory()\n}; // Define getter/setters for config properties\n\nObject.keys(Config).forEach(prop => {\n  Object.defineProperty(Vhs, prop, {\n    get() {\n      videojs.log.warn(`using Vhs.${prop} is UNSAFE be sure you know what you are doing`);\n      return Config[prop];\n    },\n    set(value) {\n      videojs.log.warn(`using Vhs.${prop} is UNSAFE be sure you know what you are doing`);\n      if (typeof value !== 'number' || value < 0) {\n        videojs.log.warn(`value of Vhs.${prop} must be greater than or equal to 0`);\n        return;\n      }\n      Config[prop] = value;\n    }\n  });\n});\nconst LOCAL_STORAGE_KEY = 'videojs-vhs';\n/**\n * Updates the selectedIndex of the QualityLevelList when a mediachange happens in vhs.\n *\n * @param {QualityLevelList} qualityLevels The QualityLevelList to update.\n * @param {PlaylistLoader} playlistLoader PlaylistLoader containing the new media info.\n * @function handleVhsMediaChange\n */\n\nconst handleVhsMediaChange = function (qualityLevels, playlistLoader) {\n  const newPlaylist = playlistLoader.media();\n  let selectedIndex = -1;\n  for (let i = 0; i < qualityLevels.length; i++) {\n    if (qualityLevels[i].id === newPlaylist.id) {\n      selectedIndex = i;\n      break;\n    }\n  }\n  qualityLevels.selectedIndex_ = selectedIndex;\n  qualityLevels.trigger({\n    selectedIndex,\n    type: 'change'\n  });\n};\n/**\n * Adds quality levels to list once playlist metadata is available\n *\n * @param {QualityLevelList} qualityLevels The QualityLevelList to attach events to.\n * @param {Object} vhs Vhs object to listen to for media events.\n * @function handleVhsLoadedMetadata\n */\n\nconst handleVhsLoadedMetadata = function (qualityLevels, vhs) {\n  vhs.representations().forEach(rep => {\n    qualityLevels.addQualityLevel(rep);\n  });\n  handleVhsMediaChange(qualityLevels, vhs.playlists);\n}; // VHS is a source handler, not a tech. Make sure attempts to use it\n// as one do not cause exceptions.\n\nVhs.canPlaySource = function () {\n  return videojs.log.warn('VHS is no longer a tech. Please remove it from ' + 'your player\\'s techOrder.');\n};\nconst emeKeySystems = (keySystemOptions, mainPlaylist, audioPlaylist) => {\n  if (!keySystemOptions) {\n    return keySystemOptions;\n  }\n  let codecs = {};\n  if (mainPlaylist && mainPlaylist.attributes && mainPlaylist.attributes.CODECS) {\n    codecs = unwrapCodecList(parseCodecs(mainPlaylist.attributes.CODECS));\n  }\n  if (audioPlaylist && audioPlaylist.attributes && audioPlaylist.attributes.CODECS) {\n    codecs.audio = audioPlaylist.attributes.CODECS;\n  }\n  const videoContentType = getMimeForCodec(codecs.video);\n  const audioContentType = getMimeForCodec(codecs.audio); // upsert the content types based on the selected playlist\n\n  const keySystemContentTypes = {};\n  for (const keySystem in keySystemOptions) {\n    keySystemContentTypes[keySystem] = {};\n    if (audioContentType) {\n      keySystemContentTypes[keySystem].audioContentType = audioContentType;\n    }\n    if (videoContentType) {\n      keySystemContentTypes[keySystem].videoContentType = videoContentType;\n    } // Default to using the video playlist's PSSH even though they may be different, as\n    // videojs-contrib-eme will only accept one in the options.\n    //\n    // This shouldn't be an issue for most cases as early intialization will handle all\n    // unique PSSH values, and if they aren't, then encrypted events should have the\n    // specific information needed for the unique license.\n\n    if (mainPlaylist.contentProtection && mainPlaylist.contentProtection[keySystem] && mainPlaylist.contentProtection[keySystem].pssh) {\n      keySystemContentTypes[keySystem].pssh = mainPlaylist.contentProtection[keySystem].pssh;\n    } // videojs-contrib-eme accepts the option of specifying: 'com.some.cdm': 'url'\n    // so we need to prevent overwriting the URL entirely\n\n    if (typeof keySystemOptions[keySystem] === 'string') {\n      keySystemContentTypes[keySystem].url = keySystemOptions[keySystem];\n    }\n  }\n  return merge(keySystemOptions, keySystemContentTypes);\n};\n/**\n * @typedef {Object} KeySystems\n *\n * keySystems configuration for https://github.com/videojs/videojs-contrib-eme\n * Note: not all options are listed here.\n *\n * @property {Uint8Array} [pssh]\n *           Protection System Specific Header\n */\n\n/**\n * Goes through all the playlists and collects an array of KeySystems options objects\n * containing each playlist's keySystems and their pssh values, if available.\n *\n * @param {Object[]} playlists\n *        The playlists to look through\n * @param {string[]} keySystems\n *        The keySystems to collect pssh values for\n *\n * @return {KeySystems[]}\n *         An array of KeySystems objects containing available key systems and their\n *         pssh values\n */\n\nconst getAllPsshKeySystemsOptions = (playlists, keySystems) => {\n  return playlists.reduce((keySystemsArr, playlist) => {\n    if (!playlist.contentProtection) {\n      return keySystemsArr;\n    }\n    const keySystemsOptions = keySystems.reduce((keySystemsObj, keySystem) => {\n      const keySystemOptions = playlist.contentProtection[keySystem];\n      if (keySystemOptions && keySystemOptions.pssh) {\n        keySystemsObj[keySystem] = {\n          pssh: keySystemOptions.pssh\n        };\n      }\n      return keySystemsObj;\n    }, {});\n    if (Object.keys(keySystemsOptions).length) {\n      keySystemsArr.push(keySystemsOptions);\n    }\n    return keySystemsArr;\n  }, []);\n};\n/**\n * Returns a promise that waits for the\n * [eme plugin](https://github.com/videojs/videojs-contrib-eme) to create a key session.\n *\n * Works around https://bugs.chromium.org/p/chromium/issues/detail?id=895449 in non-IE11\n * browsers.\n *\n * As per the above ticket, this is particularly important for Chrome, where, if\n * unencrypted content is appended before encrypted content and the key session has not\n * been created, a MEDIA_ERR_DECODE will be thrown once the encrypted content is reached\n * during playback.\n *\n * @param {Object} player\n *        The player instance\n * @param {Object[]} sourceKeySystems\n *        The key systems options from the player source\n * @param {Object} [audioMedia]\n *        The active audio media playlist (optional)\n * @param {Object[]} mainPlaylists\n *        The playlists found on the main playlist object\n *\n * @return {Object}\n *         Promise that resolves when the key session has been created\n */\n\nconst waitForKeySessionCreation = ({\n  player,\n  sourceKeySystems,\n  audioMedia,\n  mainPlaylists\n}) => {\n  if (!player.eme.initializeMediaKeys) {\n    return Promise.resolve();\n  } // TODO should all audio PSSH values be initialized for DRM?\n  //\n  // All unique video rendition pssh values are initialized for DRM, but here only\n  // the initial audio playlist license is initialized. In theory, an encrypted\n  // event should be fired if the user switches to an alternative audio playlist\n  // where a license is required, but this case hasn't yet been tested. In addition, there\n  // may be many alternate audio playlists unlikely to be used (e.g., multiple different\n  // languages).\n\n  const playlists = audioMedia ? mainPlaylists.concat([audioMedia]) : mainPlaylists;\n  const keySystemsOptionsArr = getAllPsshKeySystemsOptions(playlists, Object.keys(sourceKeySystems));\n  const initializationFinishedPromises = [];\n  const keySessionCreatedPromises = []; // Since PSSH values are interpreted as initData, EME will dedupe any duplicates. The\n  // only place where it should not be deduped is for ms-prefixed APIs, but\n  // the existence of modern EME APIs in addition to\n  // ms-prefixed APIs on Edge should prevent this from being a concern.\n  // initializeMediaKeys also won't use the webkit-prefixed APIs.\n\n  keySystemsOptionsArr.forEach(keySystemsOptions => {\n    keySessionCreatedPromises.push(new Promise((resolve, reject) => {\n      player.tech_.one('keysessioncreated', resolve);\n    }));\n    initializationFinishedPromises.push(new Promise((resolve, reject) => {\n      player.eme.initializeMediaKeys({\n        keySystems: keySystemsOptions\n      }, err => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve();\n      });\n    }));\n  }); // The reasons Promise.race is chosen over Promise.any:\n  //\n  // * Promise.any is only available in Safari 14+.\n  // * None of these promises are expected to reject. If they do reject, it might be\n  //   better here for the race to surface the rejection, rather than mask it by using\n  //   Promise.any.\n\n  return Promise.race([\n  // If a session was previously created, these will all finish resolving without\n  // creating a new session, otherwise it will take until the end of all license\n  // requests, which is why the key session check is used (to make setup much faster).\n  Promise.all(initializationFinishedPromises),\n  // Once a single session is created, the browser knows DRM will be used.\n  Promise.race(keySessionCreatedPromises)]);\n};\n/**\n * If the [eme](https://github.com/videojs/videojs-contrib-eme) plugin is available, and\n * there are keySystems on the source, sets up source options to prepare the source for\n * eme.\n *\n * @param {Object} player\n *        The player instance\n * @param {Object[]} sourceKeySystems\n *        The key systems options from the player source\n * @param {Object} media\n *        The active media playlist\n * @param {Object} [audioMedia]\n *        The active audio media playlist (optional)\n *\n * @return {boolean}\n *         Whether or not options were configured and EME is available\n */\n\nconst setupEmeOptions = ({\n  player,\n  sourceKeySystems,\n  media,\n  audioMedia\n}) => {\n  const sourceOptions = emeKeySystems(sourceKeySystems, media, audioMedia);\n  if (!sourceOptions) {\n    return false;\n  }\n  player.currentSource().keySystems = sourceOptions; // eme handles the rest of the setup, so if it is missing\n  // do nothing.\n\n  if (sourceOptions && !player.eme) {\n    videojs.log.warn('DRM encrypted source cannot be decrypted without a DRM plugin');\n    return false;\n  }\n  return true;\n};\nconst getVhsLocalStorage = () => {\n  if (!window$1.localStorage) {\n    return null;\n  }\n  const storedObject = window$1.localStorage.getItem(LOCAL_STORAGE_KEY);\n  if (!storedObject) {\n    return null;\n  }\n  try {\n    return JSON.parse(storedObject);\n  } catch (e) {\n    // someone may have tampered with the value\n    return null;\n  }\n};\nconst updateVhsLocalStorage = options => {\n  if (!window$1.localStorage) {\n    return false;\n  }\n  let objectToStore = getVhsLocalStorage();\n  objectToStore = objectToStore ? merge(objectToStore, options) : options;\n  try {\n    window$1.localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(objectToStore));\n  } catch (e) {\n    // Throws if storage is full (e.g., always on iOS 5+ Safari private mode, where\n    // storage is set to 0).\n    // https://developer.mozilla.org/en-US/docs/Web/API/Storage/setItem#Exceptions\n    // No need to perform any operation.\n    return false;\n  }\n  return objectToStore;\n};\n/**\n * Parses VHS-supported media types from data URIs. See\n * https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs\n * for information on data URIs.\n *\n * @param {string} dataUri\n *        The data URI\n *\n * @return {string|Object}\n *         The parsed object/string, or the original string if no supported media type\n *         was found\n */\n\nconst expandDataUri = dataUri => {\n  if (dataUri.toLowerCase().indexOf('data:application/vnd.videojs.vhs+json,') === 0) {\n    return JSON.parse(dataUri.substring(dataUri.indexOf(',') + 1));\n  } // no known case for this data URI, return the string as-is\n\n  return dataUri;\n};\n/**\n * Adds a request hook to an xhr object\n *\n * @param {Object} xhr object to add the onRequest hook to\n * @param {function} callback hook function for an xhr request\n */\n\nconst addOnRequestHook = (xhr, callback) => {\n  if (!xhr._requestCallbackSet) {\n    xhr._requestCallbackSet = new Set();\n  }\n  xhr._requestCallbackSet.add(callback);\n};\n/**\n * Adds a response hook to an xhr object\n *\n * @param {Object} xhr object to add the onResponse hook to\n * @param {function} callback hook function for an xhr response\n */\n\nconst addOnResponseHook = (xhr, callback) => {\n  if (!xhr._responseCallbackSet) {\n    xhr._responseCallbackSet = new Set();\n  }\n  xhr._responseCallbackSet.add(callback);\n};\n/**\n * Removes a request hook on an xhr object, deletes the onRequest set if empty.\n *\n * @param {Object} xhr object to remove the onRequest hook from\n * @param {function} callback hook function to remove\n */\n\nconst removeOnRequestHook = (xhr, callback) => {\n  if (!xhr._requestCallbackSet) {\n    return;\n  }\n  xhr._requestCallbackSet.delete(callback);\n  if (!xhr._requestCallbackSet.size) {\n    delete xhr._requestCallbackSet;\n  }\n};\n/**\n * Removes a response hook on an xhr object, deletes the onResponse set if empty.\n *\n * @param {Object} xhr object to remove the onResponse hook from\n * @param {function} callback hook function to remove\n */\n\nconst removeOnResponseHook = (xhr, callback) => {\n  if (!xhr._responseCallbackSet) {\n    return;\n  }\n  xhr._responseCallbackSet.delete(callback);\n  if (!xhr._responseCallbackSet.size) {\n    delete xhr._responseCallbackSet;\n  }\n};\n/**\n * Whether the browser has built-in HLS support.\n */\n\nVhs.supportsNativeHls = function () {\n  if (!document || !document.createElement) {\n    return false;\n  }\n  const video = document.createElement('video'); // native HLS is definitely not supported if HTML5 video isn't\n\n  if (!videojs.getTech('Html5').isSupported()) {\n    return false;\n  } // HLS manifests can go by many mime-types\n\n  const canPlay = [\n  // Apple santioned\n  'application/vnd.apple.mpegurl',\n  // Apple sanctioned for backwards compatibility\n  'audio/mpegurl',\n  // Very common\n  'audio/x-mpegurl',\n  // Very common\n  'application/x-mpegurl',\n  // Included for completeness\n  'video/x-mpegurl', 'video/mpegurl', 'application/mpegurl'];\n  return canPlay.some(function (canItPlay) {\n    return /maybe|probably/i.test(video.canPlayType(canItPlay));\n  });\n}();\nVhs.supportsNativeDash = function () {\n  if (!document || !document.createElement || !videojs.getTech('Html5').isSupported()) {\n    return false;\n  }\n  return /maybe|probably/i.test(document.createElement('video').canPlayType('application/dash+xml'));\n}();\nVhs.supportsTypeNatively = type => {\n  if (type === 'hls') {\n    return Vhs.supportsNativeHls;\n  }\n  if (type === 'dash') {\n    return Vhs.supportsNativeDash;\n  }\n  return false;\n};\n/**\n * VHS is a source handler, not a tech. Make sure attempts to use it\n * as one do not cause exceptions.\n */\n\nVhs.isSupported = function () {\n  return videojs.log.warn('VHS is no longer a tech. Please remove it from ' + 'your player\\'s techOrder.');\n};\n/**\n * A global function for setting an onRequest hook\n *\n * @param {function} callback for request modifiction\n */\n\nVhs.xhr.onRequest = function (callback) {\n  addOnRequestHook(Vhs.xhr, callback);\n};\n/**\n * A global function for setting an onResponse hook\n *\n * @param {callback} callback for response data retrieval\n */\n\nVhs.xhr.onResponse = function (callback) {\n  addOnResponseHook(Vhs.xhr, callback);\n};\n/**\n * Deletes a global onRequest callback if it exists\n *\n * @param {function} callback to delete from the global set\n */\n\nVhs.xhr.offRequest = function (callback) {\n  removeOnRequestHook(Vhs.xhr, callback);\n};\n/**\n * Deletes a global onResponse callback if it exists\n *\n * @param {function} callback to delete from the global set\n */\n\nVhs.xhr.offResponse = function (callback) {\n  removeOnResponseHook(Vhs.xhr, callback);\n};\nconst Component = videojs.getComponent('Component');\n/**\n * The Vhs Handler object, where we orchestrate all of the parts\n * of VHS to interact with video.js\n *\n * @class VhsHandler\n * @extends videojs.Component\n * @param {Object} source the soruce object\n * @param {Tech} tech the parent tech object\n * @param {Object} options optional and required options\n */\n\nclass VhsHandler extends Component {\n  constructor(source, tech, options) {\n    super(tech, options.vhs); // if a tech level `initialBandwidth` option was passed\n    // use that over the VHS level `bandwidth` option\n\n    if (typeof options.initialBandwidth === 'number') {\n      this.options_.bandwidth = options.initialBandwidth;\n    }\n    this.logger_ = logger('VhsHandler'); // we need access to the player in some cases,\n    // so, get it from Video.js via the `playerId`\n\n    if (tech.options_ && tech.options_.playerId) {\n      const _player = videojs.getPlayer(tech.options_.playerId);\n      this.player_ = _player;\n    }\n    this.tech_ = tech;\n    this.source_ = source;\n    this.stats = {};\n    this.ignoreNextSeekingEvent_ = false;\n    this.setOptions_();\n    if (this.options_.overrideNative && tech.overrideNativeAudioTracks && tech.overrideNativeVideoTracks) {\n      tech.overrideNativeAudioTracks(true);\n      tech.overrideNativeVideoTracks(true);\n    } else if (this.options_.overrideNative && (tech.featuresNativeVideoTracks || tech.featuresNativeAudioTracks)) {\n      // overriding native VHS only works if audio tracks have been emulated\n      // error early if we're misconfigured\n      throw new Error('Overriding native VHS requires emulated tracks. ' + 'See https://git.io/vMpjB');\n    } // listen for fullscreenchange events for this player so that we\n    // can adjust our quality selection quickly\n\n    this.on(document, ['fullscreenchange', 'webkitfullscreenchange', 'mozfullscreenchange', 'MSFullscreenChange'], event => {\n      const fullscreenElement = document.fullscreenElement || document.webkitFullscreenElement || document.mozFullScreenElement || document.msFullscreenElement;\n      if (fullscreenElement && fullscreenElement.contains(this.tech_.el())) {\n        this.playlistController_.fastQualityChange_();\n      } else {\n        // When leaving fullscreen, since the in page pixel dimensions should be smaller\n        // than full screen, see if there should be a rendition switch down to preserve\n        // bandwidth.\n        this.playlistController_.checkABR_();\n      }\n    });\n    this.on(this.tech_, 'seeking', function () {\n      if (this.ignoreNextSeekingEvent_) {\n        this.ignoreNextSeekingEvent_ = false;\n        return;\n      }\n      this.setCurrentTime(this.tech_.currentTime());\n    });\n    this.on(this.tech_, 'error', function () {\n      // verify that the error was real and we are loaded\n      // enough to have pc loaded.\n      if (this.tech_.error() && this.playlistController_) {\n        this.playlistController_.pauseLoading();\n      }\n    });\n    this.on(this.tech_, 'play', this.play);\n  }\n  /**\n   * Set VHS options based on options from configuration, as well as partial\n   * options to be passed at a later time.\n   *\n   * @param {Object} options A partial chunk of config options\n   */\n\n  setOptions_(options = {}) {\n    this.options_ = merge(this.options_, options); // defaults\n\n    this.options_.withCredentials = this.options_.withCredentials || false;\n    this.options_.limitRenditionByPlayerDimensions = this.options_.limitRenditionByPlayerDimensions === false ? false : true;\n    this.options_.useDevicePixelRatio = this.options_.useDevicePixelRatio || false;\n    this.options_.useBandwidthFromLocalStorage = typeof this.source_.useBandwidthFromLocalStorage !== 'undefined' ? this.source_.useBandwidthFromLocalStorage : this.options_.useBandwidthFromLocalStorage || false;\n    this.options_.useForcedSubtitles = this.options_.useForcedSubtitles || false;\n    this.options_.useNetworkInformationApi = this.options_.useNetworkInformationApi || false;\n    this.options_.useDtsForTimestampOffset = this.options_.useDtsForTimestampOffset || false;\n    this.options_.customTagParsers = this.options_.customTagParsers || [];\n    this.options_.customTagMappers = this.options_.customTagMappers || [];\n    this.options_.cacheEncryptionKeys = this.options_.cacheEncryptionKeys || false;\n    this.options_.llhls = this.options_.llhls === false ? false : true;\n    this.options_.bufferBasedABR = this.options_.bufferBasedABR || false;\n    if (typeof this.options_.playlistExclusionDuration !== 'number') {\n      this.options_.playlistExclusionDuration = 60;\n    }\n    if (typeof this.options_.bandwidth !== 'number') {\n      if (this.options_.useBandwidthFromLocalStorage) {\n        const storedObject = getVhsLocalStorage();\n        if (storedObject && storedObject.bandwidth) {\n          this.options_.bandwidth = storedObject.bandwidth;\n          this.tech_.trigger({\n            type: 'usage',\n            name: 'vhs-bandwidth-from-local-storage'\n          });\n        }\n        if (storedObject && storedObject.throughput) {\n          this.options_.throughput = storedObject.throughput;\n          this.tech_.trigger({\n            type: 'usage',\n            name: 'vhs-throughput-from-local-storage'\n          });\n        }\n      }\n    } // if bandwidth was not set by options or pulled from local storage, start playlist\n    // selection at a reasonable bandwidth\n\n    if (typeof this.options_.bandwidth !== 'number') {\n      this.options_.bandwidth = Config.INITIAL_BANDWIDTH;\n    } // If the bandwidth number is unchanged from the initial setting\n    // then this takes precedence over the enableLowInitialPlaylist option\n\n    this.options_.enableLowInitialPlaylist = this.options_.enableLowInitialPlaylist && this.options_.bandwidth === Config.INITIAL_BANDWIDTH; // grab options passed to player.src\n\n    ['withCredentials', 'useDevicePixelRatio', 'limitRenditionByPlayerDimensions', 'bandwidth', 'customTagParsers', 'customTagMappers', 'cacheEncryptionKeys', 'playlistSelector', 'initialPlaylistSelector', 'bufferBasedABR', 'liveRangeSafeTimeDelta', 'llhls', 'useForcedSubtitles', 'useNetworkInformationApi', 'useDtsForTimestampOffset', 'exactManifestTimings', 'leastPixelDiffSelector'].forEach(option => {\n      if (typeof this.source_[option] !== 'undefined') {\n        this.options_[option] = this.source_[option];\n      }\n    });\n    this.limitRenditionByPlayerDimensions = this.options_.limitRenditionByPlayerDimensions;\n    this.useDevicePixelRatio = this.options_.useDevicePixelRatio;\n  } // alias for public method to set options\n\n  setOptions(options = {}) {\n    this.setOptions_(options);\n  }\n  /**\n   * called when player.src gets called, handle a new source\n   *\n   * @param {Object} src the source object to handle\n   */\n\n  src(src, type) {\n    // do nothing if the src is falsey\n    if (!src) {\n      return;\n    }\n    this.setOptions_(); // add main playlist controller options\n\n    this.options_.src = expandDataUri(this.source_.src);\n    this.options_.tech = this.tech_;\n    this.options_.externVhs = Vhs;\n    this.options_.sourceType = simpleTypeFromSourceType(type); // Whenever we seek internally, we should update the tech\n\n    this.options_.seekTo = time => {\n      this.tech_.setCurrentTime(time);\n    };\n    this.playlistController_ = new PlaylistController(this.options_);\n    const playbackWatcherOptions = merge({\n      liveRangeSafeTimeDelta: SAFE_TIME_DELTA\n    }, this.options_, {\n      seekable: () => this.seekable(),\n      media: () => this.playlistController_.media(),\n      playlistController: this.playlistController_\n    });\n    this.playbackWatcher_ = new PlaybackWatcher(playbackWatcherOptions);\n    this.playlistController_.on('error', () => {\n      const player = videojs.players[this.tech_.options_.playerId];\n      let error = this.playlistController_.error;\n      if (typeof error === 'object' && !error.code) {\n        error.code = 3;\n      } else if (typeof error === 'string') {\n        error = {\n          message: error,\n          code: 3\n        };\n      }\n      player.error(error);\n    });\n    const defaultSelector = this.options_.bufferBasedABR ? Vhs.movingAverageBandwidthSelector(0.55) : Vhs.STANDARD_PLAYLIST_SELECTOR; // `this` in selectPlaylist should be the VhsHandler for backwards\n    // compatibility with < v2\n\n    this.playlistController_.selectPlaylist = this.selectPlaylist ? this.selectPlaylist.bind(this) : defaultSelector.bind(this);\n    this.playlistController_.selectInitialPlaylist = Vhs.INITIAL_PLAYLIST_SELECTOR.bind(this); // re-expose some internal objects for backwards compatibility with < v2\n\n    this.playlists = this.playlistController_.mainPlaylistLoader_;\n    this.mediaSource = this.playlistController_.mediaSource; // Proxy assignment of some properties to the main playlist\n    // controller. Using a custom property for backwards compatibility\n    // with < v2\n\n    Object.defineProperties(this, {\n      selectPlaylist: {\n        get() {\n          return this.playlistController_.selectPlaylist;\n        },\n        set(selectPlaylist) {\n          this.playlistController_.selectPlaylist = selectPlaylist.bind(this);\n        }\n      },\n      throughput: {\n        get() {\n          return this.playlistController_.mainSegmentLoader_.throughput.rate;\n        },\n        set(throughput) {\n          this.playlistController_.mainSegmentLoader_.throughput.rate = throughput; // By setting `count` to 1 the throughput value becomes the starting value\n          // for the cumulative average\n\n          this.playlistController_.mainSegmentLoader_.throughput.count = 1;\n        }\n      },\n      bandwidth: {\n        get() {\n          let playerBandwidthEst = this.playlistController_.mainSegmentLoader_.bandwidth;\n          const networkInformation = window$1.navigator.connection || window$1.navigator.mozConnection || window$1.navigator.webkitConnection;\n          const tenMbpsAsBitsPerSecond = 10e6;\n          if (this.options_.useNetworkInformationApi && networkInformation) {\n            // downlink returns Mbps\n            // https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation/downlink\n            const networkInfoBandwidthEstBitsPerSec = networkInformation.downlink * 1000 * 1000; // downlink maxes out at 10 Mbps. In the event that both networkInformationApi and the player\n            // estimate a bandwidth greater than 10 Mbps, use the larger of the two estimates to ensure that\n            // high quality streams are not filtered out.\n\n            if (networkInfoBandwidthEstBitsPerSec >= tenMbpsAsBitsPerSecond && playerBandwidthEst >= tenMbpsAsBitsPerSecond) {\n              playerBandwidthEst = Math.max(playerBandwidthEst, networkInfoBandwidthEstBitsPerSec);\n            } else {\n              playerBandwidthEst = networkInfoBandwidthEstBitsPerSec;\n            }\n          }\n          return playerBandwidthEst;\n        },\n        set(bandwidth) {\n          this.playlistController_.mainSegmentLoader_.bandwidth = bandwidth; // setting the bandwidth manually resets the throughput counter\n          // `count` is set to zero that current value of `rate` isn't included\n          // in the cumulative average\n\n          this.playlistController_.mainSegmentLoader_.throughput = {\n            rate: 0,\n            count: 0\n          };\n        }\n      },\n      /**\n       * `systemBandwidth` is a combination of two serial processes bit-rates. The first\n       * is the network bitrate provided by `bandwidth` and the second is the bitrate of\n       * the entire process after that - decryption, transmuxing, and appending - provided\n       * by `throughput`.\n       *\n       * Since the two process are serial, the overall system bandwidth is given by:\n       *   sysBandwidth = 1 / (1 / bandwidth + 1 / throughput)\n       */\n      systemBandwidth: {\n        get() {\n          const invBandwidth = 1 / (this.bandwidth || 1);\n          let invThroughput;\n          if (this.throughput > 0) {\n            invThroughput = 1 / this.throughput;\n          } else {\n            invThroughput = 0;\n          }\n          const systemBitrate = Math.floor(1 / (invBandwidth + invThroughput));\n          return systemBitrate;\n        },\n        set() {\n          videojs.log.error('The \"systemBandwidth\" property is read-only');\n        }\n      }\n    });\n    if (this.options_.bandwidth) {\n      this.bandwidth = this.options_.bandwidth;\n    }\n    if (this.options_.throughput) {\n      this.throughput = this.options_.throughput;\n    }\n    Object.defineProperties(this.stats, {\n      bandwidth: {\n        get: () => this.bandwidth || 0,\n        enumerable: true\n      },\n      mediaRequests: {\n        get: () => this.playlistController_.mediaRequests_() || 0,\n        enumerable: true\n      },\n      mediaRequestsAborted: {\n        get: () => this.playlistController_.mediaRequestsAborted_() || 0,\n        enumerable: true\n      },\n      mediaRequestsTimedout: {\n        get: () => this.playlistController_.mediaRequestsTimedout_() || 0,\n        enumerable: true\n      },\n      mediaRequestsErrored: {\n        get: () => this.playlistController_.mediaRequestsErrored_() || 0,\n        enumerable: true\n      },\n      mediaTransferDuration: {\n        get: () => this.playlistController_.mediaTransferDuration_() || 0,\n        enumerable: true\n      },\n      mediaBytesTransferred: {\n        get: () => this.playlistController_.mediaBytesTransferred_() || 0,\n        enumerable: true\n      },\n      mediaSecondsLoaded: {\n        get: () => this.playlistController_.mediaSecondsLoaded_() || 0,\n        enumerable: true\n      },\n      mediaAppends: {\n        get: () => this.playlistController_.mediaAppends_() || 0,\n        enumerable: true\n      },\n      mainAppendsToLoadedData: {\n        get: () => this.playlistController_.mainAppendsToLoadedData_() || 0,\n        enumerable: true\n      },\n      audioAppendsToLoadedData: {\n        get: () => this.playlistController_.audioAppendsToLoadedData_() || 0,\n        enumerable: true\n      },\n      appendsToLoadedData: {\n        get: () => this.playlistController_.appendsToLoadedData_() || 0,\n        enumerable: true\n      },\n      timeToLoadedData: {\n        get: () => this.playlistController_.timeToLoadedData_() || 0,\n        enumerable: true\n      },\n      buffered: {\n        get: () => timeRangesToArray(this.tech_.buffered()),\n        enumerable: true\n      },\n      currentTime: {\n        get: () => this.tech_.currentTime(),\n        enumerable: true\n      },\n      currentSource: {\n        get: () => this.tech_.currentSource_,\n        enumerable: true\n      },\n      currentTech: {\n        get: () => this.tech_.name_,\n        enumerable: true\n      },\n      duration: {\n        get: () => this.tech_.duration(),\n        enumerable: true\n      },\n      main: {\n        get: () => this.playlists.main,\n        enumerable: true\n      },\n      playerDimensions: {\n        get: () => this.tech_.currentDimensions(),\n        enumerable: true\n      },\n      seekable: {\n        get: () => timeRangesToArray(this.tech_.seekable()),\n        enumerable: true\n      },\n      timestamp: {\n        get: () => Date.now(),\n        enumerable: true\n      },\n      videoPlaybackQuality: {\n        get: () => this.tech_.getVideoPlaybackQuality(),\n        enumerable: true\n      }\n    });\n    this.tech_.one('canplay', this.playlistController_.setupFirstPlay.bind(this.playlistController_));\n    this.tech_.on('bandwidthupdate', () => {\n      if (this.options_.useBandwidthFromLocalStorage) {\n        updateVhsLocalStorage({\n          bandwidth: this.bandwidth,\n          throughput: Math.round(this.throughput)\n        });\n      }\n    });\n    this.playlistController_.on('selectedinitialmedia', () => {\n      // Add the manual rendition mix-in to VhsHandler\n      renditionSelectionMixin(this);\n    });\n    this.playlistController_.sourceUpdater_.on('createdsourcebuffers', () => {\n      this.setupEme_();\n    }); // the bandwidth of the primary segment loader is our best\n    // estimate of overall bandwidth\n\n    this.on(this.playlistController_, 'progress', function () {\n      this.tech_.trigger('progress');\n    }); // In the live case, we need to ignore the very first `seeking` event since\n    // that will be the result of the seek-to-live behavior\n\n    this.on(this.playlistController_, 'firstplay', function () {\n      this.ignoreNextSeekingEvent_ = true;\n    });\n    this.setupQualityLevels_(); // do nothing if the tech has been disposed already\n    // this can occur if someone sets the src in player.ready(), for instance\n\n    if (!this.tech_.el()) {\n      return;\n    }\n    this.mediaSourceUrl_ = window$1.URL.createObjectURL(this.playlistController_.mediaSource);\n    this.tech_.src(this.mediaSourceUrl_);\n  }\n  createKeySessions_() {\n    const audioPlaylistLoader = this.playlistController_.mediaTypes_.AUDIO.activePlaylistLoader;\n    this.logger_('waiting for EME key session creation');\n    waitForKeySessionCreation({\n      player: this.player_,\n      sourceKeySystems: this.source_.keySystems,\n      audioMedia: audioPlaylistLoader && audioPlaylistLoader.media(),\n      mainPlaylists: this.playlists.main.playlists\n    }).then(() => {\n      this.logger_('created EME key session');\n      this.playlistController_.sourceUpdater_.initializedEme();\n    }).catch(err => {\n      this.logger_('error while creating EME key session', err);\n      this.player_.error({\n        message: 'Failed to initialize media keys for EME',\n        code: 3\n      });\n    });\n  }\n  handleWaitingForKey_() {\n    // If waitingforkey is fired, it's possible that the data that's necessary to retrieve\n    // the key is in the manifest. While this should've happened on initial source load, it\n    // may happen again in live streams where the keys change, and the manifest info\n    // reflects the update.\n    //\n    // Because videojs-contrib-eme compares the PSSH data we send to that of PSSH data it's\n    // already requested keys for, we don't have to worry about this generating extraneous\n    // requests.\n    this.logger_('waitingforkey fired, attempting to create any new key sessions');\n    this.createKeySessions_();\n  }\n  /**\n   * If necessary and EME is available, sets up EME options and waits for key session\n   * creation.\n   *\n   * This function also updates the source updater so taht it can be used, as for some\n   * browsers, EME must be configured before content is appended (if appending unencrypted\n   * content before encrypted content).\n   */\n\n  setupEme_() {\n    const audioPlaylistLoader = this.playlistController_.mediaTypes_.AUDIO.activePlaylistLoader;\n    const didSetupEmeOptions = setupEmeOptions({\n      player: this.player_,\n      sourceKeySystems: this.source_.keySystems,\n      media: this.playlists.media(),\n      audioMedia: audioPlaylistLoader && audioPlaylistLoader.media()\n    });\n    this.player_.tech_.on('keystatuschange', e => {\n      this.playlistController_.updatePlaylistByKeyStatus(e.keyId, e.status);\n    });\n    this.handleWaitingForKey_ = this.handleWaitingForKey_.bind(this);\n    this.player_.tech_.on('waitingforkey', this.handleWaitingForKey_);\n    if (!didSetupEmeOptions) {\n      // If EME options were not set up, we've done all we could to initialize EME.\n      this.playlistController_.sourceUpdater_.initializedEme();\n      return;\n    }\n    this.createKeySessions_();\n  }\n  /**\n   * Initializes the quality levels and sets listeners to update them.\n   *\n   * @method setupQualityLevels_\n   * @private\n   */\n\n  setupQualityLevels_() {\n    const player = videojs.players[this.tech_.options_.playerId]; // if there isn't a player or there isn't a qualityLevels plugin\n    // or qualityLevels_ listeners have already been setup, do nothing.\n\n    if (!player || !player.qualityLevels || this.qualityLevels_) {\n      return;\n    }\n    this.qualityLevels_ = player.qualityLevels();\n    this.playlistController_.on('selectedinitialmedia', () => {\n      handleVhsLoadedMetadata(this.qualityLevels_, this);\n    });\n    this.playlists.on('mediachange', () => {\n      handleVhsMediaChange(this.qualityLevels_, this.playlists);\n    });\n  }\n  /**\n   * return the version\n   */\n\n  static version() {\n    return {\n      '@videojs/http-streaming': version$4,\n      'mux.js': version$3,\n      'mpd-parser': version$2,\n      'm3u8-parser': version$1,\n      'aes-decrypter': version\n    };\n  }\n  /**\n   * return the version\n   */\n\n  version() {\n    return this.constructor.version();\n  }\n  canChangeType() {\n    return SourceUpdater.canChangeType();\n  }\n  /**\n   * Begin playing the video.\n   */\n\n  play() {\n    this.playlistController_.play();\n  }\n  /**\n   * a wrapper around the function in PlaylistController\n   */\n\n  setCurrentTime(currentTime) {\n    this.playlistController_.setCurrentTime(currentTime);\n  }\n  /**\n   * a wrapper around the function in PlaylistController\n   */\n\n  duration() {\n    return this.playlistController_.duration();\n  }\n  /**\n   * a wrapper around the function in PlaylistController\n   */\n\n  seekable() {\n    return this.playlistController_.seekable();\n  }\n  /**\n   * Abort all outstanding work and cleanup.\n   */\n\n  dispose() {\n    if (this.playbackWatcher_) {\n      this.playbackWatcher_.dispose();\n    }\n    if (this.playlistController_) {\n      this.playlistController_.dispose();\n    }\n    if (this.qualityLevels_) {\n      this.qualityLevels_.dispose();\n    }\n    if (this.tech_ && this.tech_.vhs) {\n      delete this.tech_.vhs;\n    }\n    if (this.mediaSourceUrl_ && window$1.URL.revokeObjectURL) {\n      window$1.URL.revokeObjectURL(this.mediaSourceUrl_);\n      this.mediaSourceUrl_ = null;\n    }\n    if (this.tech_) {\n      this.tech_.off('waitingforkey', this.handleWaitingForKey_);\n    }\n    super.dispose();\n  }\n  convertToProgramTime(time, callback) {\n    return getProgramTime({\n      playlist: this.playlistController_.media(),\n      time,\n      callback\n    });\n  } // the player must be playing before calling this\n\n  seekToProgramTime(programTime, callback, pauseAfterSeek = true, retryCount = 2) {\n    return seekToProgramTime({\n      programTime,\n      playlist: this.playlistController_.media(),\n      retryCount,\n      pauseAfterSeek,\n      seekTo: this.options_.seekTo,\n      tech: this.options_.tech,\n      callback\n    });\n  }\n  /**\n   * Adds the onRequest, onResponse, offRequest and offResponse functions\n   * to the VhsHandler xhr Object.\n   */\n\n  setupXhrHooks_() {\n    /**\n     * A player function for setting an onRequest hook\n     *\n     * @param {function} callback for request modifiction\n     */\n    this.xhr.onRequest = callback => {\n      addOnRequestHook(this.xhr, callback);\n    };\n    /**\n     * A player function for setting an onResponse hook\n     *\n     * @param {callback} callback for response data retrieval\n     */\n\n    this.xhr.onResponse = callback => {\n      addOnResponseHook(this.xhr, callback);\n    };\n    /**\n     * Deletes a player onRequest callback if it exists\n     *\n     * @param {function} callback to delete from the player set\n     */\n\n    this.xhr.offRequest = callback => {\n      removeOnRequestHook(this.xhr, callback);\n    };\n    /**\n     * Deletes a player onResponse callback if it exists\n     *\n     * @param {function} callback to delete from the player set\n     */\n\n    this.xhr.offResponse = callback => {\n      removeOnResponseHook(this.xhr, callback);\n    }; // Trigger an event on the player to notify the user that vhs is ready to set xhr hooks.\n    // This allows hooks to be set before the source is set to vhs when handleSource is called.\n\n    this.player_.trigger('xhr-hooks-ready');\n  }\n}\n/**\n * The Source Handler object, which informs video.js what additional\n * MIME types are supported and sets up playback. It is registered\n * automatically to the appropriate tech based on the capabilities of\n * the browser it is running in. It is not necessary to use or modify\n * this object in normal usage.\n */\n\nconst VhsSourceHandler = {\n  name: 'videojs-http-streaming',\n  VERSION: version$4,\n  canHandleSource(srcObj, options = {}) {\n    const localOptions = merge(videojs.options, options);\n    return VhsSourceHandler.canPlayType(srcObj.type, localOptions);\n  },\n  handleSource(source, tech, options = {}) {\n    const localOptions = merge(videojs.options, options);\n    tech.vhs = new VhsHandler(source, tech, localOptions);\n    tech.vhs.xhr = xhrFactory();\n    tech.vhs.setupXhrHooks_();\n    tech.vhs.src(source.src, source.type);\n    return tech.vhs;\n  },\n  canPlayType(type, options) {\n    const simpleType = simpleTypeFromSourceType(type);\n    if (!simpleType) {\n      return '';\n    }\n    const overrideNative = VhsSourceHandler.getOverrideNative(options);\n    const supportsTypeNatively = Vhs.supportsTypeNatively(simpleType);\n    const canUseMsePlayback = !supportsTypeNatively || overrideNative;\n    return canUseMsePlayback ? 'maybe' : '';\n  },\n  getOverrideNative(options = {}) {\n    const {\n      vhs = {}\n    } = options;\n    const defaultOverrideNative = !(videojs.browser.IS_ANY_SAFARI || videojs.browser.IS_IOS);\n    const {\n      overrideNative = defaultOverrideNative\n    } = vhs;\n    return overrideNative;\n  }\n};\n/**\n * Check to see if the native MediaSource object exists and supports\n * an MP4 container with both H.264 video and AAC-LC audio.\n *\n * @return {boolean} if  native media sources are supported\n */\n\nconst supportsNativeMediaSources = () => {\n  return browserSupportsCodec('avc1.4d400d,mp4a.40.2');\n}; // register source handlers with the appropriate techs\n\nif (supportsNativeMediaSources()) {\n  videojs.getTech('Html5').registerSourceHandler(VhsSourceHandler, 0);\n}\nvideojs.VhsHandler = VhsHandler;\nvideojs.VhsSourceHandler = VhsSourceHandler;\nvideojs.Vhs = Vhs;\nif (!videojs.use) {\n  videojs.registerComponent('Vhs', Vhs);\n}\nvideojs.options.vhs = videojs.options.vhs || {};\nif (!videojs.getPlugin || !videojs.getPlugin('reloadSourceOnError')) {\n  videojs.registerPlugin('reloadSourceOnError', reloadSourceOnError);\n}\n\nexport { videojs as default };\n"],"names":["version$6","hooks_","hooks","type","fn","concat","removeHook","index","indexOf","slice","splice","FullscreenApi","prefixed","apiMap","specApi","browserApi","i","length","history","log$1","createLogger$1","name","delimiter","styles","logByType","level","log","args","lvl","levels","lvlRegExp","RegExp","resultName","unshift","toUpperCase","push","info","test","Array","isArray","LogByTypeFactory","createLogger","subName","subDelimiter","subStyles","resultDelimiter","undefined","createNewLogger","newName","newDelimiter","newStyles","all","off","debug","warn","error","DEFAULT","hasOwnProperty","Error","filter","fname","historyItem","clear","disable","enable","toString","Object","prototype","keys","object","isObject","each","forEach","key","reduce","initial","accum","value","isPlain","call","constructor","merge$1","sources","result","source","values","defineLazyProperty","obj","getValue","setter","set","defineProperty","enumerable","writable","options","configurable","get","Obj","freeze","__proto__","merge","ANDROID_VERSION","IS_IPOD","IOS_VERSION","IS_ANDROID","IS_FIREFOX","IS_EDGE","IS_CHROMIUM","IS_CHROME","CHROMIUM_VERSION","CHROME_VERSION","IE_VERSION","IS_SAFARI","IS_WINDOWS","IS_IPAD","IS_IPHONE","TOUCH_ENABLED","Boolean","isReal","maxTouchPoints","UAD","userAgentData","platform","brands","find","b","brand","version","USER_AGENT","userAgent","match","major","parseFloat","minor","exec","IS_IOS","IS_ANY_SAFARI","browser","isNonBlankString","str","trim","isEl","nodeType","isInFrame","x","createQuerier","method","selector","context","ctx","createEl","tagName","properties","attributes","content","el","getOwnPropertyNames","propName","val","textContent","attrName","setAttribute","appendContent","text","innerText","prependTo","child","parent","firstChild","insertBefore","appendChild","hasClass","element","classToCheck","throwIfWhitespace","classList","contains","addClass","classesToAdd","add","prev","current","split","removeClass","classesToRemove","remove","toggleClass","classToToggle","predicate","className","toggle","setAttributes","attrValue","removeAttribute","getAttributes","tag","knownBooleans","attrs","attrVal","includes","getAttribute","attribute","blockTextSelection","focus","unblockTextSelection","getBoundingClientRect","parentNode","rect","k","height","computedStyle","width","findPosition","offsetParent","left","top","offsetWidth","offsetHeight","fullscreenElement","offsetLeft","offsetTop","getPointerPosition","event","translated","y","item","nodeName","toLowerCase","transform","map","Number","position","boxTarget","target","box","boxW","boxH","offsetY","offsetX","changedTouches","pageX","pageY","Math","max","min","isTextNode","emptyEl","removeChild","normalizeContent","node","insertContent","isSingleLeftClick","button","buttons","$","$$","prop","computedStyleValue","e","getPropertyValue","copyStyleSheetsToWindow","win","styleSheet","cssRules","rule","cssText","join","style","document","head","link","rel","media","mediaText","href","Dom","videojs$1","_windowLoaded","autoSetup","vids","audios","divs","mediaEls","mediaEl","autoSetupTimeout","player","wait","vjs","setWindowLoaded","createStyleElement","setTextContent","DomData","WeakMap","_supportsPassive","_guid","newGUID","_cleanUpEvents","elem","has","data","handlers","removeEventListener","dispatcher","detachEvent","disabled","delete","_handleMultipleEvents","types","callback","fixEvent","fixed_","returnTrue","returnFalse","isPropagationStopped","isImmediatePropagationStopped","old","preventDefault","srcElement","relatedTarget","fromElement","toElement","returnValue","defaultPrevented","stopPropagation","cancelBubble","stopImmediatePropagation","clientX","doc","body","scrollLeft","clientLeft","clientY","scrollTop","clientTop","which","charCode","keyCode","supportsPassive","opts","passiveEvents","on","guid","hash","handlersCopy","m","n","addEventListener","passive","attachEvent","removeType","t","trigger","elemData","ownerDocument","bubbles","targetData","one","func","apply","this","arguments","any","Events","UPDATE_REFRESH_INTERVAL","bind_","uid","bound","bind","throttle","last","now","debounce","immediate","timeout","debounced","self","later","clearTimeout","setTimeout","cancel","Fn","EVENT_MAP","EventTarget$2","ael","allowedEvents_","queueTrigger","Map","oldTimeout","size","dispatchEvent","objName","name_","isEvented","eventBusEl_","every","isValidEventType","validateTarget","fnName","validateEventType","validateListener","listener","normalizeListenArgs","isTargetingSelf","shift","listen","EventedMixin","removeListenerOnDispose","removeRemoverOnTargetDispose","wrapper","largs","targetOrType","typeOrListener","evented","eventBusKey","assign","eventedCallbacks","el_","StatefulMixin","state","setState","stateUpdates","changes","from","to","stateful","defaultState","handleStateChanged","string","replace","w","toTitleCase$1","titleCaseEquals","str1","str2","Str","toTitleCase","Component$1","ready","play","player_","isDisposed_","parentComponent_","options_","id_","id","c","handleLanguagechange","children_","childIndex_","childNameIndex_","setTimeoutIds_","Set","setIntervalIds_","rafIds_","namedRafs_","clearingTimersOnDispose_","initChildren","reportTouchActivity","enableTouchActivity","dispose","readyQueue_","restoreEl","replaceChild","isDisposed","localize","tokens","defaultValue","code","language","languages","primaryCode","primaryLang","localizedString","ret","contentEl","contentEl_","children","getChildById","getChild","getDescendant","names","acc","currentChild","setIcon","iconName","experimentalSvgIcons","xmlnsURL","iconContainer","svgEl","setAttributeNS","useEl","iconIsSet_","querySelector","addChild","component","componentName","componentClassName","componentClass","ComponentClass","getComponent","refNode","childFound","compEl","parentOptions","handleAdd","playerOptions","newChild","workingChildren","Tech","some","wchild","isTech","buildCSSClass","sync","isReady_","triggerReady","readyQueue","show","hide","lockShowing","unlockShowing","num","skipListeners","dimension","dimensions","widthOrHeight","pxIndex","parseInt","currentDimension","computedWidthOrHeight","isNaN","currentDimensions","currentWidth","currentHeight","blur","handleKeyDown","handleKeyPress","emitTapEvents","touchStart","firstTouch","couldBeTap","touches","xdiff","ydiff","sqrt","noTap","reportUserActivity","report","touchHolding","clearInterval","setInterval","touchEnd","timeoutId","clearTimersOnDispose_","interval","intervalId","requestAnimationFrame","requestNamedAnimationFrame","cancelNamedAnimationFrame","cancelAnimationFrame","idName","cancelName","registerComponent","ComponentToRegister","isComp","isPrototypeOf","reason","components_","Player","players","playerNames","pname","getRange","valueIndex","ranges","rangeIndex","maxIndex","rangeCheck","createTimeRangesObj","timeRangesObj","start","end","iterator","createTimeRanges$1","defaultImplementation","seconds","guide","s","floor","h","gm","gh","Infinity","implementation","setFormatTime","customImplementation","resetFormatTime","formatTime","Time","createTimeRanges","createTimeRange","bufferedPercent","buffered","duration","bufferedDuration","MediaError","message","defaultMessages","status","errorTypes","errNum","isPromise","then","silencePromise","trackToJson_","track","cues","cue","startTime","endTime","textTrackConverter","tech","trackEls","trackObjs","trackEl","json","src","textTracks","addedTrack","addRemoteTextTrack","addCue","MODAL_CLASS_NAME","ModalDialog","super","handleKeyDown_","close_","close","opened_","hasBeenOpened_","hasBeenFilled_","closeable","uncloseable","role","descEl_","description","tabIndex","label","previouslyActiveEl_","desc","open","fillAlways","fill","wasPlaying_","paused","pauseOnOpen","pause","hadControls_","controls","conditionalFocus_","opened","conditionalBlur_","temporary","closeable_","temp","controlText","fillWith","parentEl","nextSiblingEl","nextSibling","empty","closeButton","content_","activeEl","playerEl","focusableEls","focusableEls_","focusIndex","shiftKey","allChildren","querySelectorAll","hasAttribute","TrackList","tracks","tracks_","addTrack","labelchange_","removeTrack","rtrack","l","getTrackById","change","addtrack","removetrack","labelchange","disableOthers$1","list","enabled","disableOthers","selected","TextTrackList","queueChange_","triggerSelectedlanguagechange","triggerSelectedlanguagechange_","kind","selectedlanguagechange_","TextTrackCueList","setCues_","length_","oldLength","cues_","defineProp","getCueById","VideoTrackKind","alternative","captions","main","sign","subtitles","commentary","AudioTrackKind","TextTrackKind","descriptions","chapters","metadata","TextTrackMode","hidden","showing","Track","trackProps","newLabel","parseUrl","url","props","a","details","protocol","host","getAbsoluteURL","getFileExtension","path","pathParts","pop","isCrossOrigin","winLoc","urlInfo","Url","parseCues","srcContent","parser","Parser","StringDecoder","errors","oncue","onparsingerror","onflush","parse","groupCollapsed","groupEnd","flush","loadTrack","uri","crossOrigin","cors","withCredentials","tech_","err","response","responseBody","loaded_","TextTrack","settings","srclang","mode","default_","default","activeCues_","preload_","preloadTextTracks","activeCues","changed","timeupdateHandler","rvf_","requestVideoFrameCallback","stopTracking","startTracking","defineProperties","newMode","ct","currentTime","active","cancelVideoFrameCallback","originalCue","VTTCue","originalCue_","removeCue","cuechange","AudioTrack","newEnabled","VideoTrack","newSelected","HTMLTrackElement","readyState","NONE","LOADED","load","LOADING","ERROR","NORMAL","audio","ListClass","changing_","enabledChange_","TrackClass","capitalName","video","selectedChange_","getterName","privateName","REMOTE","remoteText","remoteTextEl","trackElements","trackElements_","addTrackElement_","trackElement","getTrackElementByTrack_","trackElement_","removeTrackElement_","ALL","onDurationChange_","onDurationChange","trackProgress_","trackProgress","trackCurrentTime_","trackCurrentTime","stopTrackingCurrentTime_","stopTrackingCurrentTime","disposeSourceHandler_","disposeSourceHandler","queuedHanders_","hasStarted_","featuresProgressEvents","manualProgressOn","featuresTimeupdateEvents","manualTimeUpdatesOn","nativeCaptions","nativeTextTracks","featuresNativeTextTracks","emulateTextTracks","autoRemoteTextTracks_","initTrackListeners","nativeControlsForTouch","triggerSourceset","manualProgress","manualProgressOff","stopTrackingProgress","progressInterval","numBufferedPercent","bufferedPercent_","duration_","manualTimeUpdates","manualTimeUpdatesOff","currentTimeInterval","manuallyTriggered","clearTracks","removeRemoteTextTrack","cleanupAutoTextTracks","reset","setCrossOrigin","error_","played","setScrubbing","_isScrubbing","scrubbing","setCurrentTime","_seconds","trackListChanges","addWebVttScript_","script","onload","onerror","remoteTracks","remoteTextTracks","handleAddTrack","handleRemoveTrack","updateDisplay","textTracksChanges","addTextTrack","createTrackHelper","createRemoteTextTrack","manualCleanup","htmlTrackElement","remoteTextTrackEls","getVideoPlaybackQuality","requestPictureInPicture","Promise","reject","disablePictureInPicture","setDisablePictureInPicture","cb","setPoster","playsinline","setPlaysinline","overrideNativeAudioTracks","override","overrideNativeVideoTracks","canPlayType","_type","canPlaySource","srcObj","registerTech","techs_","defaultTechOrder_","getTech","featuresVolumeControl","featuresMuteControl","featuresFullscreenResize","featuresPlaybackRate","featuresSourceset","featuresVideoFrameCallback","withSourceHandlers","_Tech","registerSourceHandler","handler","sourceHandlers","can","selectSourceHandler","canHandleSource","sh","originalFn","sourceHandler_","setSource","nativeSourceHandler","currentSource_","handleSource","middlewares","middlewareInstances","TERMINATOR","next","setSourceHelper","mediate","middleware","arg","callMethod","middlewareValue","middlewareIterator","terminated","mws","mw","executeRight","allowedGetters","muted","seekable","volume","ended","allowedSetters","setMuted","setVolume","allowedMediators","lastRun","mwFactory","mwrest","mwf","mwi","getOrCreateFactory","_src","MimetypesKind","opus","ogv","mp4","mov","m4v","mkv","m4a","mp3","aac","caf","flac","oga","wav","m3u8","mpd","jpg","jpeg","gif","png","svg","webp","getMimetype","ext","filterSource","newsrc","srcobj","fixSource","mimetype","j","techOrder","techName","isSupported","loadTech_","ClickableComponent","handleMouseOver_","handleMouseOver","handleMouseOut_","handleMouseOut","handleClick_","handleClick","tabIndex_","createControlTextEl","controlTextEl_","controlText_","localizedText","nonIconControl","noUITitleAttributes","enabled_","clickHandler","PosterImage","update","update_","crossorigin","poster","setSrc","loading","alt","darkGray","lightGray","fontMap","monospace","sansSerif","serif","monospaceSansSerif","monospaceSerif","proportionalSansSerif","proportionalSerif","casual","smallcaps","constructColor","color","opacity","hex","tryUpdateStyle","getCSSPositionValue","updateDisplayHandler","updateDisplayOverlay","toggleDisplay","preselectTrack","screenOrientation","orientation","changeOrientationEvent","modes","trackList","userPref","cache_","selectedLanguage","firstDesc","firstCaptions","preferredTrack","clearDisplay","processCues","allowMultipleShowingTracks","showingTracks","updateForTrack","descriptionsTrack","captionsSubtitlesTrack","videoHeight","supports","playerWidth","playerHeight","playerAspectRatio","videoAspectRatio","videoWidth","insetInlineMatch","insetBlockMatch","abs","round","updateDisplayState","overrides","textTrackSettings","getValues","cueDiv","displayState","textOpacity","backgroundColor","backgroundOpacity","windowColor","windowOpacity","edgeStyle","textShadow","fontPercent","fontSize","fontFamily","fontVariant","cueEl","isAudio","playerType","dir","Button","BigPlayButton","mouseused_","handleMouseDown","playPromise","playToggle","playFocus","PlayToggle","replay","handlePlay","handlePause","handleEnded","handleSeeked","TimeDisplay","updateTextNode_","span","labelText_","textNode_","enableSmoothSeeking","updateContent","time","formattedTime_","oldNode","CurrentTimeDisplay","getCache","DurationDisplay","div","RemainingTimeDisplay","displayNegative","remainingTimeDisplay","remainingTime","updateShowing","SeekToLive","updateLiveEdgeStatus","liveTracker","updateLiveEdgeStatusHandler_","textEl_","atLiveEdge","seekToLiveEdge","clamp","number","Num","Slider","handleMouseDown_","handleMouseUp_","handleMouseUp","handleMouseMove_","handleMouseMove","bar","barName","vertical","playerEvent","progress","getProgress","progress_","sizeKey","toFixed","getPercent","calculateDistance","stepBack","stepForward","bool","vertical_","percentify","partEls_","loadedText","separator","percentageEl_","isLive","seekableEnd","bufferedEnd","percent","percent_","part","dataset","seekBarRect","seekBarPoint","tooltipRect","playerRect","seekBarPointPx","spaceLeftOfPoint","spaceRightOfPoint","right","pullTooltipBy","write","updateTime","liveWindow","secondsBehind","PlayProgressBar","timeTooltip","MouseTimeDisplay","SeekBar","setEventHandlers_","updateInterval","enableIntervalHandler_","enableInterval_","disableIntervalHandler_","disableInterval_","toggleVisibility_","getCurrentTime_","liveCurrentTime","currentTime_","userSeek_","nextSeekedFromUser","seekableStart","videoWasPlaying","mouseDown","newTime","distance","mouseTimeDisplay","handleAction","gotoFraction","STEP_SECONDS","ProgressControl","throttledHandleMouseSeek","handleMouseSeek","handleMouseUpHandler_","handleMouseDownHandler_","seekBar","playProgressBar","seekBarEl","removeListenersAddedOnMousedownAndTouchstart","PictureInPictureToggle","handlePictureInPictureChange","handlePictureInPictureEnabledChange","handlePictureInPictureAudioModeChange","currentType","substring","audioPosterMode","audioOnlyMode","isInPictureInPicture","exitPictureInPicture","enableDocumentPictureInPicture","FullscreenToggle","handleFullscreenChange","fsApi_","fullscreenEnabled","isFullscreen","exitFullscreen","requestFullscreen","rangeBarRect","rangeBarPoint","volumeBarPointPx","updateVolume","MouseVolumeLevelDisplay","bottom","VolumeBar","updateLastVolume_","updateARIAAttributes","mouseVolumeLevelDisplay","volumeBarEl","volumeBarRect","volumeBarPoint","checkMuted","ariaValue","volumeAsPercentage_","volumeBeforeDrag","lastVolume_","VolumeControl","volumeBar","checkVolumeSupport","throttledHandleMouseMove","orientationClass","MuteToggle","checkMuteSupport","vol","lastVolume","volumeToSet","updateIcon_","updateControlText_","VolumePanel","inline","volumeControl","handleKeyPressHandler_","volumePanelState_","muteToggle","handleVolumeControlKeyUp","sliderActive_","sliderInactive_","SkipForward","validOptions","skipTime","getSkipForwardTime","controlBar","skipButtons","forward","currentVideoTime","SkipBackward","getSkipBackwardTime","backward","Menu","menuButton_","menuButton","focusedChild_","boundHandleBlur_","handleBlur","boundHandleTapClick_","handleTapClick","addEventListenerForItem","removeEventListenerForItem","addItem","childComponent","contentElType","append","btn","buttonPressed_","unpressButton","childComponents","foundComponent","stepChild","MenuButton","buttonClass","handleMenuKeyUp_","handleMenuKeyUp","menu","handleMouseLeave","handleSubmenuKeyDown","createMenu","items","hideThreshold_","title","titleEl","titleComponent","createItems","buildWrapperCSSClass","menuButtonClass","pressButton","handleSubmenuKeyPress","TrackButton","updateHandler","MenuKeys","MenuItem","selectable","isSelected_","multiSelectable","menuItemEl","TextTrackMenuItem","kinds","changeHandler","handleTracksChange","selectedLanguageChangeHandler","handleSelectedLanguageChange","onchange","initEvent","referenceTrack","shouldBeSelected","OffTextTrackMenuItem","allHidden","TextTrackButton","TrackMenuItem","label_","kinds_","kind_","ChaptersTrackMenuItem","ChaptersButton","selectCurrentItem_","track_","findChaptersTrack","setTrack","updateHandler_","remoteTextTrackEl","getMenuCaption","mi","DescriptionsButton","SubtitlesButton","CaptionSettingsMenuItem","CaptionsButton","SubsCapsMenuItem","parentSpan","SubsCapsButton","language_","AudioTrackMenuItem","audioTracks","featuresNativeAudioTracks","AudioTrackButton","PlaybackRateMenuItem","rate","playbackRate","PlaybackRateMenuButton","labelElId_","updateVisibility","updateLabel","handlePlaybackRateschange","labelEl_","rates","playbackRates","playbackRateSupported","Spacer","ControlBar","ErrorDisplay","LOCAL_STORAGE_KEY$1","COLOR_BLACK","COLOR_BLUE","COLOR_CYAN","COLOR_GREEN","COLOR_MAGENTA","COLOR_RED","COLOR_WHITE","COLOR_YELLOW","OPACITY_OPAQUE","OPACITY_SEMI","OPACITY_TRANS","selectConfigs","v","parseOptionValue","endDialog","setDefaults","persistTextTrackSettings","saveSettings","config","restoreSettings","createElSelect_","legendId","selectLabelledbyIds","o","optionId","createElFgColor_","createElBgColor_","createElWinColor_","createElColors_","innerHTML","createElFont_","createElControls_","defaultsDescription","selectedIndex","setValues","setSelectedOption","JSON","getItem","setItem","stringify","removeItem","ttDisplay","subsCapsBtn","subsCapsButton","ccBtn","captionsButton","RESIZE_OBSERVER_AVAILABLE","ResizeObserver","loadListener_","resizeObserver_","debouncedHandler_","resizeHandler","observe","contentWindow","unloadListener_","unobserve","disconnect","resizeObserver","defaults","trackingThreshold","liveTolerance","trackLiveHandler_","trackLive_","handlePlay_","handleFirstTimeupdate_","handleFirstTimeupdate","handleSeeked_","seekToLiveEdge_","reset_","handleDurationchange","toggleTracking","deltaTime","lastTime_","pastSeekEnd_","pastSeekEnd","isBehind","seekedBehindLive_","timeupdateSeen_","behindLiveEdge_","liveui","isTracking","hasStarted","trackingInterval_","timeDiff","nextSeekedFromUser_","lastSeekEnd_","seekableEnds","sort","seekableStarts","behindLiveEdge","updateDom_","els","techEl","techAriaAttrs","techAriaAttr","sourcesetLoad","srcUrls","innerHTMLDescriptorPolyfill","cloneNode","dummy","docFrag","childNodes","getDescriptor","priority","descriptor","getOwnPropertyDescriptor","firstSourceWatch","resetSourceWatch_","innerDescriptor","getInnerHTMLDescriptor","appendWrapper","appendFn","retval","srcDescriptorPolyfill","setupSourceset","resetSourceset_","srcDescriptor","getSrcDescriptor","oldSetAttribute","oldLoad","currentSrc","Html5","crossoriginTracks","initNetworkState_","handleLateInit_","enableSourceset","setupSourcesetHandling_","isScrubbing_","hasChildNodes","nodes","nodesLength","removeNodes","proxyNativeTracks_","restoreMetadataTracksInIOSNativePlayer_","setControls","proxyWebkitFullscreen_","disposeMediaElement","metadataTracksPreFullscreenState","takeMetadataTrackSnapshot","storedMode","restoreTrackMode","storedTrack","overrideNative_","lowerCaseType","eventName","proxyNativeTracksForType_","elTracks","techTracks","listeners","currentTarget","removeOldTracks","removeTracks","found","playerElIngest","movingMediaElementInDOM","clone","techId","class","playerId","preload","settingsAttrs","attr","networkState","loadstartFired","setLoadstartFired","triggerLoadstart","eventsToTrigger","isScrubbing","fastSeek","checkProgress","NaN","endFn","beginFn","webkitPresentationMode","nativeIOSFullscreen","supportsFullScreen","webkitEnterFullScreen","enterFullScreen","HAVE_METADATA","exitFullScreen","webkitDisplayingFullscreen","webkitExitFullScreen","webkitKeys","resetMediaElement","videoPlaybackQuality","webkitDroppedFrameCount","webkitDecodedFrameCount","droppedVideoFrames","totalVideoFrames","creationTime","TEST_VID","canControlVolume","canControl","canMuteVolume","canControlPlaybackRate","canOverrideAttributes","noop","supportsNativeTextTracks","supportsNativeVideoTracks","videoTracks","supportsNativeAudioTracks","TECH_EVENTS_RETRIGGER","TECH_EVENTS_QUEUE","canplay","canplaythrough","playing","seeked","BREAKPOINT_ORDER","BREAKPOINT_CLASSES","charAt","DEFAULT_BREAKPOINTS","tiny","xsmall","small","medium","large","xlarge","huge","getTagSettings","closest","boundDocumentFullscreenChange_","documentFullscreenChange_","boundFullWindowOnEscKey_","fullWindowOnEscKey","boundUpdateStyleEl_","updateStyleEl_","boundApplyInitTime_","applyInitTime_","boundUpdateCurrentBreakpoint_","updateCurrentBreakpoint_","boundHandleTechClick_","handleTechClick_","boundHandleTechDoubleClick_","handleTechDoubleClick_","boundHandleTechTouchStart_","handleTechTouchStart_","boundHandleTechTouchMove_","handleTechTouchMove_","boundHandleTechTouchEnd_","handleTechTouchEnd_","boundHandleTechTap_","handleTechTap_","isFullscreen_","isPosterFromTech_","queuedCallbacks_","userActive_","debugEnabled_","audioOnlyMode_","audioPosterMode_","audioOnlyCache_","hiddenChildren","tagAttributes","languagesToLower","languages_","resetCache_","poster_","controls_","changingSrc_","playCallbacks_","playTerminatedQueue_","autoplay","plugins","scrubbing_","fullscreenchange","fluid_","playerOptionsCopy","middleware_","parsedSVG","parseFromString","sprite","documentElement","display","majorVersion","userActive","listenForUserActivity_","breakpoints","responsive","styleEl_","playerElIngest_","divEmbed","tabindex","defaultsStyleEl","fill_","fluid","aspectRatio","links","getElementsByTagName","linkEl","techGet_","techCall_","posterImage","privDimension","parsedVal","ratio","aspectRatio_","width_","height_","idClass","ratioParts","ratioMultiplier","unloadTech_","titleTechName","camelTechName","techName_","normalizeAutoplay","techOptions","loop","techCanOverridePoster","TechClass","handleTechReady_","textTracksJson_","eventObj","seeking","handleTechLoadStart_","handleTechSourceset_","handleTechWaiting_","handleTechEnded_","handleTechSeeking_","handleTechPlay_","handleTechPause_","handleTechDurationChange_","handleTechFullscreenChange_","handleTechFullscreenError_","handleTechEnterPictureInPicture_","handleTechLeavePictureInPicture_","handleTechError_","handleTechPosterChange_","handleTechTextData_","handleTechRateChange_","usingNativeControls","addTechControlsListeners_","safety","removeTechControlsListeners_","manualAutoplay_","resolveMuted","previouslyMuted","restoreMuted","mutedPromise","catch","promise","updateSourceCaches_","matchingSources","findMimetype","sourceElSources","sourceEls","matchingSourceEls","sourceObj","updateSourceCaches","playerSrc","currentSource","eventSrc","lastSource_","techSrc","request","lastPlaybackRate","queued","timeWhenWaiting","timeUpdateListener","handleTechCanPlay_","handleTechCanPlayThrough_","handleTechPlaying_","handleTechSeeked_","userActions","click","doubleClick","userWasActive","cancelable","toggleFullscreenClass_","targetPlayer","isFs","matches","fullscreen","togglePictureInPictureClass_","initTime","inactivityTimeout","defaultPlaybackRate","reduceRight","resolve","play_","isSrcReady","isSafariOrIOS","waitToPlay_","resetProgressBar_","runPlayTerminatedQueue_","runPlayCallbacks_","queue","q","callbacks","isFinite","percentAsDecimal","defaultMuted","isFS","oldValue","fullscreenOptions","offHandler","errorHandler","requestFullscreenHelper_","fsOptions","preferFullWindow","enterFullWindow","exitFullscreenHelper_","exitFullWindow","isFullWindow","docOrigOverflow","overflow","isPiP","isInPictureInPicture_","pipContainer","titleBar","requestWindow","pipWindow","pipVideo","window","hotkeys","isContentEditable","excludeElement","activeElement","handleHotkeys","fullscreenKey","keydownEvent","muteKey","playPauseKey","FSToggle","selectSource","techs","findFirstPassingTechSourcePair","outerArray","innerArray","tester","outerChoice","innerChoice","foundSourceAndTech","finder","sourceOrder","handleSrc_","isRetry","resetRetryOnError_","middlewareSource","src_","notSupportedMessage","setTech","retry","stopListeningForErrors","sourceTech","vhs","doReset_","resetControlBarUI_","resetPlaybackRate_","resetVolumeBar_","currentTimeDisplay","durationDisplay","progressControl","loadProgressBar","currentSources","techAutoplay","newPoster","usingNativeControls_","hookFunction","newErr","suppressNotSupportedError","triggerSuppressedError","errorDisplay","userActivity_","mouseInProgress","lastMoveX","lastMoveY","handleActivity","handleMouseUpAndMouseLeave","screenX","screenY","isAudio_","enableAudioOnlyUI_","playerChildren","controlBarHeight","disableAudioOnlyUI_","exitPromises","enablePosterModeUI_","disablePosterModeUI_","String","toJSON","createModal","modal","currentBreakpoint","candidateBreakpoint","breakpoints_","breakpoint_","removeCurrentBreakpoint_","currentBreakpointClass","responsive_","loadMedia","artist","artwork","tt","getMedia","baseOptions","tagOptions","dataSetup","childName","previousLogLevel_","newRates","navigator","html5","userLanguage","navigationUI","BASE_PLUGIN_NAME","PLUGIN_CACHE_KEY","pluginStorage","pluginExists","getPlugin","markPluginAsActive","triggerSetupEvent","before","createPluginFactory","PluginSubClass","plugin","instance","getEventHash","Plugin","VERSION","isBasic","p","registerPlugin","basicPluginWrapper","createBasicPlugin","deregisterPlugin","getPlugins","getPluginVersion","deprecateForMajor","oldName","warned","deprecate","usingPlugin","hasPlugin","normalizeId","videojs","getPlayer","TypeError","rootNode","getRootNode","defaultView","PlayerComponent","hook","hookOnce","original","getPlayers","nId","getAllPlayers","comp","use","writeable","mergeOptions","addLanguage","EventTarget","xhr","dom","QualityLevel","representation","bitrate","bandwidth","frameRate","QualityLevelList","levels_","selectedIndex_","Symbol","addQualityLevel","qualityLevel","getQualityLevelById","removeQualityLevel","removed","addqualitylevel","removequalitylevel","version$5","qualityLevels","originalPluginFn","qualityLevelList","disposeHandler","initPlugin$1","resolveUrl","resolveManifestRedirect","req","responseURL","logger","TIME_FUDGE_FACTOR","SAFE_TIME_DELTA","filterRanges","timeRanges","results","findRange","findNextRange","printableRange","range","strArr","timeRangesToArray","timeRangesList","lastBufferedEnd","timeAheadOf","segmentDurationWithParts","playlist","segment","parts","preloadHints","partTargetDuration","getPartsAndSegments","segments","si","pi","segmentIndex","partIndex","getLastParts","lastSegment","getKnownPartCount","preloadSegment","partCount","count","hint","liveEdgeDelay","endList","suggestedPresentationDelay","hasParts","serverControl","partHoldBack","holdBack","targetDuration","intervalDuration","endSequence","expired","mediaSequence","precise","backwardDuration","forwardDuration","totalDuration","sumDurations","defaultDuration","durationList","startIndex","endIndex","durations","playlistEnd","useSafeLiveEnd","liveEdgePadding","lastSegmentEndTime","isExcluded","excludeUntil","Date","isIncompatible","isEnabled","excluded","isLowestEnabledRendition","playlists","currentBandwidth","BANDWIDTH","MAX_VALUE","playlistMatch","resolvedUri","someAudioVariant","AUDIO","mediaGroups","groupName","isAudioOnly","variant","CODECS","Playlist","getMediaInfoForTime","startingSegmentIndex","startingPartIndex","exactManifestTimings","partsAndSegments","partAndSegment","canUseFudgeFactor","isDisabled","isAes","estimateSegmentRequestTime","segmentDuration","bytesReceived","createPlaylistID","groupID","group","forEachMediaGroup","mediaType","groupKey","labelKey","mediaProperties","setupMediaPlaylist","playlistErrors_","addPropertiesToMain","createGroupID","phonyUri","audioOnlyMain","groupId","setupMediaPlaylists","resolveMediaGroupUris","DateRangesStorage","offset_","pendingDateRanges_","processedDateRanges_","setOffset","firstSegment","programDateTime","setPendingDateRanges","dateRanges","dateRange","startDate","getTime","trimProcessedDateRanges_","pendingDateRange","processDateRange","getDateRangesToProcess","dateRangeClasses","dateRangesToProcess","classListIndex","endDate","endOnNext","plannedDuration","EventTarget$1","updateSegment","skipped","resolveSegmentUris","baseUri","getAllSegments","isPlaylistUnchanged","updateMain$1","newMedia","unchangedCheck","oldMedia","mergedPlaylist","skip","skippedSegments","offset","oldSegments","newSegments","currentMap","newIndex","oldSegment","newSegment","updateSegments","refreshDelay","lastPart","lastDuration","PlaylistLoader","logger_","vhs_","addDateRangesToTextTrack_","addDateRangesToTextTrack","vhsOptions","customTagParsers","customTagMappers","llhls","dateRangesStorage_","handleMediaupdatetimeout_","handleLoadedPlaylist_","mediaPlaylist","availableDateRanges","parameters","canBlockReload","nextMSN","nextPart","_HLS_part","_HLS_msn","canSkipUntil","_HLS_skip","canSkipDateranges","parsedUri","searchParams","addLLHLSQueryDirectives","playlistRequestError","haveMetadata","playlistString","responseText","startingState","parseManifest_","manifestString","onwarn","oninfo","customParser","addParser","mapper","addTagMapper","manifest","parseManifest","playlistObject","lastRequest","pendingMedia_","media_","updateMediaUpdateTimeout_","stopRequest","mediaUpdateTimeout","finalRenditionTimeout","oldRequest","onreadystatechange","abort","shouldDelay","delay","mediaChange","mainPlaylistRef","started","setupInitialPlaylist","srcUri","mainForMedia","updateOrDeleteClone","isUpdate","pathway","ID","oldPlaylistUri","oldPlaylistId","newPlaylistUri","createCloneURI_","newPlaylistId","createCloneAttributes_","updatedPlaylist","createClonePlaylist_","updateOrDeleteCloneMedia","oldMediaPlaylist","createClonedMediaGroups_","addClonePathway","basePlaylist","playlistId","baseID","newUri","newPlaylistID","newMediaPlaylist","newProps","baseURI","URL","hostname","HOST","params","PARAMS","oldAttributes","getKeyIdSet","contentProtection","keyIds","keysystem","keyId","videojsXHR","callbackWrapper","reqResponse","responseType","responseTime","roundTripTime","requestTime","byteLength","headers","responseHeaders","timedout","aborted","statusCode","xhrFactory","XhrFunction","beforeRequest","Vhs","_requestCallbackSet","_responseCallbackSet","xhrMethod","beforeRequestOptions","requestSet","newOptions","requestCallback","callAllRequestHooks","responseSet","responseCallback","callAllResponseHooks","originalAbort","segmentXhrHeaders","byterange","Range","byterangeEnd","byterangeStart","byterangeStr","textRange","formatHexString","formatAsciiString","fromCharCode","createTransferableMessage","transferable","bytes","buffer","byteOffset","initSegmentId","initSegment","segmentKeyId","hexDump","step","ascii","utils","tagDump","textRanges","getProgramTime","matchedSegment","segmentEnd","videoTimingInfo","transmuxedPresentationEnd","estimatedStart","transmuxedPresentationStart","findSegmentForPlayerTime","seekTime","programTimeObject","mediaSeconds","programTime","playerTime","dateTimeObject","transmuxerPrependedSeconds","offsetFromSegmentStart","playerTimeToProgramTime","toISOString","seekToProgramTime","retryCount","seekTo","pauseAfterSeek","verifyProgramDateTimeTags","lastSegmentStart","lastSegmentDuration","findSegmentForProgramTime","mediaOffset","comparisonTimeStamp","segmentDateTime","segmentTimeEpoch","getOffsetFromTimestamp","seekToTime","callbackOnCompleted","dashPlaylistUnchanged","sidx","aSegment","bSegment","aByterange","bByterange","dashGroupId","NAME","updateMain","oldMain","newMain","sidxMapping","noChanges","minimumUpdatePeriod","timelineStarts","sidxKey","playlistUpdate","removeOldMediaGroupLabels","compareSidxEntry","oldSidxMapping","newSidxMapping","currentSidxInfo","savedSidxInfo","sidxInfo","DashPlaylistLoader","srcUrlOrPlaylist","mainPlaylistLoader","mainPlaylistLoader_","isMain_","addMetadataToTextTrack","refreshXml_","refreshMedia_","loadedPlaylists_","srcUrl","sidxMapping_","childPlaylist_","requestErrored_","addSidxSegments_","mediaRequest_","fin","subarray","id3Offset","finished","endRequestAndCallback","_bytes","progressListener","newPart","beforeSend","overrideMimeType","total","loaded","containerRequest","container","internal","playlistExclusionDuration","minimumUpdatePeriodTimeout_","createMupOnMedia_","hasPendingRequest","sidxChanged","isFinalRendition","updateMinimumUpdatePeriodTimeout_","requestMain_","mainChanged","haveMain_","mainXml_","date","mainLoaded_","handleMain_","syncClientServerClock_","done","utcTiming","clientOffset_","serverTime","mainXml","clientOffset","previousManifest","manifestUri","parseMainXml","location","locations","addEventStreamToMetadataTrack_","mpl","mup","createMUPTimeout_","mediaGroupSidx","filterChangedSidxMappings","mediaID","mediaChanged","createMediaUpdateTimeout","eventStream","metadataArray","eventStreamNode","cueTime","frames","messageData","defaultKID","Config","GOAL_BUFFER_LENGTH","MAX_GOAL_BUFFER_LENGTH","BACK_BUFFER_LENGTH","GOAL_BUFFER_LENGTH_RATE","INITIAL_BANDWIDTH","BANDWIDTH_VARIANCE","BUFFER_LOW_WATER_LINE","MAX_BUFFER_LOW_WATER_LINE","EXPERIMENTAL_MAX_BUFFER_LOW_WATER_LINE","BUFFER_LOW_WATER_LINE_RATE","BUFFER_HIGH_WATER_LINE","browserWorkerPolyFill","workerObj","factory","objectUrl","createObjectURL","Blob","blob","BlobBuilder","getBlob","worker","Worker","objURL","terminate","revokeObjectURL","getWorkerString","workerCode$1","commonjsGlobal","globalThis","g","Stream$8","init","pipe","destination","flushSource","partialFlush","endTimeline","dinf","esds","ftyp","mfhd","minf","moof","moov","mvex","mvhd","trak","tkhd","mdia","mdhd","hdlr","sdtp","stbl","stsd","traf","trex","trun$1","MAJOR_BRAND","MINOR_VERSION","AVC1_BRAND","VIDEO_HDLR","AUDIO_HDLR","HDLR_TYPES","VMHD","SMHD","DREF","STCO","STSC","STSZ","STTS","videoSample","audioSample","audioTrun","videoTrun","trunHeader","stream","MAX_UINT32$1","pow","numbers","getUint64","uint8","dv","DataView","getBigUint64","MAX_SAFE_INTEGER","getUint32","MAX_UINT32","avc1","avcC","btrt","dref","mdat","mp4a","pasp","smhd","stco","stsc","stsz","stts","styp","tfdt","tfhd","trun","vmhd","Uint8Array","charCodeAt","payload","setUint32","audioobjecttype","samplingfrequencyindex","channelcount","samplerate","sequenceNumber","trackFragments","boxes","flags","samples","dependsOn","isDependedOn","hasRedundancy","avc1Box","sps","pps","sequenceParameterSets","pictureParameterSets","profileIdc","profileCompatibility","levelIdc","sarRatio","hSpacing","vSpacing","samplesize","trackFragmentHeader","trackFragmentDecodeTime","trackFragmentRun","sampleDependencyTable","upperWordBaseMediaDecodeTime","lowerWordBaseMediaDecodeTime","baseMediaDecodeTime","durationPresent","sizePresent","flagsPresent","compositionTimeOffset","bytesOffest","header","sample","isLeading","paddingValue","isNonSyncSample","degradationPriority","silence","secondsToVideoTs","secondsToAudioTs","videoTsToSeconds","audioTsToSeconds","audioTsToVideoTs","videoTsToAudioTs","metadataTsToSeconds","mp4Generator","fileType","movie","sampleForFrame","frame","dataOffset","pts","dts","keyFrame","frameUtils$1","groupNalsIntoFrames","nalUnits","currentNal","currentFrame","nalCount","nalUnitType","groupFramesIntoGops","currentGop","gops","extendFirstKeyFrame","generateSampleTable","baseDataOffset","concatenateNalData","nalsByteLength","numberOfNals","view","generateSampleTableForFrame","concatenateNalDataForFrame","highPrefix","lowPrefix","zeroFill","ONE_SECOND_IN_TS$4","timestamp","sampleRate","timelineStartPts","keepOriginalTimestamps","clock$2","ONE_SECOND_IN_TS","coneOfSilence","metaTable","arr","clock$1","audioFrameUtils$1","prefixWithSilence","audioAppendStartTs","videoBaseMediaDecodeTime","baseMediaDecodeTimeTs","frameDuration","silentFrame","firstFrame","audioGapDuration","audioFillFrameCount","audioFillDuration","ceil","trimAdtsFramesByEarliestDts","adtsFrames","earliestAllowedDts","minSegmentDts","minSegmentPts","concatenateFrameData","array","sum","sumFrameByteLengths","ONE_SECOND_IN_TS$3","trackDecodeInfo$1","clearDtsInfo","maxSegmentDts","maxSegmentPts","calculateTrackBaseMediaDecodeTime","timelineStartInfo","collectDtsInfo","captionPacketParser","parseSei","payloadType","payloadSize","parseUserData","sei","parseCaptionPackets","userData","ccData","discardEmulationPreventionBytes","newLength","newData","emulationPreventionBytesPositions","sourceIndex","USER_DATA_REGISTERED_ITU_T_T35","Stream$7","cea708Parser","CaptionStream$2","parse708captions_","parse708captions","captionPackets_","ccStreams_","Cea608Stream","cc708Stream_","Cea708Stream","captionServices","cc","newCaptionPackets","escapedRBSP","latestDts_","ignoreNextEqualDts_","numSameDts_","flushCCStreams","flushType","flushStream","idx","presortIndex","packet","dispatchCea608Packet","dispatchCea708Packet","activeCea608Channel_","ccStream","setsTextOrXDSActive","setsChannel1Active","setsChannel2Active","CHARACTER_TRANSLATION_708","within708TextBlock","Cea708Window","windowNum","clearText","pendingNewLine","winAttr","penAttr","penLoc","penColor","visible","rowLock","columnLock","relativePositioning","anchorVertical","anchorHorizontal","anchorPoint","rowCount","virtualRowCount","columnCount","windowStyle","penStyle","getText","rows","rowIdx","newLine","beforeRowOverflow","isEmpty","addText","backspace","row","substr","Cea708Service","serviceNum","encoding","currentWindow","windows","createTextDecoder","startPts","setCurrentWindow","TextDecoder","textDecoder_","serviceProps","captionServiceEncodings","serviceName","serviceEncodings","current708Packet","services","new708Packet","add708Bytes","push708Packet","ptsVals","byte0","byte1","packet708","packetData","blockSize","seq","sizeCode","pushServiceBlock","service","initService","handleText","multiByteCharacter","extendedCommands","defineWindow","clearWindows","deleteWindows","displayWindows","hideWindows","toggleWindows","setWindowAttributes","setPenAttributes","setPenColor","setPenLocation","isExtended","getPts","byteIndex","flushDisplayed","char","charCodeArray","newCode","isMultiByte","extended","currentByte","nextByte","decode","unicode","byte","firstByte","secondByte","fillOpacity","fillRed","fillGreen","fillBlue","borderType","borderRed","borderGreen","borderBlue","wordWrap","printDirection","scrollDirection","justify","effectSpeed","effectDirection","displayEffect","displayedText","winId","endPts","pushCaption","textTag","penSize","italics","underline","edgeType","fontStyle","fgOpacity","fgRed","fgGreen","fgBlue","bgOpacity","bgRed","bgGreen","bgBlue","edgeRed","edgeGreen","edgeBlue","column","CHARACTER_TRANSLATION","getCharFromCode","ROWS","createDisplayBuffer","BOTTOM_ROW","indent","field","dataChannel","field_","dataChannel_","setConstants","swap","char0","char1","lastControlCode_","PADDING_","RESUME_CAPTION_LOADING_","mode_","END_OF_CAPTION_","clearFormatting","displayed_","nonDisplayed_","startPts_","ROLL_UP_2_ROWS_","rollUpRows_","setRollUp","ROLL_UP_3_ROWS_","ROLL_UP_4_ROWS_","CARRIAGE_RETURN_","shiftRowsUp_","BACKSPACE_","row_","ERASE_DISPLAYED_MEMORY_","ERASE_NON_DISPLAYED_MEMORY_","RESUME_DIRECT_CAPTIONING_","isSpecialCharacter","column_","isExtCharacter","isMidRowCode","addFormatting","isOffsetControlCode","isPAC","formatting_","indentations","isColorPAC","isNormalChar","logWarning","line","topRow_","BASE_","EXT_","CONTROL_","OFFSET_","newBaseRow","format","reverse","popOn","baseRow","rollUp","paintOn","captionStream","CaptionStream","streamTypes","H264_STREAM_TYPE","ADTS_STREAM_TYPE","METADATA_STREAM_TYPE","Stream$6","TYPE_SHARED","handleRollover$1","reference","direction","TimestampRolloverStream$1","lastDTS","referenceDTS","type_","discontinuity","MetadataStream","timestampRolloverStream","TimestampRolloverStream","handleRollover","typedArray","fromIndex","currentIndex","typedArrayIndexOf","textEncodingDescriptionByte","percentEncode$1","parseUtf8","decodeURIComponent","parseIso88591$1","unescape","parseSyncSafeInteger$1","frameParsers","mimeTypeEndIndex","descriptionEndIndex","mimeType","pictureType","pictureData","owner","privateData","parseId3","parseId3Frames","frameSize","frameStart","tagSize","parseSyncSafeInteger","StreamTypes$3","id3","bufferSize","dispatchType","chunk","dataAlignmentIndicator","d","timeStamp","TransportPacketStream","TransportParseStream","ElementaryStream","metadataStream","Stream$4","CaptionStream$1","StreamTypes$2","MP2T_PACKET_LENGTH$1","bytesInBuffer","everything","parsePsi","parsePat","parsePmt","packetsWaitingForPmt","programMapTable","psi","payloadUnitStartIndicator","pat","section_number","last_section_number","pmtPid","pmt","tableEnd","streamType","pid","processPes_","STREAM_TYPES","h264","adts","segmentHadPmt","timedMetadata","forceFlush","packetFlushable","fragment","trackId","pes","ptsDtsFlags","startPrefix","packetLength","parsePes","codec","flushStreams_","m2ts$1","PAT_PID","MP2T_PACKET_LENGTH","AdtsStream$1","m2ts_1","ONE_SECOND_IN_TS$2","ADTS_SAMPLING_FREQUENCIES$1","handlePartialSegments","frameNum","skipWarn_","frameLength","protectionSkipBytes","oldBuffer","sampleCount","adtsFrameDuration","H264Stream$1","NalByteStream","PROFILES_WITH_OPTIONAL_SPS_DATA","Stream$2","ExpGolomb","workingData","workingBytesAvailable","workingWord","workingBitsAvailable","bitsAvailable","loadWord","workingBytes","availableBytes","skipBits","skipBytes","readBits","bits","valu","skipLeadingZeros","leadingZeroCount","skipUnsignedExpGolomb","skipExpGolomb","readUnsignedExpGolomb","clz","readExpGolomb","readBoolean","readUnsignedByte","syncPoint","swapBuffer","len","currentPts","currentDts","readSequenceParameterSet","skipScalingList","nalByteStream","nalUnitTypeCode","expGolombDecoder","lastScale","nextScale","chromaFormatIdc","picOrderCntType","numRefFramesInPicOrderCntCycle","picWidthInMbsMinus1","picHeightInMapUnitsMinus1","frameMbsOnlyFlag","scalingListCount","frameCropLeftOffset","frameCropRightOffset","frameCropTopOffset","frameCropBottomOffset","AacStream$1","H264Stream","ADTS_SAMPLING_FREQUENCIES","parseId3TagSize","returnSize","getId3Offset","isLikelyAacData","parseAdtsSize","lowThree","middle","parseType","parseSampleRate","parseAacTimestamp","percentEncode","aacUtils","setTimestamp","bytesLeft","tempLength","VideoSegmentStream","AudioSegmentStream","Transmuxer","CoalesceStream","Stream","frameUtils","audioFrameUtils","trackDecodeInfo","m2ts","clock","AdtsStream","AacStream","ONE_SECOND_IN_TS$1","AUDIO_PROPERTIES","VIDEO_PROPERTIES","retriggerForStream","addPipelineLogRetriggers","transmuxer","pipeline","arrayEquals","generateSegmentTimingInfo","startDts","endDts","prependedContentDuration","firstSequenceNumber","setEarliestDts","earliestDts","setVideoBaseMediaDecodeTime","setAudioAppendStart","videoClockCyclesOfSilencePrefixed","gopsToAlignWith","minPTS","gopCache_","nalUnit","gopForFusion","firstGop","lastGop","resetStream_","getGopForFusion_","alignedGops","alignGopsAtEnd","alignGopsAtEnd_","alignGopsAtStart_","gop","dtsDistance","nearestGopObj","currentGopObj","nearestDistance","alignIndex","gopIndex","align","alignEndIndex","matchFound","trimIndex","alignGopsWith","newGopsToAlignWith","numberOfTracks","remux","remuxTracks","pendingTracks","videoTrack","pendingBoxes","pendingCaptions","pendingMetadata","pendingBytes","emittedTracks","output","audioTrack","caption","captionStreams","setRemux","hasFlushed","transmuxPipeline_","setupAacPipeline","aacStream","audioTimestampRolloverStream","timedMetadataTimestampRolloverStream","adtsStream","coalesceStream","headOfPipeline","audioSegmentStream","getLogTrigger_","hasAudio","hasVideo","setupTsPipeline","packetStream","parseStream","elementaryStream","h264Stream","videoSegmentStream","id3Frame","setBaseMediaDecodeTime","isAac","resetCaptions","getTracks","getTimescaleFromMediaHeader","getEmsgID3","bin","parseType_1","toUnsigned$2","parseType$2","findBox$2","subresults","toUnsigned$1","getUint64$2","parseTfdt$2","parseSampleFlags","parseTrun$2","dataOffsetPresent","firstSampleFlagsPresent","sampleDurationPresent","sampleSizePresent","sampleFlagsPresent","sampleCompositionTimeOffsetPresent","getInt32","parseTfhd$2","baseDataOffsetPresent","sampleDescriptionIndexPresent","defaultSampleDurationPresent","defaultSampleSizePresent","defaultSampleFlagsPresent","durationIsEmpty","defaultBaseIsMoof","sampleDescriptionIndex","defaultSampleDuration","defaultSampleSize","defaultSampleFlags","baseDataOffsetIsMoof","findBox$1","parseTfdt$1","parseTrun$1","parseTfhd$1","window$2","mapToSample","approximateOffset","parseCaptionNals","videoTrackId","trafs","mdats","captionNals","mdatTrafPairs","matchingTraf","pair","headerInfo","truns","allSamples","BigInt","parseSamples","avcStream","seiNal","lastMatchedSample","avcView","logs","seiNals","matchingSample","findSeiNals","captionParser","segmentCache","timescale","parsedCaptions","parsingPartial","isInitialized","isPartial","isNewInit","videoTrackIds","timescales","parsedData","cachedSegment","trackNals","parseEmbeddedCaptions","pushNals","nals","nal","clearParsedCaptions","resetCaptionStream","clearAllCaptions","uint8ToCString","curChar","retString","getUint64$1","isValidEmsgBox","emsg","hasScheme","scheme_id_uri","isValidV0Box","isDefined","presentation_time_delta","isValidV1Box","presentation_time","emsg$1","parseEmsgBox","boxData","event_duration","emsgBox","message_data","scaleTime","presentationTime","timeDelta","toUnsigned","toHexString","findBox","parseType$1","parseTfhd","parseTrun","parseTfdt","window$1","lowestTime","baseTime","scale","traks","tkhdVersion","getUint8","sampleDescriptions","codecConfig","codecBox","segmentData","parsedBox","parsedId3Frames","probe$2","StreamTypes$1","parsePid","parsePayloadUnitStartIndicator","parseAdaptionField","parseNalUnitType","probe$1","pusi","payloadOffset","parsePesType","parsePesTime","videoPacketContainsKeyFrame","frameBuffer","frameI","frameSyncPoint","foundKeyFrame","StreamTypes","probe","ts","SYNC_BYTE","parseAudioPes_","pesType","parsed","endLoop","table","parseVideoPes_","firstKeyFrame","console","inspectTs_","parsePsi_","tsInspector","baseTimestamp","audioCount","audioTimescale","inspectAac_","segmentInfo","audioBaseTimestamp","dtsTime","ptsTime","videoBaseTimestamp","adjustTimestamp_","MessageHandlers","initArray","postMessage","action","gopInfo","timingInfo","videoSegmentTimingInfo","presentation","audioSegmentTimingInfo","trackInfo","audioTimingInfo","wireTransmuxerEvents","pushMp4Captions","trackIds","probeMp4StartTime","probeMp4Tracks","probeEmsgID3","id3Frames","emsgData","probeTs","baseStartTime","tsStartTime","timeInfo","videoStart","audioStart","clearAllMp4Captions","clearParsedMp4Captions","setTimestampOffset","timestampOffset","appendStart","onmessage","messageHandlers","TransmuxWorker","processTransmux","audioAppendStart","onData","onTrackInfo","onAudioTimingInfo","onVideoTimingInfo","onVideoSegmentTimingInfo","onAudioSegmentTimingInfo","onId3","onCaptions","onDone","onEndedTimeline","onTransmuxerLog","isEndOfTimeline","transmuxedData","waitForEndedTimelineEvent","currentTransmux","videoFrameDtsTime","videoFramePtsTime","handleData_","handleGopInfo_","handleDone_","dequeue","ArrayBuffer","transmuxQueue","processAction","enqueueAction","transmux","segmentTransmuxer","term","workerCallback","endAction","listenForEndEvent","isArrayBuffer","transfers","REQUEST_ERRORS","abortAll","activeXhrs","handleErrors","handleKeyResponse","objects","finishProcessingFn","errorObj","Uint32Array","parseInitSegment","handleSegmentResponse","newBytes","stringToArrayBuffer","lastReachedChar","stats","getRequestStats","encryptedBytes","transmuxAndNotify","trackInfoFn","timingInfoFn","videoSegmentTimingInfoFn","audioSegmentTimingInfoFn","id3Fn","captionsFn","endedTimelineFn","dataFn","doneFn","fmp4Tracks","isMuxed","audioStartFn","audioEndFn","videoStartFn","videoEndFn","probeResult","handleSegmentBytes","bytesAsUint8Array","isFmp4","audioCodec","videoCodec","finishLoading","decrypt","decryptionWorker","decryptionHandler","decrypted","keyBytes","encrypted","iv","waitForCompletion","didError","segmentFinish","requestId","decryptedBytes","decryptSegment","endOfAllRequests","parseError","handleProgress","progressFn","progressEvent","getProgressStats","firstBytesReceivedAt","mediaSegmentRequest","xhrOptions","abortFn","keyXhr","mapKeyXhr","initSegmentOptions","initSegmentRequestCallback","handleInitSegmentResponse","initSegmentXhr","segmentRequestOptions","segmentXhr","loadendState","activeXhr","calledAbortFn","handleLoadEnd","logFn$1","isMaat","mediaAttributes","unwrapCodecList","codecList","codecs","codecCount","codecObj","codecsForPlaylist","codecInfo","getCodecs","audioGroup","defaultCodecs","logFn","representationToString","safeGetComputedStyle","property","stableSort","sortFn","newArray","cmp","comparePlaylistBandwidth","leftBandwidth","rightBandwidth","simpleSelector","playerBandwidth","limitRenditionByPlayerDimensions","playlistController","getAudioTrackPlaylists_","audioOnly","sortedPlaylistReps","RESOLUTION","rep","enabledPlaylistReps","bandwidthPlaylistReps","highestRemainingBandwidthRep","bandwidthBestRep","chosenRep","haveResolution","resolutionBestRepList","resolutionBestRep","resolutionPlusOneList","resolutionPlusOneSmallest","resolutionPlusOneRep","leastPixelDiffRep","leastPixelDiffSelector","leastPixelDiffList","pixelDiff","lastBandwidthSelector","pixelRatio","useDevicePixelRatio","systemBandwidth","playlistController_","addMetadata","inbandTextTracks","videoDuration","Cue","metadataTrack","metadataTrack_","deprecateOldCue","cuesArray","cuesGroupedByStartTime","timeSlot","sortedStartTimes","cueGroup","finiteDuration","nextTime","dateRangeAttr","scte35Out","scte35In","dateRangeKeysToOmit","createMetadataTrackIfNotExists","inBandMetadataTrackDispatchType","removeCuesFromTrack","finite","MIN_SEGMENT_DURATION_TO_SAVE_STATS","segmentInfoString","startOfSegment","mediaIndex","timeline","segmentLen","selection","isSyncRequest","independent","hasPartIndex","zeroBasedPartCount","timingInfoPropertyForMedia","shouldWaitForTimelineChange","timelineChangeController","currentTimeline","segmentTimeline","loaderType","audioDisabled","lastMainTimelineChange","lastTimelineChange","pendingAudioTimelineChange","pendingTimelineChange","segmentTooLong","maxDuration","getTroublesomeSegmentDurationMessage","sourceType","timingInfos","typeTimingInfo","mediaDuration","isSegmentWayTooLong","isSegmentSlightlyTooLong","segmentTooLongMessage","severity","SegmentLoader","mediaSource","throughput","roundTrip","resetStats_","hasPlayed_","hasPlayed","seekable_","seeking_","mediaSource_","loaderType_","currentMediaInfo_","startingMediaInfo_","segmentMetadataTrack_","segmentMetadataTrack","goalBufferLength_","goalBufferLength","sourceType_","sourceUpdater_","sourceUpdater","inbandTextTracks_","state_","timelineChangeController_","shouldSaveSegmentTimingInfo_","useDtsForTimestampOffset_","useDtsForTimestampOffset","captionServices_","checkBufferTimeout_","currentTimeline_","shouldForceTimestampOffsetAfterResync_","pendingSegment_","xhrOptions_","pendingSegments_","audioDisabled_","isPendingTimestampOffset_","gopBuffer_","timeMapping_","safeAppend_","appendInitSegment_","playlistOfLastInitSegment_","callQueue_","loadQueue_","metadataQueue_","waitingOnRemove_","quotaExceededErrorRetryTimeout_","activeInitSegmentId_","initSegments_","cacheEncryptionKeys_","cacheEncryptionKeys","keyCache_","decrypter_","decrypter","syncController_","syncController","syncPoint_","transmuxer_","createTransmuxer_","triggerSyncInfoUpdate_","isEndOfStream_","ended_","fetchAtBuffer_","newState","hasEnoughInfoToAppend_","processCallQueue_","hasEnoughInfoToLoad_","processLoadQueue_","mediaBytesTransferred","mediaRequests","mediaRequestsAborted","mediaRequestsTimedout","mediaRequestsErrored","mediaTransferDuration","mediaSecondsLoaded","mediaAppends","abort_","setAudio","removeAudio","monitorBuffer_","abortRequests","clearPendingTimelineChange","checkForAbort_","endOfStream","buffered_","getMediaInfo_","videoBuffered","audioBuffered","initSegmentForMap","storedMap","segmentKey","storedKey","couldBeginLoading_","playlist_","init_","resetEverything","newPlaylist","oldPlaylist","syncInfo","setDateTimeMappingForStart","oldId","updateMediaSequenceMap","resetLoader","resyncLoader","mediaSequenceDiff","saveExpiredSegmentInfo","force","removesRemaining","removeFinished","mapping","updatedBuffer","removeGopBuffer","removeVideo","monitorBufferTick_","fillBuffer_","updating","chooseNextRequest_","loadSegment_","appendedLastSegment","appendedLastPart","bufferedTime","preloaded","haveEnoughBuffer","getSyncPoint","targetTime","timelineSegments","getSyncSegmentCandidate","nextSegment","hasIndependentSegments","independentSegments","lastSegmentLastPart","forceTimestampOffset","generateSegmentInfo_","random","overrideCheck","timestampOffsetForSegment_","audioBufferedEnd","audioTimestampOffset","currentTimePts","gopsSafeToAlignWith","videoTimestampOffset","timestampOffsetForSegment","earlyAbortWhenNeeded_","measuredBandwidth","requestTimeRemaining","timeUntilRebuffer$1","timeUntilRebuffer","switchCandidate","compatiblePlaylists","enabledPlaylists","rebufferingEstimates","numRequests","rebufferingImpact","noRebufferingPlaylists","estimate","minRebufferMaxBandwidthSelector","timeSavedBySwitching","minimumTimeSaving","handleAbort_","handleProgress_","simpleSegment","handleTrackInfo_","checkForIllegalMediaSwitch","akeys","bkeys","shallowEqual","handleTimingInfo_","timeType","timingInfoProperty","handleCaptions_","captionData","hasAppendedData_","captionTracks","captionTrack","trackName","instreamId","def","captionService","createCaptionsTrackIfNotExists","captionArray","positionAlign","addCaptionData","handleId3_","processMetadataQueue_","callQueue","fun","loadQueue","getCurrentMediaInfo_","getPendingSegmentPlaylist","setTimeMapping_","updateMediaSecondsLoaded_","useVideoTimingInfo","firstVideoFrameTimeForData","trueSegmentStart_","currentStart","currentVideoTimestampOffset","updateAppendInitSegmentStatus","updateSourceBufferTimestampOffset_","updateTimingInfoEnd_","saveSegmentTimingInfo","shouldSaveTimelineMapping","appendData_","changedTimestampOffset","getInitSegmentAndUpdateState_","handleQuotaExceededError_","audioBufferStart","audioBufferEnd","videoBufferStart","videoBufferEnd","appendToSourceBuffer_","timeToRemoveUntil","MIN_BACK_BUFFER","handleAppendError_","segmentObj","tempBuffer","concatSegments","appendBuffer","handleSegmentTimingInfo_","segmentTimingInfo","transmuxedDecodeStart","transmuxedDecodeEnd","trimBackBuffer_","updateTransmuxerAndRequestSegment_","shouldUpdateTransmuxerTimestampOffset_","createSimplifiedSegmentObj_","isEndOfStream","isWalkingForward","isDiscontinuity","segmentRequestFinished_","removeToTime","trimTime","maxTrimTime","safeBackBufferTrimTime","previousSegment","saveTransferStats_","saveBandwidthRelatedStats_","handleTimeout_","updateGopBuffer","waitForAppendsToComplete_","timelineMapping","mappingForTimeline","waitForVideo","waitForAudio","waitingOnAppends","checkAppendsDone_","videoQueueCallback","audioQueueCallback","handleAppendsDone_","illegalMediaSwitchError","startingMedia","illegalMediaSwitch","didChange","getSegmentStartTimeForTimestampOffsetCalculation_","prioritizedTimingInfo","segmentDurationMessage","recordThroughput_","addSegmentMetadataCue_","badSegmentGuess","badPartGuess","segmentProcessingTime","segmentProcessingThroughput","custom","dateTimeString","resolution","bufferTypes","sourceBuffer","queuePending","shiftQueue","queueIndex","queueEntry","nextQueueIndexOfType","cleanupBuffer","titleType","inSourceBuffers","sourceBuffers","actions","onError","mime","addSourceBuffer","removeSourceBuffer","changeType","pushQueue","onUpdateend","SourceUpdater","sourceopenListener_","audioTimestampOffset_","videoTimestampOffset_","delayedAudioAppendQueue_","videoAppendQueued_","onVideoUpdateEnd_","onAudioUpdateEnd_","onVideoError_","videoError_","onAudioError_","audioError_","createdSourceBuffers_","initializedEme_","triggeredReady_","initializedEme","hasCreatedSourceBuffers","hasInitializedAnyEme","createSourceBuffers","addOrChangeSourceBuffers","canRemoveSourceBuffer","canChangeType","processedAppend_","videoBuffer","que","audioBuffer","bufferA","bufferB","arity","extents","bufferIntersection","setDuration","uint8ToUtf8","uintArray","escape","VTT_LINE_TERMINATORS","NoVttJsError","VTTSegmentLoader","subtitlesTrack_","featuresNativeTextTracks_","loadVttJs","combinedByteLength","combinedSegment","timestampOffsetForTimeline","checkTimestampOffset","skipEmptySegments_","stopForError","requested","parseVTTCues_","updateTimeMapping_","timelines","uniqueCues","cueKey","removeDuplicateCuesFromTrack","decoder","decodeBytesToString","timestampmap","MPEGTS","LOCAL","ontimestampmap","mapData","mappingObj","diff","handleRollover_","firstStart","lastStart","valueIn90khz","referenceIn90khz","findAdCue","mediaTime","adStartTime","adEndTime","syncPointStrategies","run","mediaSequenceMap","getMediaSequenceMap","currentMediaSequence","currentPartStart","timelineToDatetimeMappings","lastDistance","datetimeMapping","z","discontinuityStarts","discontinuitySequence","discontinuitySync","discontinuities","SyncController","mediaSequenceStorage_","currentBaseTime","syncPoints","runStrategies_","syncPointInfo","strategy","selectSyncPoint_","getExpiredTime","bestSyncPoint","bestDistance","bestStrategy","newDistance","lastRemovedSegment","playlistTimestamp","didCalculateSegmentTimeMapping","calculateSegmentTimeMapping_","saveDiscontinuitySyncInfo_","dateTime","accuracy","mediaIndexDiff","TimelineChangeController","pendingTimelineChanges_","lastTimelineChanges_","workerCode","_proto","_length","_i","aesTables","AES","tmp","tables","encTable","decTable","sbox","sboxInv","xInv","th","x2","x4","x8","tEnc","tDec","precompute","_tables","keyLen","rcon","encKey","decKey","_key","encrypted0","encrypted1","encrypted2","encrypted3","out","a2","b2","c2","nInnerRounds","kIndex","table0","table1","table2","table3","AsyncStream","jobs","timeout_","processJob_","job","ntoh","word","Decrypter","initVector","STEP","encrypted32","Int32Array","asyncStream_","decryptChunk_","padded","decipher","decrypted32","init0","init1","init2","init3","wordIx","Uint16Array","isView","audioTrackKind_","characteristics","stopLoaders","segmentLoader","activePlaylistLoader","startLoaders","playlistLoader","mediaTypes","excludePlaylist","activeTrack","activeGroup","defaultTrack","onTrackChanged","SUBTITLES","setupListeners","requestOptions","segmentLoaders","initialize","groups","variantLabel","isMainPlaylist","useForcedSubtitles","forced","autoselect","groupMatch","setupMediaGroups","audioSegmentLoader","mainSegmentLoader","variants","groupKeys","groupPropertyList","onGroupChanged","getActiveGroup","previousActiveLoader","lastGroup","lastGroup_","lastTrack_","onGroupChanging","lastTrack","pc","selectPlaylist","fastQualityChange_","activeTrack_","onAudioTrackChanged","SteeringManifest","priority_","pathwayClones_","version_","ttl","ttl_","reloadUri","reloadUri_","pathwayClones","ContentSteeringController","currentPathway","defaultPathway","queryBeforeStart","availablePathways_","steeringManifest","proxyServerUrl_","manifestType_","ttlTimeout_","request_","currentPathwayClones","nextPathwayClones","excludedSteeringManifestURLs","xhr_","getBandwidth_","assignTagProperties","baseUrl","steeringTag","serverUri","steeringUri","serverURL","startsWith","decodeDataUriManifest_","pathwayId","defaultServiceLocation","proxyServerURL","requestSteeringManifest","getRequestURI","errorInfo","retrySeconds","startTTLTimeout_","steeringManifestJson","assignSteeringProperties_","setProxyServerUrl_","steeringUrl","steeringUrlObject","proxyServerUrlObject","encodeURI","setSteeringParams_","dataUri","urlObject","getPathway","networkThroughput","pathwayKey","throughputKey","steeringJson","TTL","nextPathway","pathwaysByPriority","chooseNextPathway","proxyURI","steeringURI","ttlMS","clearTTLTimeout_","addAvailablePathway","clearAvailablePathways","excludePathway","didDASHTagChange","baseURL","newTag","getAvailablePathways","Vhs$1","loaderStats","sumLoaderStat","stat","audioSegmentLoader_","mainSegmentLoader_","PlaylistController","externVhs","useCueTags","enableLowInitialPlaylist","bufferBasedABR","maxPlaylistRetries","useCueTags_","cueTagsTrack_","requestOptions_","pauseLoading","mediaTypes_","createMediaTypes","handleDurationChange_","handleSourceOpen_","handleSourceEnded_","keyStatusMap_","segmentLoaderSettings","setupMainPlaylistLoaderListeners_","subtitleSegmentLoader_","onLoad","contentSteeringController_","setupSegmentLoaderListeners_","startABRTimer_","stopABRTimer_","triggeredFmp4Usage","loadOnPlay_","timeToLoadedData__","mainAppendsToLoadedData__","audioAppendsToLoadedData__","timeToLoadedDataStart","mainAppendsToLoadedData_","audioAppendsToLoadedData_","appendsToLoadedData_","timeToLoadedData_","checkABR_","nextPlaylist","shouldSwitchToMedia_","switchMedia_","cause","newId","switchMediaForDASHContentSteering_","dashMediaPlaylists","serviceLocation","abrTimer_","defaultPlaylists","defaultGroup","requestTimeout","triggerPresenceUsage_","setupFirstPlay","selectedMedia","attachContentSteeringListeners_","initContentSteeringController_","excludeUnsupportedVariants_","selectInitialPlaylist","initialMedia_","handleUpdatedMediaPlaylist","playlistToExclude","waitingForFastQualityPlaylistReceived_","runFastQualitySwitch_","lastExcludeReason_","stuckAtPlaylistEnd_","updateAdCues_","updateDuration","defaultDemuxed","audioGroupKeys","mediaGroup","currentPlaylist","bufferLowWaterLine","bufferHighWaterLine","sharedLogLine","isBuffered","forwardBuffer","maxBufferLowWaterLine","nextBandwidth","currBandwidth","logLine","shouldSwitchToMedia","onSyncInfoUpdate_","onEndOfStream","delegateLoaders_","updateCodecs","tryToCreateSourceBuffers_","getCodecsOrExclude_","mediaSecondsLoaded_","startPoint","timeOffset","mainMediaInfo","absolutePlaylistEnd","contentSteering","pathwayAttribute_","reIncludeDelay","excludeThenChangePathway_","reincluded","errorMessage","delayDuration","fnNames","loaders","dontFilterPlaylist","loader","audioSeekable","mainSeekable","oldEnd","oldStart","updateDuration_","areMediaTypesKnown_","usingAudioLoader","hasMainMediaInfo","hasAudioMediaInfo","playlistCodecs","unsupportedCodecs","unsupportedAudio","supporter","switchMessages","newCodec","oldCodec","codecString","excludeIncompatibleVariants_","ids","unsupported","codecCount_","videoDetails","audioDetails","exclusionReasons","variantCodecs","variantCodecCount","variantVideoDetails","variantAudioDetails","cueOut","adOffset","adTotal","cueOutCont","updateAdCues","newMax","addDateRangeMetadata","resetContentSteeringController_","availablePathways","newPathways","didPathwaysChange","handlePathwayClones_","didEnablePlaylists","differentPathwayId","noExcludeUntil","changeSegmentPathway_","entries","oldClone","equalPathwayClones_","aParams","bParams","excludeNonUsablePlaylistsByKeyId_","nonUsableKeyStatusCount","NON_USABLE","keyIdSet","USABLE","hasUsableKeyStatus","nonUsableExclusion","isNonHD","excludedForNonUsableKey","addKeyStatus_","formattedKeyIdString","uInt8Buffer","padStart","bufferToHexString","updatePlaylistByKeyStatus","excludeNonUsableThenChangePlaylist_","Representation","vhsHandler","qualityChangeFunction","playlistID","changePlaylistFn","incompatible","currentlyEnabled","timerCancelEvents","PlaybackWatcher","allowSeeksWithinUnsafeLiveWindow","liveRangeSafeTimeDelta","consecutiveUpdates","lastRecordedTime","checkCurrentTimeTimeout_","playHandler","monitorCurrentTime_","canPlayHandler","waitingHandler","techWaiting_","cancelTimerHandler","resetTimeUpdate_","loaderTypes","loaderChecks","resetSegmentDownloads_","updateend","checkSegmentDownloads_","setSeekingHandlers","seekingAppendCheck_","fixesBadSeeks_","clearSeekingAppendCheck_","watchForBadSeeking_","checkCurrentTime_","isBufferedDifferent","isRangeDifferent","waiting_","afterSeekableWindow_","beforeSeekableWindow_","minAppendedDuration","bufferedToCheck","nextRange","currentRange","livePoint","videoUnderflow_","skipTheGap_","allowedEnd","isLLHLS","gap","lastVideoRange","videoRange","audioRange","gapFromVideoUnderflow_","scheduledCurrentTime","gaps","findGaps","defaultOptions","errorInterval","getSource","IWillNotUseThisInPlugins","initPlugin","lastCalled","localOptions","loadedMetadataHandler","cleanupEvents","reloadSourceOnError","version$4","STANDARD_PLAYLIST_SELECTOR","INITIAL_PLAYLIST_SELECTOR","movingAverageBandwidthSelector","decay","average","lastSystemBandwidth","comparePlaylistResolution","leftWidth","rightWidth","LOCAL_STORAGE_KEY","handleVhsMediaChange","waitForKeySessionCreation","sourceKeySystems","audioMedia","mainPlaylists","eme","initializeMediaKeys","keySystemsOptionsArr","keySystems","keySystemsArr","keySystemsOptions","keySystemsObj","keySystem","keySystemOptions","pssh","getAllPsshKeySystemsOptions","initializationFinishedPromises","keySessionCreatedPromises","race","setupEmeOptions","sourceOptions","mainPlaylist","audioPlaylist","videoContentType","audioContentType","keySystemContentTypes","emeKeySystems","getVhsLocalStorage","storedObject","addOnRequestHook","addOnResponseHook","removeOnRequestHook","removeOnResponseHook","supportsNativeHls","canItPlay","supportsNativeDash","supportsTypeNatively","onRequest","onResponse","offRequest","offResponse","Component","VhsHandler","initialBandwidth","_player","source_","ignoreNextSeekingEvent_","setOptions_","overrideNative","featuresNativeVideoTracks","useBandwidthFromLocalStorage","useNetworkInformationApi","option","setOptions","playbackWatcherOptions","playbackWatcher_","defaultSelector","playerBandwidthEst","networkInformation","connection","mozConnection","webkitConnection","tenMbpsAsBitsPerSecond","networkInfoBandwidthEstBitsPerSec","downlink","invBandwidth","invThroughput","mediaRequests_","mediaRequestsAborted_","mediaRequestsTimedout_","mediaRequestsErrored_","mediaTransferDuration_","mediaBytesTransferred_","mediaAppends_","mainAppendsToLoadedData","audioAppendsToLoadedData","appendsToLoadedData","timeToLoadedData","currentTech","playerDimensions","objectToStore","updateVhsLocalStorage","representations","setupEme_","setupQualityLevels_","mediaSourceUrl_","createKeySessions_","audioPlaylistLoader","handleWaitingForKey_","didSetupEmeOptions","qualityLevels_","handleVhsLoadedMetadata","convertToProgramTime","setupXhrHooks_","VhsSourceHandler","simpleType","getOverrideNative","defaultOverrideNative"],"sourceRoot":""}